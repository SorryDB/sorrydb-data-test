{
  "documentation": "deduplicated list of sorries, for each unique goal string the most recent inclusion date is chosen",
  "sorries": [
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/EasyDirection.lean",
        "start_line": 24,
        "start_column": 20,
        "end_line": 24,
        "end_column": 25
      },
      "debug_info": {
        "goal": "case cographic\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nM M\u271d : Matroid \u03b1\nhM : M\u271d.IsCographic\n\u22a2 M\u271d.IsRegular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/EasyDirection.lean#L24"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-17T15:49:08+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "9e06714ccd525f59d56ce7802aa29cc67f420f358387a212459fcfc8d0abb2b7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/HardDirection.lean",
        "start_line": 8,
        "start_column": 2,
        "end_line": 8,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nM : Matroid \u03b1\nhM : M.IsRegular\n\u22a2 M.IsGood",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/HardDirection.lean#L8"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-13T12:19:44+01:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "b5a37d5ad9110a3a1fed7c8c42a05d293cdb286dc99a1b43a1295839d5683776"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 60,
        "start_column": 6,
        "end_line": 60,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.mp\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set \u03b1\nhI : I \u2286 (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  I \u2286 (standardRepr1sumComposition hXY hYX).1.X \u222a (standardRepr1sumComposition hXY hYX).1.Y \u2227\n    LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb (standardRepr1sumComposition hXY hYX).1.B) x \u2218 Subtype.toSum)\n      (Subtype.val \u207b\u00b9' I)\n\u22a2 (True \u2227\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u2097.B) x \u2218 Subtype.toSum) (Subtype.val \u207b\u00b9' (I \u2229 (S\u2097.X \u222a S\u2097.Y)))) \u2227\n    (True \u2227\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u1d63.B) x \u2218 Subtype.toSum)\n          (Subtype.val \u207b\u00b9' (I \u2229 (S\u1d63.X \u222a S\u1d63.Y)))) \u2227\n      I \u2286 S\u2097.X \u222a S\u2097.Y \u222a (S\u1d63.X \u222a S\u1d63.Y)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum1.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "01b4bdd27349df5ed5c690cc2360c72e840532dac7278c701fc0430d3e20d954"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 62,
        "start_column": 6,
        "end_line": 62,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case right\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set \u03b1\nhI : I \u2286 (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  (True \u2227\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u2097.B) x \u2218 Subtype.toSum) (Subtype.val \u207b\u00b9' (I \u2229 (S\u2097.X \u222a S\u2097.Y)))) \u2227\n    (True \u2227\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u1d63.B) x \u2218 Subtype.toSum)\n          (Subtype.val \u207b\u00b9' (I \u2229 (S\u1d63.X \u222a S\u1d63.Y)))) \u2227\n      I \u2286 S\u2097.X \u222a S\u2097.Y \u222a (S\u1d63.X \u222a S\u1d63.Y)\n\u22a2 LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb (standardRepr1sumComposition hXY hYX).1.B) x \u2218 Subtype.toSum)\n    (Subtype.val \u207b\u00b9' I)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum1.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "2aab57649f15ab85620d4e710c9cc3842369968cee914712d413a0a7855335c8"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 446,
        "start_column": 2,
        "end_line": 446,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nX Y : Set \u03b1\nQ : Matrix \u2191X \u2191Y \u211a\nx' y\u2080 y\u2081 : \u03b1\nhQ : Q.IsTotallyUnimodular\nhx' : x' \u2208 X\nhy\u2080 : y\u2080 \u2208 Y\nhy\u2081 : y\u2081 \u2208 Y\nhyy : y\u2080 \u2260 y\u2081\nhQy\u2080 : Q \u27e8x', hx'\u27e9 \u27e8y\u2080, hy\u2080\u27e9 = 1\nhQy\u2081 : Q \u27e8x', hx'\u27e9 \u27e8y\u2081, hy\u2081\u27e9 = 1\nhQy : \u2200 (y : \u2191Y), \u2191y \u2260 y\u2080 \u2227 \u2191y \u2260 y\u2081 \u2192 Q \u27e8x', hx'\u27e9 y = 0\n\u22a2 let c\u2080 := fun j => Q (\u22ef.elem j) \u27e8y\u2080, hy\u2080\u27e9;\n  let c\u2081 := fun j => Q (\u22ef.elem j) \u27e8y\u2081, hy\u2081\u27e9;\n  let Q' := Q.submatrix \u22ef.elem \u22ef.elem;\n  (Q' \u25eb \u25aec\u2080 \u25eb \u25aec\u2081 \u25eb \u25ae(c\u2080 - c\u2081)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L446"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "429799f4e3b1e04f23af2a35557b3f848631a0652a62d962dd8d31502554ff90"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 640,
        "start_column": 2,
        "end_line": 640,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  D =\n    (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n      (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L640"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "690c78822fa6e7ef8386935e976ac323da917650b794d0aaa94461617fa2700f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 729,
        "start_column": 2,
        "end_line": 729,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  \u2200 (i : \u2191(X\u1d63 \\ {x'})), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L729"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "cb2584c0dd84e62d560f3a126bd33b3129dd4ff1f51f0382dc5b61f970b87067"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 818,
        "start_column": 2,
        "end_line": 818,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  \u2200 (j : \u2191(Y\u2097 \\ {y'})),\n    (fun x => D x j) = c\u2080 \u2228\n      (fun x => D x j) = -c\u2080 \u2228\n        (fun x => D x j) = c\u2081 \u2228\n          (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L818"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "e3f51d8945dabb8fbd0a5e82a7aae928c7ddf8c1c547392dc82a6c40bd9cad23"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 907,
        "start_column": 2,
        "end_line": 907,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  (A\u1d63 \u25eb D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L907"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "1f0883d9f106b8938e9f6e43961f0a7249dce894331d4961a6c8c4ea3c9864a5"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  (A\u2097 \u229f D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "116de01ff2b0257b395c9b107da9c556ee9ecd3a8428f071b5672fbdfa04e823"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1060,
        "start_column": 2,
        "end_line": 1060,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nB\u2097 : Matrix \u2191S\u2097.X \u2191S\u2097.Y \u211a\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhBB\u2097 : B\u2097.IsSigningOf S\u2097.B\nB\u1d63 : Matrix \u2191S\u1d63.X \u2191S\u1d63.Y \u211a\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\nhBB\u1d63 : B\u1d63.IsSigningOf S\u1d63.B\n\u22a2 (standardRepr3sumComposition_standard hXX hYY hXY hYX).1.B.HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L1060"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T17:54:51+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "bcc918ff93ca21eafc49ff7367831aa26042190cd694b3309b259ba5c3c3cd44"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 9,
        "start_column": 2,
        "end_line": 9,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nneq : x \u2260 y\n\u22a2 x < y \u2228 x > y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L9"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T12:13:44+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "b0f3611384d4f3d4c2e42f5894495d55f5f4a7a43f694ce4908c80e3feed671e"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 389,
        "start_column": 2,
        "end_line": 389,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : Regex.notOr y\n\u22a2 OrIsSmart (insertOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L389"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-19T15:53:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "556213af6d62a5dc3a2c50222b82a8c4361c5452f114946c826a99a30d7e2e83"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 394,
        "start_column": 2,
        "end_line": 394,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : OrIsSmart y\n\u22a2 OrIsSmart (mergeOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L394"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-15T15:28:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "d03824fe8e5542a27c2ef5fdcce8ffaca864d633f564122920b4432eaa85c82b"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 399,
        "start_column": 2,
        "end_line": 399,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : OrIsSmart y\n\u22a2 OrIsSmart (smartOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L399"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-15T15:28:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "38e3014f89189364f6ecdfc2980c13019738ee80663f7bf782b6d46b6cb19937"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 433,
        "start_column": 2,
        "end_line": 433,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst\u271d \u03c7 he)\n\u22a2 |[=true|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).exec do\n              let b \u2190\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).lift_probComp\n                    ($\u1d57Bool)\n              let __discr \u2190 keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal -\n        [=false|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).exec\n              do\n              let b \u2190\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).lift_probComp\n                    ($\u1d57Bool)\n              let __discr \u2190 keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr fun m\u2081 m\u2082 st =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2082\n                    __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr fun m\u2081 m\u2082 st =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2082\n                    __do_jp y].toReal| +\n      |[=true|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr\n                            fun m\u2081 m\u2082 st =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr\n                            fun m\u2081 m\u2082 st =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/Regev.lean#L433"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "dad53e3a7a62e7a45cae4083bfa2beb6261599c8a40657878f1f413b88a917f8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 494,
        "start_column": 2,
        "end_line": 494,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst\u271d \u03c7 he)\n\u22a2 |(2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal -\n        (2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal| +\n      |[=true|do\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let r2 \u2190 $\u1d57Vector (Fin 2) m\n              let b \u2190 $\u1d57Bool\n              let A_1 \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u_1 \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A_1, u_1)\n              (fun a => decide (b = a)) <$>\n                  adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) r2).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) r2).get)].toReal -\n          [=true|do\n              let x \u2190 $\u1d57Vector (Fin p) n\n              let y \u2190 $\u1d57Fin p\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (x, y)].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/Regev.lean#L494"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "fa637a4fe8955d1565bbc3d5a25438656cde052cf95d8bbc1e81378100d56d94"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "d1b322d819d3adc8b404571b453436fbe4e8b83011f6c35ff70f53d7d1ebb263"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n            else {none},\n          OracleComp.neverFails\n              (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                (fun _ => pure none) fun verified_msg =>\n                pure\n                  (some\n                    (SimulationData.mk verified_msg\n                      (MessagePackage.mk\n                        (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                        (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                        (ReportingTag.mk\n                          (mock_hmac_sha256 (123456789#256)\n                            (string_to_bitvec\n                              (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                (bitvec_to_string 1730230302#256)))))\n                        (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                      123456789#256))) \u2227\n            \u2200\n              x_2 \u2208\n                OracleComp.support\n                  (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))),\n              OracleComp.neverFails\n                (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag (MessagePackage.reporting_tag (SimulationData.message_package data)))))) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                          x))\n                  else pure none\n              let maybeData \u2190\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content a).1, a)).1\n                          a))\n                  else pure none\n              let maybeData \u2190\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content a).1))\n                            (FrankingTag.mk (mock_hmac_sha256 a (serialize_message_data message_content a).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) a)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "b1c77442b4367753c8bbd766bac95966b04be53ee023fb30e26e01b4d76eea56"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n          else {none},\n        OracleComp.neverFails\n            (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n              (fun _ => pure none) fun verified_msg =>\n              pure\n                (some\n                  (SimulationData.mk verified_msg\n                    (MessagePackage.mk (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                      (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                      (ReportingTag.mk\n                        (mock_hmac_sha256 (123456789#256)\n                          (string_to_bitvec\n                            (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                              (bitvec_to_string 1730230302#256)))))\n                      (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                    123456789#256))) \u2227\n          \u2200\n            x_2 \u2208\n              OracleComp.support\n                (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                  (fun _ => pure none) fun verified_msg =>\n                  pure\n                    (some\n                      (SimulationData.mk verified_msg\n                        (MessagePackage.mk\n                          (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                          (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                          (ReportingTag.mk\n                            (mock_hmac_sha256 (123456789#256)\n                              (string_to_bitvec\n                                (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                  (bitvec_to_string 1730230302#256)))))\n                          (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                        123456789#256))),\n            OracleComp.neverFails\n              (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                (fun _ => pure true) fun val => pure false)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "9f44de90ec074eaa099e3eb4efb9acfd8425bc90661ddd0a2095dd116c37dff4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "cf87d8397f2a6243a224012108f784d83e418b69406e774e1b04cdfc151f54a1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\ninst\u271d : spec.FiniteRange\n\u03b1 \u03b2 \u03b3 \u03b4 \u03b5 : Type\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\noc : OracleComp spec \u03b3\nod : OracleComp spec \u03b4\noe : \u03b1 \u2192 \u03b2 \u2192 \u03b3 \u2192 \u03b4 \u2192 OracleComp spec \u03b5\nz : \u03b5\n\u22a2 [=z|do\n      let a \u2190 oa\n      let b \u2190 ob\n      let c \u2190 oc\n      let d \u2190 od\n      oe a b c d] =\n    [=z|do\n      let d \u2190 od\n      let a \u2190 oa\n      let b \u2190 ob\n      let c \u2190 oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "61b79823e92d53c7bed4f749403b25bd6f25431ffd64fa3c64bf172ba906277d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\noa : Bool \u2192 ProbComp \u03b1\nx : \u03b1\n\u22a2 [=x|$\u1d57Bool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "01a76ceeaf880795d2d266b3b87a03d55285caed27b39e492ae4a117c9816923"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst\u271d\u2076 inst\u271d\u2075 AddCommGroup.toAddGroup inst\u271d\u00b3 inst\u271d\u00b2)\nx : P\ng\u2081 : G\n\u22a2 [=()|do\n      let a \u2190\n        (simulateQ\n                (idOracle ++\u209b\u2092\n                  {\n                      impl := fun {\u03b1} x_1 =>\n                        match \u03b1, x_1 with\n                        | .((P \u00d7 P \u2192\u2092 P \u00d7 P).range ()), query PUnit.unit (m\u2081, m\u2082) =>\n                          (fun a => (a +\u1d65 x, m\u2081 * (a +\u1d65 g\u2081 +\u1d65 x))) <$> ($\u1d57G) }.withCaching)\n                (adversary (x, g\u2081 +\u1d65 x))).run\n            \u2205\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let b' \u2190\n        simulateQ\n            (idOracle ++\u209b\u2092\n              {\n                impl := fun {\u03b1} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun \u03b1 x => ProbComp \u03b1) \u03b1 x_1\n                    fun m\u2081 _m\u2082 => pure (c +\u1d65 x, m\u2081 * (c +\u1d65 g\u2081 +\u1d65 x)) })\n            (adversary (x, g\u2081 +\u1d65 x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "86d3515967b35f117f4abd3c72e729335226984921160759380f6f2f357797ac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst\u271d\u2076 inst\u271d\u2075 AddCommGroup.toAddGroup inst\u271d\u00b3 inst\u271d\u00b2)\nx : P\ng\u2081 : G\n\u22a2 [=()|do\n      let a \u2190\n        (simulateQ\n                (idOracle ++\u209b\u2092\n                  {\n                      impl := fun {\u03b1} x_1 =>\n                        match \u03b1, x_1 with\n                        | .((P \u00d7 P \u2192\u2092 P \u00d7 P).range ()), query PUnit.unit (m\u2081, m\u2082) =>\n                          (fun a => (a +\u1d65 x, m\u2082 * (a +\u1d65 g\u2081 +\u1d65 x))) <$> ($\u1d57G) }.withCaching)\n                (adversary (x, g\u2081 +\u1d65 x))).run\n            \u2205\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let y \u2190 $\u1d57P\n      let b' \u2190\n        simulateQ\n            (idOracle ++\u209b\u2092\n              {\n                impl := fun {\u03b1} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun \u03b1 x => ProbComp \u03b1) \u03b1 x_1\n                    fun m\u2081 _m\u2082 => pure (c +\u1d65 x, m\u2081 * y) })\n            (adversary (x, g\u2081 +\u1d65 x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "3e625aea966deb624f93daa942c9f9428339fca2bdb156cbb89f3bc897ab2d26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        ((x : \u03b1) \u2192\n          (x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs) \u2192\n            @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x))\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          ((x_1 : \u03b1) \u2192\n            x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x) \u2192\n              @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1))) \u2194\n    (Q (query i t) \u2227\n        ((x : spec.range i) \u2192\n          x \u2208 possible_outputs (query i t) \u2192\n            @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x))) \u2227\n      ((x : \u03b1) \u2192\n        (x_1 : spec.range i) \u2192\n          x_1 \u2208 possible_outputs (query i t) \u2192\n            x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n              @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x))",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "0c508667611d1943ea774bf7b3d94baf72e58bea4732cabe291ce95baffd1754"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "65b6c35ce7b2152218940fa2d486f122dced1cffe605ed0659c0a86f3ef546a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "c2b18e717c3993bb23f5b793f334b52ae1389e3ed0b66dfefb25a48f526befe5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nx : \u03b1\ny : \u03b2\n\u22a2 [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "dc47dd1f46328fb6b0c4c5e9fea887c4212cf59434df57049ec67e951d563162"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "da26c4fb7ee5ae1465eee1ecac700266de5288a752abc1e1e5432314bb8097d0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "be6d0820691ed5e04bdaa03df936feecd415a910f32fb0e7bd719ac9c2361bc5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "42afa36242b36888c7545ac5988c393ea8fefd23c34540ca6525bc1932bddd58"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "66134776a3beab6b2155a975bd33a8d33a9a62a3845343cdf57704347a87cfab"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "287d7ce9a4dfbc6312413a9a325724f8687c581fc9466bfc97bbdf8225917454"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ny : \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "09ac18cd0618941d4430473411579402ef5219d428d60ec17c0cfde26e913483"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nx : \u03b1\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "e0397813c5275dcc4c1da04f25d34f2d777df09a4925a2bd23b966776000b095"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b3\ny : \u03b2\nz : \u03b3 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "033520d3e476a07fff87b2ea03bfce9623e39dd4719747adcbbc5d60802321eb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nf : \u03b2 \u2192 \u03b3\nx : \u03b1\nz : \u03b1 \u00d7 \u03b3\n\u22a2 [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "cf2727371e12b10b6870f2d5dbd3f8682a9e94867419252a3efbf89de102d94d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf).support =\n    (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "444909a3f067e58ca7cbd1c1634beb0548a03967ffa17b07c9d535cc931cab7f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf).finSupport =\n    Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "740564d279ce57d79aec78339fcd8672ea5ed7009cf62825d46ff0506e092102"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 support (OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf)\n\u22a2 cf x\u2081 = cf x\u2082",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "df51be930535595bcfe4bdbdab5d8f3bd5c78a9c2dd7c9214101f023726b29b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(none, s)|Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "c0cfb8649c7ed7e024695b297d7367f271402fcd4d4d45d67a3055ca243e8bfc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(s, none)|Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "ecc54a725f9c956c7a1d29201c2639f1ab44ba93c18c5ea9679df38d50a0ba0f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 support (OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf)\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "42e0ac8692bcaa4a503218ad9a67594734927e082a76e868e007f85b51536e43"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] =\n    [=(some s, some s)|do\n      let shared_seed \u2190 liftM (generateSeed spec (update qb i \u2191s) js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n      let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "7b2f9e38364553d44e2cdf9cef4319153738c323494725c576b65642930501e3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed \u2208 (liftM (generateSeed spec qb js)).support\n\u22a2 \u2191(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "50ae737d4f719f628789bef508e5931760b60a5e17bdd77590d65dfd97f4cc74"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 \u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h \u2264\n    \u2211 s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "76a1edc250ab63c54ec896ca38bb6052e98f7dd4631dc9baf5dfcdec2f1f859a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h) =\n    1 - \u2211 s, [=some s|cf <$> main] ^ 2 + \u2211 s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "3f860df3af1a57a3810a78c8b3539aaf8b3919ef92e7a602e4b57845cea444ac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 acc * h\u207b\u00b9 + (1 - acc ^ 2 * (\u2191q)\u207b\u00b9) = 1 - (acc ^ 2 * (\u2191q)\u207b\u00b9 - acc * h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "c83e9f4cc0d2ca36381dce98a57fc14f08fbcbc1baea9964410f696a4cde5d6a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : @SymmEncAlg m M K C\ninst\u271d : @SymmEncAlg.Complete m M K C inst\u271d\u2075 encAlg\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 @SymmEncAlg.perfectSecrecy m M K C inst\u271d\u2075 encAlg \u2194\n    (\u2200 (k : K),\n        [=k|ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg) (@SymmEncAlg.keygen m M K C encAlg)] =\n          (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C),\n        \u2203! k,\n          k \u2208\n              support\n                (ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg)\n                  (@SymmEncAlg.keygen m M K C encAlg)) \u2227\n            @SymmEncAlg.encrypt m M K C encAlg k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "f1ef372d1ba0ccc89a632514f600c1800d85465ee45abf4655524e578a0cc15e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p inst\u271d\u2075 inst\u271d\u2074\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (let so := idOracle ++\u209b\u2092 randomOracle;\n    (simulateQ so (monadLift c)).run' \u2205) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "b3ca7beaa0b3f970bb700fb2cbeaee1af33fea44e34195b49aaf822c26ae7bff"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean",
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\ninst\u271d : NeZero p\nerrSamp : ProbComp (Fin p)\nadv : LWE_Adversary n m p\n\u22a2 |[=true|do\n              let y \u2190 LWE_Distr n m p inst\u271d errSamp\n              @adv y].toReal +\n          [=true|do\n              let y \u2190 LWE_Uniform_Distr n m p inst\u271d\n              (fun a => !a) <$> @adv y].toReal -\n        ([=true|do\n              let a \u2190 LWE_Distr n m p inst\u271d errSamp\n              not <$> @adv a].toReal +\n          [=true|do\n              let a \u2190 LWE_Uniform_Distr n m p inst\u271d\n              @adv a].toReal)| =\n    |[=true|do\n            let y \u2190 LWE_Distr n m p inst\u271d errSamp\n            @adv y].toReal -\n        [=true|do\n            let a \u2190 LWE_Uniform_Distr n m p inst\u271d\n            @adv a].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "741c3889f1e9d76382f68c8ea2cc714603ef42df588283565cd323e975059386"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/ProgramLogic/Unary/DijkstraMonad.lean",
        "start_line": 138,
        "start_column": 45,
        "end_line": 138,
        "end_column": 50
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\nn : Type u \u2192 Type w\nw : Type u_1 \u2192 Type u_2\nd : {\u03b1 : Type u_1} \u2192 w \u03b1 \u2192 Type u_3\ninst\u271d\u00b2 : Monad w\ninst\u271d\u00b9 : @DijkstraMonad w d inst\u271d\u00b2\nh : LawfulMonad w\ninst\u271d : @LawfulDijkstraMonad w (fun {\u03b1} => d) inst\u271d\u00b2 h inst\u271d\u00b9\n\u03b1 : Type u_1\nx : w \u03b1\ny : d x\n\u22a2 HEq\n    (@DijkstraMonad.dBind w d inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 \u03b1 x (fun a => pure a) y fun a =>\n      @DijkstraMonad.dPure w d inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 a)\n    y",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/ProgramLogic/Unary/DijkstraMonad.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T11:21:13+07:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "08c59e44cc0a253dfa192b44e11cd8857137caa76a0d0393c47c3a0f0069c521"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "d36fbcfc20e497118cdbf2f347c783545b820cc32a15d6db6050abc13361250e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "e3c1b8e4ad877f8ec6c9acd62728a53f2253f30905832bef31b11a205a8f615b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      let x \u2190 (simulateQ (@seededOracle \u03b9 spec inst\u271d\u00b3) oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "372b27762ba27d15e538e6b6e052d485a4fc37d137169e3d1a5f3f04e2b6c464"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ (@seededOracle \u03b9 spec inst\u271d\u00b3) oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "563ca4aacd0631f79b9abf0aa87419c4eb37e3c428d06978f0be3ba53f3a9332"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (QueryImpl.impl (@countingOracle \u03b9 inst\u271d spec) q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "8c48063e43aed75ceab11d330d8de04976b5986c7d92f90a5faab0bd8288ce66"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (QueryImpl.impl (@loggingOracle \u03b9 spec) q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "846bcc2c02e588efe56f0c66847bfdb6fe8bd3d77cf83fde2d1e02100426c7b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\n\u22a2 neverFails (OracleComp.uniformOfFintype \u03b1 h\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "7d4373876a3024eba5c232a3bfc7db91bd20121a9bacf686c8c05baab4bd4520"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nx y : Matrix (Fin 0) (Fin m) \u03b1\n\u22a2 (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "91010b1c3842f6837a0dc4b7499260da49575039b10c08726ccf0de337b1bb06"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nm : \u2115\nih :\n  \u2200 (x y : Matrix (Fin m) (Fin m\u271d) \u03b1),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m\u271d) \u03b1\n\u22a2 [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "dd6d1d532c333855d33c6a98be37ae560f8c68606bfe1002db840ca18ffdd5ae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nm : \u2115\nih :\n  [\u22a5|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n\u22a2 Vector \u03b1 m\u271d \u2192\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          Fin.cons top.get <$> ihn)\n        m)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "2fbaae014c51d619e5204344840f210aa042c1491a28617d9f423400623d4e02"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "a2319ea5031fd373e20a61963e951cce5dd0b893631f78dead88303dbbea05f1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b9 spec inst\u271d qc js) =\n    {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "07886f9428b8a21028ca987936f1804cd2a91979dfef84a47de17fdc0eb3e35b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d : DecidableEq spec.QuerySeed\n\u22a2 finSupport (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc js) \u2260 \u2205",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "30aa32aead44a279cf6b2425ca607e44464ae2a90bc9880078ed1660c40cfe6e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc j),\n    [=seed|OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc j] =\n      1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        List.foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "5d42de1d657316234598173fcb53560ec8d147b1138b3dc70ebedaebe7e67845"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js)\n\u22a2 [=seed|OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js] =\n    (\u2191(finSupport (OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js)).card)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "228a35041a1feb4076f2845b5a46241522469b4c23293d22042e93e9cb00d845"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "b9a4acc649887dfc65b5ed72c70a164d95d65373568061ec23051cfab73b2170"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "a7612a76356ed7faecd51a452acd206a95b9892c2cf0a4e56b398e442282852b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "762c4fab36affb937828e51ff79cd7aab21a5a838a69cb3f5263e583d15a2f12"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 (x : \u03b1), [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "99e85d8ecd8f80741957d41d3b5272b5487322c3ec1a95ab303db5f598c813cf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\ny : \u03b2\nz : \u03b3\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z|oc x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "132c315e0d624a9b9075ee6eb2512bb5d8f13e2b233b2a2cca700a10bdeb4df0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nr : ENNReal\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x] / r\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "1b3f2a0879bc3fd1fada3af73723dfd0f7bcc7fe712f08eeda7e872637b6ec41"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "5b0b86cba707569fcb01019d05fef5dfd3a0b8944cde50e9db3bf40039b190d0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "a37e164a099a10e3cc436db8cb0acf5827f4873fb051e800bfd9523c07d95e1f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "751d90ce58d8b7f9c1773808bb9b8a771b0705b1f7053338b0b28a33b8a73286"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "615ffeabcee42471577e0ab704093e3ddf2df6a20e10e14fe25af33af9c95d50"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : ENNReal\nh' : @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "d93b1398a806c761404817baaf9076916e93f961051ad882dd6a83ae86175532"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : ENNReal\nh' : @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "977b629bc406bfea53f14a7f4c7d80ea0964fd862d2f3b61cfed658ff96a38a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "07f8824320521d44ff6209a2b1d39f45c607871b9691e2ae68b0e9bec7189783"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) =\n    \u2211' (x : \u03b1), @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d oa x * @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "1fc30fe28ebbb71ba7f219616a2dd7f054950ba6f3feed009935b08cd4a47d3f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "9facd8a8d1c1fb35c51a32248fcf6f2422d8e1e3605f145e2a426240d4afd7e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "fdc8351aef90e20b2c47aff15c2a7f94e714e60ab578a447637007ca83044a4e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 972,
        "start_column": 2,
        "end_line": 972,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\n\u03b1 : Type\noa : OracleComp spec \u03b1\nh : oa.neverFails\np : \u03b1 \u2192 Prop\ninst\u271d : DecidablePred p\n\u22a2 (\u2211' (x : \u03b1), if p x then @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d\u00b9 oa x else 0) =\n    1 - \u2211' (x : \u03b1), if p x then 0 else @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d\u00b9 oa x",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L972"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "6d33fa861cbf3858e12eaa8d729dea0ca468874b321deb9528bf77a2d25d19c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "4341f6e31bcb75455e364ed45cb648bf2de11bdd9c3f8cbe3488ac8728d60102"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "6f8e4effec98e1f253cce26d857414a37863634f8b491e2ce8513c6a87f6aac5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "f7dbd82cf0e1fb4389bf076ae600c5485c2df9aab16a8bc22d8a65df1ff18aaf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 180,
        "start_column": 8,
        "end_line": 180,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/List.lean#L180"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "fffa6a6c78437e79151c29b1dfc13d879f6267662f40246ccc582a390f339cc7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 315,
        "start_column": 4,
        "end_line": 315,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/List.lean#L315"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "fb0402331302e39ec4743320d0b14caeae49f6e76d1c69c1b096dce34a8c1ffe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 327,
        "start_column": 4,
        "end_line": 327,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case v_insert\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nn : \u2115\nf : \u03b1 \u2192 OracleComp spec \u03b2\nn\u271d : \u2115\nhd : \u03b1\ntl : Vector \u03b1 n\u271d\nih : \u2200 {x : Vector \u03b2 n\u271d}, x \u2208 (Vector.mapM f tl).support \u2194 \u2200 (i : Fin n\u271d), x[i] \u2208 (f tl[i]).support\nx : Vector \u03b2 (n\u271d + 1)\n\u22a2 x \u2208 (Vector.mapM f { toArray := #[hd] ++ tl.toArray, size_toArray := \u22ef }).support \u2194\n    \u2200 (i : Fin (n\u271d + 1)), x[\u2191i] \u2208 (f (#[hd] ++ tl.toArray)[\u2191i]).support",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/DistSemantics/List.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "259d2cc978ad19d1427705db7db048a2b35aefc82960415bc2d39f296f9c8bf4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "9d8666c1f7d31f411c13f155557389dd90e9ffdf52f331d3f9fde84b54d54f6c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "32d398a45058bd25cfbd2c7e669845db2ea07c82f6c7f7bcb27f494417d6ee59"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "2c9311bf6331b5a4017d193b21ed77cd0b183d23",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u\np : PMF \u03b1\nx : \u03b1\n\u22a2 (PMF.map some p) (some x) = p x",
        "url": "https://github.com/dtumad/VCV-io/blob/2c9311bf6331b5a4017d193b21ed77cd0b183d23/ToMathlib/ProbabilityTheory/Coupling.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-24T05:43:31-05:00",
        "inclusion_date": "2025-05-29T05:00:31.920000+00:00"
      },
      "id": "c23a84c780475c2ed38c74f2bdbb4308f286f2f1af4d84ce857d70c604db05b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "2c9311bf6331b5a4017d193b21ed77cd0b183d23",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 69,
        "start_column": 2,
        "end_line": 69,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u\np : PMF \u03b1\nx : \u03b1\n\u22a2 (some <$> p) (some x) = p x",
        "url": "https://github.com/dtumad/VCV-io/blob/2c9311bf6331b5a4017d193b21ed77cd0b183d23/ToMathlib/ProbabilityTheory/Coupling.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-24T05:43:31-05:00",
        "inclusion_date": "2025-05-29T05:00:31.920000+00:00"
      },
      "id": "6c2bd0cf40a7636a3eb28b6dbfaee2b38719a707dfa5906fb4490086f45ffc49"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh1 : @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst c = some <$> PMF.pure a\nh2 : @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b2 Prod.snd c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (@Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst c) x = (some <$> PMF.pure a) x\n\u22a2 c = @pure SPMF Applicative.toPure (\u03b1 \u00d7 \u03b2) (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "dcad48ad1c1f1e9f5b91d1a7f65327642aa67925d1ebccbe9c1b09cf9afa66fd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : @SPMF.IsCoupling \u03b1 \u03b2 c OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "c30eacad792a18010113aa5a292b4735c811cc94e77277f3762eab6b391e6f2b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "5b51e7d835744b83eb1fffae81cddd04a6fe03bcce04236b9e353a47cbf152f2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b2 Prod.snd OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "3fa4af87a471f2ca85f24a4c5310b5d1b30dadfd768623280704fda26828e566"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : @SPMF \u03b1\u2081\nq : @SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 @SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 @SPMF \u03b2\u2082\nc : @SPMF.Coupling \u03b1\u2081 \u03b1\u2082 p q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 @SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : (a\u2081 : \u03b1\u2081) \u2192 (a\u2082 : \u03b1\u2082) \u2192 \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\nhc\u2081 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2081 Prod.fst \u2191c = p\nhc\u2082 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2082 Prod.snd \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b2\u2081 \u00d7 \u03b2\u2082) \u03b2\u2081 Prod.fst (@d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2) = @f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "b244f1012fe2271f5c5d00c64d556e9c1080fb7b41e913b4db1a7aea0645e502"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : @SPMF \u03b1\u2081\nq : @SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 @SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 @SPMF \u03b2\u2082\nc : @SPMF.Coupling \u03b1\u2081 \u03b1\u2082 p q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 @SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : (a\u2081 : \u03b1\u2081) \u2192 (a\u2082 : \u03b1\u2082) \u2192 \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\nhc\u2081 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2081 Prod.fst \u2191c = p\nhc\u2082 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2082 Prod.snd \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      @Functor.map SPMF Applicative.toFunctor (\u03b2\u2081 \u00d7 \u03b2\u2082) \u03b2\u2082 Prod.snd (@d a.1 a.2)) =\n    do\n    let a \u2190 \u2191c\n    @g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "fb9d8f5d717f7a6e8418809f8634f5a74f8b16b03040281c1a8af7675e3b155c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "poly-time",
        "commit": "236395c3a405733a87116434c9134a33770e43e0",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/236395c3a405733a87116434c9134a33770e43e0/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-29T05:07:29.806343+00:00"
      },
      "id": "9e9516b97f45650048081c7533f0fb1f6391b35e27ff34485178760f1e185da1"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 794,
        "start_column": 2,
        "end_line": 794,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nX Y : Set \u03b1\nQ : Matrix \u2191X \u2191Y \u211a\nx\u2082 y\u2080 y\u2081 : \u03b1\nhQ : Q.IsTotallyUnimodular\nhx\u2082 : x\u2082 \u2208 X\nhy\u2080 : y\u2080 \u2208 Y\nhy\u2081 : y\u2081 \u2208 Y\nhyy : y\u2080 \u2260 y\u2081\nhQy\u2080 : Q \u27e8x\u2082, hx\u2082\u27e9 \u27e8y\u2080, hy\u2080\u27e9 = 1\nhQy\u2081 : Q \u27e8x\u2082, hx\u2082\u27e9 \u27e8y\u2081, hy\u2081\u27e9 = 1\nhQy : \u2200 (y : \u2191Y), \u2191y \u2260 y\u2080 \u2227 \u2191y \u2260 y\u2081 \u2192 Q \u27e8x\u2082, hx\u2082\u27e9 y = 0\n\u22a2 let c\u2080 := Q._col \u27e8y\u2080, hy\u2080\u27e9;\n  let c\u2081 := Q._col \u27e8y\u2081, hy\u2081\u27e9;\n  let Q' := Q.drop1row2cols x\u2082 y\u2080 y\u2081;\n  (Q' \u25eb \u25aec\u2080 \u25eb \u25aec\u2081 \u25eb \u25ae(c\u2080 - c\u2081)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L794"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "c833c00894ea246d3aa7016afc87c00ea738c29cda662f021fc46681769f46f2"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 896,
        "start_column": 2,
        "end_line": 896,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n  | (r\u2080, r\u2081, snd) =>\n    (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY =\n      (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n        (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L896"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "511d2ccc1ef5704e69ed15ff82098947f851c8e36ab9ccc25c8d4de4dcbee03e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 934,
        "start_column": 2,
        "end_line": 934,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n  | (r\u2080, r\u2081, r\u2082) => \u2200 (i : \u2191(X\u1d63 \\ {x\u2082})), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L934"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "8b1edfd9257dbae318f31e8ecdf61f3d5504d09d9f3a020f8714a493fa9681a7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 973,
        "start_column": 2,
        "end_line": 973,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  \u2200 (j : \u2191(Y\u2097 \\ {y\u2082})),\n    (fun x => D x j) = c\u2080 \u2228\n      (fun x => D x j) = -c\u2080 \u2228\n        (fun x => D x j) = c\u2081 \u2228\n          (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L973"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "9b7db6ed1cc4680de38ea8a85abb6a768fdd27ab2b32c3bb539d116e88d7a315"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080\u1d63 := B\u1d63.submatrix2x2 x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n      let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u1d63.drop1row2cols x\u2082 y\u2080 y\u2081 \u25eb (\u229e D\u2097 D\u2080\u1d63(D\u1d63 * D\u2080\u1d63\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "f8b063eeb98107caa45a1b9de0f4ddb9895beac709d01be58e3bde0111d3f93c"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1019,
        "start_column": 2,
        "end_line": 1019,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n      let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n      let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097.drop2rows1col x\u2080 x\u2081 y\u2082 \u229f (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1019"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "cf5fbb6cc193d50f37fc3a5bc56c5e28de3fbf58cfd479a5940587f14ef250aa"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1101,
        "start_column": 4,
        "end_line": 1101,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.left\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\n\u22a2 (matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1101"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "ca7e0efa923f051cd9cdee3b5c6bc9ab24bd1d131d8cbd85443f873b10949137"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1144,
        "start_column": 10,
        "end_line": 1144,
        "end_column": 15
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u2097 : \u2191(X\u2097 \\ (x\u2080 \u1543 {x\u2081}))\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\nhx\u2082 : \u2191i\u2097 = x\u2082\nhy\u2082 : \u00ac\u2191j\u1d63 = y\u2082\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25e9i\u2097 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25e9i\u2097 \u25eaj\u1d63))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1144"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "08bcd4ff94909e5b2acdfa86dc69816ccf3c1f3536bddc3998ccb76fd4b8862e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1146,
        "start_column": 8,
        "end_line": 1146,
        "end_column": 13
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u2097 : \u2191(X\u2097 \\ (x\u2080 \u1543 {x\u2081}))\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\nhx\u2082 : \u00ac\u2191i\u2097 = x\u2082\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25e9i\u2097 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25e9i\u2097 \u25eaj\u1d63))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1146"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "cf0c4cb5fcfe0c6b4b354738e6a11c86da06509f0ea04247bc71d3ed820383a2"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1147,
        "start_column": 6,
        "end_line": 1147,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.right.inr.inl\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u1d63 : \u2191(X\u1d63 \\ {x\u2082})\nj\u2097 : \u2191(Y\u2097 \\ {y\u2082})\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25eai\u1d63 \u25e9j\u2097| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25eai\u1d63 \u25e9j\u2097))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1147"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "b2ccfca0a6268e1db0180f2955d0a7fb3ac63dbf8dfbdfa97f04122b610db907"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1148,
        "start_column": 6,
        "end_line": 1148,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.right.inr.inr\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u1d63 : \u2191(X\u1d63 \\ {x\u2082})\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25eai\u1d63 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25eai\u1d63 \u25eaj\u1d63))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1148"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:54:27+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "ccfcd1ea3895e781fa5b563b54e46140cf4063ea289b028a08be04543373fcc9"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3RefactorTest.lean",
        "start_line": 359,
        "start_column": 2,
        "end_line": 359,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let _x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let _y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let A\u2097 := Matrix.A\u2097_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let A\u2097' := Matrix.A\u2097'_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := Matrix.D\u2097_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u2080 := Matrix.D\u2080_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u1d63 := Matrix.D\u1d63_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let A\u1d63' := Matrix.A\u1d63'_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let A\u1d63 := Matrix.A\u1d63_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let S := matrix3sumComposition_alt2 A\u2097 A\u2097' D\u2097 D\u2080 D\u1d63 A\u1d63' A\u1d63;\n  matrix3sumComposition_alt2_mapped' S = matrix3sumComposition_curr S\u2097.B S\u1d63.B hXX hYY",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3RefactorTest.lean#L359"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-23T19:21:41+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "fecfcd460fee795d31706f5cd1dec7b77e0bd6a3246c9a96ed56dc99f13c407b"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3RefactorTest.lean",
        "start_line": 391,
        "start_column": 2,
        "end_line": 391,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\n\u22a2 standardRepr3sumComposition_alt2 hXX hYY hXY hYX = standardRepr3sumComposition_curr hXX hYY hXY hYX",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3RefactorTest.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-23T19:21:41+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "2c9443fcb82e64add418da5fdec62c3bbde4e4b86ba0a50cf643afab5f58f5b3"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 163,
        "start_column": 6,
        "end_line": 163,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh : z1 = y\n\u22a2 OrIsSmart (z1.or z2)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L163"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "0795b5a855a8a96f21ff3d57526a36dafa6372c1ec93b975cfd2550366f28e73"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 166,
        "start_column": 6,
        "end_line": 166,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh\u271d : \u00acz1 = y\nh : z1 < y\n\u22a2 OrIsSmart (z1.or (insertOr y z2))",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "0e418e6715bdb1ade9ed6b376531fc245b37660de998a287a08d9883f9fe3919"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 168,
        "start_column": 6,
        "end_line": 168,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh\u271d : \u00acz1 = y\nh : \u00acz1 < y\n\u22a2 OrIsSmart (x.or (consOr y (z1.or z2)))",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L168"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "e384f72ddd3bb1e2ebc724ca8fa1a3a2835cb01b2bd239f51c3f55d3f24771c4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a b : Formula\u2984, a \u2248 b \u2192 (~a) \u2248 (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "d8b086aaec493e319c04eb7f8bc0df0ea5dc22874dbd819b4655f32614b38287"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a\u2081 a\u2082 : Formula\u2984, a\u2081 \u2248 a\u2082 \u2192 \u2200 \u2983b\u2081 b\u2082 : Formula\u2984, b\u2081 \u2248 b\u2082 \u2192 a\u2081\u22c0b\u2081 \u2248 a\u2082\u22c0b\u2082",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "c3535b86aedbaacedc47f13e6421e6bb5a3a32f97082cb71d93429d04e295463"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1192,
        "start_column": 10,
        "end_line": 1192,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 sorry \u2208 endNodesOf (next (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u22ef)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L1192"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "ff9d0854bb3aba1164905fd78729612933cbe768b4be6117152d4e10bed3905a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1193,
        "start_column": 10,
        "end_line": 1193,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 (M, v)\u22a8sorry \u2227\n    (sorry.isFree = true \u2228\n      \u2203 F \u03b3,\n        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side sorry \u2227\n          relateSeq M \u03b3 v w \u2227\n            (\u2200 f \u2208 F, evaluate M v f) \u2227\n              (F, \u03b3) \u2208 H \u03b1 \u2227 (sorry.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L1193"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "34666b4f3048c2a1451231467a44936987fdcc5ac771130b18aedd913a049e42"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 802,
        "start_column": 8,
        "end_line": 802,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203 Y,\n    (\u2203 l, (\u2203 a, \u2203 (h : a \u2208 B), endNodesOf (next a \u22ef) = l) \u2227 Y \u2208 l) \u2227\n      (M, v)\u22a8Y \u2227\n        (Y.isFree = true \u2228\n          \u2203 F \u03b3,\n            (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n              relateSeq M \u03b3 v w \u2227\n                (\u2200 f \u2208 F, evaluate M v f) \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L802"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "f9ea62d5eca41a7d045a8e1b41674837ac69c05db4a748d8af5ef4981607aaa2"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1200,
        "start_column": 6,
        "end_line": 1200,
        "end_column": 11
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227 (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L1200"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "9309ffb330453196e88ef615353ba67e4cbd46459b70945c10820dac92d15519"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 844,
        "start_column": 2,
        "end_line": 844,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      satisfiable (nodeAt s) \u2227\n        (\u00accEquiv X tab s t \u2228\n          (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L844"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "18dfb1953a0d28f5ea92372abefe2584b42b9e49ddbd8918137bd8537deb4a7f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1021,
        "start_column": 16,
        "end_line": 1021,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : \u2115\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u00b7a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : M.Rel a\u271d v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u00b7a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : \u03b4[\u2191k] = \u00b7a\u271d\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1021"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "a8d9aaca55b8fa15a40801a99fdb558f4114123502b455396067280acb923214"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1025,
        "start_column": 16,
        "end_line": 1025,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : Relation.ReflTransGen (relate M a\u271d) v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram \u03b4[\u2191k] \u2264 1 + lengthOfProgram a\u271d\n\u22a2 lengthOfProgram \u03b4[\u2191k] < 1 + lengthOfProgram a\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1025"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "fd08048676cc54ddaa64757d999b54fe3bc589fcf320148ac31b41f3a5fa234e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1362,
        "start_column": 6,
        "end_line": 1362,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\nIH :\n  t = s \u2192\n    \u2203 s_1,\n      Relation.TransGen (cEdge X tab) s s_1 \u2227\n        (satisfiable (nodeAt s_1) \u2227 \u00accEquiv X tab s_1 s \u2228\n          (~''\u03be).in_side side (nodeAt s_1) \u2227 (M, w)\u22a8nodeAt s_1 \u2227 ((nodeAt s_1).without (~''\u03be)).isFree = true)\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.lrep lpr\u27e9\u27e9\n\u22a2 (tabAt t).snd.snd = Tableau.lrep (\u22ef \u25b8 lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1362"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "96f22d4d42ae5622d1adb4559d423d44894e1a2307c895995a5ff91ce4254210"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (p next : Sequent \u2295 Sequent \u00d7 Formula \u00d7 Rule), next \u2208 sorry p \u2192 sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "55510d4647d6988409a0f304a0cc5ee3a201ba774e93318e1eb995a8a795ed17"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.A\nh : winning (Sum.inl X) s\n\u22a2 Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "42c4421f89a998d371bc4fa0cd8216806223097403db0f768dcf0dd57b347de0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.B\nh : winning (Sum.inl X) s\n\u22a2 \u2203 WS mg, X.toFinset \u2208 WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "8b0d11a54c7dee77c492e4c08ab60e4cce299b467a0bb3fae8fe0daceaf501fc"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\n\u03c4 : Formula\n\u03c4_in : \u03c4 \u2208 testsOfProgram \u03b1\n\u03c8_in : (~\u03c4) \u2208 L\nx_in_voc_\u03c8 : x \u2208 \u03c4.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "ddd725225fb86064008243e84ad7292363b300bd745f3a12f17e30030385be6d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\na : \u2115\n\u03b4 : List Program\n\u03c8_in : (\u2308\u00b7a\u2309\u2308\u2308\u03b4\u2309\u2309\u03c6) \u2208 L\nright\u271d : \u00b7a \u2208 subprograms \u03b1 \u2227 \u2200 a \u2208 \u03b4, a \u2208 subprograms \u03b1\nx_in_voc_\u03c8 : x = Sum.inr a \u2228 x \u2208 \u03b4.pvoc \u222a \u03c6.voc\n\u22a2 x \u2208 \u03b1.voc \u2228 x \u2208 \u03c6.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "ab8c5435cd26882287838a803f95bfdb2f17203392f7084029511b7ffc316e28"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nFs : List Formula\n\u03b4 : List Program\nin_H : (Fs, \u03b4) \u2208 H \u03b1\nthis : \u2200 (\u03b1 : Program) {Fs : List Formula} {\u03b4 : List Program}, (Fs, \u03b4) \u2208 H \u03b1 \u2192 \u03b4 = [] \u2228 \u2203 a \u03b4', \u03b4 = \u00b7a :: \u03b4'\n\u03b1' : Program\n\u03b1'_in : \u03b1' \u2208 \u03b4\nx_in : x \u2208 \u03b1'.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "b96bc766521daf004a4eee825db34ffd7a2ce84d00709023269d34ac01433080"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : \u2115 \u2295 \u2115\nress : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7 : LoadFormula\nlrule : LoadRule (~'\u03c7) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) \u2208 ress\n\u03c6 : Formula\n\u03c6_in_L : \u03c6 \u2208 L\nbla : x \u2208 \u03c6.voc\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "b4434b3f57c41e7f621ad05f309cf83e06d1f5fbfc84e0fedc172cd91a005d64"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.1.fvoc \u2286 Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "fdf49b4183f0576ed0f4e11e3c716a9e7cad508ebb4e830808a9ed0721c253f5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.2.voc \u2286 Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "7a19c419b17787e9bc0b8388a08c92fe0f4aca18862124b68ce1a50955f136fc"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L \u2227 Rcond.Subperm R \u2227 Ocond \u2286 O\ncL cR : List Formula\ncO : Olf\nx : \u2115 \u2295 \u2115\nx_in_voc_C :\n  (x \u2208 Vocab.fromList (List.map Formula.voc cL) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc (Olf.toForms cO))) \u2227\n    (x \u2208 Vocab.fromList (List.map Formula.voc cR) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc (Olf.toForms cO)))\nthis : \u2200 res \u2208 ress, res.1.fvoc \u2286 Lcond.fvoc\nC_in : (cL, cR, cO) \u2208 applyLocalRule lrule (L, R, O)\n\u22a2 x \u2208 jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "bcb6c67a897f76d910607117be80dc86234e3c164c013bcc559a8945479895bd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nL_and_n\u03b8_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "90b39e950c6fba06a12ed28cb6f0ae0e6ca3dffaa88b7ad99b9420f6142d8698"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nR_and_\u03b8_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "7fe2520642af2adc049dfde6a1954758c35ba5609dac123d961f0b7ae5aa3bac"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nL_and_n\u03b8_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "7319e2b7904099a4ddfe9ac5f3a43134575b687047830531229029d4d183bbbe"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nR_and_\u03b8_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "27818658e151d7a69598e4ac4460e793e3ec84bb80840d40773c56dda58c88da"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308\u2217a\u2309~\u2308a\u2309p)\u22c0(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "8e014b5ee7e6ae1141d2c841833bcf92f50a3fd2766ed67fd3e26a073c329d04"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308a\u2309\u2308\u2217a\u2309p)\u22c0(~\u2308a\u2309\u2308\u2217a\u2309q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "3a236ed317fa425056b83973811da08cde33fb5be0eb9925ac12a2d232bd5f01"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 55,
        "start_column": 42,
        "end_line": 55,
        "end_column": 47
      },
      "debug_info": {
        "goal": "\u22a2 4 \u2208 []",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "c810daacea1db4ed0e79c3e642230d534ecf8b4cea8bf8723f832f5e9e31edbb"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 56,
        "start_column": 42,
        "end_line": 56,
        "end_column": 47
      },
      "debug_info": {
        "goal": "\u22a2 4 \u2208 [3]",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "9c6e3492f78d8d4d43ebaeb70df1aecea564fbe50465d21d8238a7069e1b2c67"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 68,
        "start_column": 2,
        "end_line": 68,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a\u271d : List \u2115\nt : NiceTree a\u271d\nk : \u2115\nk_in_N : k \u2208 a\u271d\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "73621b987358efca37337c19fe55202ffbc1919c0f9034cc862b7452d2d3f9d7"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 227,
        "start_column": 4,
        "end_line": 227,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : \u2115\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\nthis : k < List.length Hp\n\u22a2 k \u2264 PathIn.length [] n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L227"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "5d3744bbe07183c391759935ab9d92d4b6f0470885448fdff6b48e75b2365b52"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 222,
        "start_column": 28,
        "end_line": 222,
        "end_column": 33
      },
      "debug_info": {
        "goal": "n : \u2115\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\n\u22a2 k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L222"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "a0b19658a123f88e98eef24e2e2ee6f5a073e8f140189275353b7393441f0928"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 248,
        "start_column": 4,
        "end_line": 248,
        "end_column": 9
      },
      "debug_info": {
        "goal": "H : History\nn : \u2115\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\nthis : k < List.length Hp\n\u22a2 k \u2264 PathIn.length H n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-09T19:21:30+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "1aa0c2cc6b976d303c7e7c2c3315a46bccef298365546a2dd8357335a25c9e4d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 243,
        "start_column": 28,
        "end_line": 243,
        "end_column": 33
      },
      "debug_info": {
        "goal": "H : History\nn : \u2115\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\n\u22a2 k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "923357b7483b2768808aa3210ee57e3fcc491bcf2a721f6593970a4e543ee57c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 289,
        "start_column": 2,
        "end_line": 289,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : \u2115\na\u271d\u00b9 : List \u2115\nm_in_ms : m \u2208 a\u271d\u00b9\na\u271d : \u2115\nst : Step a\u271d a\u271d\u00b9\ntail\u271d : List \u2115\nnext : {m : \u2115} \u2192 m \u2208 a\u271d\u00b9 \u2192 HisTree (a\u271d :: tail\u271d) m\nrest rest' : PathIn (a\u271d :: tail\u271d) m (@next m m_in_ms)\nhyp :\n  Sigma.fst (treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest) =\n    Sigma.fst (treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest')\n\u22a2 (treeAtP._proof_27 tail\u271d a\u271d a\u271d\u00b9 m m_in_ms next rest \u25b8 treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest).fst =\n    (treeAtP._proof_27 tail\u271d a\u271d a\u271d\u00b9 m m_in_ms (fun {m} => @next m) rest' \u25b8\n        treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest').fst",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L289"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "5f19dc15b459781e5e493263d34909aea6e461ddebdaeeea22eab915e9d42a77"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 311,
        "start_column": 4,
        "end_line": 311,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : \u2115\nms : List \u2115\nm : \u2115\nm_in_ms : m \u2208 ms\nst : Step n ms\nnext : {m : \u2115} \u2192 m \u2208 ms \u2192 HisTree [n] m\nrest : PathIn [n] m (@next m m_in_ms)\np_is_rep : isRep (treeAt [] n (HisTree.step n [] ms st next) (PathIn.cons [] ms n m m_in_ms st next rest))\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L311"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "38c367f718b27211c6491182d31c5e7906d586bbc15f6e94d12774f9dd2cfc6e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 350,
        "start_column": 8,
        "end_line": 350,
        "end_column": 13
      },
      "debug_info": {
        "goal": "n st : \u2115\nH : List \u2115\nk\u271d : \u2115\n_in_empty : some k\u271d = List.idxOf? n (st :: H)\np_is_rep : True\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L350"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "7cd318ffc9c7fab87658200361aeac7338a7bfeaaf8cf24cdf12f56848d4a728"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 370,
        "start_column": 4,
        "end_line": 370,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl\nn\u271d : \u2115\nms\u271d : List \u2115\nm\u271d : \u2115\nm_in\u271d : m\u271d \u2208 ms\u271d\ns\u271d : Step n\u271d ms\u271d\nnext\u271d : {m : \u2115} \u2192 m \u2208 ms\u271d \u2192 HisTree [n\u271d] m\nrest\u271d : PathIn [n\u271d] m\u271d (@next\u271d m\u271d m_in\u271d)\np_is_rep\u271d\u00b2 : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) (PathIn.cons [] ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\nn : (n : \u2115) \u00d7' (ht : HisTree [] n) \u00d7' (p : PathIn [] n ht) \u00d7' isRep (treeAt [] n ht p)\na\u271d\u00b3 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht\u271d : (ht : HisTree [] n\u271d) \u00d7' (p : PathIn [] n\u271d ht) \u00d7' isRep (treeAt [] n\u271d ht p)\na\u271d\u00b2 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree [] n\u271d\np\u271d\u00b9 : (p : PathIn [] n\u271d ht) \u00d7' isRep (treeAt [] n\u271d ht p)\na\u271d\u00b9 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np\u271d : PathIn [] n\u271d ht\np_is_rep\u271d\u00b9 : isRep (treeAt [] n\u271d ht p\u271d)\na\u271d : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\n\u03b2\u271d : Type\np : PathIn [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d)\np_is_rep\u271d : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) p)\n\u03b2 : Type\np_is_rep : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) (PathIn.cons [] ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\n\u22a2 1 + PathIn.length [n\u271d] m\u271d (@next\u271d m\u271d m_in\u271d) rest\u271d < [].length + PathIn.length [] n\u271d ht p\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L370"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "de0502561234c8a7d613d0991e1068cc391efa2dbd67cbb3ecac009f3d0080c6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 373,
        "start_column": 4,
        "end_line": 373,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl.refl\nn\u271d head\u271d : \u2115\ntail\u271d ms\u271d : List \u2115\nm\u271d : \u2115\nm_in\u271d : m\u271d \u2208 ms\u271d\ns\u271d : Step n\u271d ms\u271d\nnext\u271d : {m : \u2115} \u2192 m \u2208 ms\u271d \u2192 HisTree (n\u271d :: head\u271d :: tail\u271d) m\nrest\u271d : PathIn (n\u271d :: head\u271d :: tail\u271d) m\u271d (@next\u271d m\u271d m_in\u271d)\np_is_rep\u271d\u00b2 :\n  isRep\n    (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\n      (PathIn.cons (head\u271d :: tail\u271d) ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\nn :\n  (n : \u2115) \u00d7'\n    (ht : HisTree (head\u271d :: tail\u271d) n) \u00d7' (p : PathIn (head\u271d :: tail\u271d) n ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n ht p)\na\u271d\u00b3 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht\u271d :\n  (ht : HisTree (head\u271d :: tail\u271d) n\u271d) \u00d7' (p : PathIn (head\u271d :: tail\u271d) n\u271d ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p)\na\u271d\u00b2 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree (head\u271d :: tail\u271d) n\u271d\np\u271d\u00b9 : (p : PathIn (head\u271d :: tail\u271d) n\u271d ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p)\na\u271d\u00b9 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np\u271d : PathIn (head\u271d :: tail\u271d) n\u271d ht\np_is_rep\u271d\u00b9 : isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p\u271d)\na\u271d : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\n\u03b2\u271d : Type\np : PathIn (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\np_is_rep\u271d : isRep (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d) p)\n\u03b2 : Type\np_is_rep :\n  isRep\n    (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\n      (PathIn.cons (head\u271d :: tail\u271d) ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\n\u22a2 tail\u271d.length + 1 + 1 + PathIn.length (n\u271d :: head\u271d :: tail\u271d) m\u271d (@next\u271d m\u271d m_in\u271d) rest\u271d <\n    (head\u271d :: tail\u271d).length + PathIn.length (head\u271d :: tail\u271d) n\u271d ht p\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L373"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "e3546ee8dd29836c4567c44dff78b61976617be28e1b0dd6933e055454aaa4f9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 397,
        "start_column": 6,
        "end_line": 397,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : \u2115\nH' : History\nn' : \u2115\nH\u271d : History\nm\u271d k\u271d : \u2115\n_in_H : some k\u271d = List.idxOf? m\u271d H\u271d\np_is_rep :\n  @isRep.match_1 (fun x => Prop) \u27e8H\u271d, \u27e8m\u271d, HisTree.rep H\u271d m\u271d k\u271d _in_H\u27e9\u27e9 (fun fst fst_1 k a => True) fun x => False\nms : List \u2115\nm : \u2115\nm_in : m \u2208 ms\ns : Step n ms\nnext : {m : \u2115} \u2192 m \u2208 ms \u2192 HisTree [n] m\nrest : PathIn [n] m (@next m m_in)\np_ht_def :\n  \u27e8H\u271d, \u27e8m\u271d, HisTree.rep H\u271d m\u271d k\u271d _in_H\u27e9\u27e9 =\n    treeAt [] n (HisTree.step n [] ms s next) (PathIn.cons [] ms n m m_in s next rest)\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Unused/Repeat.lean#L397"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "918a3cb0fe4a23c659f33c497fbc701ddde9af18aa29135249558bbc1932926d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1014,
        "start_column": 112,
        "end_line": 1014,
        "end_column": 117
      },
      "debug_info": {
        "goal": "\u03c7 : LoadFormula\n\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\n\u03b1_natom : \u00ac\u03b1.isAtomic\n\u22a2 \u2203 s,\n    t \u22d6_ s \u2227\n      \u2200 F\u03b4 \u2208 H \u03b1,\n        if side = Side.LL then\n          if \u03be = AnyFormula.loaded \u03c7 then\n            nodeAt s = ((nodeAt s).1 ++ F\u03b4.1, (nodeAt s).2.1, some (Sum.inl (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n          else nodeAt s = ((nodeAt s).1 ++ F\u03b4.1, (nodeAt s).2.1, some (Sum.inl (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n        else\n          if \u03be = AnyFormula.loaded \u03c7 then\n            nodeAt s = ((nodeAt s).1, (nodeAt s).2.1 ++ F\u03b4.1, some (Sum.inr (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n          else nodeAt s = ((nodeAt s).1, (nodeAt s).2.1 ++ F\u03b4.1, some (Sum.inr (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L1014"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "3f2eb8de55a908de8373768e620a3c11988221a849c12b51e0f31e5e2a32e398"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1995,
        "start_column": 16,
        "end_line": 1995,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case inr.intro.intro.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\n\u03b2 : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF\u271d : List Formula\n\u03b4\u271d : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4\u271d v w\nv_F : (M, v)\u22a8F\u271d\nF\u03b4_in_H : (F\u271d, \u03b4\u271d) \u2208 H (\u2217\u03b2)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be))).isFree = true\n\u03b4_ne\u271d : \u00ac\u03b4\u271d = []\nv_\u03b1_w : Relation.ReflTransGen (relate M \u03b2) v w\nn : \u2115\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : \u2200 (i : Fin n), relate M \u03b2 (ws.get i.castSucc) (ws.get i.succ)\nk : Fin n\nih :\n  \u2203 sk,\n    Relation.TransGen (cEdge X tab) t sk \u2227\n      (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n        \u2203 \u03b3,\n          (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n            (M, ws[k.castSucc])\u22a8nodeAt sk \u2227\n              ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)\nne : \u00acws[k.castSucc] = ws[k.succ]\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n\u03b3 : List Program\ninside_con : (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk)\nwk_sk : (M, ws[k.castSucc])\u22a8nodeAt sk\nloaded_con : ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true\nprincipal_con : True\nF : List Formula\n\u03b4 : List Program\nF\u03b4_in : (F, \u03b4) \u2208 H \u03b2\nwk_F : (M, ws[k.castSucc])\u22a8(F, \u03b4).1\nwk_\u03b4_wk1 : relateSeq M (F, \u03b4).2 ws[k.castSucc] ws[k.succ]\n\u03b4_ne : \u03b4 \u2260 []\nH\u03b2star_prop : (F, \u03b4 ++ [\u2217\u03b2]) \u2208 H (\u2217\u03b2)\n\u22a2 \u2203 sk,\n    Relation.TransGen (cEdge X tab) t sk \u2227\n      (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n        \u2203 \u03b3,\n          (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n            (M, ws[k.succ])\u22a8nodeAt sk \u2227\n              ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L1995"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "1e3e5ac954240049140e668ddfcbb79f31fae65df361c73b2d99b3c0c417a4f7"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 2005,
        "start_column": 10,
        "end_line": 2005,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case inr.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\n\u03b2 : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : (M, v)\u22a8F\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217\u03b2)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\n\u03b4_ne : \u00ac\u03b4 = []\nv_\u03b1_w : Relation.ReflTransGen (relate M \u03b2) v w\nn : \u2115\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : \u2200 (i : Fin n), relate M \u03b2 (ws.get i.castSucc) (ws.get i.succ)\nclaim :\n  \u2200 (k : Fin n.succ),\n    \u2203 sk,\n      Relation.TransGen (cEdge X tab) t sk \u2227\n        (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n          \u2203 \u03b3,\n            (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n              (M, ws[k])\u22a8nodeAt sk \u2227 ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)\nh : w = w\nsn : PathIn tab\nt_sn : Relation.TransGen (cEdge X tab) t sn\nloaded_con : List Program\nw_sn : (~''(AnyFormula.loaded (\u230a\u230aloaded_con\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sn)\nwithout_con :\n  (M, w)\u22a8nodeAt sn \u2227 ((nodeAt sn).without (~''(AnyFormula.loaded (\u230a\u230aloaded_con\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True\n\u03b1_natom : \u00ac(\u2217\u03b2).isAtomic\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n        (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L2005"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "493237ca20322a3cff52e891d5c71ccb7a6f30eee9237aa9f47fd92d286dbe3e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 203,
        "start_column": 2,
        "end_line": 203,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 2 \u2264 1",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/Scratch/Fiddle4.lean#L203"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-04-30T15:46:18+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "640a282ee5038b65b82847a8d68b37de4d842f84de75e6a9fe75cedf7fcf6872"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 234,
        "start_column": 18,
        "end_line": 234,
        "end_column": 23
      },
      "debug_info": {
        "goal": "P Q : Prop\n\u22a2 Q",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/Scratch/Fiddle4.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "92f81f63d71619843fcecf11751e0631219a2e6e85d03235ff8878c76ac50d1c"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 235,
        "start_column": 22,
        "end_line": 235,
        "end_column": 27
      },
      "debug_info": {
        "goal": "P Q : Prop\nass : Q\n\u22a2 Q \u2192 P",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/Scratch/Fiddle4.lean#L235"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "4fa6c71a30a4f05e7d1102fd229c4a6130ddee2bae52ffc565881aa598968c22"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 239,
        "start_column": 25,
        "end_line": 239,
        "end_column": 30
      },
      "debug_info": {
        "goal": "P : \u2115 \u2192 Prop\nf : \u2115 \u2192 \u2115\n\u22a2 \u2200 (n : \u2115), P n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/Scratch/Fiddle4.lean#L239"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "d4b99111542bea3b6e21a6fabecadecdd1c1a64ce7c888547b76a9fb116cbb4a"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 243,
        "start_column": 28,
        "end_line": 243,
        "end_column": 33
      },
      "debug_info": {
        "goal": "p\u2081 p\u2082 p\u2083 q : Prop\n\u22a2 p\u2081 \u2228 p\u2082 \u2228 p\u2083",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/Scratch/Fiddle4.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-08-02T10:30:50+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "8d599d415e29fb4fd6627700d77369e108a602c320809e77c285bb07bc05220e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 250,
        "start_column": 43,
        "end_line": 250,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : \u2115\nq : Prop\n\u22a2 n = 1 \u2228 n = 2 \u2228 n = 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/Scratch/Fiddle4.lean#L250"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-08-02T10:30:50+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "188882d929336f2673afb8123aed3b7baec369e2c247e72b82df2a0e72983882"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 319,
        "start_column": 2,
        "end_line": 323,
        "end_column": 15
      },
      "debug_info": {
        "goal": "\u22a2 True",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/Scratch/Fiddle4.lean#L319"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-12-26T19:58:00+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "7fe6ced22fea6e2805eb7005a58fc3b34e8bc1b0c6c6f024043e9380a7a4436d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 86,
        "start_column": 78,
        "end_line": 86,
        "end_column": 83
      },
      "debug_info": {
        "goal": "n : \u2115\nh\u271d : Even n\ncalculation_104313057753019104 : \u2203 k, \u2191n = 2 * k \u2192 \u2191n * (\u2191n + 1) = 2 * k * (2 * k + 1)\n\u22a2 \u2203 k, \u2191n = 2 * k",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/CodeGen/from_statement_17638710709303199183.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "8d2e1ada3c601798b45b225479d9c98b76509baf75fe301efdbc225c3490b0f2"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 93,
        "start_column": 49,
        "end_line": 93,
        "end_column": 54
      },
      "debug_info": {
        "goal": "n : \u2115\nh\u271d : \u00acEven n\n\u22a2 Odd n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/CodeGen/from_statement_17638710709303199183.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "f59be6938d976fa6c84ef27b57d3a2999921c0b8ab248543132564276488427b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 100,
        "start_column": 6,
        "end_line": 100,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : \u2115\nh\u271d : \u00acEven n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : \u2203 k, \u2191n = 2 * k + 1 \u2192 True\n\u22a2 \u2203 k, \u2191n = 2 * k + 1 \u2192 2 * k + 1 = (2 * k + 1) * (2 * k + 2)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/CodeGen/from_statement_17638710709303199183.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "17e055aca3ad04d9a79127b97e935786d303ef3e6809233448749147f803be63"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 104,
        "start_column": 6,
        "end_line": 104,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : \u2115\nh\u271d : \u00acEven n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : \u2203 k, \u2191n = 2 * k + 1 \u2192 True\ncalculation_2616508765904695607 : \u2203 k, \u2191n = 2 * k + 1 \u2192 2 * k + 1 = (2 * k + 1) * (2 * k + 2)\n\u22a2 \u2203 k, \u2191n = 2 * (2 * k + 1) * (k + 1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/CodeGen/from_statement_17638710709303199183.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "c2b3364eca545d6b7156c5498268862d6f3b6d3594f01ba1aaa7c326fb552b2d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ThmInfo.lean",
        "start_line": 36,
        "start_column": 51,
        "end_line": 36,
        "end_column": 56
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : Nat), n + 2 = 2 + n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/DataGenAide/ThmInfo.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-08-16T17:16:08+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "ae7bcf0381b73a9bc1efc1bbc555757ce842bc7a4043e1d352377af03aa150e5"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ThmInfo.lean",
        "start_line": 39,
        "start_column": 50,
        "end_line": 39,
        "end_column": 55
      },
      "debug_info": {
        "goal": "a b c : Nat\n\u22a2 a ^ 3 + b ^ 3 = c ^ 3 \u2192 a * b * c = 0",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/DataGenAide/ThmInfo.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-08-16T17:16:08+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "0695d4a59abfc9204980f43488537990250e029a6be1f5446f407b4fda31aad9"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ConstDeps.lean",
        "start_line": 114,
        "start_column": 17,
        "end_line": 114,
        "end_column": 22
      },
      "debug_info": {
        "goal": "case succ\nm n : Nat\nih : n + m = m + n\n\u22a2 n + 1 + m = m + (n + 1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/DataGenAide/ConstDeps.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-05-05T19:52:08+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "dc8bfadd57a6f970a40641d76289f11edd2fd1a1142afedda964bd04c834c793"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 41,
        "start_column": 26,
        "end_line": 41,
        "end_column": 41
      },
      "debug_info": {
        "goal": "\u22a2 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanAide/CheckedSorry.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "1a5264f4c687648ea7a18430dc38371238846205732199f7f3bd0e175a1fb776"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 46,
        "start_column": 44,
        "end_line": 46,
        "end_column": 59
      },
      "debug_info": {
        "goal": "n : Nat\n\u22a2 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanAide/CheckedSorry.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "2d517e0454ba964f6a722147c04611494b8b0aef87abd3fafdf9e40124acf0fc"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case left\n\u22a2 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanAide/CheckedSorry.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "c48fbe65a2c1a60251fc5949df592c0c90f7a220253932c568ffa942124e1df3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 101,
        "start_column": 2,
        "end_line": 101,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case right.left\n\u22a2 2 + 2 = 4",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanAide/CheckedSorry.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "8af7c9bfa1f6190d772c92a45785c0936aa6e4726ad868a8f0b0f37488173cd3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case right.right\n\u22a2 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanAide/CheckedSorry.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "f7288f63325608373269797be4cd7a08264e268c32f80c372cab27e02ec62bd0"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 19,
        "start_column": 104,
        "end_line": 19,
        "end_column": 109
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {a b : \u2124},\n      \u2203 x y z w,\n        a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2227\n          \u2203 x y z w, b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2192 \u2203 x y z w, a * b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2) \u2192\n    let is_sum_of_four_squares := fun n => \u2203 a b c d, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2;\n    \u2200 (x y : \u2115), is_sum_of_four_squares x \u2192 is_sum_of_four_squares y \u2192 is_sum_of_four_squares (x * y)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L19"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "4386373fd0d35f125cb249a21c4064a4f61f5403afe87d0a956ab278e78eb1eb"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 21,
        "start_column": 267,
        "end_line": 21,
        "end_column": 272
      },
      "debug_info": {
        "goal": "\u22a2 (let is_sum_of_four_squares := fun n => \u2203 a b c d, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2;\n    \u2200 (x y : \u2115), is_sum_of_four_squares x \u2192 is_sum_of_four_squares y \u2192 is_sum_of_four_squares (x * y)) \u2192\n    \u2200 {a b : \u2124},\n      \u2203 x y z w,\n        a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2227 b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2192\n          \u2203 x y z w, a * b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "03d36b2931ba9861bf29f54987fe86e5f92e550832fafdcb518b708126c4ee30"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 30,
        "start_column": 2,
        "end_line": 30,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case a\nh : {R : Type u} \u2192 [inst : CommRing R] \u2192 (\u2200 (x : R), x * x = x) \u2192 CommRing R\nR : Type u\nRRing : Ring R\nhyp : \u2200 (x : R), x * x = x\nthis : CommRing R\nx : R\n\u22a2 x * x = x",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L30"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-12T12:43:25+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "62c872cd55d10303b01560da948a1323b38baa813f703a5dea10b0fa1e8f2ffe"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 40,
        "start_column": 2,
        "end_line": 40,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h.left\nh : \u2200 (n : \u2115), \u2203 p\u2081 p\u2082, Nat.Prime p\u2081 \u2227 Nat.Prime p\u2082 \u2227 p\u2081 + 2 = p\u2082 \u2227 2 + n < p\u2082\nn p\u2081 p\u2082 : \u2115\nPrime_p\u2081 : Nat.Prime p\u2081\nPrime_p\u2082 : Nat.Prime p\u2082\nhyp\u2081 : p\u2081 + 2 = p\u2082\nhyp\u2082 : 2 + n < p\u2082\n\u22a2 p\u2081 > n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-12T12:43:25+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "fd1e932496beb0d45993bbdcdfc4bd58274ff656a54ac93cc4d5d505f3578af1"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 51,
        "start_column": 28,
        "end_line": 51,
        "end_column": 33
      },
      "debug_info": {
        "goal": "h : \u2200 (n : \u2115), \u2203 p > n, Nat.Prime p \u2227 Nat.Prime (p + 2)\nn p : \u2115\nhpn : p > n\nPrime_p : Nat.Prime p\nPrime_pp2 : Nat.Prime (p + 2)\n\u22a2 2 + n < p + 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L51"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-14T19:44:46+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "fc16a013136276a1c8ff6fe12940a066c3e173606ab4ffde1b9d608bf45736f3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 58,
        "start_column": 350,
        "end_line": 58,
        "end_column": 355
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {r : \u03b1 \u2192 \u03b1 \u2192 Prop} [inst : Preorder \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain r c \u2192 \u2203 ub, \u2200 a \u2208 c, r a ub) \u2192 \u2200 [inst : Nonempty \u03b1], \u2203 m, \u2200 (a : \u03b1), r m a \u2192 r a m) \u2192\n    \u2200 {\u03b1 : Type u} [inst : PartialOrder \u03b1] [inst_1 : Nonempty \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain LE.le c \u2192 \u2203 b, \u2200 a \u2208 c, a \u2264 b) \u2192 \u2203 m, \u2200 (a : \u03b1), m \u2264 a \u2192 a = m",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "69a3f82206cdec1f41a6c12200cf6ae77ceca60c722cf9fe97ac679df8a2bea6"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 59,
        "start_column": 350,
        "end_line": 59,
        "end_column": 355
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : PartialOrder \u03b1] [inst_1 : Nonempty \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain LE.le c \u2192 \u2203 b, \u2200 a \u2208 c, a \u2264 b) \u2192 \u2203 m, \u2200 (a : \u03b1), m \u2264 a \u2192 a = m) \u2192\n    \u2200 {\u03b1 : Type u_1} {r : \u03b1 \u2192 \u03b1 \u2192 Prop} [inst : Preorder \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain r c \u2192 \u2203 ub, \u2200 a \u2208 c, r a ub) \u2192 \u2200 [inst : Nonempty \u03b1], \u2203 m, \u2200 (a : \u03b1), r m a \u2192 r a m",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L59"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "58205bc23752fa827e7eb21d122e03a2971cd3d09321bfd88d5dd42c86c7fa8d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 62,
        "start_column": 420,
        "end_line": 62,
        "end_column": 425
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} {\u03b3 : Type u_3} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2]\n      [inst_2 : UniformSpace \u03b3] {f : \u03b1 \u2192 \u03b2} {g : \u03b2 \u2192 \u03b3},\n      UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)) \u2192\n    \u2200 {\u03b1 \u03b2 \u03b3 : Type u} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2] [inst_2 : UniformSpace \u03b3] (f : \u03b1 \u2192 \u03b2)\n      (g : \u03b2 \u2192 \u03b3), UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "c21d76d1a02d3d46bc9b22d05936443e3e785df6b2ec414b6ce9cb1a74ed48cb"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 63,
        "start_column": 420,
        "end_line": 63,
        "end_column": 425
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 \u03b2 \u03b3 : Type u} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2] [inst_2 : UniformSpace \u03b3] (f : \u03b1 \u2192 \u03b2)\n      (g : \u03b2 \u2192 \u03b3), UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)) \u2192\n    \u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} {\u03b3 : Type u_3} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2]\n      [inst_2 : UniformSpace \u03b3] {f : \u03b1 \u2192 \u03b2} {g : \u03b2 \u2192 \u03b3},\n      UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L63"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "7f5a0201431e787b6cf8595f675e88bc40e1b850d528804fe0604384b6d55fb6"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 67,
        "start_column": 488,
        "end_line": 67,
        "end_column": 493
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {C : Type u\u2081} [inst : CategoryTheory.Category.{u_3, u\u2081} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\n      {T T' : C} (t : CategoryTheory.Limits.IsTerminal T),\n      CategoryTheory.Limits.IsTerminal T' \u2192 CategoryTheory.IsIso (t.from T')) \u2192\n    \u2200 {C : Type u_4} [inst : CategoryTheory.Category.{u_5, u_4} C] (T\u2081 T\u2082 : C),\n      CategoryTheory.Limits.IsTerminal T\u2081 \u2192 CategoryTheory.Limits.IsTerminal T\u2082 \u2192 \u2203 \u03b9, \u2200 (\u03b9' : T\u2081 \u2245 T\u2082), \u03b9 = \u03b9'",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "6c3e3ec0bb3084bf63db1781201f63a21a4d6b146e9964861565f10ba29c4cc5"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 68,
        "start_column": 488,
        "end_line": 68,
        "end_column": 493
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {C : Type u_3} [inst : CategoryTheory.Category.{u_4, u_3} C] (T\u2081 T\u2082 : C),\n      CategoryTheory.Limits.IsTerminal T\u2081 \u2192 CategoryTheory.Limits.IsTerminal T\u2082 \u2192 \u2203 \u03b9, \u2200 (\u03b9' : T\u2081 \u2245 T\u2082), \u03b9 = \u03b9') \u2192\n    \u2200 {C : Type u\u2081} [inst : CategoryTheory.Category.{u_5, u\u2081} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\n      {T T' : C} (t : CategoryTheory.Limits.IsTerminal T),\n      CategoryTheory.Limits.IsTerminal T' \u2192 CategoryTheory.IsIso (t.from T')",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "425ecb51f53f6c090bce616a2c979ad89a8d9cca4993c7d134aaae84ec9bd9bf"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 71,
        "start_column": 104,
        "end_line": 71,
        "end_column": 109
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (a b c : \u2124), a ^ 3 + b ^ 3 \u2260 c ^ 3) \u2192 \u2200 (a b c : \u2115), a > 0 \u2192 b > 0 \u2192 \u00aca ^ 3 + b ^ 3 = c ^ 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "7fff65f81f21aeab5e9888d322be861e1cf6c19537ac36d0e7cd0def790b0861"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 72,
        "start_column": 104,
        "end_line": 72,
        "end_column": 109
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (a b c : \u2115), a > 0 \u2192 b > 0 \u2192 \u00aca ^ 3 + b ^ 3 = c ^ 3) \u2192 \u2200 (a b c : \u2124), a ^ 3 + b ^ 3 \u2260 c ^ 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "be41a66b28caed27ee005f476d290e3a21af6d3d1d3d93e741cf16a4cd047bbe"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 75,
        "start_column": 183,
        "end_line": 75,
        "end_column": 188
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {G : Type u_1} [inst : Group G], (\u2200 (x : G), x ^ 2 = 1) \u2192 \u2200 {x y : G}, Commute x y) \u2192\n    \u2200 {G : Type u} [inst : Group G], (\u2200 (x : G), G \u2192 x * x = 1) \u2192 \u2200 (x y : G), Commute x y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "534fc563cadb2183dfb6deeb1b3859d5f79d61802e7c59a92efd3de934bd33d7"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 76,
        "start_column": 183,
        "end_line": 76,
        "end_column": 188
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {G : Type u} [inst : Group G], (\u2200 (x : G), G \u2192 x * x = 1) \u2192 \u2200 (x y : G), Commute x y) \u2192\n    \u2200 {G : Type u_1} [inst : Group G], (\u2200 (x : G), x ^ 2 = 1) \u2192 \u2200 {x y : G}, Commute x y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "ac6eaec3d206728f0c6acf119622f921eeb82f4775f7ef8bafdcddfaeb1da5e4"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 79,
        "start_column": 89,
        "end_line": 79,
        "end_column": 94
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {p q : \u2115}, p = q + 1 \u2192 Even (p * q)) \u2192 \u2200 (n : \u2115), Even (n * (n + 1))",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "48d69618c9316356b1b7cd321d43fb76d3e802c761e923d6f97c2993f4bc52b6"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 80,
        "start_column": 89,
        "end_line": 80,
        "end_column": 94
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (n : \u2115), Even (n * (n + 1))) \u2192 \u2200 {p q : \u2115}, p = q + 1 \u2192 Even (p * q)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "c6853066e0826492c4c338a49eaf4027ad9653fcd2481e989cffe072d40fd578"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 83,
        "start_column": 120,
        "end_line": 83,
        "end_column": 125
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (\u03b1 : Type u), Monoid.IsTorsionFree (FreeGroup \u03b1)) \u2192 \u2200 {\u03b1 : Type u}, Monoid.IsTorsionFree (FreeGroup \u03b1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "009a45017a1a786a6a38934a57ec86f65e60e117a0b5401153d2e75c16e57e60"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 84,
        "start_column": 120,
        "end_line": 84,
        "end_column": 125
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u}, Monoid.IsTorsionFree (FreeGroup \u03b1)) \u2192 \u2200 (\u03b1 : Type u), Monoid.IsTorsionFree (FreeGroup \u03b1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "b165c8f371c803df11a9ead7b59c0c51bd8f83682da81ca8b61380a2f6f9d553"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 88,
        "start_column": 58,
        "end_line": 88,
        "end_column": 63
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {n : \u2115}, 1 < n \u2192 \u2203 p, Nat.Prime p \u2227 p \u2223 n) \u2192 \u2200 n > 1, \u2203 p, Nat.Prime p \u2227 \u2203 d, p * d = n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "95a1affea2f37fc274d1ad9a1c30656fa05b1321c0be7b01417ac31d22386219"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 89,
        "start_column": 124,
        "end_line": 89,
        "end_column": 129
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 n > 1, \u2203 p, Nat.Prime p \u2227 \u2203 d, p * d = n) \u2192 \u2200 {n : \u2115}, 1 < n \u2192 \u2203 p, Nat.Prime p \u2227 p \u2223 n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "3b5d821ce6ef6da5735595f974a5b45a44c15a162fb55463b26b3c9fbf3c7179"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 98,
        "start_column": 310,
        "end_line": 98,
        "end_column": 315
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} [inst : Group \u03b1] [inst_1 : Group \u03b2] [inst_2 : Fintype \u03b1] [inst_3 : Fintype \u03b2]\n      {f : \u03b1 \u2192 \u03b2}, IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f) \u2192\n    \u2200 {\u03b1 : Type u} [inst : Finite \u03b1] (f : FreeGroup \u03b1 \u2192 FreeGroup \u03b1),\n      IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "75516c61cb5339540c2671db20e04003ad6eebf4b70539813fb37c719703655f"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 99,
        "start_column": 310,
        "end_line": 99,
        "end_column": 315
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : Finite \u03b1] (f : FreeGroup \u03b1 \u2192 FreeGroup \u03b1),\n      IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f) \u2192\n    \u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} [inst : Group \u03b1] [inst_1 : Group \u03b2] [inst_2 : Fintype \u03b1] [inst_3 : Fintype \u03b2]\n      {f : \u03b1 \u2192 \u03b2}, IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "8bce1bbec9069f06fb3b8d074f6a4cefd11bf3eacc2c9796adbb9a54d419ddbd"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 102,
        "start_column": 167,
        "end_line": 102,
        "end_column": 172
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {n : \u2115}, 0 < n \u2192 Even n \u2192 \u2203 p q, Nat.Prime p \u2227 Nat.Prime q \u2227 p + q = n) \u2192\n    \u2200 n > 0, Even n \u2192 \u2203 p q, Nat.Prime p \u2192 Nat.Prime q \u2192 n = p + q",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "fe15d575db435ae32a25d25764d387c54804a4d10afe97c4dc0725e74bf87037"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 103,
        "start_column": 167,
        "end_line": 103,
        "end_column": 172
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 n > 0, Even n \u2192 \u2203 p q, Nat.Prime p \u2192 Nat.Prime q \u2192 n = p + q) \u2192\n    \u2200 {n : \u2115}, 0 < n \u2192 Even n \u2192 \u2203 p q, Nat.Prime p \u2227 Nat.Prime q \u2227 p + q = n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "a344a155d0275359b68e7f72fbd866f33be977f20de415dd495e58939afd08b0"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 108,
        "start_column": 139,
        "end_line": 108,
        "end_column": 144
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {M : Type u} [inst : Semiring M] [inst_1 : DecidableEq M] (a : M), Even (a * a) \u2192 Even a) \u2192\n    \u2200 (n : \u2115), Even (n ^ 2) \u2192 Even n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "7539c93697314406e2b505c99b01814c1572fa4d16cc73c79e68f13eb0af9e6d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 109,
        "start_column": 139,
        "end_line": 109,
        "end_column": 144
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (n : \u2115), Even (n ^ 2) \u2192 Even n) \u2192\n    \u2200 {M : Type u} [inst : Semiring M] [inst_1 : DecidableEq M] (a : M), Even (a * a) \u2192 Even a",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "d5d30aedc0d8711a578dff411317c3c0a92cef19d09ae89ead84bfeeddb48a19"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 113,
        "start_column": 228,
        "end_line": 113,
        "end_column": 233
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : TopologicalSpace \u03b1] {s : Set \u03b1}, (\u2200 x \u2208 s, \u2203 t, IsOpen t \u2227 x \u2208 t) \u2192 IsOpen s) \u2192\n    \u2200 {X : Type u} [inst : TopologicalSpace X] (S : Set X), (\u2200 x \u2208 S, \u2203 U, IsOpen U) \u2192 IsOpen S",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "2c43f16e1f73abab0df6203c30148261d09ea7b5ee2f9358b19007cadf70dd4c"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 114,
        "start_column": 228,
        "end_line": 114,
        "end_column": 233
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {X : Type u} [inst : TopologicalSpace X] (S : Set X), (\u2200 x \u2208 S, \u2203 U, IsOpen U) \u2192 IsOpen S) \u2192\n    \u2200 {\u03b1 : Type u} [inst : TopologicalSpace \u03b1] {s : Set \u03b1}, (\u2200 x \u2208 s, \u2203 t, IsOpen t \u2227 x \u2208 t) \u2192 IsOpen s",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "5b5f6ae08f36fbb77e2cbb1e2773f7dbce2426869bceefe20766d634ef7a2caa"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 117,
        "start_column": 176,
        "end_line": 117,
        "end_column": 181
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : DecidableEq \u03b1] {x : FreeGroup \u03b1}, x \u2260 1 \u2192 \u00acIsOfFinOrder x) \u2192\n    \u2200 {G : Type u} [inst : Group G], FreeGroup G \u2192 \u2200 (g : G), g \u2260 1 \u2192 orderOf g = 0",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "551ffa960d89e611bc235356b6233409ffba975a05a0bf22c061bb59bcff0dc4"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 118,
        "start_column": 176,
        "end_line": 118,
        "end_column": 181
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {G : Type u} [inst : Group G], FreeGroup G \u2192 \u2200 (g : G), g \u2260 1 \u2192 orderOf g = 0) \u2192\n    \u2200 {\u03b1 : Type u} [inst : DecidableEq \u03b1] {x : FreeGroup \u03b1}, x \u2260 1 \u2192 \u00acIsOfFinOrder x",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "d7cb38506abfff68397dc2009d35ecf4d55e80301724d9258cef8340ed88d58f"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 121,
        "start_column": 220,
        "end_line": 121,
        "end_column": 225
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {m n : \u2115}, 0 < m \u2192 0 < n \u2192 m.gcd n = 1 \u2192 \u2200 N > m * n, \u2203 x y, N = m * x + n * y) \u2192\n    \u2200 (a b : \u2115), a > 0 \u2192 b > 0 \u2192 a.Coprime b \u2192 \u2203 m, \u2200 N > m, \u2203 x y, N = a * x + b * y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-02-07T16:00:51+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "e13746b4f832e1d0604b194789c8bc48261c4878b645d55526411f631d05bd0e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 122,
        "start_column": 220,
        "end_line": 122,
        "end_column": 225
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (a b : \u2115), a > 0 \u2192 b > 0 \u2192 a.Coprime b \u2192 \u2203 m, \u2200 N > m, \u2203 x y, N = a * x + b * y) \u2192\n    \u2200 {m n : \u2115}, 0 < m \u2192 0 < n \u2192 m.gcd n = 1 \u2192 \u2200 N > m * n, \u2203 x y, N = m * x + n * y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L122"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-02-07T16:00:51+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "c57d3eb875a45bf52daaf6b2131dcbfc4bce97a787a47ca5f97b836e7322a144"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1a03ff715bd62e15958f50e98bf2b003925493a6",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 133,
        "start_column": 189,
        "end_line": 133,
        "end_column": 194
      },
      "debug_info": {
        "goal": "\u22a2 Unit \u2192\n    \u2200 {\u03b7 : Type u_1} (G : Type u_2) [inst : Group G] {\u0393 : Type u_3} [inst_1 : Group \u0393],\n      Monoid.IsTorsionFree (G \u00d7 \u0393) \u2192 Monoid.IsTorsionFree G \u2227 Monoid.IsTorsionFree \u0393",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1a03ff715bd62e15958f50e98bf2b003925493a6/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L133"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-31T05:51:35.102126+00:00"
      },
      "id": "6b1fde1a50d7f9441dc6219a59897414562124370dcd317f35886e81d77ee1fa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "7f4d3276c76096031f4799e62bc7aa7f902edb6e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : \u2115\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n\u22a2 (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) \u2227\n    (True \u2192 env.get (i0 + 1) = 0 \u2228 env.get (i0 + 1) = 1) \u2227\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 \u2227\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n          (True \u2192 env.get (i0 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1) = 1) \u2227\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 \u2227\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                (True \u2192 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 \u2227\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                      (True \u2192\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/7f4d3276c76096031f4799e62bc7aa7f902edb6e/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-05-29T06:49:07.803479+00:00"
      },
      "id": "1eb58a3c3c836c7a0089da4e528a6baf4dd91c9eff714ff9804b3a706d2e34ba"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 95,
        "start_column": 2,
        "end_line": 95,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 = FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef \u2227\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\nh0 : env.get i0 = FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\n\u22a2 (ZMod.val (FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef) < 2 ^ \u2191offset.castSucc \u2227\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)) < 2 ^ \u2191(8 - offset.castSucc)) \u2227\n    FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset) * 2 ^ \u2191offset +\n        -x =\n      0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-15T17:59:45+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "74b0c0d504d68ffe06c9e81635cd8db56a92bf63319a791d180d9b1b3b676f41"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 195,
        "start_column": 2,
        "end_line": 195,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case mk.mk\np : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx0_var x1_var x2_var x3_var x4_var x5_var x6_var x7_var : Expression (F p)\nhenv :\n  env.uses_local_witnesses_completeness\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)\nx0 x1 x2 x3 x4 x5 x6 x7 : F p\nh_eval :\n  eval env\n      { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n        x7 := x7_var } =\n    { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }\nas : { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }.is_normalized\n\u22a2 Circuit.constraints_hold.completeness env\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L195"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-24T23:40:51+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "3a155a9e9f8091a7b43e2989a77bda2c1f98807461ff3eeee9d841695d864995"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\nx0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 x0_l x1_l x2_l x3_l x4_l x5_l x6_l x7_l x0_h x1_h x2_h x3_h x4_h x5_h x6_h x7_h :\n  F p\nh_x0_l : ZMod.val x0_l = ZMod.val x0 % 2 ^ \u2191offset\nh_x0_h : ZMod.val x0_h = ZMod.val x0 / 2 ^ \u2191offset\nh_x1_l : ZMod.val x1_l = ZMod.val x1 % 2 ^ \u2191offset\nh_x1_h : ZMod.val x1_h = ZMod.val x1 / 2 ^ \u2191offset\nh_x2_l : ZMod.val x2_l = ZMod.val x2 % 2 ^ \u2191offset\nh_x2_h : ZMod.val x2_h = ZMod.val x2 / 2 ^ \u2191offset\nh_x3_l : ZMod.val x3_l = ZMod.val x3 % 2 ^ \u2191offset\nh_x3_h : ZMod.val x3_h = ZMod.val x3 / 2 ^ \u2191offset\nh_x4_l : ZMod.val x4_l = ZMod.val x4 % 2 ^ \u2191offset\nh_x4_h : ZMod.val x4_h = ZMod.val x4 / 2 ^ \u2191offset\nh_x5_l : ZMod.val x5_l = ZMod.val x5 % 2 ^ \u2191offset\nh_x5_h : ZMod.val x5_h = ZMod.val x5 / 2 ^ \u2191offset\nh_x6_l : ZMod.val x6_l = ZMod.val x6 % 2 ^ \u2191offset\nh_x6_h : ZMod.val x6_h = ZMod.val x6 / 2 ^ \u2191offset\nh_x7_l : ZMod.val x7_l = ZMod.val x7 % 2 ^ \u2191offset\nh_x7_h : ZMod.val x7_h = ZMod.val x7 / 2 ^ \u2191offset\neq0 : x1_l * 2 ^ \u2191offset + x0_h + -y0 = 0\neq1 : x2_l * 2 ^ \u2191offset + x1_h + -y1 = 0\neq2 : x3_l * 2 ^ \u2191offset + x2_h + -y2 = 0\neq3 : x4_l * 2 ^ \u2191offset + x3_h + -y3 = 0\neq4 : x5_l * 2 ^ \u2191offset + x4_h + -y4 = 0\neq5 : x6_l * 2 ^ \u2191offset + x5_h + -y5 = 0\neq6 : x7_l * 2 ^ \u2191offset + x6_h + -y6 = 0\neq7 : x0_l * 2 ^ \u2191offset + x7_h + -y7 = 0\n\u22a2 let x_val :=\n    ZMod.val x0 + ZMod.val x1 * 256 + ZMod.val x2 * 256 ^ 2 + ZMod.val x3 * 256 ^ 3 + ZMod.val x4 * 256 ^ 4 +\n          ZMod.val x5 * 256 ^ 5 +\n        ZMod.val x6 * 256 ^ 6 +\n      ZMod.val x7 * 256 ^ 7;\n  let y_val :=\n    ZMod.val y0 + ZMod.val y1 * 256 + ZMod.val y2 * 256 ^ 2 + ZMod.val y3 * 256 ^ 3 + ZMod.val y4 * 256 ^ 4 +\n          ZMod.val y5 * 256 ^ 5 +\n        ZMod.val y6 * 256 ^ 6 +\n      ZMod.val y7 * 256 ^ 7;\n  y_val = x_val % 2 ^ (\u2191offset % 64) * 2 ^ (64 - \u2191offset % 64) + x_val / 2 ^ (\u2191offset % 64)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:54:41+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "777a5ced415d2c49f1d7379ab4a322238364cac33f30b861e7789a20ec0111a7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 144,
        "start_column": 2,
        "end_line": 144,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n\u22a2 Completeness (F p) (elaborated offset) assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T11:26:47+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "73640cd7f201a98d030dbe244c200522848e43f9a7ee96fa6af9dea3d47ffe50"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 22,
        "start_column": 2,
        "end_line": 22,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\nx : \u2115\nh : x < 2 ^ 64\noffset : \u2115\n\u22a2 rot_right64 x offset = (x.toUInt64.toBitVec.rotateRight offset).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/Rotation64/Theorems.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "79b42a41023a0f98055c729408e88d01cf5b6784b212e5d80fcea49fc9add30d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 41,
        "start_column": 35,
        "end_line": 41,
        "end_column": 40
      },
      "debug_info": {
        "goal": "x n m : \u2115\nh : x < 2 ^ 64\n\u22a2 (x.toUInt64.toBitVec.rotateRight n).toNat < 2 ^ 64",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/Rotation64/Theorems.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "061fa67337dcc8c5ae14f3f636808d8df381918d8f49fac642a1a6620419ff4b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "x n m : \u2115\nh : x < 2 ^ 64\n\u22a2 ((x.toUInt64.toBitVec.rotateRight n).toNat.toUInt64.toBitVec.rotateRight m).toNat =\n    (x.toUInt64.toBitVec.rotateRight (n + m)).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/Rotation64/Theorems.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T16:41:17+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "c8ac3329b11d3403284ccba14d6d3b38ce8e7d790dcb929be460838bcc35f032"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 93,
        "start_column": 2,
        "end_line": 93,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[4]).is_normalized \u2227\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[3])) \u2227\n            (eval env state_var[1]).is_normalized \u2227\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[4])) \u2227\n        (eval env state_var[2]).is_normalized \u2227\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[3]).is_normalized \u2227\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Keccak/ThetaD.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "c97b72c6c746ca6a5cf69a3d0da4c36e62d4fb22f473375a9f93a0b3fcb8ef12"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 95,
        "start_column": 2,
        "end_line": 95,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 =\n      FieldUtils.mod (Expression.eval env x_var)\n        \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n        (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) \u2227\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\nh0 :\n  env.get i0 =\n    FieldUtils.mod (Expression.eval env x_var)\n      \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n      (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\n\u22a2 (ZMod.val\n          (FieldUtils.mod (Expression.eval env x_var)\n            \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)) <\n        2 ^ \u2191offset.castSucc \u2227\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)) < 2 ^ \u2191(8 - offset.castSucc)) \u2227\n    FieldUtils.mod (Expression.eval env x_var)\n            \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset) * 2 ^ \u2191offset +\n        -x =\n      0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-15T17:59:45+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "075ada0470e44d836726d4a90e8984f6182013bd595dd65f26a4c333709e156a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 144,
        "start_column": 2,
        "end_line": 144,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n\u22a2 Completeness (F p) (Gadgets.Rotation64Bits.elaborated p inst\u271d p_large_enough offset)\n    (Gadgets.Rotation64Bits.assumptions p)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T11:26:47+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "862513d78fab4fd1300c60d3da7749b26ccd6897f15289f34911a6049c39590a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 93,
        "start_column": 2,
        "end_line": 93,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : Gadgets.Keccak256.ThetaD.assumptions p state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[4]).is_normalized \u2227\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[3])) \u2227\n            (eval env state_var[1]).is_normalized \u2227\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[4])) \u2227\n        (eval env state_var[2]).is_normalized \u2227\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[3]).is_normalized \u2227\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/Keccak/ThetaD.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "3ff05c2c7d86ac7303e2074b4032bdb8ffb176aa14fa043aa50f4fc22e95acd9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 57,
        "start_column": 4,
        "end_line": 57,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\nn k : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : field (F p)\nh_input : Expression.eval env x_var = x\nh_assumptions : ZMod.val x < 2 ^ n\nh_holds :\n  match\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset,\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength,\n    (Equality.circuit id).to_subcircuit\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n      (x_var, Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0) with\n  | m, Operations.empty .(m), s =>\n    Expression.eval env x_var =\n      Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n  | x, x_1, s =>\n    Circuit.constraints_hold.soundness env\n        (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n              (fun bit =>\n                StateT.modifyGet fun s =>\n                  (PUnit.unit,\n                    { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                      withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n              (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                (Gadgets.ToBits.main._proof_3 p prime))\n              { offset := k + n,\n                withLength :=\n                  (Operations.empty k).witness n fun eval =>\n                    Vector.ofFn fun i =>\n                      if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n      Expression.eval env x_var =\n        Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n\u22a2 \u2200 i < n, env.get (k + i) = if (ZMod.val x).testBit i = true then 1 else 0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Bits.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-23T17:56:13+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "b0c6b16f96678fba0d31f695cf18f4aef9fca34891abab9e89999a8e1020e98a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 62,
        "start_column": 4,
        "end_line": 62,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\nn k : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : field (F p)\nh_input : Expression.eval env x_var = x\nh_assumptions : ZMod.val x < 2 ^ n\nh_env :\n  env.uses_local_witnesses_completeness\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n    ((Equality.circuit id).to_subcircuit\n          (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n                (fun bit =>\n                  StateT.modifyGet fun s =>\n                    (PUnit.unit,\n                      { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                        withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n                (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                  (Gadgets.ToBits.main._proof_3 p prime))\n                { offset := k + n,\n                  withLength :=\n                    (Operations.empty k).witness n fun eval =>\n                      Vector.ofFn fun i =>\n                        if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n          (x_var,\n            Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x))\n              0)).uses_local_witnesses\n      env\n\u22a2 match\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset,\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength,\n    (Equality.circuit id).to_subcircuit\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n      (x_var, Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0) with\n  | m, Operations.empty .(m), s =>\n    Expression.eval env x_var =\n      Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n  | x, x_1, s =>\n    Circuit.constraints_hold.completeness env\n        (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n              (fun bit =>\n                StateT.modifyGet fun s =>\n                  (PUnit.unit,\n                    { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                      withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n              (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                (Gadgets.ToBits.main._proof_3 p prime))\n              { offset := k + n,\n                withLength :=\n                  (Operations.empty k).witness n fun eval =>\n                    Vector.ofFn fun i =>\n                      if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n      Expression.eval env x_var =\n        Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Bits.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-23T17:56:13+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "7d551fb92a802b27274735eb877a266592b6e82182d7e6a094ec0794db89aabe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 171,
        "start_column": 2,
        "end_line": 171,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case pred\nx n m : \u2115\nh : x < 2 ^ 64\nx' : BitVec 64 := BitVec.ofNat 64 x\ni : \u2115\nhi : i < 64\n\u22a2 (bif decide (i < 64 - m % 64) then (x'.rotateRight n).getLsbD (m % 64 + i)\n    else decide (i < 64) && (x'.rotateRight n).getLsbD (i - (64 - m % 64))) =\n    (x'.rotateRight (n + m)).getLsbD i",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Rotation64/Theorems.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T16:41:17+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "92720eb8e709c6b9c2a459d883b49596c566037fee15e7d4bd4ccd504dc98fe6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 62,
        "start_column": 9,
        "end_line": 62,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "97aa16f9a8af4f414c4128b572e9e6a19fbd44cd675108fc3610e421ab8bd6bc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 80,
        "start_column": 2,
        "end_line": 80,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "dbcc645bb6f878d24f46fc861fa646b55f514e691bb48d6d2a6e90ce49e71266"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 141,
        "start_column": 9,
        "end_line": 141,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "773e371970a6e26ff0c722aaf561c13030bb4f6324f2a983ba22dcedf407e40d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 167,
        "start_column": 2,
        "end_line": 167,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L167"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "191e218863e97da77bda846402aeee2b1610bccf7e0c5c43a204eca965d0a659"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 259,
        "start_column": 2,
        "end_line": 259,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b9 : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1d32f3467a459ffcceaf7a9ece9c7d1d4634a1b70f860a47fbf74f80ea9fe8df"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190 (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "568e916ecdea4ca421599b43c67580d82ecd96d04cbfddd9964b37d6e7c74af6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | \u27e80, isLt\u27e9 => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "0b7d3ffdef348d6460dbe6ea9c5c933d52ed63bc57ad329cc074b4b047402918"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 (do\n      let _ \u2190 liftM (query 0 ())\n      (fun a => (0, \u2191a)) <$> liftM (query 1 ())) =\n    do\n    let y \u2190 liftM (query 1 ())\n    (fun a => (0, \u2191y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "e55c7e36761005fecdda22029eb566653977ef0081f490ea40ead014423c686d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n\u22a2 (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a)))) none =\n    \u2211' (a : Fin 2), 2\u207b\u00b9 * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a_1 => (0, \u2191a)))) none",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "85686bbca3db65ef5eecf09a3bf1f2902a15725422a2e43e2d716625a20b0548"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : \u2115\n\u22a2 (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a => (0, \u2191y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "cef5887c427c4009d983f1657ae8eb6146da2146d00dbc91fce94e009f246f47"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : \u2115) \u2192 unifSpec.domain i \u2192 Fin (i + 1)\n\u22a2 (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun x => (fun a => (0, \u2191a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun y => (fun a => (0, \u2191y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "9be1ab2e775ce8ccacee476def8c044df98511d20fae1aed7ac1bec808072326"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 312,
        "start_column": 2,
        "end_line": 312,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : R[X \u03c3]\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : R[X \u03c3]\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/OracleInterface.lean#L312"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "466ceb2e8a9afb46f22708412c1b38c4d73ff7939f912f485a81ab77ca9b4871"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 351,
        "start_column": 2,
        "end_line": 351,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : R[X]\n\u22a2 \u2203 x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          (statelessOracle spec [fun x => R[X]]\u2092 fun i q => oracle p q).impl) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/OracleInterface.lean#L351"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "87e932ac9c431c5a841c8f23f707b86e2603cef6c3ba446def1e676209a21ce7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Transform/FiatShamir.lean",
        "start_line": 130,
        "start_column": 66,
        "end_line": 130,
        "end_column": 71
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u2074 : VCVCompatible StmtIn\ninst\u271d\u00b3 : (i : Fin n) \u2192 VCVCompatible (pSpec i).2\ninst\u271d\u00b2 : DecidableEq \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\ncompletenessError : \u211d\u22650\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 Reduction.completeness relIn relOut R completenessError \u2192\n    Reduction.completeness relIn relOut R.fiatShamir completenessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Transform/FiatShamir.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-06T23:33:56-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "be469d7e55aea58ba3ae87928d7217273f7ebdcf64b482edbabdf03ecfc51ed2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).1.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "2c5c59d0a0d95590e3f09c94073c3204f524bdb56c398f439802847ab3a2449e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).2.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e147048be72f759311af06deb9b0abe77cef8ecb09fb43af7bd5363022418fe4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pEven \u2208 R\u2983< n\u2984[X]",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "abd32a2462082659bc6718289b097b3e6e39175fd7f9c823b94292b02da7388d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pOdd \u2208 R\u2983< n\u2984[X]",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "07bdac06e3f99ca0f4f31961ed90ff433cb15866257ea17547733ef66bae571d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := generateProof \u03b1 i cache\n          verifyProof \u03b1 i leaves[i] (getRoot \u03b1 cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run \u2218 fun cache =>\n                verifyProof \u03b1 i (leaves.get i) (getRoot \u03b1 cache) (generateProof \u03b1 i cache))).mapM\n          fun {\u03b1_1} q =>\n          match \u03b1_1, q with\n          | .((spec \u03b1).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "d12410bcb99b6142a6622c964a0336184ee8966c679e85fa74b28674f0ee094c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 160,
        "start_column": 2,
        "end_line": 160,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b2 : Fact (Nat.Prime p)\nG\u2081 : Type u_2\ninst\u271d\u00b9 : CommGroup G\u2081\ninst\u271d : IsPrimeOrderWith G\u2081 p\nn : \u2115\ng : G\u2081\na : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1))\n\u22a2 g ^ \u2211 i, a.val ^ \u2191i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (\u2211 x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ \u2191x).val",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/AGM/Basic.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-15T12:13:54+05:30",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3bce7a2bfc31b2c514ed165e702cb2c63d260d7267af7bf882376f27cfa6080a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 171,
        "start_column": 6,
        "end_line": 171,
        "end_column": 11
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u2078 : CommGroup G\np : \u2115\ninst\u271d\u2077 : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG\u2081 : Type u_2\ninst\u271d\u2076 : CommGroup G\u2081\ninst\u271d\u2075 : IsPrimeOrderWith G\u2081 p\ng\u2081 : G\u2081\nG\u2082 : Type u_3\ninst\u271d\u2074 : CommGroup G\u2082\ninst\u271d\u00b3 : IsPrimeOrderWith G\u2082 p\ng\u2082 : G\u2082\nG\u209c : Type u_4\ninst\u271d\u00b2 : CommGroup G\u209c\ninst\u271d\u00b9 : IsPrimeOrderWith G\u209c p\npairing : Additive G\u2081 \u2192\u2097[\u2124] Additive G\u2082 \u2192\u2097[\u2124] Additive G\u209c\nn : \u2115\ninst\u271d : Fact (Nat.Prime p)\nsrs : Vector G\u2081 (n + 1)\ncoeffs : Fin (n + 1) \u2192 ZMod p\nz : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n\u22a2 ((\u2191poly - C (eval z \u2191poly)) / (X - C z)).degree < \u2191(n + 1)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/AGM/Basic.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-15T21:13:06-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "fd50eb520f249e187c4cc17da4b90f04d44f1cc638f8fedce8eb19be7b7e8ee8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 \u2016C\u2016\u2080' \u2260 \u22a4",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3009d57d0e90edd1050f2535b78f9e4f60cfd039f8ccbfbcd16a52cd702b891d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : \u2016C\u2016\u2080' \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => \u0394\u2080(\u2191x.1, \u2191x.2)) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d}",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "5eb12568cfc88f855ce8e1aa5eb37e600543cc30a15d7683127ada27583d4463"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : \u0394\u2080(u, v) \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 \u2016u\u2016\u2080 \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6827f6e2af2e914c7b8e3d932d9fa3520d9cf00c1bf6f10b54d7bb2ce2ea1ebb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : \u2016u\u2016\u2080 \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "26d6446692aed7438cf4ca9710a4b11e615d0a4de6c914dc4cccf5a9cb898451"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 395,
        "start_column": 65,
        "end_line": 395,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - \u2016C.carrier\u2016\u2080 + 1",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L395"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ebbcf02281803aa3f1ad085205ffae9455bf0080876cac3ddf59c6b00037b095"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "55d356c561bd0ef9c2c2a5faee2211f6e5804bd0cb7c371c52cbd652a198bea4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "733709b0b3eb61737241c7d253801f7b75b63c187dd6cddfd2025a376fa75cd4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "dcd0b4dbe6b1ed9578696200172010514927605fccbb9579ca901fdb47a1fe75"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e6da4863dd6a091b176d7d5e3e364886431d4e3fa96abd1856f5e90ad00278f0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 45,
        "start_column": 2,
        "end_line": 45,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MlPoly/Basic.lean#L45"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "b12fa41eae317ce0d229a1c93daf3e26847ad5e949be9003746ab2b952a86baf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 (cons a b).get \u2b1d\u1d65 (cons c d).get = a * c + b.get \u2b1d\u1d65 d.get",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "8451e357d7c05083e9d922a97c7dd9f04b3ddf282eeb79223682bb59b43b4bac"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "8c8b0ec8a96778394f7a99ce84f781374e31d1d000fb791f81eecd6cc0e110aa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "10f21bccf93bda0f6ac9ed3034c4c7b5577881ba3dcc2e0ebffb57492de10fd3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "d26fddddac39506548395e2ff1a06aa68bca512166c25274e0572eea85d2572a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "5f3f7be8e2f427c7689f43fb1d21a72a01141e166f652943090465f67bc7cc44"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (n_1 : \u2115) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "15146d0ea41040b73992e26171f22283cf3638e4a72dedf94668231296528b7e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "868ab7a0efed5031b7e04f4d3b923346a42a39ff6ae28d596c7ba442c267909d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (b : MlPoly R n), 1 \u2022 b = b",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3ad86c7f3f1e3d2be1812433b8cc0eab51171e5e61ea4928992cb723d37d96c6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (x : MlPoly R n), 0 \u2022 x = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "09cec9f7ac47cd375b8365ff39899f9cc3d7b705d6c730af3e224b0a139b1f5a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n \u2294 l.length = n' \u2294 l'.length\n\u22a2 l ++ replicate (n - l.length + (m - n' \u2294 l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' \u2294 l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "23597376809ed0dd1820b5788a632d56392b0458b608e84f3e7f9a01b2e54e35"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l\u2081.matchSize l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "bdc1ceac3ccfafecaec8c45a71ad75e64a4346ea31d0d51338b3fff59aadcb6d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 248,
        "start_column": 2,
        "end_line": 248,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\na : Array \u03b1\nn : \u2115\nunit : \u03b1\ni : \u2115\nh\u271d : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n\u22a2 { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/Math/Basic.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "296879c4b2c8c46b69ee59e9ca35641a471c384e35293d4cae1c440150d74072"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "80b4e920ce514d601f468a11fbffb8057a08720c1ab1e5b35c22c742b79c19d5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 469,
        "start_column": 4,
        "end_line": 469,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L469"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "cd143a88ad9e31e826b00c24f4dd3dc3f8985d99e39765a4385c377b7da471ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 481,
        "start_column": 80,
        "end_line": 481,
        "end_column": 85
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 l.findSumIdx \u2191j < l.length",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L481"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6f78c462297f0e4cd5c48a684c88b578a4359d608848fa8d7f35892be2685179"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : R[X \u03c3]\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3464a6856e1d089e7ce351210c1c0c0fce92da8ae1d61547f7b44e97fd899105"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : R[X Fin n]\n\u22a2 ((sumExceptFirst' n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7d5e20caac6893c3674c953bec16cb092f20fdceb57956d888049701943245c9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : R[X \u03c3]\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191(#({x \u2208 p.vars.pi S | (eval (extendDomain x)) p = 0})) / \u220f i \u2208 p.vars, \u2191(#(S i)) \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1af9daf427587928cdf589f4d82b368bfc21a0a34848ba23a328f93988c922d1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : R[X \u03c3]\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < #(S i)\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "f9c5c4078caaeb5ea9a096da386729d8e7d2602bb881943905c6f04cc44e287f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 422,
        "start_column": 43,
        "end_line": 422,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b1 : Fin n \u2192 Sort u\nl : List \u2115\nn' : \u2115\nl' : List \u2115\nmotive : Fin (n' :: l').sum \u2192 Sort u_1\ncases : (n : \u2115) \u2192 (h : n \u2208 n' :: l') \u2192 (i : Fin n) \u2192 motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : \u00ac\u2191i < n'\n\u22a2 \u2191i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L422"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "411d4e93182014c105091b33e53b3b6d5d799cb23da0f2ec94196ed042240822"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 450,
        "start_column": 16,
        "end_line": 450,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case ind\nn\u271d n : \u2115\nIH : \u2200 m < n, \u2200 {a : Fin m \u2192 \u2115}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n \u2192 \u2115\n\u22a2 (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L450"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "c27e3b013cb8a561d94ba9842b1473e1fc573152e13a028548254969bf650b2a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : UniPoly Q\ni : \u2115\nhi : i < Array.size (p.add_raw q)\n\u22a2 (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "0ac3987f91918316115bcbd5a5190f334718b43eef6d6a44d86861af2e6a0e98"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n\u22a2 p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7feadb1d1938b120c33ecd0497379e7edda0d34dd6a460c54ce4c81cbe63f302"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : Ring R\ninst\u271d : BEq R\np : UniPoly R\n\u22a2 (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) \u2208 TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b9dd5c0fe5236091ea8855dc3155bd98bb0faa5dd1e6a63db924678e498d338e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "21251d59309e749d53a0e3786bd81a88574eeca70048432b2247a03423b05129"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "01133ba8828bec9ecd45b93bb9f3585cbd6dcf7ba219d843d0a8517c8bbfa34e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e9400b844e33b3d7a18d8cd41ed92f1807e43589f763603212d3a8e31e94310f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "896bb0b36b0139fe1ea5349fb71c1901c89cf9e690bbbc785a2cb5fa62768eab"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "33227c9041bfb79809b37c45d9782948363814999aa7b5b1b56115b4ab529a0c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190 Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1037dbfd13e7075f7f2df9ff6acc04c06f4f8eadc10bdcfe1c10621d0293caac"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : \u211d\u22650\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d : x\u271d \u2208 (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x\u271d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b7e7785ddd0e7960be7923733551337f7ec78b3cec30de41c822cf0c03ad97e0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : \u211d\u22650\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n    \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "afc81d98ed41f5f375579541273fc760226c833fd3841423ee3bf424d1fac91e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : \u211d\u22650\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n        \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "33d5b993990508a7aa631aa5108a54a42173506d8d6c9e672e3c2f582ae39edc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : \u2124[X]\nt : \u2124\nf : \u2124[X]\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b86f06e3609ce072183a451094d605a9386986f26397b83d153721c340f42524"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 390,
        "start_column": 2,
        "end_line": 390,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : \u211d\u22650\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L390"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "770f12482cdc9debff51d443ef514dd48ce83a009069228b67fc5e321558fa48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 410,
        "start_column": 75,
        "end_line": 410,
        "end_column": 80
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn StmtOut : Type\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrSoundnessError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrSoundness langIn langOut verifier rbrSoundnessError \u2192 soundness langIn langOut verifier (\u2211 i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L410"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "86a6c29152a515529a53df345ef9924a23cc8bbe29734cbbc53ec7c45ce1de11"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 420,
        "start_column": 2,
        "end_line": 420,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError \u2192\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L420"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e7b53eaa74b194b826fd0dadd533183d29bce9f0eb460d261efe4b0d69ddcbe5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 429,
        "start_column": 82,
        "end_line": 429,
        "end_column": 87
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError \u2192\n    knowledgeSoundness relIn relOut verifier (\u2211 i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L429"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "9403abb6223ce075cfcc6cab81eb0a1b10e8e621d5db2ebc1016d6facae1fdef"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 429,
        "start_column": 2,
        "end_line": 429,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIdx) \u2192 OracleInterface (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIdx) \u2192 OracleInterface (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (P\u2081.append P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    match __discr with\n      | (stmt\u2082, wit\u2082, transcript\u2081) => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        match __discr with\n          | (stmt\u2083, wit\u2083, transcript\u2082) => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L429"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ff389583a3a14493ea88d311f5bd7f386e2094d95b6749f378cd71e1a0b95d48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 459,
        "start_column": 89,
        "end_line": 459,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : \u211d\u22650\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (R\u2081.append R\u2082) (completenessError\u2081 + completenessError\u2082)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L459"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6981c0322199ff97ae32e02f728534c69de6b0a529caba6749265f2f4a372c1d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 489,
        "start_column": 27,
        "end_line": 489,
        "end_column": 32
      },
      "debug_info": {
        "goal": "case h.e'_6.h.h.h.h.e'_2.h.h.e\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nn : Fin (0 + 1) \u2192 \u2115\npSpec : (i : Fin (0 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (0 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (0 + 2) \u2192 Type\nrel : (i : Fin (0 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (0 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (0 + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin 1), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\ne_1\u271d\u00b9 : \u2211 i, n i = n 0\nhe\u271d : ProtocolSpec.compose 0 n pSpec = pSpec 0\nx\u271d : { i // (ProtocolSpec.compose 0 n pSpec i).1 = Direction.V_to_P }\ne_1\u271d : (ProtocolSpec.compose 0 n pSpec \u2191x\u271d).2 = (pSpec 0 \u2191x\u271d).2\n\u22a2 instSampleableChallengeCompose = inst\u271d 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L489"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "46190574d912f3b276b8956b56e28a4bde53f2ec71fd292107be42e3d80131d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 491,
        "start_column": 4,
        "end_line": 491,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nm : \u2115\nih :\n  \u2200 {n : Fin (m + 1) \u2192 \u2115} {pSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)}\n    [inst : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)]\n    {Stmt Wit : Fin (m + 2) \u2192 Type} {rel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop}\n    (R : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ))\n    (completenessError : Fin (m + 1) \u2192 \u211d\u22650),\n    (\u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)) \u2192\n      completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (\u2211 i, completenessError i)\nn : Fin (m + 1 + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (m + 1 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 1 + 2) \u2192 Type\nrel : (i : Fin (m + 1 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (m + 1 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1 + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin (m + 1 + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1 + 1))) (compose (m + 1) n pSpec Stmt Wit R) (\u2211 i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L491"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ae62a720f32f451490cdd962d1e3e6708b6e82e162cee3ef8e6ed17411e9e945"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 495,
        "start_column": 2,
        "end_line": 495,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5R\u2983\u2264 \u2191deg\u2984[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : \u2191(transcript 0) \u2208 R\u2983\u2264 \u2191deg\u2984[X]\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) \u2191(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L495"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b811112245ecb5dca87a20a0fd136ace45bc965f2f942d4af4cba61eb86bd5ce"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 513,
        "start_column": 57,
        "end_line": 513,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 (do\n      let x \u2190\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                \u27e80, \u22ef\u27e9\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn\u271d)).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)\n      let a \u2190 liftM (query (Sum.inr \u27e81, \u22ef\u27e9) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  \u27e81, \u22ef\u27e9 x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L513"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3ac088511b47029a26d9c4c323340dc5ebdf616a1f950c9b6a9299018b5b40d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 522,
        "start_column": 2,
        "end_line": 522,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) \u2208\n        (run ({ target := target, challenges := challenge }, oStmt) witIn\u271d\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support \u2192\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | \u27e8poly, property\u27e9 =>\n            \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x \u2218 Fin.cast \u22ef)) poly =\n              target) \u2227\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L522"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "a7f2757e01506bedc5df9fa6f778328519644a12cfefe1cf14d7d1406ec143f0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 571,
        "start_column": 4,
        "end_line": 571,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R\u271d : Type\ninst\u271d\u2075 : CommSemiring R\u271d\nn\u271d deg\u271d m\u271d : \u2115\nD\u271d : Fin m\u271d \u21aa R\u271d\n\u03b9\u271d : Type\noSpec\u271d : OracleSpec \u03b9\u271d\ninst\u271d\u2074 : VCVCompatible R\u271d\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni\u271d : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  \u00acrelation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i),\n    (a, b) \u2208 (Verifier.run stmt tr (verifier R n deg D oSpec i)).support \u2192\n      \u2200 (x : Unit), \u00acrelation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7eb57337a4a53afb95245e7e428de73d21423347faef6a472bf1ca807546d58b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 646,
        "start_column": 42,
        "end_line": 646,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L646"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "155192ee144b7a2eca0dac294e33382594c03befc133f75acbedddc961502efa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 62,
        "start_column": 9,
        "end_line": 62,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => ProtocolSpec.Message (SendWitness.pSpec WitEquiv) j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/ProofSystem/Components.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "784b6deb0f8542929b675894510cf8d0c997511b296f80bd6a8fcab178f27723"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 80,
        "start_column": 2,
        "end_line": 80,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (SendWitness.toRelOut Statement Witness \u03b9\u209b\u1d62 OStatement WitEquiv equiv relIn)\n    (SendWitness.oracleReduction \u03b9 oSpec Statement Witness \u03b9\u209b\u1d62 OStatement inst\u271d\u00b2 WitEquiv inst\u271d\u00b9 equiv)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/ProofSystem/Components.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "9b2bddb1b99d24884502442e9668c8e3652acf16291dd3bac108e5eae709b534"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 141,
        "start_column": 9,
        "end_line": 141,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => ProtocolSpec.Message (SameOracle.pSpec \u03b9\u209b\u1d62 inst\u271d OStatement) j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/ProofSystem/Components.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "21b5bede449e40af8161705d6f24cae3ce83f88caf856a62cdd69fed456fe3a3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 167,
        "start_column": 2,
        "end_line": 167,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (SameOracle.relOut \u03b9\u209b\u1d62 inst\u271d\u00b9 OStatement)\n    (SameOracle.oracleReduction \u03b9 oSpec Statement \u03b9\u209b\u1d62 inst\u271d\u00b9 OStatement inst relComp)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/ProofSystem/Components.lean#L167"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "a2951f1cf9f047b7d8ba86a411f8584da9be062e492c56431be7cf2684bb065b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 259,
        "start_column": 2,
        "end_line": 259,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b9 : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (RandomQuery.relIn OStatement) (RandomQuery.relOut OStatement inst\u271d\u00b9)\n    (RandomQuery.oracleReduction \u03b9 oSpec OStatement inst\u271d\u00b9)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/ProofSystem/Components.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "cfadb78bc2aa5ea2f96063ba1a6e66a58a2ecd3f26a68894e603d5fe2b7d7fb5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190\n        (simulateQ loggingOracle\n              (Prover.runToRound n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut inst\u271d (Fin.last n) stmt wit\n                reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut inst\u271d stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "72a2b26a721b954a8d6aea5671aa8fc97a23248842e4209f9236990abc0f22f6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "e678055c98a7d3183490b77bd5624c156883823c1caf3148e950c6f6fa2fd8a2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 312,
        "start_column": 2,
        "end_line": 312,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : MvPolynomial \u03c3 R\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : MvPolynomial \u03c3 R\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/OracleInterface.lean#L312"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "ffe33235ffc6520afbc6221bda8cdf51421ed0895cac591f457d915593076521"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 351,
        "start_column": 2,
        "end_line": 351,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : Polynomial R\n\u22a2 \u2203 x,\n    ((OptionT.run (List.mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          QueryImpl.impl\n            (@SimOracle.statelessOracle Unit \u03b9 spec\n              (OracleInterface.toOracleSpec Unit (fun x => Polynomial R) fun i => instOracleInterfacePolynomial R inst\u271d)\n              fun i q => OracleInterface.oracle (Polynomial R) (instOracleInterfacePolynomial R inst\u271d) p q)) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/OracleInterface.lean#L351"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "dbb46c46b4159b39e7f9e80a7c923244961aea51522816174f74d52af54485d3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Transform/FiatShamir.lean",
        "start_line": 130,
        "start_column": 66,
        "end_line": 130,
        "end_column": 71
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u2074 : VCVCompatible StmtIn\ninst\u271d\u00b3 : (i : Fin n) \u2192 VCVCompatible (pSpec i).2\ninst\u271d\u00b2 : DecidableEq \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\ncompletenessError : NNReal\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 Reduction.completeness relIn relOut R completenessError \u2192\n    Reduction.completeness relIn relOut (Reduction.fiatShamir n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut R)\n      completenessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Transform/FiatShamir.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-06T23:33:56-04:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "1c4d7863a590d173d42ed31d81ff1fb1b9c47a91613ca65894814442ee3811e6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 103,
        "start_column": 2,
        "end_line": 103,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : Polynomial R\n\u22a2 (FRI.splitEvenOdd R inst\u271d\u00b9 p).1.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/CommitmentScheme/Fold.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "75668f05c0e0c44c91f4b3b8d9e5bf4f28e1c9a79f3bfbcc2fe60f95d7d77499"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 107,
        "start_column": 2,
        "end_line": 107,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : Polynomial R\n\u22a2 (FRI.splitEvenOdd R inst\u271d\u00b9 p).2.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/CommitmentScheme/Fold.lean#L107"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "ec1f819643adacc68a124c928dc8ff6a985c4da1d8bf6dabe3ab8365b5f495ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 119,
        "start_column": 11,
        "end_line": 119,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5(Polynomial.degreeLT R (2 * n))\npEven pOdd : Polynomial R\n\u22a2 pEven \u2208 Polynomial.degreeLT R n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/CommitmentScheme/Fold.lean#L119"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "d9071e88f3ed5491ff33a081a065f0943541960cdee726b8a69e9115193483bb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 119,
        "start_column": 26,
        "end_line": 119,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5(Polynomial.degreeLT R (2 * n))\npEven pOdd : Polynomial R\n\u22a2 pOdd \u2208 Polynomial.degreeLT R n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/CommitmentScheme/Fold.lean#L119"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "3fcd5a765e9c46b38761be37a946ca7146b67fc21cb3788430a7f1662d6e619e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (@MerkleTree.implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 MerkleTree.buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := MerkleTree.generateProof \u03b1 n i cache\n          MerkleTree.verifyProof \u03b1 inst\u271d\u00b2 n i leaves[i] (MerkleTree.getRoot \u03b1 n cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (MerkleTree.buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (@Function.comp (MerkleTree.Cache \u03b1 (n + 1))\n                (OptionT (FreeMonad (OracleQuery (MerkleTree.spec \u03b1))) PUnit.{1})\n                (FreeMonad (OracleQuery (MerkleTree.spec \u03b1)) (Option PUnit.{1})) OptionT.run fun cache =>\n                MerkleTree.verifyProof \u03b1 inst\u271d\u00b2 (n + 1) i (leaves.get i) (MerkleTree.getRoot \u03b1 (n + 1) cache)\n                  (MerkleTree.generateProof \u03b1 (n + 1) i cache))).mapM\n          fun {\u03b1_1} q =>\n          @MerkleTree.implement_with_function.match_1 \u03b1 (fun \u03b1_2 q => StateT Unit (OracleComp []\u2092) \u03b1_2) \u03b1_1 q\n            fun i left right => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "0d35703155247dcd333e0d2f1c03086bc474ccc46d633a145d623d84035514e7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 160,
        "start_column": 2,
        "end_line": 160,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b2 : Fact (Nat.Prime p)\nG\u2081 : Type u_2\ninst\u271d\u00b9 : CommGroup G\u2081\ninst\u271d : @IsPrimeOrderWith G\u2081 CommGroup.toGroup p inst\u271d\u00b2\nn : \u2115\ng : G\u2081\na : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1))\n\u22a2 g ^ \u2211 i, a.val ^ \u2191i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (\u2211 x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ \u2191x).val",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/AGM/Basic.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-15T12:13:54+05:30",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "9d9c1f31baca7f09390a3780d0bd62b2020651388bbfad6c3216ee6a5f3b2b76"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 171,
        "start_column": 6,
        "end_line": 171,
        "end_column": 11
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u2078 : CommGroup G\np : \u2115\ninst\u271d\u2077 : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG\u2081 : Type u_2\ninst\u271d\u2076 : CommGroup G\u2081\ninst\u271d\u2075 : @IsPrimeOrderWith G\u2081 CommGroup.toGroup p inst\u271d\u2077\ng\u2081 : G\u2081\nG\u2082 : Type u_3\ninst\u271d\u2074 : CommGroup G\u2082\ninst\u271d\u00b3 : @IsPrimeOrderWith G\u2082 CommGroup.toGroup p inst\u271d\u2077\ng\u2082 : G\u2082\nG\u209c : Type u_4\ninst\u271d\u00b2 : CommGroup G\u209c\ninst\u271d\u00b9 : @IsPrimeOrderWith G\u209c CommGroup.toGroup p inst\u271d\u2077\npairing : Additive G\u2081 \u2192\u2097[\u2124] Additive G\u2082 \u2192\u2097[\u2124] Additive G\u209c\nn : \u2115\ninst\u271d : Fact (Nat.Prime p)\nsrs : Vector G\u2081 (n + 1)\ncoeffs : Fin (n + 1) \u2192 ZMod p\nz : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n\u22a2 ((\u2191poly - C (eval z \u2191poly)) / (X - C z)).degree < \u2191(n + 1)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/AGM/Basic.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-15T21:13:06-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "a4e9449084d8d274e16190ca3b4d4be76f00362041712041b0bfa776aa63a508"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 @codeDist' n inst\u271d\u00b2 R inst\u271d\u00b9 C inst\u271d \u2260 \u22a4",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "1f1d1e69ce32d7dac4b6f856766a568340c8620fe3d258240a1ea856a0afad9b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : @codeDist' n inst\u271d\u00b2 R inst\u271d\u00b9 C inst\u271d \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => hammingDist \u2191x.1 \u2191x.2) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 hammingDist u v \u2264 d}",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "1f747519b934fd6264cc159a89fc89068927f1b6a3ae37cf444d2740aa3bc873"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : hammingDist u v \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 hammingNorm u \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "60283f40beccba0c91b12dde18278de2741ce46f6fca3433337afbdef733641f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : hammingNorm u \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 hammingDist u v \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "f8fb1d097f28a9c4f5b2c2deab8c4cfa5674ccf07ff682f6a5f8fd5447a2b3b7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 395,
        "start_column": 65,
        "end_line": 395,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - @codeDist n inst\u271d\u00b3 R inst\u271d\u00b2 C.carrier + 1",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/CodingTheory/Basic.lean#L395"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "7844886fb238e2408d3a68d498adf540b70da379ca4c75d69dab86cbc0b47e70"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse (@MlPoly.ofSpec R inst\u271d n) (@MlPoly.toSpec R inst\u271d n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "295a1941b7eec20da9d73a4945d70322fb78ee0afd812359f0b84d09b3915257"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse (@MlPoly.ofSpec R inst\u271d n) (@MlPoly.toSpec R inst\u271d n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "064000e9fb2db42f0b31884591023dd5b88aaee1071e4b9c679b47fa1d550948"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 @MlPoly.toSpec R inst\u271d n (p + q) = @MlPoly.toSpec R inst\u271d n p + @MlPoly.toSpec R inst\u271d n q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "12479a0942e6ed0ab8681495f5e87c1cb14db6d1a3a7daafe8261cd07e5ab099"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191(@MlPoly.toSpec R inst\u271d\u00b9 n p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "1c1d55a41f4499d4ab626e1519e3908f751b4453f82d6e9d4bed385472b76bd9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 get (@Vector.cons R n a b) \u2b1d\u1d65 get (@Vector.cons R n c d) = a * c + b.get \u2b1d\u1d65 d.get",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MlPoly/Basic.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "ca9024df12bbb8d14b6115ee7671eb7690a747701ff9070f32fc3325228ec977"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 121,
        "start_column": 18,
        "end_line": 121,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (a : R), @HSMul.hSMul R (@MlPoly R n) (@MlPoly R n) instHSMul a 0 = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MlPoly/Basic.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "e4cd21697c3ad69961983df048f0821219a5b5c9a63f19fc01b635c6b006b147"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : max n l.length = max n' l'.length\n\u22a2 l ++ replicate (n - l.length + (m - max n' l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - max n' l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/Math/Basic.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "d8d6f9949725f9e4b448f8016efbe45c3d4cf07fc9c0a5d5663727899853898c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 203,
        "start_column": 5,
        "end_line": 203,
        "end_column": 10
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (@fun x => @List.matchSize_eq_iff_forall_eq.match_1 \u03b1 (fun x => Prop) x fun x y => x = y)\n      (@List.matchSize \u03b1 l\u2081 l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/Math/Basic.lean#L203"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "bb3b56deebc0a584fdc93c5c7af104811e468abbabeb95203b82b7b19c587b4a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp (@Array.getLast \u03b1 (popWhile p as) h) = true",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/Math/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "dd3ba287cfb71ef9d258503b5f646030002a0195d48f5e1094714b3c5d5d431b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 460,
        "start_column": 4,
        "end_line": 460,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, @List.findSum \u2115 Nat.instAddMonoid Nat.instPreorder Nat.decLt (a :: l') j = some n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/Math/Basic.lean#L460"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "36f6a9198ff6f1d74d3df957cf3619658bcf4480fd96e1fe0734c9b7e4e90a45"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 472,
        "start_column": 80,
        "end_line": 472,
        "end_column": 85
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 @List.findSumIdx \u2115 Nat.instAddMonoid Nat.instPreorder Nat.decLt l \u2191j < l.length",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/Math/Basic.lean#L472"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "db70666ffcd82d383c2826707cb194059a51e58c89d9c8175dc2cb50cceb53a4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : MvPolynomial \u03c3 R\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "91ab7f3a53e375af5c8b4462fc155424cf0451d9e3b7919cc5703273d317ab62"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : MvPolynomial (Fin n) R\n\u22a2 ((@MvPolynomial.sumExceptFirst' R inst\u271d n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "871f4490de7bc3434814f61870d37cd1f7bf04265bd9fe1c38bbdd45657aa5ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : MvPolynomial \u03c3 R\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191{x \u2208 p.vars.pi S | (eval (@MvPolynomial.Function.extendDomain \u03c3 R inst\u271d\u2074 MulZeroClass.toZero p.vars x)) p = 0}.card /\n      \u220f i \u2208 p.vars, \u2191(S i).card \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(S i).card",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "47fd985b6f668429422b44eefa727dd8e80cc0b9704af5e8956e5e0f3cd58751"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : MvPolynomial \u03c3 R\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < (S i).card\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "81d8e4b904777b7e898c5031d2c70a49f81270f2a6b405640c58c79ac8a69c90"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : @UniPoly Q\ni : \u2115\nhi : i < Array.size (@UniPoly.add_raw Q inst\u271d p q)\n\u22a2 (p ++ Array.replicate (Array.size q - Array.size p) 0)[i] +\n      (q ++ Array.replicate (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "495a5a801ce782dca6bd3e63ef3c39daf34e2757746d335f0ef45adf08531e8c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : @UniPoly Q\nhpq : p ++ Array.replicate (Array.size q - Array.size p) 0 = q ++ Array.replicate (Array.size p - Array.size q) 0\nhqr : q ++ Array.replicate (Array.size r - Array.size q) 0 = r ++ Array.replicate (Array.size q - Array.size r) 0\n\u22a2 p ++ Array.replicate (Array.size r - Array.size p) 0 = r ++ Array.replicate (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "6510f687bfaa96f02900764aec9bb9261ea2a17ebda56a234eecbc0f48c32f38"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (a.2.2.1, (P.toProverOut.1 a.2.1).1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction\n        (pure\n          (default,\n            P.input\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                witIn),\n            stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a =>\n        (TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (stmtIn, (P.toProverOut.1 a.2).1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (witIn, (P.toProverOut.1 a.2).2),\n          a.1)) <$>\n      Fin.induction\n        (pure\n          (default,\n            P.input\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "6191eb3efe7698f2b8b7c45dfe91b20e2c5bfde9365be61905ab9ec85690224f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190\n        Prover.run\n            (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              stmtIn)\n            (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n              (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n            R.prover\n      (fun a_1 =>\n            ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                  (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                  (stmtIn, a.1),\n                TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                  (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                  (witIn, a.2.1)),\n              a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a =>\n                        TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                            WitOut' data)\n                          (stmtIn, a)) <$>\n                      R.verifier.verify\n                        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                            WitOut' data)\n                          stmtIn)\n                        transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190\n      Prover.run\n          (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            stmtIn)\n          (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n          R.prover\n    (fun a_1 =>\n          ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (stmtIn, a.1),\n              TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (witIn, a.2.1)),\n            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              (stmtIn, a_1),\n            a.2.2)) <$>\n        (Verifier.run\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              a.2.2 R.verifier).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "9967290b1a957e641b974c84c66bfb9d02ad9ecbe29579d8aab30ffaf2a94d5d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190\n        Prover.runWithLog stmtIn witIn\n            (Prover.transport n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a =>\n                            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                                WitOut' data)\n                              (stmtIn, a)) <$>\n                          R.verifier.verify\n                            (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                                WitOut' data)\n                              stmtIn)\n                            transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190\n      Prover.runWithLog\n          (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            stmtIn)\n          (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n          R.prover\n    (fun a_1 =>\n          ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (stmtIn, a.1),\n              TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (witIn, a.2.1)),\n            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              (stmtIn, a_1.1),\n            a.2.2.1, a.2.2.2, a_1.2)) <$>\n        (simulateQ loggingOracle\n                (Verifier.run\n                  (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                    (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n                      data)\n                    stmtIn)\n                  a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "2d077b1894116db43b4d1afe068b9327f8cd2a2293203150276b27cd82bf1c3e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : NNReal\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227\n          prvStmtOut =\n            stmtOut|run\n        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          stmtIn)\n        (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n          (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          witIn)\n        R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d :\n  x\u271d \u2208\n    (run\n        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          stmtIn)\n        (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n          (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          witIn)\n        R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n              (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n                relIn' relOut relOut' data))\n            (stmtIn, a.1.1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n              (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n                relIn' relOut relOut' data))\n            (witIn, a.1.2)),\n        TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          (stmtIn, a.2.1),\n        a.2.2))\n    x\u271d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "740f1761f1aa4f2bf105f0128cd06a03fc57bfd5ecffd13feb90d5dd9b00186c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : NNReal\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn\n        { prover := WitOut,\n          verifier :=\n            Verifier.transport n pSpec \u03b9 oSpec StmtIn StmtOut StmtIn' StmtOut'\n              (TransportDataSound.toTransportStatement StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\n                data)\n              V }] \u2264\n    \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "671b58a10953f8eb409ea10a6ee229f826c4ec19aa660042642a5b6a4140e1ed"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : NNReal\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover,\n              verifier :=\n                Verifier.transport n pSpec \u03b9 oSpec StmtIn StmtOut StmtIn' StmtOut'\n                  (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n                    (TransportDataKnowledgeSound.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                      WitOut' relIn relIn' relOut relOut' data))\n                  V }] \u2264\n        \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "7bb912b769f802385a72600e2dce3350fdc022afeb14ab14e4993c801a75e0d1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : Polynomial \u2124\nt : \u2124\nf : Polynomial \u2124\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "8916d2ff744c23eb8aba6a04280eb512e65b3a35899b2e1e23ba6e96609fbbf6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 390,
        "start_column": 2,
        "end_line": 390,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : NNReal\nhLt : knowledgeError < 1\nextractor :\n  @Reduction.StraightlineExtractor n pSpec (\u03b9 \u2295 { i // (pSpec i).1 = Direction.V_to_P }) (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    StmtIn WitIn StmtOut WitOut\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (@extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Security/Basic.lean#L390"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "cebfd84654c5625d4a1c3be7a35ebcf16cf163b5afdc5cf17f34db5c34ca1419"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 404,
        "start_column": 2,
        "end_line": 404,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIdx) \u2192 OracleInterface (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIdx) \u2192 OracleInterface (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (Prover.append m n pSpec\u2081 pSpec\u2082 \u03b9 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 P\u2081 P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    @Prover.append_run.match_1 m pSpec\u2081 Stmt\u2082 Wit\u2082\n        (fun __discr =>\n          OracleComp (oSpec ++\u2092 [(pSpec\u2081 ++\u209a pSpec\u2082).Challenge]\u2092) (Stmt\u2083 \u00d7 Wit\u2083 \u00d7 (pSpec\u2081 ++\u209a pSpec\u2082).FullTranscript))\n        __discr fun stmt\u2082 wit\u2082 transcript\u2081 => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        @Prover.append_run.match_1 n pSpec\u2082 Stmt\u2083 Wit\u2083\n            (fun __discr =>\n              OracleComp (oSpec ++\u2092 [(pSpec\u2081 ++\u209a pSpec\u2082).Challenge]\u2092)\n                (Stmt\u2083 \u00d7 Wit\u2083 \u00d7 (pSpec\u2081 ++\u209a pSpec\u2082).FullTranscript))\n            __discr fun stmt\u2083 wit\u2083 transcript\u2082 => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "607e7ba2272344a504e98fb9493f50690d76adef3da9a8822f2a8ebd3e47f810"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 434,
        "start_column": 89,
        "end_line": 434,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : NNReal\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (Reduction.append m n pSpec\u2081 pSpec\u2082 \u03b9 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 R\u2081 R\u2082)\n    (completenessError\u2081 + completenessError\u2082)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L434"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "43d87b5229c5a50518142eb849564cda22c9d3ce4ffc128cf01a3d880aa01350"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 464,
        "start_column": 27,
        "end_line": 464,
        "end_column": 32
      },
      "debug_info": {
        "goal": "case h.e'_6.h.h.h.h.e'_2.h.h.e\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nn : Fin (0 + 1) \u2192 \u2115\npSpec : (i : Fin (0 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (0 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (0 + 2) \u2192 Type\nrel : (i : Fin (0 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (0 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (0 + 1) \u2192 NNReal\nh : \u2200 (i : Fin 1), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\ne_1\u271d\u00b9 : \u2211 i, n i = n 0\nhe\u271d : compose 0 n pSpec = pSpec 0\nx\u271d : { i // (compose 0 n pSpec i).1 = Direction.V_to_P }\ne_1\u271d : (compose 0 n pSpec \u2191x\u271d).2 = (pSpec 0 \u2191x\u271d).2\n\u22a2 instSampleableChallengeCompose 0 n pSpec inst\u271d = inst\u271d 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "cadff7424670e792ebd6e7a2af1ca072b4c4a759e66f725518088139ebe197f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 466,
        "start_column": 4,
        "end_line": 466,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nm : \u2115\nih :\n  \u2200 {n : Fin (m + 1) \u2192 \u2115} {pSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)}\n    [inst : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)]\n    {Stmt Wit : Fin (m + 2) \u2192 Type} {rel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop}\n    (R : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ))\n    (completenessError : Fin (m + 1) \u2192 NNReal),\n    (\u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)) \u2192\n      completeness (rel 0) (rel (Fin.last (m + 1))) (Reduction.compose \u03b9 oSpec m n pSpec Stmt Wit R)\n        (\u2211 i, completenessError i)\nn : Fin (m + 1 + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (m + 1 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 1 + 2) \u2192 Type\nrel : (i : Fin (m + 1 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (m + 1 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1 + 1) \u2192 NNReal\nh : \u2200 (i : Fin (m + 1 + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1 + 1))) (Reduction.compose \u03b9 oSpec (m + 1) n pSpec Stmt Wit R)\n    (\u2211 i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L466"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "2b069d09a5b23a5839fad32710fba087cb384ba472edbdff2565bea5a084c5c6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/ProtocolSpec.lean",
        "start_line": 354,
        "start_column": 2,
        "end_line": 354,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\nT : (i : Fin (m + 1)) \u2192 (pSpec i).FullTranscript\ni : Fin m\n\u22a2 @Fin.dfoldl (\u2191i + 1)\n      (fun i_1 =>\n        FullTranscript\n          (ProtocolSpec.compose (\u2191i_1)\n            (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef n))\n            (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef pSpec))))\n      (fun i_1 acc =>\n        @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n          (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)) +\n            n (Fin.castLE \u22ef i_1.succ))\n          (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1) i_2)))\n          (ProtocolSpec.append\n            (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)))\n            (n (Fin.castLE \u22ef i_1.succ))\n            (ProtocolSpec.compose (\u2191i_1)\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef n))\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n            (pSpec (Fin.castLE \u22ef i_1.succ)))\n          (ProtocolSpec.compose (\u2191i_1 + 1)\n            (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef n))\n            (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n          (ProtocolSpec.FullTranscript.compose._proof_41 (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n) i_1)\n          (ProtocolSpec.FullTranscript.compose._proof_44 (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n)\n            (Fin.take (\u2191i + 1 + 1) \u22ef pSpec) i_1)\n          (ProtocolSpec.FullTranscript.append\n            (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)))\n            (n (Fin.castLE \u22ef i_1.succ))\n            (ProtocolSpec.compose (\u2191i_1)\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef n))\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n            (pSpec (Fin.castLE \u22ef i_1.succ)) acc (T (Fin.castLE \u22ef i_1.succ))))\n      (T (Fin.castLE \u22ef 0)) =\n    @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n      (\u2211 i_1, n (Fin.castLE \u22ef i_1) + n i.succ) (\u2211 i_1, n (Fin.castLE \u22ef i_1))\n      (ProtocolSpec.append (\u2211 i_1, n (Fin.castLE \u22ef i_1)) (n i.succ)\n        (ProtocolSpec.compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)) (pSpec i.succ))\n      (ProtocolSpec.compose (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n) (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)) \u22ef \u22ef\n      (ProtocolSpec.FullTranscript.append (\u2211 i_1, n (Fin.castLE \u22ef i_1)) (n i.succ)\n        (ProtocolSpec.compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)) (pSpec i.succ)\n        (@Fin.dfoldl (\u2191i)\n          (fun i_1 =>\n            FullTranscript\n              (ProtocolSpec.compose (\u2191i_1)\n                (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef pSpec))))\n          (fun i_1 acc =>\n            @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n              (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)) +\n                n (Fin.castLE \u22ef i_1.succ))\n              (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1) i_2)))\n              (ProtocolSpec.append\n                (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)))\n                (n (Fin.castLE \u22ef i_1.succ))\n                (ProtocolSpec.compose (\u2191i_1)\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1)\n                    (Fin.take (\u2191i + 1) \u22ef pSpec)))\n                (pSpec (Fin.castLE \u22ef i_1.succ)))\n              (ProtocolSpec.compose (\u2191i_1 + 1)\n                (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef n))\n                (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef pSpec)))\n              (ProtocolSpec.FullTranscript.compose._proof_41 (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) i_1)\n              (ProtocolSpec.FullTranscript.compose._proof_44 (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)\n                i_1)\n              (ProtocolSpec.FullTranscript.append\n                (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)))\n                (n (Fin.castLE \u22ef i_1.succ))\n                (ProtocolSpec.compose (\u2191i_1)\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1)\n                    (Fin.take (\u2191i + 1) \u22ef pSpec)))\n                (pSpec (Fin.castLE \u22ef i_1.succ)) acc (T (Fin.castLE \u22ef i_1.succ))))\n          (T (Fin.castLE \u22ef 0)))\n        (T i.succ))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/OracleReduction/Composition/Sequential/ProtocolSpec.lean#L354"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-25T11:02:32+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "280a02d5e655f500bca6ce9b16a384e7a6f5c696ca3ce3c33c201c0adca73ff7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 492,
        "start_column": 2,
        "end_line": 492,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Sumcheck.Spec.Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b9 n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5(degreeLE R \u2191deg)), (Direction.V_to_P, R)]\nx : getType (Sumcheck.Spec.pSpec R inst\u271d\u00b9 deg) 0\nhp_i : \u2191(transcript 0) \u2208 degreeLE R \u2191deg\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (List.mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = Sumcheck.Spec.Statement.target R n i.castSucc stmt.1 then pure () else failure\n                    (fun a =>\n                          Sumcheck.Spec.Statement.mk R n i.succ a\n                            (Fin.snoc (Sumcheck.Spec.Statement.challenges R n i.castSucc stmt.1) (transcript 1))) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a =>\n            (a, fun i_1 =>\n              @Prod.snd (Sumcheck.Spec.Statement R n i.castSucc)\n                ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b9 n deg i) stmt i_1)) <$>\n          a.getM) =\n    (fun a =>\n        (Sumcheck.Spec.Statement.mk R n i.succ (Polynomial.eval (transcript 1) \u2191(transcript 0))\n            (Fin.snoc (Sumcheck.Spec.Statement.challenges R n i.castSucc stmt.1) (transcript 1)),\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = Sumcheck.Spec.Statement.target R n i.castSucc stmt.1 then pure ()\n      else failure",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L492"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "673854bf9b1bc2d384fc8577fee6f1df17effa0b186f4280a3aaa79a6b12da5c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 510,
        "start_column": 57,
        "end_line": 510,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast (Sumcheck.Spec.relation._proof_12 n i.castSucc)))\n        \u2191(@oStmt 0) =\n    target\n\u22a2 ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                verifier :=\n                  Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.sendMessage\n        \u27e80, \u22ef\u27e9\n        ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                        i }.toReduction.prover.toProverIn.input\n          (Sumcheck.Spec.Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i)) Unit\n          ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.PrvState\n            0)\n          (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt) witIn\u271d)).neverFails \u2227\n    \u2200 (a : Polynomial R) (b : a \u2208 degreeLE R \u2191deg)\n      (b_1 :\n        { prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                  verifier :=\n                    Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.PrvState\n          1),\n      (\u27e8a, b\u27e9, b_1) \u2208\n          ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                      verifier :=\n                        Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                          i }.toReduction.prover.sendMessage\n              \u27e80, \u22ef\u27e9\n              ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                          verifier :=\n                            Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                              i }.toReduction.prover.toProverIn.input\n                (Sumcheck.Spec.Statement R n i.castSucc \u00d7\n                  ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i))\n                Unit\n                ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                          verifier :=\n                            Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                              i }.toReduction.prover.PrvState\n                  0)\n                (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt) witIn\u271d)).support \u2192\n        \u2200 (x : R),\n          (Verifier.run (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt)\n              (Transcript.snoc 2 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg) 1 x\n                (Transcript.snoc 2 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg) 0 \u27e8a, b\u27e9\n                  (@default (Transcript 0 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg)) Unique.instInhabited)))\n              { prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                        i }.toReduction.verifier).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L510"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "952572f3c20e8c3283db27e85a9c1b9d9b2866f08c5198388109212d864924fd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 643,
        "start_column": 42,
        "end_line": 643,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (Sumcheck.Spec.Combined.relIn R inst\u271d\u00b9 n deg m D)\n    (Sumcheck.Spec.Combined.relOut R inst\u271d\u00b9 n deg) (Sumcheck.Spec.Combined.reduction R inst\u271d\u00b9 n deg)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L643"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "97670c969c9c6375b8ade886ebcfb7de32a8766bfd2d34afc3d623c0935e808e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/OneTimePad.lean",
        "start_line": 36,
        "start_column": 2,
        "end_line": 36,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\nthis : \u2200 (m \u03c3 : BitVec n), {x | \u03c3 = x ^^^ m} = {\u03c3 ^^^ m}\n\u22a2 (oneTimePad n).OneTimeUniformCiphers",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/OneTimePad.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-06T08:17:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "40141c69b50bcaf588ae726e748bcf5d439218d2929fc57d821fd2cfda75bcb8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/OneTimePad.lean",
        "start_line": 35,
        "start_column": 73,
        "end_line": 35,
        "end_column": 78
      },
      "debug_info": {
        "goal": "n : \u2115\n\u22a2 \u2200 (m \u03c3 : BitVec n), {x | \u03c3 = x ^^^ m} = {\u03c3 ^^^ m}",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/OneTimePad.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "b0064ce11301249cb79e5a96498176ea5c8f5550f72812106d3f08f90b505f39"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 432,
        "start_column": 2,
        "end_line": 432,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : (uniformRegevAsymmEnc n m p \u03c7 he).IND_CPA_Adv\n\u22a2 |[=true|(regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).exec do\n              let b \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).lift_probComp ($\u1d57Bool)\n              let __discr \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).keygen\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal -\n        [=false|(regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).exec do\n              let b \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).lift_probComp ($\u1d57Bool)\n              let __discr \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).keygen\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              match __discr with\n                | (m\u2081, m\u2082, st) =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt (A, u) m\u2082\n                    __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              match __discr with\n                | (m\u2081, m\u2082, st) =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt (A, u) m\u2082\n                    __do_jp y].toReal| +\n      |[=true|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        match __discr with\n                          | (m\u2081, m\u2082, st) =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt Au m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt Au m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp \u03c7 \u22ef)\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        match __discr with\n                          | (m\u2081, m\u2082, st) =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt Au m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt Au m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp \u03c7 \u22ef)\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/Regev.lean#L432"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "cb6bb8cef7c557c8e1b9df6d3ccfab038ddabdc36f482c13b3b45290c88f69b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 493,
        "start_column": 2,
        "end_line": 493,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : (uniformRegevAsymmEnc n m p \u03c7 he).IND_CPA_Adv\n\u22a2 |(2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal -\n        (2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal| +\n      |[=true|do\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let r2 \u2190 $\u1d57Vector (Fin 2) m\n              let b \u2190 $\u1d57Bool\n              let A_1 \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u_1 \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A_1, u_1)\n              (fun a => decide (b = a)) <$>\n                  adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) r2).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) r2).get)].toReal -\n          [=true|do\n              let x \u2190 $\u1d57Vector (Fin p) n\n              let y \u2190 $\u1d57Fin p\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (x, y)].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/Regev.lean#L493"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "c367405be8e308e25b07e8d918d7db5f991bd7b531c948e41879df5213381735"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6ba3c20d2e53e2012f378e7ad10453532f041ccb08be37c98021fc8d77f70b29"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "7016aca2232422e6303fba2cd4fdf1c18182245bec17b4e3aaee1ba20bc8a3a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6c0ad4855367097a6ecd0242388d05073605f4230745e68f05ed87bd82bae9e8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 90,
        "start_column": 4,
        "end_line": 90,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng\u2081 : G\n\u22a2 [fun x =>\n      x.1 =\n        true|(simulateQ ((elgamalAsymmEnc G P).IND_CPA_queryImpl' (x, g\u2081 +\u1d65 x) true) (adversary (x, g\u2081 +\u1d65 x))).run \u2205] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let b' \u2190\n        simulateQ (idOracle unifSpec ++\u209b\u2092 QueryImpl.ofFn fun x_1 => pure (c +\u1d65 x, x_1.1 * (c +\u1d65 g\u2081 +\u1d65 x)))\n            (adversary (x, g\u2081 +\u1d65 x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/HHS_Elgamal.lean#L90"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "5207334ea127e72fbba9493656cbaab04217c144d5a28aaca33cfedeed83f508"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng\u2081 : G\n\u22a2 [fun x =>\n      x.1 = false|(simulateQ\n            ({ impl := fun {\u03b1} q => liftM (liftM q) } ++\u209b\u2092\n              {\n                  impl := fun {\u03b1} x_1 =>\n                    match \u03b1, x_1 with\n                    | .((P \u00d7 P \u2192\u2092 P \u00d7 P).range ()), query PUnit.unit (m\u2081, m\u2082) =>\n                      (fun a => (a +\u1d65 x, m\u2082 * (a +\u1d65 g\u2081 +\u1d65 x))) <$> ($\u1d57G) }.withCaching)\n            (adversary (x, g\u2081 +\u1d65 x))).run\n        \u2205] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let y \u2190 $\u1d57P\n      let b' \u2190\n        simulateQ (idOracle unifSpec ++\u209b\u2092 QueryImpl.ofFn fun x_1 => pure (c +\u1d65 x, x_1.1 * y)) (adversary (x, g\u2081 +\u1d65 x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "e54ae9cef69ace4b7c561d5025fb371aae8a33f8a6b55eccad246b6db54cf0e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "df009a51ea4c60974fd041477513bf8237c51113d870816a9ab066fcc97d3619"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "bfbd462400ae827743451fe17e54d12d4e5f520f9c4c35d235dbe31ee0594584"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "038744c370b04caf7058d6e0f202fdba361c83925993127b2163e041065f9996"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "7a509562660d66531f047d039839f6787adcc1d8ba450a82cf1eab5f35dbf66e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork qb js i cf).support\n\u22a2 cf x\u2081 = cf x\u2082",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "2464950c7bb1454f6f8880b62204f5fef6cf19689abca7e02a7181486ac8feef"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "ec73e6f45939a9e30ada77a354d35fd4bcf065b146abf8f938fb6e9a74610b76"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "fc3476cdf27d888e95cd9eeda1acc879fab712974e7ffc8b8259c1aa76d1222f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "429425517f880599b21c84117b838644e71a7dfad1c3dc7debb7b4e04be52b76"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] =\n    [=(some s, some s)|do\n      let shared_seed \u2190 liftM (generateSeed spec (update qb i \u2191s) js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n      let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "4e244fc84869d0e35434be5d3c28eb09a77578bd6f51fd05f5cab1219b7192b0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed \u2208 (liftM (generateSeed spec qb js)).support\n\u22a2 \u2191(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "7d8349c80c833a53270ba8a0c0c7756f678327f8230cceaed54f0589541cf828"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 \u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h \u2264\n    \u2211 s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "009535090ecdb1a1938879ecdd03b26d4593c2e631da1219af4ec6b798ccce00"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h) =\n    1 - \u2211 s, [=some s|cf <$> main] ^ 2 + \u2211 s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "b443b9f1921f990818cd4d5679908ab6b5277725be06793a0e3373c4681931a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 acc * h\u207b\u00b9 + (1 - acc ^ 2 * (\u2191q)\u207b\u00b9) = 1 - (acc ^ 2 * (\u2191q)\u207b\u00b9 - acc * h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "556e116e7fb6debda8ae0daa74212c17d27af2eb090e7674cfcaf17063b5914c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 84,
        "start_column": 2,
        "end_line": 84,
        "end_column": 7
      },
      "debug_info": {
        "goal": "M K C : Type\ninst\u271d\u00b2 : SelectableType C\ninst\u271d\u00b9 : Fintype C\ninst\u271d : Inhabited C\nencAlg : SymmEncAlg ProbComp M K C\nh :\n  (QueryImpl.ofFn fun m => do\n      let __do_lift \u2190 encAlg.keygen\n      encAlg.encrypt __do_lift m) \u2243\u209b\u2092\n    QueryImpl.ofFn fun x => $\u1d57C\n\u22a2 (QueryImpl.ofFn fun ms => do\n      let __do_lift \u2190 encAlg.keygen\n      encAlg.encrypt __do_lift ms.1) \u2243\u209b\u2092\n    QueryImpl.ofFn fun ms => do\n      let __do_lift \u2190 encAlg.keygen\n      encAlg.encrypt __do_lift ms.2",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/SymmEncAlg.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "b3b250e7bf9385c105bf26376b038d15fc28a5473b7d070ebedcf12e00479d35"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 115,
        "start_column": 2,
        "end_line": 115,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Correct\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/SymmEncAlg.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "4ba34cc5bc4b644f86ba59d7751c299ebcd45a4eed6284801f1e8588771a750a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := { impl := fun {\u03b1} q => liftM ((idOracle unifSpec).impl q) } ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "1d2d5d0835ede201d9442761d9905fbecce90bd492cdee336f46a1e8a0d34b3c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean",
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\ninst\u271d : NeZero p\nerrSamp : ProbComp (Fin p)\nadv : LWE_Adversary n m p\n\u22a2 |[=true|do\n              let y \u2190 LWE_Distr n m p errSamp\n              adv y].toReal +\n          [=true|do\n              let y \u2190 LWE_Uniform_Distr n m p\n              (fun a => !a) <$> adv y].toReal -\n        ([=true|do\n              let a \u2190 LWE_Distr n m p errSamp\n              not <$> adv a].toReal +\n          [=true|do\n              let a \u2190 LWE_Uniform_Distr n m p\n              adv a].toReal)| =\n    |[=true|do\n            let y \u2190 LWE_Distr n m p errSamp\n            adv y].toReal -\n        [=true|do\n            let a \u2190 LWE_Uniform_Distr n m p\n            adv a].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "0d2623954da1769d8be00ef06c7d7550d6bc4c3f707c8b27f9f2d484a89a1610"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Asymptotics/PolyTimeOC.lean",
        "start_line": 124,
        "start_column": 2,
        "end_line": 124,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03b1 : Type\n\u22a2 IsComputableInPolyTime id",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Asymptotics/PolyTimeOC.lean#L124"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "619602315f11ebd1056a7130d668bf889d243f944c72c2ee4119c28cbb3d78a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      let x \u2190 (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "1c1d6254145b149c697f216cb95b6e29815e33cd7efb61cbafef187addd8d99e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "1eed6a9f7b1391fd6c2bf7160d633cdc534f5b109ad683cd2802529366c764e4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "03c08959af5935d899a235846f9186181c5bec7c059f25067f83ed2080df8c6a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "827253760606e8a8b6a6723e954614f5bd3f6c0a89bd2ab8578a3b0bde8569c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6ceff0f784cc29485189a0ace8b41d69577e984c328dd41a5b7b23108324e9f7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 410,
        "start_column": 4,
        "end_line": 410,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm : \u2115\ninst\u271d : SelectableType \u03b1\nx y : Matrix (Fin 0) (Fin m) \u03b1\n\u22a2 (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/UniformSelect.lean#L410"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "b3e561ed5d666cb4b9887dca774aad2c4ad9d585cf7d7dae527664efdef9bcce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  \u2200 (x y : Matrix (Fin m) (Fin m\u271d) \u03b1),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m\u271d) \u03b1\n\u22a2 [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "146b7107419cef61607514115a8700c342fbe461710912b2dbc572ebe9c7af32"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 417,
        "start_column": 4,
        "end_line": 417,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  [\u22a5|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n\u22a2 Vector \u03b1 m\u271d \u2192\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          Fin.cons top.get <$> ihn)\n        m)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/UniformSelect.lean#L417"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "41db34b3d9b2b821b234570efc31dac7a838c6239c2a07a33d585efdef6a8192"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "8a99bd81780b12b71e6ba2ecfe0d2417dc6290136afa68a96d8e50400713ce0c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d : DecidableEq spec.QuerySeed\n\u22a2 finSupport (generateSeed spec qc js) \u2260 \u2205",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "30f38f18d205a6359aa954cd6541ea7ef7a830a358dfedb5923bf50a9ec9abeb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "84ae24acbfe5d8e5df8bcc29621c8d4954f3bf7f0a0ce962ab1021997e61a013"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed \u2208 support (generateSeed spec qc js)\n\u22a2 [=seed|generateSeed spec qc js] = (\u2191(finSupport (generateSeed spec qc js)).card)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "cba45e89f3bdce2ab191c056fc36ce509342e3bfd92daa900d300e0d704dfa09"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nr : \u211d\u22650\u221e\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x] / r\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "66dce363f6607205651ad23df0c59b888e55d34f8bec58775232aa7924d458a0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 83,
        "end_line": 727,
        "end_column": 88
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "3df933b2a6c4b159afdd7c33b092341a9dacea9bc4b3801a5cc2a43fd05a268e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 733,
        "start_column": 73,
        "end_line": 733,
        "end_column": 78
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L733"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "bbcd9bee655439588389ef1dac8f541c6fbe4c2f2668100803c942d09458c9fb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 738,
        "start_column": 69,
        "end_line": 738,
        "end_column": 74
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L738"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "2fcc43049f60e18f342c03245dbea097f68877242e70361badbc016856683cd3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 742,
        "start_column": 59,
        "end_line": 742,
        "end_column": 64
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L742"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "092f02da75be70b38a5f82f4eed32a082f04b090813c4bfc69301fc256d12939"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 938,
        "start_column": 2,
        "end_line": 938,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L938"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "c23e45f48f15c8193c4ce8e586ced416ae2f8d8059c738b383968fd8b6920df0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 946,
        "start_column": 2,
        "end_line": 946,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L946"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "945b3d96f4bda8b81ea3c2626393ce39c8aacecdd3ae9a72d39126731193ddb6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 978,
        "start_column": 2,
        "end_line": 978,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\n\u03b1 : Type\noa : OracleComp spec \u03b1\nh : oa.neverFails\np : \u03b1 \u2192 Prop\ninst\u271d : DecidablePred p\n\u22a2 (\u2211' (x : \u03b1), if p x then [=x|oa] else 0) = 1 - \u2211' (x : \u03b1), if p x then 0 else [=x|oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L978"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "5ff371b939ddc711855c86898f82c85a2b0893ed2b3c41bf69432fffc3105a08"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Append.lean",
        "start_line": 113,
        "start_column": 2,
        "end_line": 113,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9\u2081 : Type u_1\n\u03b9\u2082 : Type u_2\n\u03b9\u2083 : Type u_3\nspec\u2081 : OracleSpec \u03b9\u2081\nspec\u2082 : OracleSpec \u03b9\u2082\nspec\u2083 : OracleSpec \u03b9\u2083\n\u03b1 : Type u\nm : Type u \u2192 Type u_4\ninst\u271d : AlternativeMonad m\nso : QueryImpl spec\u2081 m\nso' : QueryImpl spec\u2082 m\nso'' : QueryImpl spec\u2083 m\noa : OracleComp (spec\u2081 ++\u2092 spec\u2082) \u03b1\n\u22a2 simulateQ (so ++\u209b\u2092 (so' ++\u209b\u2092 so'')) (oa.liftComp (spec\u2081 ++\u2092 (spec\u2082 ++\u2092 spec\u2083))) = simulateQ (so ++\u209b\u2092 so') oa",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Append.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-11T18:03:03-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "d24577ae55b81f6fcbdf1f01bb6df6f076c8b5c835f53543667182e5c9a19ce1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 87,
        "start_column": 2,
        "end_line": 87,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\n\u22a2 impl\u2081 \u2243\u209b\u2092 impl\u2082 \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=false|simulateR impl\u2081 adv] = [=false|simulateR impl\u2082 adv] \u2227 [\u22a5|simulateR impl\u2081 adv] = [\u22a5|simulateR impl\u2082 adv]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L87"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "e86e95d4acebb5537e62ad2460eff69e275feb8710274556b2987346f9df1718"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\n\u22a2 impl\u2081 \u2243\u209b\u2092 impl\u2082 \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=true|simulateR impl\u2081 adv] = [=true|simulateR impl\u2082 adv] \u2227\n        [=false|simulateR impl\u2081 adv] = [=false|simulateR impl\u2082 adv] \u2227 [\u22a5|simulateR impl\u2081 adv] = [\u22a5|simulateR impl\u2082 adv]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T13:19:21-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "cbfa4c8b697ae9d5aa303deae358ba22981234680dba2ffa94266ad5186e9443"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\n\u22a2 impl\u2081 \u2243\u209b\u2092 impl\u2082 \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=true = true|do\n          let b \u2190 $\u1d57Bool\n          let b' \u2190 simulateR (if b = true then impl\u2081 else impl\u2082) adv\n          pure (b = b')] =\n        2\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "585a8cb36f0d05638a899dcdbbf07fc9291333d5ffb33ce7b06bd16bc31c7564"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 110,
        "start_column": 2,
        "end_line": 110,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\n\u22a2 impl\u2081 \u2243\u209b\u2092 impl\u2082 \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=false = true|do\n          let b \u2190 $\u1d57Bool\n          let b' \u2190 simulateR (if b = true then impl\u2081 else impl\u2082) adv\n          pure (b = b')] =\n        2\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L110"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "973b4cb3d427c05ef16102dd5f5e0e7cd61d9ce64ee34984d76afac6446e9a44"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 136,
        "start_column": 2,
        "end_line": 136,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec), neverFails adv \u2192 DistinguisherAdvantage impl\u2081 impl\u2082 adv \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "c1eb6cd140f17dbd2e2e81f17df0971d7ecfbaa5da80286af6761dac33a02553"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 160,
        "start_column": 6,
        "end_line": 160,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv].toReal -\n      [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv].toReal \u2264\n    (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n        (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] -\n          [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv])).toReal",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "c24625618f1a1a2e5ff5504de9deacdcc378fc2fd52e76471b436dcafbf59930"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 162,
        "start_column": 6,
        "end_line": 162,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case hba\n\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] \u2264 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6097e9ba77c5f1542291ee6072a67292a6a4cd283b1c38fd7e87899114389f0d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 164,
        "start_column": 4,
        "end_line": 164,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case ha\n\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] \u2260 \u22a4",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "ca438264a6803c294e3e6873d78482e4a63dfa4e1eca104a7a5a513b33807dc2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 166,
        "start_column": 4,
        "end_line": 166,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case ha\n\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] \u2260 \u22a4",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6208083e48d2db1c38d638dd6288dd1caa13d28eaa426ec83eb28308e71b1d7e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 168,
        "start_column": 4,
        "end_line": 168,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case hb\n\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2260\n    \u22a4",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L168"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "4d30da99ad2d3b9fb32b89b45241924c471075314a394c87bb35e8dbc4bfd9ea"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 148,
        "start_column": 27,
        "end_line": 148,
        "end_column": 32
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2082 impl\u2081 b \u2192 DistinguisherBound impl\u2081 impl\u2082 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L148"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "212d2e542f15ca1f0c94bbb235b66c3a8435c40beb2c9d270d6dc41c34da7baf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 174,
        "start_column": 2,
        "end_line": 174,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 impl\u2083 : QueryImpl spec ProbComp\nb b' : \u211d\u22650\u221e\nh : DistinguisherBound impl\u2081 impl\u2082 b\nh' : DistinguisherBound impl\u2082 impl\u2083 b'\n\u22a2 DistinguisherBound impl\u2081 impl\u2083 (b + b')",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L174"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "051e650cd77e31f2f0a6ccc2f9497b2a67d85389d8b6e6c20395705ce41ea292"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 187,
        "start_column": 2,
        "end_line": 187,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec), [=true|simulateR impl\u2082 adv] - [=true|simulateR impl\u2081 adv] \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "657c849587bb0a8af0cffe049277193d71162901b314fcd09c3ad9f8911521f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 193,
        "start_column": 2,
        "end_line": 193,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec), [=false|simulateR impl\u2081 adv] - [=false|simulateR impl\u2082 adv] \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L193"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "13d3f63b1fed913114e9b95b88fba7fcd18a1bd59a5d16ca54ffdfd3d0952b9a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 198,
        "start_column": 2,
        "end_line": 198,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec), [=false|simulateR impl\u2082 adv] - [=false|simulateR impl\u2081 adv] \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "602db1321bec0635d4d2a92f19ccfd0291255aa54ba868e69c3b7d7487e5cd9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 212,
        "start_column": 2,
        "end_line": 212,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_2\nspec : OracleSpec \u03b9\n\u03b9' : Type u_1\nrspec : OracleSpec \u03b9'\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nred_impl\u2081 red_impl\u2082 : QueryImpl rspec ProbComp\nb r : \u211d\u22650\u221e\nhr : DistinguisherBound red_impl\u2081 red_impl\u2082 r\nreduction : Distinguisher spec \u2192 Distinguisher rspec\nh :\n  \u2200 (adv : Distinguisher spec),\n    DistinguisherAdvantage impl\u2081 impl\u2082 adv > b \u2192 DistinguisherAdvantage red_impl\u2081 red_impl\u2082 (reduction adv) > r\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L212"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-06T22:11:43-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "e5b0ad84e88b5aaceb5cedadac1d7d77140d4e80c9dddd6b83b74bb49ffe5e9a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 266,
        "start_column": 2,
        "end_line": 266,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=true|simulateR impl\u2081 adv] - [=true|simulateR impl\u2082 adv] \u2264 b \u2227\n        [=false|simulateR impl\u2081 adv] - [=false|simulateR impl\u2082 adv] \u2264 b \u2227\n          [=true|simulateR impl\u2082 adv] - [=true|simulateR impl\u2081 adv] \u2264 b \u2227\n            [=false|simulateR impl\u2082 adv] - [=false|simulateR impl\u2081 adv] \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L266"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-06T08:17:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "a9c015f9189962305bce4c226dff47be2f1dbf19b5f0c7af841b6da4e4581758"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "7bd1fe3630025fd3885ea115a1fa19ca51e1e6cdfe32b3ac5b405c6284b4c988"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "f8626bba402e37f9b4c21deef87820b89204060f83c44241ea0b9640604a31b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "164f63a020f185188fe230ea38c555689a5b3445c4f7f76e7d050334353b6b4e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "f261a16bf477f735d7e37cf81894388102209231e4499744ac85a894c2e4b32f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "011a720194ff65c70101116805c2519980f35075457362ceea7971a505d72595"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "f309304b3c164c344ebe35225f0fdd246afa9831187bfbf41b6ca91be7d6e5f7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/Matroid3sum.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let A\u2097 := B\u2097.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097;\n      let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n      let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      let A\u1d63 := B\u1d63.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      (matrix3sumComposition x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 A\u2097 D\u2097 D\u2080 D\u1d63 A\u1d63).HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/Matroid3sum.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "ba1ccb2fd741f6e24f32c761e524c5a8aeafd4e83fde552f3d08e05c737cf005"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 334,
        "start_column": 2,
        "end_line": 334,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nX Y : Set \u03b1\nQ : Matrix \u2191X \u2191Y \u211a\nhQ : Q.IsTotallyUnimodular\nx\u2082 : \u2191X\ny\u2080 y\u2081 : \u2191Y\nhyy : y\u2080 \u2260 y\u2081\nhQy\u2080 : Q x\u2082 y\u2080 = 1\nhQy\u2081 : Q x\u2082 y\u2081 = 1\nhQy : \u2200 (y : \u2191Y), \u2191y \u2260 \u2191y\u2080 \u2227 \u2191y \u2260 \u2191y\u2081 \u2192 Q x\u2082 y = 0\n\u22a2 let c\u2080 := Q._col y\u2080;\n  let c\u2081 := Q._col y\u2081;\n  let Q' := Q.A\u1d63 x\u2082 y\u2080 y\u2081;\n  (Q' \u25eb \u25aec\u2080 \u25eb \u25aec\u2081 \u25eb \u25ae(c\u2080 - c\u2081)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L334"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "0c680953f9dbe13c2baf85a0e3771ec698d45924b0687583fd41b166cc762707"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 431,
        "start_column": 2,
        "end_line": 431,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  \u2200\n    (hB\u2097' :\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081),\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n      | (r\u2080, r\u2081, snd) =>\n        (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY =\n          (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n            (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L431"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "68ca41ef70f7e4c6e7d3eba89e65af9687b838d9afa9bdfb9e4b3189723c8ef8"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 470,
        "start_column": 2,
        "end_line": 470,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  \u2200\n    (hB\u2097' :\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081),\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n      | (r\u2080, r\u2081, r\u2082) =>\n        \u2200 (i : \u2191(X\u1d63.drop1 x\u2082\u1d63)), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L470"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "2ea7a6a93633e3e1b17aea862e8934072ac40c04822bcc33574127d05cd6d03f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 510,
        "start_column": 2,
        "end_line": 510,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      \u2200 (j : \u2191(Y\u2097.drop1 y\u2082\u2097)),\n        (fun x => D x j) = c\u2080 \u2228\n          (fun x => D x j) = -c\u2080 \u2228\n            (fun x => D x j) = c\u2081 \u2228\n              (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L510"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "b9293258d8fc1b8f230be9c9d835ca73016976233c8f8499f220905fdc49e418"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 537,
        "start_column": 2,
        "end_line": 537,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080 := B\u1d63.D\u2080 x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n          (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n            (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n          (B\u1d63.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 \u25eb (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L537"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "4a01b1a342313e82599d16c52f0f6bee7c3204dc014997daf54af54cb321bb80"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 561,
        "start_column": 2,
        "end_line": 561,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n      let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n          (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n            (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n          (B\u2097.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097 \u229f (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L561"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "7ae831725ef2ca4fa1752d527538520a273887edbf18b2c1397ee2b47ba55f4d"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/LeanSearchClient",
        "branch": "main",
        "commit": "6c62474116f525d2814f0157bb468bf3a4f9f120",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "LeanSearchClientTest/MoogleExamples.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 3 \u2264 5",
        "url": "https://github.com/leanprover-community/LeanSearchClient/blob/6c62474116f525d2814f0157bb468bf3a4f9f120/LeanSearchClientTest/MoogleExamples.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-03-20T02:55:26+05:30",
        "inclusion_date": "2025-05-27T05:38:27.112195+00:00"
      },
      "id": "ade6d9ef1ae9dee820f87671aedea2a336556bc7019dadab49a6836d11bd7d7a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "2ec6b8bfd6b02531d459869014799c186fff7c65",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 884,
        "start_column": 10,
        "end_line": 884,
        "end_column": 15
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\n\u03c6 : Formula\nside : Side\n\u03b1s : List Program\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6)\n\u03b1 : Program\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side (L, R, O)\nno_other_loading : (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true\nu : W\nv_\u03b1_u : relate M \u03b1 v u\nu_\u03b1s_w : relateSeq M \u03b1s u w\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : (M, v)\u22a8(F, \u03b4).1\nv_\u03b4_w : relateSeq M (F, \u03b4).2 v u\n\u03c7' : LoadFormula\n\u03c7_def : AnyFormula.loaded \u03c7' = AnyFormula.loadBoxes \u03b1s (AnyFormula.normal \u03c6)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule\n          (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')))\n            (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227\n              (M, v)\u22a8F \u2227\n                (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/2ec6b8bfd6b02531d459869014799c186fff7c65/Pdl/Soundness.lean#L884"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-26T23:22:48+02:00",
        "inclusion_date": "2025-05-27T05:39:39.837606+00:00"
      },
      "id": "b0785a912095fff90e8b39304388829e4d94ca5992964bd5b878ebbb4d79c742"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "2ec6b8bfd6b02531d459869014799c186fff7c65",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 887,
        "start_column": 10,
        "end_line": 887,
        "end_column": 15
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\n\u03c6\u271d : Formula\nside : Side\n\u03b1s : List Program\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6\u271d)\n\u03b1 : Program\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6\u271d))).in_side side (L, R, O)\nno_other_loading :\n  (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6\u271d)))).isFree = true\nu : W\nv_\u03b1_u : relate M \u03b1 v u\nu_\u03b1s_w : relateSeq M \u03b1s u w\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : (M, v)\u22a8(F, \u03b4).1\nv_\u03b4_w : relateSeq M (F, \u03b4).2 v u\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule\n          (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)))\n            (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6\u271d))).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227\n              (M, v)\u22a8F \u2227\n                (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6\u271d)))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/2ec6b8bfd6b02531d459869014799c186fff7c65/Pdl/Soundness.lean#L887"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-26T23:22:48+02:00",
        "inclusion_date": "2025-05-27T05:39:39.837606+00:00"
      },
      "id": "a4629f81ae48c050c93df114ef46ee098130927c8d763e9282102dea67b738bd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "2ec6b8bfd6b02531d459869014799c186fff7c65",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 891,
        "start_column": 8,
        "end_line": 891,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\n\u03c6 : Formula\nside : Side\n\u03b1s : List Program\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) {v w : W},\n    (M, v)\u22a8Y \u2192\n      (M, w)\u22a8~''(AnyFormula.normal \u03c6) \u2192\n        \u2200 (\u03b1 : Program),\n          relateSeq M (\u03b1 :: \u03b1s) v w \u2192\n            (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side Y \u2192\n              (Y.without (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true \u2192\n                \u2203 Y_1 \u2208 endNodesOf (next Y a),\n                  (M, v)\u22a8Y_1 \u2227\n                    (Y_1.isFree = true \u2228\n                      \u2203 F \u03b3,\n                        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y_1 \u2227\n                          relateSeq M \u03b3 v w \u2227\n                            (M, v)\u22a8F \u2227\n                              (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227\n                                (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6)\n\u03b1 : Program\nv_\u03b1s_w : relateSeq M (\u03b1 :: \u03b1s) v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side (L, R, O)\nno_other_loading : (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227\n              (M, v)\u22a8F \u2227\n                (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/2ec6b8bfd6b02531d459869014799c186fff7c65/Pdl/Soundness.lean#L891"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-26T23:22:48+02:00",
        "inclusion_date": "2025-05-27T05:39:39.837606+00:00"
      },
      "id": "9d5da9bbc1796e3bf148d59134993bbcd8db40404c574d984c8850fa50144167"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1196,
        "start_column": 8,
        "end_line": 1196,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203 Y,\n    (\u2203 Z, \u2203 (Z_in : Z \u2208 B), Y \u2208 endNodesOf (next Z \u22ef)) \u2227\n      (M, v)\u22a8Y \u2227\n        (Y.isFree = true \u2228\n          \u2203 F \u03b3,\n            (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n              relateSeq M \u03b3 v w \u2227\n                (\u2200 f \u2208 F, evaluate M v f) \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L1196"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "3ccfe25cf02894b11284ad12c91200893766e187fcae5fa34bd42dc3fa3fb38e"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 50,
        "start_column": 77,
        "end_line": 50,
        "end_column": 82
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 I[\u2211 i, \u2211 j, \u2191\u2191i \u2022 Y (i, j) : \u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j)|\u2211 i, \u2211 j, Y (i, j)] \u2264 4 * \u2191p.m ^ 2 * p.\u03b7 * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2024-09-30T22:19:50+00:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "1c4ecb0803952a4abf36fd7fd96c1200d1b0cbd8ca8e5c846de701c5cbe7678a"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 52,
        "start_column": 77,
        "end_line": 52,
        "end_column": 82
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 I[\u2211 i, \u2211 j, \u2191\u2191i \u2022 Y (i, j) : \u2211 i, \u2211 j, (-\u2191\u2191i - \u2191\u2191j) \u2022 Y (i, j)|\u2211 i, \u2211 j, Y (i, j)] \u2264\n    4 * \u2191p.m ^ 2 * p.\u03b7 * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2024-09-30T22:19:50+00:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "9f83153b7111511b5f594cc083c33f3faba31cdb6d567940dcccfa8fdca98aa9"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 54,
        "start_column": 77,
        "end_line": 54,
        "end_column": 82
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 I[\u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j) : \u2211 i, \u2211 j, (-\u2191\u2191i - \u2191\u2191j) \u2022 Y (i, j)|\u2211 i, \u2211 j, Y (i, j)] \u2264\n    4 * \u2191p.m ^ 2 * p.\u03b7 * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L54"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2024-09-30T22:19:50+00:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "77b1deaff5205dba3633804a2b24651858fbfdab667ed709b0f892163a650139"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 58,
        "start_column": 74,
        "end_line": 58,
        "end_column": 79
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\nm : \u211d\n\u22a2 H[\u2211 i, \u2211 j, Y (i, j)] \u2264 (2 * \u2191p.m - 1) * multiTau p \u03a9 h\u03a9 X + m\u207b\u00b9 * \u2211 i, H[X i]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T08:58:11-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "65f845cdb0e5f27203c4a7267a70e4ac96bdd036bc6aedae51534ba361c8e5cb"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 61,
        "start_column": 94,
        "end_line": 61,
        "end_column": 99
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\nm : \u211d\n\u22a2 H[\u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j)] \u2264 (8 * \u2191p.m ^ 2 - 16 * \u2191p.m + 1) * multiTau p \u03a9 h\u03a9 X + m\u207b\u00b9 * \u2211 i, H[X i]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T08:58:11-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "a017fbaf631e3377060f38a70dd74e83221740f47c318d11f4b3024902c30089"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 64,
        "start_column": 60,
        "end_line": 64,
        "end_column": 65
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 I[\u2211 i, \u2211 j, Y (i, j) : \u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j)] \u2264 2 * (\u2191p.m - 1) * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L64"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T08:58:11-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "fc3e23d630f878c2903801a5f094cdd2e0e04cf20ee0c837a24c921d2e28de65"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 67,
        "start_column": 88,
        "end_line": 67,
        "end_column": 93
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 \u2211 i, d[X i # \u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j) | \u2211 i, \u2211 j, Y (i, j)] \u2264 8 * (\u2191p.m ^ 3 - \u2191p.m ^ 2) * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T08:58:11-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "e7de6df23233b2cba0c3fccd5fc8ca9677808b76caff05bad4116b046d08acac"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 79,
        "start_column": 398,
        "end_line": 79,
        "end_column": 403
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b9 : MeasureableFinGroup G\n\u03a9 : Type u_2\ninst\u271d : MeasureSpace \u03a9\nT\u2081 T\u2082 T\u2083 : \u03a9 \u2192 G\nhsum : T\u2081 + T\u2082 + T\u2083 = 0\nn : \u2115\n\u03a9' : Fin n \u2192 Type u_3\nh\u03a9' : (i : Fin n) \u2192 MeasureSpace (\u03a9' i)\nY : (i : Fin n) \u2192 \u03a9' i \u2192 G\n\u03b1 : \u211d\nh\u03b1 : \u03b1 > 0\n\u22a2 \u2203 \u03a9'' h\u03a9'' U,\n    d[U # U] + \u03b1 * \u2211 i, d[Y i # U] \u2264 (2 + \u03b1 * \u2191n / 2) * (I[T\u2081 : T\u2082] + I[T\u2081 : T\u2083] + I[T\u2082 : T\u2083]) + \u03b1 * \u2211 i, d[Y i # T\u2082]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-17T21:11:56+01:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "9ba52357bc7c4cea2d946b5080619d670c0b814ab856aed521449e6448dc2ad0"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 82,
        "start_column": 27,
        "end_line": 82,
        "end_column": 32
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b9 : MeasureableFinGroup G\ninst\u271d : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u22a2 multiTau p \u03a9 h\u03a9 X = 0",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-28T21:28:18-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "414bb2b0fa894e2c3dde0f82930a4f67400eb02fa24d7028abef298ad314c0a3"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 89,
        "start_column": 54,
        "end_line": 89,
        "end_column": 59
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Fintype G\ninst\u271d\u00b2 : MeasurableSpace G\ninst\u271d\u00b9 : MeasurableSingletonClass G\nm : \u2115\nhm : m \u2265 2\nhtorsion : \u2200 (x : G), m \u2022 x = 0\n\u03a9 : Type u_2\ninst\u271d : MeasureSpace \u03a9\nX : \u03a9 \u2192 G\n\u22a2 \u2203 H \u03a9' m\u03a9 U, IsUniform (\u2191H) U volume \u2227 d[X # U] \u2264 64 * \u2191m ^ 3 * d[X # X]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-28T21:28:18-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "9777eefba224c257a5a78477d5404aa209afcc53e871e9ccc84e1cb812e4b9fc"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 102,
        "start_column": 64,
        "end_line": 102,
        "end_column": 69
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\nm : \u2115\nhm : m \u2265 2\nhtorsion : \u2200 (x : G), m \u2022 x = 0\nA : Set G\ninst\u271d : Finite \u2191A\nK : \u211d\nh\u2080A : A.Nonempty\nhA : \u2191(Nat.card \u2191(A + A)) \u2264 K * \u2191(Nat.card \u2191A)\n\u22a2 \u2203 H c,\n    \u2191(Nat.card \u2191c) \u2264 K ^ (64 * \u2191m ^ 3 + 2) * \u2191(Nat.card \u2191A) ^ (1 / 2) * \u2191(Nat.card \u21a5H) ^ (-1 / 2) \u2227\n      \u2191(Nat.card \u21a5H) \u2264 K ^ (64 * \u2191m ^ 3) * \u2191(Nat.card \u2191A) \u2227\n        \u2191(Nat.card \u2191A) \u2264 K ^ (64 * \u2191m ^ 3) * \u2191(Nat.card \u21a5H) \u2227 A \u2286 c + \u2191H",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "7d87c0724495",
        "blame_date": "2024-08-18T18:37:52+02:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "5647f928a11892349b183b51484417a244b7b2dfda1807f5609d84f352a0884a"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/BoundingMutual.lean",
        "start_line": 36,
        "start_column": 79,
        "end_line": 36,
        "end_column": 84
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Type u\nh\u03a9 : MeasureSpace \u03a9\nX : Fin p.m \u2192 \u03a9 \u2192 G\nh_indep : iIndepFun X volume\nh_min : multiTauMinimizes p (fun x => \u03a9) (fun x => h\u03a9) X\n\u03a9' : Type u_1\ninst\u271d : MeasureSpace \u03a9'\nX' : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh_indep' : iIndepFun X' volume\nhperm : \u2200 (j : Fin p.m), \u2203 e, IdentDistrib (fun \u03c9 i => X' (i, j) \u03c9) (fun \u03c9 i => X (e i) \u03c9) volume volume\n\u22a2 I[fun \u03c9 j => \u2211 i, X' (i, j) \u03c9 : fun \u03c9 i => \u2211 j, X' (i, j) \u03c9|fun \u03c9 => \u2211 i, \u2211 j, X' (i, j) \u03c9] \u2264\n    4 * \u2191p.m ^ 2 * p.\u03b7 * D[X ; fun x => h\u03a9]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/BoundingMutual.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "7d87c0724495",
        "blame_date": "2025-03-07T08:53:46+01:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "fb8f9b58da1e38476f53aed60e935ebb5e8ef6754d7604028ff14980c19432a7"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 181,
        "start_column": 65,
        "end_line": 181,
        "end_column": 70
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\n\u22a2 Nat.card (G \u2192+ ZMod 2) = Nat.card G",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/ApproxHomPFR.lean#L181"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "6d92889d82e70bd00cde336c7f26b9535bda77a8b123bf3ba65cded072b2e01e"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 183,
        "start_column": 114,
        "end_line": 183,
        "end_column": 119
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\nx : G\nhx : x \u2260 0\n\u22a2 Nat.card \u2191{\u03c6 | \u03c6 x = 1} = Nat.card G / 2",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/ApproxHomPFR.lean#L183"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "96904bda247719de5adc8d3666f3118073b47a388cea267d59e8241c9649f26f"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 185,
        "start_column": 114,
        "end_line": 185,
        "end_column": 119
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\nA : Set G\n\u22a2 \u2203 \u03c6, Nat.card \u2191{x | x \u2208 A \u2227 \u03c6 x = 1} \u2265 (Nat.card \u2191A - 1) / 2",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/ApproxHomPFR.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "d2d5ce16fb205bbd08ba72eca6fc3d6519e236878b223d085403e57f1b1343b3"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 189,
        "start_column": 99,
        "end_line": 189,
        "end_column": 104
      },
      "debug_info": {
        "goal": "G : Type u_1\nG' : Type u_2\ninst\u271d\u2075 : AddCommGroup G\ninst\u271d\u2074 : Fintype G\ninst\u271d\u00b3 : AddCommGroup G'\ninst\u271d\u00b2 : Fintype G'\ninst\u271d\u00b9 : Module (ZMod 2) G\ninst\u271d : Module (ZMod 2) G'\nf : G \u2192 G'\nK : \u211d\nhK : K > 0\nhf : \u2191(Nat.card G) ^ 2 / K \u2264 \u2191(Nat.card \u2191{x | f (x.1 + x.2) = f x.1 + f x.2})\n\u22a2 \u2203 \u03c6'', \u2191(Nat.card \u2191{x | f x = \u03c6'' x}) \u2265 (\u2191(Nat.card G) / (2 ^ 144 * K ^ 122) - 1) / 2",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/ApproxHomPFR.lean#L189"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "00472b8f9b9d856f24f83c6aad601cc6bf6f5274b4875740befe6eb17e33c7d0"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 527,
        "start_column": 2,
        "end_line": 527,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03a9 : Type u_1\nG : Type u_5\nm\u03a9 : MeasurableSpace \u03a9\n\u03bc : Measure \u03a9\nhG : MeasurableSpace G\ninst\u271d\u00b3 : MeasurableSingletonClass G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Countable G\ninst\u271d : IsProbabilityMeasure \u03bc\nI : Type u_8\ns t : Finset I\nhdisj : Disjoint s t\nhs : s.Nonempty\nht : t.Nonempty\nX : I \u2192 \u03a9 \u2192 G\nhX : \u2200 (i : I), Measurable (X i)\nhX' : \u2200 (i : I), FiniteRange (X i)\nh_indep : iIndepFun X \u03bc\nf : I \u2192 I\nhf : Finset.image f t \u2286 s\n\u22a2 H[\u2211 i \u2208 t, X i ; \u03bc] \u2264 H[\u2211 i \u2208 s, X i ; \u03bc] + \u2211 i \u2208 t, (H[X i - X (f i) ; \u03bc] - H[X (f i) ; \u03bc])",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MoreRuzsaDist.lean#L527"
      },
      "metadata": {
        "blame_email_hash": "6e8091041644",
        "blame_date": "2024-05-31T19:35:50+01:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "a8d0995203fd353b7408d89399a3b42b648011db67b373d4badef838ea4bc1d3"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 760,
        "start_column": 62,
        "end_line": 760,
        "end_column": 67
      },
      "debug_info": {
        "goal": "G : Type u_8\nhG : MeasurableSpace G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : MeasurableSingletonClass G\ninst\u271d : Countable G\nm : \u2115\n\u03a9 : Type u_9\nh\u03a9 : MeasureSpace \u03a9\nX : Fin m \u2192 \u03a9 \u2192 G\nh_indep : iIndepFun X volume\n\u22a2 @multiDist G hG inst\u271d\u00b2 m (fun x => \u03a9) (fun x => h\u03a9) X = H[\u2211 i, X i] - (\u2211 i, H[X i]) / \u2191m",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MoreRuzsaDist.lean#L760"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-22T09:31:46-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "75b78076d30a6ec2513e7c2b2c42502b7d32a9f71263ce8b8bbdc2a2f119cac7"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "018c619cf93d489a688e485cafd43f5545ddd99e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 1165,
        "start_column": 82,
        "end_line": 1165,
        "end_column": 87
      },
      "debug_info": {
        "goal": "G : Type u_8\nhG : MeasurableSpace G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : MeasurableSingletonClass G\ninst\u271d : Countable G\nm : \u2115\nhm : m \u2265 2\n\u03a9 : Type u_9\nh\u03a9 : MeasureSpace \u03a9\nX : Fin m \u2192 \u03a9 \u2192 G\nh_indep : iIndepFun X volume\n\u22a2 d[\u2211 i, X i # \u2211 i, X i] \u2264 2 * @multiDist G hG inst\u271d\u00b2 m (fun x => \u03a9) (fun x => h\u03a9) X",
        "url": "https://github.com/teorth/pfr/blob/018c619cf93d489a688e485cafd43f5545ddd99e/PFR/MoreRuzsaDist.lean#L1165"
      },
      "metadata": {
        "blame_email_hash": "7d87c0724495",
        "blame_date": "2025-03-07T08:53:46+01:00",
        "inclusion_date": "2025-05-27T06:36:49.192108+00:00"
      },
      "id": "b1d15c92fcf249647ae1963a74809dd64695bde853bfdc48ac27a037a74f2fac"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 2070,
        "start_column": 54,
        "end_line": 2070,
        "end_column": 59
      },
      "debug_info": {
        "goal": "G : Type u_5\nhG : MeasurableSpace G\ninst\u271d\u00b3 : MeasurableSingletonClass G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Countable G\ninst\u271d : Fintype G\nm : \u2115\nhm : m \u2265 1\n\u03a9 : Type u_8\nh\u03a9 : MeasureSpace \u03a9\nX : Fin (m + 1) \u00d7 Fin (m + 1) \u2192 \u03a9 \u2192 G\nh_indep : iIndepFun X volume\n\u22a2 I[fun \u03c9 j => \u2211 i, X (i, j) \u03c9 : fun \u03c9 i => \u2211 j, X (i, j) \u03c9|\u2211 p, X p] \u2264\n    (\u2211 j,\n          ((@multiDist G hG inst\u271d\u00b2 (m + 1) (fun x => \u03a9) (fun x => h\u03a9) fun i => X (i, j)) -\n            @condMultiDist G hG inst\u271d\u00b2 (m + 1) (fun x => \u03a9) (fun x => h\u03a9) G inst\u271d (fun i => X (i, j)) fun i =>\n              \u2211 k \u2208 Finset.Ici j, X (i, k)) +\n        @multiDist G hG inst\u271d\u00b2 (m + 1) (fun x => \u03a9) (fun x => h\u03a9) fun i => X (i, \u2191m)) -\n      @multiDist G hG inst\u271d\u00b2 (m + 1) (fun x => \u03a9) (fun x => h\u03a9) fun i => \u2211 j, X (i, j)",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MoreRuzsaDist.lean#L2070"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2024-10-17T18:26:36+00:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "8051869cf09a7c8719bb5bc7d924a557111ab098831451883feba67b30437f11"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MultiTauFunctional.lean",
        "start_line": 54,
        "start_column": 111,
        "end_line": 54,
        "end_column": 116
      },
      "debug_info": {
        "goal": "G \u03a9\u2080 : Type u\ninst\u271d\u2074 : @MeasureableFinGroup G\ninst\u271d\u00b3 : TopologicalSpace G\ninst\u271d\u00b2 : DiscreteTopology G\ninst\u271d\u00b9 : BorelSpace G\ninst\u271d : MeasureSpace \u03a9\u2080\np : @multiRefPackage G \u03a9\u2080 inst\u271d\u2074 inst\u271d\n\u22a2 Continuous fun \u03bc =>\n    @multiTau G \u03a9\u2080 inst\u271d\u2074 inst\u271d p (fun x => G)\n      (fun i =>\n        { toMeasurableSpace := @MeasureableFinGroup.toMeasurableSpace ((fun x => G) i) inst\u271d\u2074, volume := \u2191(\u03bc i) })\n      fun x => id",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MultiTauFunctional.lean#L54"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T09:57:28-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "23fa339cbb8cb837b1bc01537af61a54667eba2338035c2c1392ae0156a4a7c4"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MultiTauFunctional.lean",
        "start_line": 57,
        "start_column": 222,
        "end_line": 57,
        "end_column": 227
      },
      "debug_info": {
        "goal": "G \u03a9\u2080 : Type u\ninst\u271d\u00b9 : @MeasureableFinGroup G\ninst\u271d : MeasureSpace \u03a9\u2080\np : @multiRefPackage G \u03a9\u2080 inst\u271d\u00b9 inst\u271d\n\u22a2 \u2203 \u03a9 h\u03a9 X, @multiTauMinimizes G \u03a9\u2080 inst\u271d\u00b9 inst\u271d p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MultiTauFunctional.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-08-18T19:14:43-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "ed37a34384b8761ee634e86987d7a117075aade18fb4c7526f31922d77402bb1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/merkletree-neverfails",
        "commit": "0500c1804c8457a25a494d246df91e37e021667f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 193,
        "start_column": 2,
        "end_line": 193,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst : DecidableEq \u03b1\ninst_1 : SelectableType \u03b1\npreexisting_cache : QueryCache (MerkleTree.spec \u03b1)\nn : \u2115\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\n\u22a2 ((simulateQ randomOracle\n          (Vector.mmap (fun x => liftM (query () x))\n            (List.Vector.ofFn fun i =>\n              (leaves.get \u27e82 * \u2191i, MerkleTree.buildLayer._proof_4 n i\u27e9,\n                leaves.get \u27e82 * \u2191i + 1, MerkleTree.buildLayer._proof_5 n i\u27e9)))).run\n      preexisting_cache).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/0500c1804c8457a25a494d246df91e37e021667f/ArkLib/CommitmentScheme/MerkleTree.lean#L193"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-05-26T13:38:13-04:00",
        "inclusion_date": "2025-05-27T07:01:21.354194+00:00"
      },
      "id": "69862bd3ce5c4a5def9b8521162018c4e1db0dcde5e7fd02a272d40c2eb0a4f5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/merkletree-neverfails",
        "commit": "0500c1804c8457a25a494d246df91e37e021667f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 238,
        "start_column": 4,
        "end_line": 238,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case right\n\u03b1 : Type\ninst\u271d\u00b3 : DecidableEq \u03b1\ninst\u271d\u00b2 : Inhabited \u03b1\ninst\u271d\u00b9 : Fintype \u03b1\ninst\u271d : SelectableType \u03b1\nn : \u2115\nleaves : List.Vector \u03b1 (2 ^ n)\ni : Fin (2 ^ n)\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\npreexisting_cache : QueryCache (MerkleTree.spec \u03b1)\nmerkle_tree_cache : MerkleTree.Cache \u03b1 n\nquery_cache : QueryCache (MerkleTree.spec \u03b1)\nh_mem_support :\n  (merkle_tree_cache, query_cache) \u2208\n    ((simulateQ randomOracle (MerkleTree.buildMerkleTree \u03b1 n leaves)).run preexisting_cache).support\n\u22a2 ((simulateQ randomOracle\n          (MerkleTree.verifyProof \u03b1 inst\u271d\u00b3 n i (leaves.get i) (MerkleTree.getRoot \u03b1 n merkle_tree_cache)\n            (MerkleTree.generateProof \u03b1 n i merkle_tree_cache))).run\n      query_cache).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/0500c1804c8457a25a494d246df91e37e021667f/ArkLib/CommitmentScheme/MerkleTree.lean#L238"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-05-26T13:38:13-04:00",
        "inclusion_date": "2025-05-27T07:01:21.354194+00:00"
      },
      "id": "ea7c3abf710c257c4f036b72578c80d8666f4a754a9a77fe55d0aac74fa40717"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 52,
        "start_column": 10,
        "end_line": 52,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd Regex.emptystr\nhy_emptyset : Regex.emptystr \u2260 Regex.emptyset\nhy_starany : Regex.emptystr \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd Regex.emptystr \u22ef\nh' : \u00acx = Regex.emptystr\nh : \u00acRegex.emptystr < x\n\u22a2 x < Regex.emptystr",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "da3eebad8f77f4e3c19c571c149081dc2c1ed093436e0a87ce3953111883e3de"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 65,
        "start_column": 10,
        "end_line": 65,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd Regex.any\nhy_emptyset : Regex.any \u2260 Regex.emptyset\nhy_starany : Regex.any \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd Regex.any \u22ef\nh' : \u00acx = Regex.any\nh : \u00acRegex.any < x\n\u22a2 x < Regex.any",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "774f1ccad3263da8b2cc76b5a97edcca77d25791b9c7d5dfcbc8993f823f7fe4"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 78,
        "start_column": 10,
        "end_line": 78,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\np\u271d : Predicate.Pred \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd (Regex.pred p\u271d)\nhy_emptyset : Regex.pred p\u271d \u2260 Regex.emptyset\nhy_starany : Regex.pred p\u271d \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd (Regex.pred p\u271d) \u22ef\nh' : \u00acx = Regex.pred p\u271d\nh : \u00acRegex.pred p\u271d < x\n\u22a2 x < Regex.pred p\u271d",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "a8b5f633fdf0456535a223f93d682b22843a088659a49a427f32b955106f10f0"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 91,
        "start_column": 10,
        "end_line": 91,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nx1\u271d x2\u271d : Regex \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd (x1\u271d.concat x2\u271d)\nhy_emptyset : x1\u271d.concat x2\u271d \u2260 Regex.emptyset\nhy_starany : x1\u271d.concat x2\u271d \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd (x1\u271d.concat x2\u271d) \u22ef\nh' : \u00acx = x1\u271d.concat x2\u271d\nh : \u00acx1\u271d.concat x2\u271d < x\n\u22a2 x < x1\u271d.concat x2\u271d",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "a263b7c280e0c1b09f39e25825a5bf7906ba0334f768b9bc71a0090865827df7"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 101,
        "start_column": 8,
        "end_line": 101,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case a.x1nstar\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nx1\u271d : Regex \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd x1\u271d.star\nhy_emptyset : x1\u271d.star \u2260 Regex.emptyset\nhy_starany : x1\u271d.star \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd x1\u271d.star \u22ef\nh\u271d : \u00acx = x1\u271d.star\nh : x1\u271d.star < x\n\u22a2 x1\u271d \u2260 Regex.any",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "7aa3a5db91a8c16d432fc390e5d004d51a620f7df6f7d096242c0434cb11534e"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 105,
        "start_column": 10,
        "end_line": 105,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nx1\u271d : Regex \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd x1\u271d.star\nhy_emptyset : x1\u271d.star \u2260 Regex.emptyset\nhy_starany : x1\u271d.star \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd x1\u271d.star \u22ef\nh' : \u00acx = x1\u271d.star\nh : \u00acx1\u271d.star < x\n\u22a2 x < x1\u271d.star",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L105"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "c58ac89ce9d690014f523e9f2acdc1f8574b567f47999f76fb78a9c8b581fee7"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 107,
        "start_column": 10,
        "end_line": 107,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a.x1nstar\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nx1\u271d : Regex \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd x1\u271d.star\nhy_emptyset : x1\u271d.star \u2260 Regex.emptyset\nhy_starany : x1\u271d.star \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd x1\u271d.star \u22ef\nh\u271d : \u00acx = x1\u271d.star\nh : \u00acx1\u271d.star < x\n\u22a2 x1\u271d \u2260 Regex.any",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L107"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "95b1df9fef5241b9b56ed640a8056113aa2dee9482d18a9dacab8747f344b038"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 y : Regex \u03b1\n\u22a2 mergeOr (x1.or x2) y \u2260 Regex.emptyset",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "535b6f121d2c8bbd573ddbfa4470955d027f3611ab448b397ceedbf1954720ad"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 123,
        "start_column": 2,
        "end_line": 123,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 y : Regex \u03b1\n\u22a2 mergeOr (x1.or x2) y \u2260 Regex.any.star",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L123"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "1b2eeb1f336c2ff225e150a1e33db6b6e96d23ab34ddea5f47dfa2cd5e54121b"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 129,
        "start_column": 2,
        "end_line": 129,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 : Regex \u03b1\n\u22a2 x1.or x2 \u2260 Regex.emptyset",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "1024bdab7b634cc53c5ca906e8c051903611a1f2eb28e5ce1490b8f48fe6a352"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 135,
        "start_column": 2,
        "end_line": 135,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 : Regex \u03b1\n\u22a2 x1.or x2 \u2260 Regex.any.star",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L135"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "835c6582456bd8ba8631ebf5b9f577a0c5a5d1aeefd7251072ec0b83f8a14636"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1626,
        "start_column": 10,
        "end_line": 1626,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case inr.intro.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\n\u03b2 : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4\u271d : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4\u271d v w\nv_F : (M, v)\u22a8F\nF\u03b4_in_H : (F, \u03b4\u271d) \u2208 H (\u2217\u03b2)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be))).isFree = true\n\u03b4_ne : \u00ac\u03b4\u271d = []\nv_\u03b1_w : Relation.ReflTransGen (relate M \u03b2) v w\nn : \u2115\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : \u2200 (i : Fin n), relate M \u03b2 (ws.get i.castSucc) (ws.get i.succ)\nclaim :\n  \u2200 (k : Fin n.succ),\n    \u2203 sk,\n      Relation.TransGen (cEdge X tab) t sk \u2227\n        (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n          \u2203 \u03b3,\n            (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n              (M, ws[k])\u22a8nodeAt sk \u2227 ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)\nh : w = w\nsn : PathIn tab\nt_sn : Relation.TransGen (cEdge X tab) t sn\n\u03b4 : List Program\nloaded_con : (~''(AnyFormula.loaded (\u230a\u230a\u03b4\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sn)\nw_sn : (M, w)\u22a8nodeAt sn\nwithout_con : ((nodeAt sn).without (~''(AnyFormula.loaded (\u230a\u230a\u03b4\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True\n\u03b1_natom : \u00ac(\u2217\u03b2).isAtomic\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n        (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L1626"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-27T12:30:10+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "8b559b5d96f45c6fff68e9c4f2a50e80d60bbac5e9f191925e2bdd64e2393798"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 210,
        "start_column": 4,
        "end_line": 210,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2)\nn : \u2115\nhn : 2 ^ n < p\n\u22a2 \u2200 (offset : \u2115) (env : Environment (F p)) (b_var : Var field (F p)) (b : field (F p)),\n    eval env b_var = b \u2192\n      True \u2192\n        Circuit.constraints_hold.soundness env\n            ((do\n                  let __discr \u2190 Gadgets.ToBits.main p prime n b_var\n                  let x : Vector (Expression (F p)) n := __discr\n                  pure PUnit.unit).operations\n              offset) \u2192\n          ZMod.val b < 2 ^ n",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/Bits.lean#L210"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-27T15:56:45+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "613cf840d9d4a40ead196634559d4864c6e2e28ce562938d56b5c290d41e3737"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 213,
        "start_column": 4,
        "end_line": 213,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2)\nn : \u2115\nhn : 2 ^ n < p\n\u22a2 \u2200 (offset : \u2115) (env : Environment (F p)) (b_var : Var field (F p)),\n    env.uses_local_witnesses_completeness\n        ((do\n              let __discr \u2190 Gadgets.ToBits.main p prime n b_var\n              let x : Vector (Expression (F p)) n := __discr\n              pure PUnit.unit).operations\n          offset) \u2192\n      \u2200 (b : field (F p)),\n        eval env b_var = b \u2192\n          True \u2192\n            ZMod.val b < 2 ^ n \u2192\n              Circuit.constraints_hold.completeness env\n                ((do\n                      let __discr \u2190 Gadgets.ToBits.main p prime n b_var\n                      let x : Vector (Expression (F p)) n := __discr\n                      pure PUnit.unit).operations\n                  offset)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Gadgets/Bits.lean#L213"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-27T15:56:45+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "54da086022d8bceaa4b074e4875cd8cb8ba417bfd175406975a283332dfcb90d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "5b052ecbbe4fee21e9eec612282bc31bec494ed6",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Circuit/Loops.lean",
        "start_line": 773,
        "start_column": 2,
        "end_line": 773,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case mk.intro.intro\nF : Type\ninst\u271d\u00b9 : Field F\n\u03b1 : Type\nm : \u2115\ninst\u271d : Inhabited \u03b1\nxs : Vector \u03b1 m\nbody : \u03b1 \u2192 Circuit F Unit\nlawful : ConstantLawfulCircuits body\nn : \u2115\nops : Operations F n\nh_empty :\n  ops ++ \u27e8operations (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) n, \u22ef\u27e9 =\n    Operations.empty (final_offset (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) n)\nleft\u271d : ops = Operations.empty n\nempty2 :\n  operations (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) n =\n    Operations.empty (final_offset (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) n)\nlawful_loop : ConstantLawfulCircuit (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) :=\n  ConstantLawfulCircuit.from_forM_vector m F inst\u271d\u00b9 \u03b1 body xs lawful\nh_eq : ConstantLawfulCircuits.local_length body = 0 \u2228 m = 0\n\u22a2 m = 0 \u2228 \u2203 (x : m > 0), \u2203 ops, (body xs[m - 1] ops).2.withLength = Operations.empty (body xs[m - 1] ops).2.offset",
        "url": "https://github.com/Verified-zkEVM/clean/blob/5b052ecbbe4fee21e9eec612282bc31bec494ed6/Clean/Circuit/Loops.lean#L773"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-26T18:33:32+02:00",
        "inclusion_date": "2025-05-28T06:45:30.839285+00:00"
      },
      "id": "6a79cc93069fadb8ea9911c5db097491ea4c1d6a484a97fd98d5983f5daaa2e7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "6307d41c04815900fdcd7a08c2f47360b7eeb03a",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : \u2115\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n\u22a2 (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) \u2227\n    (env.get (i0 + 1) = 0 \u2228 env.get (i0 + 1) = 1) \u2227\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 \u2227\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n          (env.get (i0 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1) = 1) \u2227\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 \u2227\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                (env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 \u2227\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                      (env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/6307d41c04815900fdcd7a08c2f47360b7eeb03a/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-05-29T06:54:45.496918+00:00"
      },
      "id": "0f03bef9c567c57f02b0348c48e0d6ce191e233f95dab3e01377d8997407f738"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricIdeal.lean",
        "start_line": 79,
        "start_column": 4,
        "end_line": 79,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro\nM : Type u_1\nk : Type u_4\ninst\u271d\u00b2 : AddCommMonoid M\ninst\u271d\u00b9 : Field k\ninst\u271d : IsAlgClosed k\nI : Ideal (AddMonoidAlgebra k M)\nG : Type u_1 := AddLocalization \u22a4\nleft\u271d : I.IsPrime\ns : Set (M \u00d7 M)\nhsI :\n  Ideal.span\n      ((fun x =>\n          @AddMonoidAlgebra.isToricIdeal_iff_exists_span_single_sub_single.match_1 M (fun x => AddMonoidAlgebra k M) x\n            fun a b => single a 1 - single b 1) ''\n        s) =\n    I\nV : Scheme := Spec (CommRingCat.of (AddMonoidAlgebra k M \u29f8 I))\nx\u271d\u00b9 : V.Over (Spec (CommRingCat.of (AddMonoidAlgebra k M))) := sorry\nx\u271d : (Spec (CommRingCat.of (AddMonoidAlgebra k G))).Over (Spec (CommRingCat.of (AddMonoidAlgebra k M))) := sorry\nVinterT : Scheme :=\n  pullback (V \u2198 Spec (CommRingCat.of (AddMonoidAlgebra k M)))\n    (Spec (CommRingCat.of (AddMonoidAlgebra k G)) \u2198 Spec (CommRingCat.of (AddMonoidAlgebra k M)))\n\u22a2 \u2203 s,\n    @AddMonoidAlgebra.monoidIdeal M (AddLocalization \u22a4) k inst\u271d\u00b2 AddLocalization.instAddCommGroupTopAddSubmonoid_toric\n        (AddLocalization.addMonoidOf \u22a4) s.toAddSubmonoid EuclideanDomain.toCommRing =\n      I",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricIdeal.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-02-27T22:51:53+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "5b5c0e118db4e0f4f074f150a4e2a2e336c0faadb304ace9bcbf026c19ca1ccd"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 27,
        "start_column": 27,
        "end_line": 27,
        "end_column": 32
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 CategoryStruct.comp sorry ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S)))).hom =\n    (MonoidalCategoryStruct.tensorObj (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))\n        ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S))))).hom",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-04-26T12:44:28+01:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "f5ba25777ed3eab8eb314fe60e07fa89bde6e58d166328ca03a405431a408be2"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 31,
        "start_column": 14,
        "end_line": 31,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 CategoryStruct.comp\n      (MonoidalCategoryStruct.whiskerRight Mon_Class.one\n        ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S)))))\n      (Over.homMk sorry \u22ef) =\n    (MonoidalCategoryStruct.leftUnitor ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S))))).hom",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-04-26T12:44:28+01:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "e7e2fa6b685177f749e95a12cefc6f55a0773ff2aa0892b2864e0e33663acb20"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 32,
        "start_column": 14,
        "end_line": 32,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 CategoryStruct.comp\n      (MonoidalCategoryStruct.whiskerRight Mon_Class.mul\n        ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S)))))\n      (Over.homMk sorry \u22ef) =\n    CategoryStruct.comp\n      (MonoidalCategoryStruct.associator (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))\n          (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))\n          ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S))))).hom\n      (CategoryStruct.comp\n        (MonoidalCategoryStruct.whiskerLeft (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))\n          (Over.homMk sorry \u22ef))\n        (Over.homMk sorry \u22ef))",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-04-26T12:44:28+01:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "4627e0f74ff94dc29552df8b679d5105379ff0f964eccf775e45f4191b08864e"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 47,
        "start_column": 4,
        "end_line": 54,
        "end_column": 73
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 IsOpenImmersion sorry.left",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-03T17:36:42+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "62a60e51a5b5d19c5f3d803347a83d4462dfa412f728cd2daa270c61f0704e8c"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 56,
        "start_column": 4,
        "end_line": 60,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 IsDominant sorry.left",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-03T17:36:42+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "399628a60278e110c28a13c77d598709c3a3fe34ed67fd3d1bac13bc9042616d"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 62,
        "start_column": 4,
        "end_line": 64,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 CategoryStruct.comp\n      (MonoidalCategoryStruct.tensorHom\n        (CategoryStruct.id (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))) sorry)\n      Mod_Class.smul =\n    CategoryStruct.comp Mon_Class.mul sorry",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-03T17:36:42+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "dfdb7c42927e144468f1a3fc17529555376b00336e103d1e7803cd808492b213"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/Torus.lean",
        "start_line": 112,
        "start_column": 37,
        "end_line": 112,
        "end_column": 42
      },
      "debug_info": {
        "goal": "R : CommRingCat\n\u03c3 : Type u_1\n\u22a2 CategoryStruct.comp (Iso.hom (@AlgebraicGeometry.Scheme.splitTorusIsoSpec R \u03c3))\n      (Over.mk (Spec.map (CommRingCat.ofHom (algebraMap (\u2191R) (MvLaurentPolynomial \u03c3 \u2191R))))).hom =\n    (Over.mk (@AlgebraicGeometry.Scheme.SplitTorus (Spec R) \u03c3 \u2198 Spec R)).hom",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/Torus.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-04-26T12:44:28+01:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "fb07012aba9fc5bb12ba5e0dd3891ff8d326eb911e1603b533392302171e57cc"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX Y : C\ninst\u271d\u00b9 : Grp_Class X\ninst\u271d : Grp_Class Y\nZ : C\nf g : Z \u27f6 tensorObj X Y\nh\u2081 : CategoryStruct.comp f (fst X Y) = CategoryStruct.comp g (fst X Y)\nh\u2082 : CategoryStruct.comp f (snd X Y) = CategoryStruct.comp g (snd X Y)\n\u22a2 f = g",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-13T21:07:25+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "01232ac847c321dabd6b715df38edf9326730eabf9f4b58643b2088b66b333f5"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 89,
        "start_column": 44,
        "end_line": 89,
        "end_column": 49
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX Y : C\ninst\u271d\u00b9 : Grp_Class X\ninst\u271d : Grp_Class Y\n\u22a2 Grp_Class.inv = tensorHom Grp_Class.inv Grp_Class.inv",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-14T16:33:38+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "145a797ae9c662e6294ac3b2a9d940abb44708dd9d1da79c5a2b43932a281b25"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 99,
        "start_column": 12,
        "end_line": 99,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case mk.left.refine_1\nC : Type u_1\ninst\u271d\u00b3 : Category.{?u.108251, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 CategoryStruct.comp one (fst X.X Y.X) = X.one",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-14T16:33:38+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "aba7dc6c0aa5650fcd72209f3c5e9f6255e910816d1a3c3f2d83c4da2b28f574"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 101,
        "start_column": 10,
        "end_line": 101,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case mk.left.refine_2\nC : Type u_1\ninst\u271d\u00b3 : Category.{?u.108251, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 CategoryStruct.comp mul (fst X.X Y.X) = CategoryStruct.comp (tensorHom (fst X.X Y.X) (fst X.X Y.X)) X.mul",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-14T16:33:38+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "a403ec9981601a1ac4bff5e2734c6f5df997e7f107da02df719b7ff36116f2d3"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 103,
        "start_column": 20,
        "end_line": 103,
        "end_column": 25
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 \u2200 \u2983X_1 Y_1 : Discrete WalkingPair\u2984 (f : X_1 \u27f6 Y_1),\n    CategoryStruct.comp (((Functor.const (Discrete WalkingPair)).obj (Grp_.mk' (tensorObj X.X Y.X))).map f)\n        (Discrete.casesOn Y_1 fun as =>\n          WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry) =\n      CategoryStruct.comp\n        (Discrete.casesOn X_1 fun as => WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry)\n        ((pair X Y).map f)",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-13T21:07:25+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "2a488b325fe9c1abd68b80980d4bbf43de5a714090657aa3ada00e97f59db6f4"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 109,
        "start_column": 17,
        "end_line": 109,
        "end_column": 22
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\ns : Cone (pair X Y)\n\u22a2 CategoryStruct.comp s.pt.one (id sorry) =\n    { pt := Grp_.mk' (tensorObj X.X Y.X),\n          \u03c0 :=\n            {\n              app := fun X_1 =>\n                Discrete.casesOn X_1 fun as =>\n                  WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n              naturality := \u22ef } }.pt.one",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-13T12:13:41+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "77b0f9d53e4cbaf781c7e39e6da3f22f94c16aa73deae2ccbccad1daffaccbeb"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 110,
        "start_column": 17,
        "end_line": 110,
        "end_column": 22
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\ns : Cone (pair X Y)\n\u22a2 CategoryStruct.comp s.pt.mul (id sorry) =\n    CategoryStruct.comp (tensorHom (id sorry) (id sorry))\n      { pt := Grp_.mk' (tensorObj X.X Y.X),\n            \u03c0 :=\n              {\n                app := fun X_1 =>\n                  Discrete.casesOn X_1 fun as =>\n                    WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n                naturality := \u22ef } }.pt.mul",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L110"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-13T12:13:41+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "a8a44d222c50ba07a2e0b7827c92bb2c15fba79324be05abcee25f96f17d4d65"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 112,
        "start_column": 19,
        "end_line": 112,
        "end_column": 24
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 \u2200 (s : Cone (pair X Y)) (j : Discrete WalkingPair),\n    CategoryStruct.comp { hom := id sorry, one_hom := \u22ef, mul_hom := \u22ef }\n        ({ pt := Grp_.mk' (tensorObj X.X Y.X),\n                \u03c0 :=\n                  {\n                    app := fun X_1 =>\n                      Discrete.casesOn X_1 fun as =>\n                        WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n                    naturality := \u22ef } }.\u03c0.app\n          j) =\n      s.\u03c0.app j",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-13T12:13:41+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "a44f96183cb5d029a17854d2500dc294315624c5aaa24f9326ab445b65885f69"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 113,
        "start_column": 20,
        "end_line": 113,
        "end_column": 25
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 \u2200 (s : Cone (pair X Y))\n    (m :\n      s.pt \u27f6\n        { pt := Grp_.mk' (tensorObj X.X Y.X),\n            \u03c0 :=\n              {\n                app := fun X_1 =>\n                  Discrete.casesOn X_1 fun as =>\n                    WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n                naturality := \u22ef } }.pt),\n    (\u2200 (j : Discrete WalkingPair),\n        CategoryStruct.comp m\n            ({ pt := Grp_.mk' (tensorObj X.X Y.X),\n                    \u03c0 :=\n                      {\n                        app := fun X_1 =>\n                          Discrete.casesOn X_1 fun as =>\n                            WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n                        naturality := \u22ef } }.\u03c0.app\n              j) =\n          s.\u03c0.app j) \u2192\n      m = { hom := id sorry, one_hom := \u22ef, mul_hom := \u22ef }",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-13T12:13:41+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "eabdc63896de67360cdf7f3a057626d9010aaee25fae8a6ec5f58d3f9a9bdb25"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/Diagonalizable.lean",
        "start_line": 39,
        "start_column": 77,
        "end_line": 39,
        "end_column": 82
      },
      "debug_info": {
        "goal": "K : Type u_1\ninst\u271d\u00b9 : Field K\nG : Over (Spec (CommRingCat.of K))\ninst\u271d : Grp_Class G\n\u22a2 @AlgebraicGeometry.Scheme.IsDiagonalisable (CommRingCat.of K) G inst\u271d \u2194\n    IsAffine G.left \u2227 Submodule.span K {a | IsGroupLikeElem K a} = \u22a4",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/Diagonalizable.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-15T21:00:56+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "9d14b9ba2cb4adde302699694fabbdfbded56326b667575c3147f88af5ed53b7"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/CoalgToAlg.lean",
        "start_line": 149,
        "start_column": 28,
        "end_line": 149,
        "end_column": 33
      },
      "debug_info": {
        "goal": "R A C : Type u\ninst\u271d\u2075 : CommRing R\ninst\u271d\u2074 : CommRing A\ninst\u271d\u00b3 : AddCommGroup C\ninst\u271d\u00b2 : Algebra R A\ninst\u271d\u00b9 : Module R C\ninst\u271d : Coalgebra R C\nf g : C \u2192\u2097[R] A\n\u22a2 mul' R A \u2218\u2097 TensorProduct.map f g \u2218\u2097 comul = mul' R A \u2218\u2097 TensorProduct.map g f \u2218\u2097 comul",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/CoalgToAlg.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "4362719e8620",
        "blame_date": "2025-04-12T17:46:36+02:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "0c7360f5b010a728f1ce9e34447093f78036754bfce4a513f12bcb8bc3fca6da"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/CoalgToAlg.lean",
        "start_line": 324,
        "start_column": 67,
        "end_line": 324,
        "end_column": 72
      },
      "debug_info": {
        "goal": "R A C : Type u\ninst\u271d\u2074 : CommRing R\ninst\u271d\u00b3 : CommRing A\ninst\u271d\u00b2 : CommRing C\ninst\u271d\u00b9 : HopfAlgebra R A\ninst\u271d : HopfAlgebra R C\nf : C \u2192\u2090c[R] A\n\u22a2 f\u207b\u00b9 * f = 1",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/CoalgToAlg.lean#L324"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-07T08:37:08+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "dd6d9bf7afe53596efb00f13dfdcac916c57203657e044443df23df6a43d8742"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/GroupLike.lean",
        "start_line": 113,
        "start_column": 67,
        "end_line": 113,
        "end_column": 72
      },
      "debug_info": {
        "goal": "K : Type u_2\nA : Type u_3\ninst\u271d\u00b3 : Field K\ninst\u271d\u00b2 : Ring A\ninst\u271d\u00b9 : Bialgebra K A\ninst\u271d : Nontrivial A\na : A\nha : @Bialgebra.IsGroupLikeElem K A Semifield.toCommSemiring Ring.toSemiring inst\u271d\u00b9 a\ns : Set A\nhsspan :\n  span K s = span K ({b | @Bialgebra.IsGroupLikeElem K A Semifield.toCommSemiring Ring.toSemiring inst\u271d\u00b9 b} \\ {a})\nhsindep : LinearIndependent K Subtype.val\nhs : \u2200 x \u2208 s, @Bialgebra.IsGroupLikeElem K A Semifield.toCommSemiring Ring.toSemiring inst\u271d\u00b9 x \u2227 \u00acx = a\nn : \u2115\nc : Fin n \u2192 K\ne : Fin n \u2192 \u2191s\nhcea : \u2211 i, c i \u2022 \u2191(e i) = a\n\u22a2 Injective e",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/GroupLike.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-09T02:11:46+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "ea0eda9fb2a5b17034ee5558c205578a7df0123fb0310d088ff5913b62ee877e"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/Cocomm.lean",
        "start_line": 89,
        "start_column": 17,
        "end_line": 89,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R C : Type u\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : Semiring C\ninst\u271d\u00b9 : HopfAlgebra R C\ninst\u271d : @Coalgebra.IsCocomm R C inst\u271d\u00b3 NonUnitalNonAssocSemiring.toAddCommMonoid Algebra.toModule Bialgebra.toCoalgebra\n\u22a2 counit \u2218\u2097 antipode = counit",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/Cocomm.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-09T15:09:11+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "cef7166c74d410db31d6926fc47d65bc57f9a2149276c6a965a74679488dc37c"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/Cocomm.lean",
        "start_line": 90,
        "start_column": 20,
        "end_line": 90,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R C : Type u\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : Semiring C\ninst\u271d\u00b9 : HopfAlgebra R C\ninst\u271d : @Coalgebra.IsCocomm R C inst\u271d\u00b3 NonUnitalNonAssocSemiring.toAddCommMonoid Algebra.toModule Bialgebra.toCoalgebra\n\u22a2 map antipode antipode \u2218\u2097 comul = comul \u2218\u2097 antipode",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/Cocomm.lean#L90"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-09T15:09:11+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "3d98babe068c17789d934702ad3e784057cb2441ea62aacd53ed5cb093092255"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean",
        "start_line": 324,
        "start_column": 10,
        "end_line": 324,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nC : Type u\u2081\ninst\u271d\u2076 : Category.{v\u2081, u\u2081} C\ninst\u271d\u2075 : ChosenFiniteProducts C\nD : Type u\u2082\ninst\u271d\u2074 : Category.{v\u2082, u\u2082} D\ninst\u271d\u00b3 : ChosenFiniteProducts D\nF : Functor C D\ninst\u271d\u00b2 : F.Monoidal\ninst\u271d\u00b9 : F.Full\ninst\u271d : F.Faithful\nG : Grp_ D\nhG : F.essImage G.X\nF' : C \u224c F.EssImageSubcategory := F.toEssImage.asEquivalence\nthis : F'.inverse.Monoidal\n\u22a2 CategoryStruct.comp\n      (CategoryStruct.comp\n        (\u03bc F (F'.inverse.obj { obj := G.X, property := hG }) (F'.inverse.obj { obj := G.X, property := hG }))\n        (CategoryStruct.comp (F.map (\u03bc F'.inverse { obj := G.X, property := hG } { obj := G.X, property := hG }))\n          (F'.counitIso.hom.app (tensorObj { obj := G.X, property := hG } { obj := G.X, property := hG }))))\n      (fst { obj := G.X, property := hG }.obj { obj := G.X, property := hG }.obj) =\n    CategoryStruct.comp\n      (fst ((F'.inverse.comp F'.functor).obj { obj := G.X, property := hG })\n        ((F'.inverse.comp F'.functor).obj { obj := G.X, property := hG }))\n      (F'.counitIso.hom.app { obj := G.X, property := hG })",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean#L324"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-31T10:54:10+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "92123487def7277959e6d0f7dd67a053e98f0ff1567afc6172beba1eb86abb96"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean",
        "start_line": 325,
        "start_column": 10,
        "end_line": 325,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nC : Type u\u2081\ninst\u271d\u2076 : Category.{v\u2081, u\u2081} C\ninst\u271d\u2075 : ChosenFiniteProducts C\nD : Type u\u2082\ninst\u271d\u2074 : Category.{v\u2082, u\u2082} D\ninst\u271d\u00b3 : ChosenFiniteProducts D\nF : Functor C D\ninst\u271d\u00b2 : F.Monoidal\ninst\u271d\u00b9 : F.Full\ninst\u271d : F.Faithful\nG : Grp_ D\nhG : F.essImage G.X\nF' : C \u224c F.EssImageSubcategory := F.toEssImage.asEquivalence\nthis : F'.inverse.Monoidal\n\u22a2 CategoryStruct.comp\n      (CategoryStruct.comp\n        (\u03bc F (F'.inverse.obj { obj := G.X, property := hG }) (F'.inverse.obj { obj := G.X, property := hG }))\n        (CategoryStruct.comp (F.map (\u03bc F'.inverse { obj := G.X, property := hG } { obj := G.X, property := hG }))\n          (F'.counitIso.hom.app (tensorObj { obj := G.X, property := hG } { obj := G.X, property := hG }))))\n      (snd { obj := G.X, property := hG }.obj { obj := G.X, property := hG }.obj) =\n    CategoryStruct.comp\n      (tensorHom (F'.counitIso.hom.app { obj := G.X, property := hG })\n        (F'.counitIso.hom.app { obj := G.X, property := hG }))\n      (snd { obj := G.X, property := hG }.obj { obj := G.X, property := hG }.obj)",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean#L325"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-31T10:54:10+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "87a5636f43b0e1ee5af2157eae16623773ae1aa37dd4ff8d27b147b60cbe9448"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean",
        "start_line": 327,
        "start_column": 6,
        "end_line": 327,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case refine_2\nC : Type u\u2081\ninst\u271d\u2076 : Category.{v\u2081, u\u2081} C\ninst\u271d\u2075 : ChosenFiniteProducts C\nD : Type u\u2082\ninst\u271d\u2074 : Category.{v\u2082, u\u2082} D\ninst\u271d\u00b3 : ChosenFiniteProducts D\nF : Functor C D\ninst\u271d\u00b2 : F.Monoidal\ninst\u271d\u00b9 : F.Full\ninst\u271d : F.Faithful\nG : Grp_ D\nhG : F.essImage G.X\nF' : C \u224c F.EssImageSubcategory := F.toEssImage.asEquivalence\nthis\u271d : F'.inverse.Monoidal\nthis :\n  CategoryStruct.comp\n      (CategoryStruct.comp\n        (\u03bc F (F'.inverse.obj { obj := G.X, property := hG }) (F'.inverse.obj { obj := G.X, property := hG }))\n        (CategoryStruct.comp (F.map (\u03bc F'.inverse { obj := G.X, property := hG } { obj := G.X, property := hG }))\n          (F'.counitIso.hom.app (tensorObj { obj := G.X, property := hG } { obj := G.X, property := hG }))))\n      G.mul =\n    CategoryStruct.comp\n      (tensorHom (F'.counitIso.hom.app { obj := G.X, property := hG })\n        (F'.counitIso.hom.app { obj := G.X, property := hG }))\n      G.mul\n\u22a2 CategoryStruct.comp\n      (\u03bc F (F'.inverse.obj { obj := G.X, property := hG }) (F'.inverse.obj { obj := G.X, property := hG }))\n      (CategoryStruct.comp (F.map (\u03bc F'.inverse { obj := G.X, property := hG } { obj := G.X, property := hG }))\n        (CategoryStruct.comp\n          (F'.counitIso.hom.app (tensorObj { obj := G.X, property := hG } { obj := G.X, property := hG }))\n          ((Functor.id F.EssImageSubcategory).map G.mul))) =\n    CategoryStruct.comp\n      (tensorHom (F'.counitIso.hom.app { obj := G.X, property := hG })\n        (F'.counitIso.hom.app { obj := G.X, property := hG }))\n      G.mul",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-31T10:54:10+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "a0f97ccc0c42468080b73eea160ab2c97cdccf0f6fb065f0b97489c4c39c09c5"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/HopfAlgebra/Basic.lean",
        "start_line": 11,
        "start_column": 2,
        "end_line": 11,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : Semiring A\ninst\u271d : HopfAlgebra R A\na b : A\n\u22a2 antipode (a * b) = antipode b * antipode a",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/HopfAlgebra/Basic.lean#L11"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-25T16:11:16+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "1f8549a09e79320d39ce9ff6b5924f30199a353565f30208f133588d2318f0b9"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/Bialgebra/Hom.lean",
        "start_line": 46,
        "start_column": 82,
        "end_line": 46,
        "end_column": 87
      },
      "debug_info": {
        "goal": "case add.add\nR : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : CommSemiring A\ninst\u271d : Algebra R A\nx\u271d\u00b9 y\u271d\u00b9 x\u271d y\u271d : TensorProduct R A A\na\u271d\u00b3 :\n  (LinearMap.mul' R A) (x\u271d\u00b9 * x\u271d) = (LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) x\u271d \u2192\n    (LinearMap.mul' R A) (y\u271d\u00b9 * x\u271d) = (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) x\u271d \u2192\n      (LinearMap.mul' R A) ((x\u271d\u00b9 + y\u271d\u00b9) * x\u271d) = (LinearMap.mul' R A) (x\u271d\u00b9 + y\u271d\u00b9) * (LinearMap.mul' R A) x\u271d\na\u271d\u00b2 :\n  (LinearMap.mul' R A) (x\u271d\u00b9 * y\u271d) = (LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) y\u271d \u2192\n    (LinearMap.mul' R A) (y\u271d\u00b9 * y\u271d) = (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) y\u271d \u2192\n      (LinearMap.mul' R A) ((x\u271d\u00b9 + y\u271d\u00b9) * y\u271d) = (LinearMap.mul' R A) (x\u271d\u00b9 + y\u271d\u00b9) * (LinearMap.mul' R A) y\u271d\na\u271d\u00b9 : (LinearMap.mul' R A) (x\u271d\u00b9 * (x\u271d + y\u271d)) = (LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) (x\u271d + y\u271d)\na\u271d : (LinearMap.mul' R A) (y\u271d\u00b9 * (x\u271d + y\u271d)) = (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) (x\u271d + y\u271d)\n\u22a2 (LinearMap.mul' R A) (x\u271d\u00b9 * x\u271d) + (LinearMap.mul' R A) (y\u271d\u00b9 * x\u271d) +\n      ((LinearMap.mul' R A) (x\u271d\u00b9 * y\u271d) + (LinearMap.mul' R A) (y\u271d\u00b9 * y\u271d)) =\n    (LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) x\u271d + (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) x\u271d +\n      ((LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) y\u271d + (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) y\u271d)",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/Bialgebra/Hom.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-06T08:41:35+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "0022394b1a37fa9e574c68393e1737a895b095ee085b7488bc3f8c2fcbf6b644"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/Bialgebra/Hom.lean",
        "start_line": 62,
        "start_column": 4,
        "end_line": 62,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case a.h.h\nR : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : CommSemiring A\ninst\u271d : Bialgebra R A\na b : A\n\u22a2 (map { toAddHom := (LinearMap.mul' R A).toAddHom, map_smul' := \u22ef }\n        { toAddHom := (LinearMap.mul' R A).toAddHom, map_smul' := \u22ef })\n      ((tensorTensorTensorComm R A A A A) (comul a \u2297\u209c[R] comul b)) =\n    comul a * comul b",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/Bialgebra/Hom.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-06T08:41:35+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "6797e9e4201ab91c92ffbbf5e615ab9695496875df6e3a583c0b02c30a342b1b"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/Bialgebra/Hom.lean",
        "start_line": 74,
        "start_column": 31,
        "end_line": 74,
        "end_column": 36
      },
      "debug_info": {
        "goal": "case h\nR : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : CommSemiring A\ninst\u271d : Bialgebra R A\nx\u271d : A\n\u22a2 (LinearMap.mul' R R) ((map counit counit) (comul x\u271d)) = counit x\u271d",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/Bialgebra/Hom.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-06T08:41:35+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "d59a238fb0a8adf9d85704e9bb79900913e4c49b3e08797a4417447b966e1ae8"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/Bialgebra/Hom.lean",
        "start_line": 78,
        "start_column": 4,
        "end_line": 78,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h\nR : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : CommSemiring A\ninst\u271d : Bialgebra R A\na : A\n\u22a2 (map { toFun := \u21d1(comulAlgHom R A), map_add' := \u22ef, map_smul' := \u22ef }\n        { toFun := \u21d1(comulAlgHom R A), map_add' := \u22ef, map_smul' := \u22ef })\n      (comul a) =\n    (tensorTensorTensorComm R A A A A) ((map comul comul) (comul a))",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/Bialgebra/Hom.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-06T08:41:35+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "0a0dc2e4123d86c9592068c3ec3e8919278f0830df34d650a73dca5437c17a1c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "2c9311bf6331b5a4017d193b21ed77cd0b183d23",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/EvalDist/Basic.lean",
        "start_line": 50,
        "start_column": 12,
        "end_line": 50,
        "end_column": 17
      },
      "debug_info": {
        "goal": "\u03b1 : Type u\np q : @SPMF \u03b1\nh : \u2200 (x : \u03b1), (@SPMF.run \u03b1 p) (some x) = (@SPMF.run \u03b1 q) (some x)\nx : Option \u03b1\n\u22a2 p none = q none",
        "url": "https://github.com/dtumad/VCV-io/blob/2c9311bf6331b5a4017d193b21ed77cd0b183d23/VCVio/EvalDist/Basic.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-28T15:29:58-07:00",
        "inclusion_date": "2025-05-29T05:00:31.920000+00:00"
      },
      "id": "df2164c5d0fec2d420d332515c73024a95def8390d449a7f9800897c5388355e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "2c9311bf6331b5a4017d193b21ed77cd0b183d23",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/EvalDist/Basic.lean",
        "start_line": 213,
        "start_column": 23,
        "end_line": 213,
        "end_column": 28
      },
      "debug_info": {
        "goal": "\u03b1 \u03b2 \u03b3 : Type u\nm : Type u \u2192 Type v\ninst\u271d\u00b9 : Monad m\ninst\u271d : @HasEvalDist m inst\u271d\u00b9\n\u03b1\u271d \u03b2\u271d : Type u_1\nx : PMF \u03b1\u271d\ny : \u03b1\u271d \u2192 PMF \u03b2\u271d\n\u22a2 (OptionT.mk do\n      let a \u2190 x >>= y\n      Pure.pure (some a)) =\n    @Bind.bind SPMF Monad.toBind \u03b1\u271d \u03b2\u271d\n      (OptionT.mk do\n        let a \u2190 x\n        Pure.pure (some a))\n      (@Function.comp \u03b1\u271d (PMF \u03b2\u271d) (@SPMF \u03b2\u271d)\n        (fun p =>\n          OptionT.mk do\n            let a \u2190 p\n            Pure.pure (some a))\n        y)",
        "url": "https://github.com/dtumad/VCV-io/blob/2c9311bf6331b5a4017d193b21ed77cd0b183d23/VCVio/EvalDist/Basic.lean#L213"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-28T11:20:27-05:00",
        "inclusion_date": "2025-05-29T05:00:31.920000+00:00"
      },
      "id": "cee50d62e584aec5209964a0f1511cd8c5f2d10e8a0c683a947dd6746c059168"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "fad2ce6c05324695dee73fe71228e64f6c1bd1f8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 444,
        "start_column": 4,
        "end_line": 444,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inl\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\n\u22a2 |matrix3sumCanonicalSigning B\u2097 B\u1d63 hXX hYY \u25eai\u1d63 \u25e9j\u2097| =\n    \u2191(matrix3sumComposition x\u2080\u2097 x\u2081\u2097 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 y\u2080\u1d63 y\u2081\u1d63 A\u2097 D\u2097 D\u2080 D\u1d63 A\u1d63 \u25eai\u1d63 \u25e9j\u2097).val",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/fad2ce6c05324695dee73fe71228e64f6c1bd1f8/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L444"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-28T19:46:21+02:00",
        "inclusion_date": "2025-05-29T05:11:43.563465+00:00"
      },
      "id": "269b6d02fdabc5ac689cb2b1d83765e27d4da2bc38f2da7cf13524c8b09f47df"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 539,
        "start_column": 2,
        "end_line": 539,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  \u2200\n    (hB\u2097' :\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081),\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n      | (r\u2080, r\u2081, snd) =>\n        matrix3sumBottomLeft x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 D\u2097 D\u2080 D\u1d63 =\n          (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n            (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L539"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "41670d9d16e25d3a71b31ef71adbc7f189362c820e15d43fa2e42fa1b16f5e31"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 577,
        "start_column": 2,
        "end_line": 577,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let D := matrix3sumBottomLeft x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 D\u2097 D\u2080 D\u1d63;\n  \u2200\n    (hB\u2097' :\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081),\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n      | (r\u2080, r\u2081, r\u2082) =>\n        \u2200 (i : \u2191(X\u1d63.drop1 x\u2082\u1d63)), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L577"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "b00d655b19dd44557b5cbbded89cbbaadc00aa564f4b72da62d3bba8db3b69e9"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ff8e6d547d809fbea2dca606651661dd95593882",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 624,
        "start_column": 2,
        "end_line": 624,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let D := matrix3sumBottomLeft x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 D\u2097 D\u2080 D\u1d63;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      \u2200 (j : \u2191(Y\u2097.drop1 y\u2082\u2097)),\n        (fun x => D x j) = c\u2080 \u2228\n          (fun x => D x j) = -c\u2080 \u2228\n            (fun x => D x j) = c\u2081 \u2228\n              (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ff8e6d547d809fbea2dca606651661dd95593882/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L624"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-30T05:00:54.600883+00:00"
      },
      "id": "e136a0a0d4c38f7f04e8d7688c5b8e7d2786f5df1897cd21d20e7a3698b52544"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 642,
        "start_column": 2,
        "end_line": 642,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080 := B\u1d63.D\u2080 x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n          (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n            (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n          (B\u1d63.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 \u25eb matrix3sumBottomLeft x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 D\u2097 D\u2080 D\u1d63).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L642"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "7c25c4cb1ecd363597ba8e8bc707bf231b409433ec29987dee659fb9edf3a4d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 665,
        "start_column": 2,
        "end_line": 665,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n      let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n          (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n            (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n          (B\u2097.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097 \u229f matrix3sumBottomLeft x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 D\u2097 D\u2080 D\u1d63).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L665"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "acf20a9be6f29e6307dd0d1328a4bff58eaf177fad40a548ba35f902102bbc33"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 62,
        "start_column": 2,
        "end_line": 62,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\n\u22a2 Matrix.IsTotallyUnimodular (matrix3sumCanonicalSigning B\u2097 B\u1d63 hXX hYY)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-28T15:17:14+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "832f9ba25613d0053ae5fd70044c351cf2fedfcc4b7169192e0772fc5489b1c3"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 213,
        "start_column": 2,
        "end_line": 213,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 y1 y2 : Regex \u03b1\nhx : @OrIsSmart \u03b1 instLTRegexOfOrd (x1.or x2)\nhy : @OrIsSmart \u03b1 instLTRegexOfOrd (y1.or y2)\n\u22a2 mergeOr (x1.or x2) (y1.or y2) \u2260 Regex.emptyset",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/SmartOr.lean#L213"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-28T09:03:16+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "6eb988e4ecb7da997856ad2f62fc028e96145ff57b2f46629f772fa6ff938990"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 221,
        "start_column": 2,
        "end_line": 221,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 y : Regex \u03b1\nhx : @OrIsSmart \u03b1 instLTRegexOfOrd (x1.or x2)\nhy : Regex.SmartOrElem y\n\u22a2 mergeOr (x1.or x2) y \u2260 Regex.emptyset",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/SmartOr.lean#L221"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "b5854202c0d713954bd501457928a2a11ec5cbb7a4d577da218051d941da58ef"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 229,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 y : Regex \u03b1\nhx : @OrIsSmart \u03b1 instLTRegexOfOrd (x1.or x2)\nhy : @OrIsSmart \u03b1 instLTRegexOfOrd y\n\u22a2 mergeOr (x1.or x2) y \u2260 Regex.any.star",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/SmartOr.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-28T09:03:16+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "6637b941918bd36c394af4b2c3ed2feec787a7e2812f718e0a00fd11882ea40d"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 237,
        "start_column": 2,
        "end_line": 237,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 y : Regex \u03b1\nhx : @OrIsSmart \u03b1 instLTRegexOfOrd (x1.or x2)\nhy : Regex.SmartOrElem y\n\u22a2 mergeOr (x1.or x2) y \u2260 Regex.any.star",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/SmartOr.lean#L237"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "03f12bb806f94b6b048b35664302568e1416cc24f789bd2dd085bd12b62c3ecc"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 13,
        "start_column": 2,
        "end_line": 13,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nhlt : x < y\nhgt : x > y\n\u22a2 False",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L13"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T12:13:44+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "2ddd8c74cdecd9270c1cc5b1c690119a2c1b8a7ac46433e3e6b1f9a8f6b0d1f0"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 17,
        "start_column": 2,
        "end_line": 17,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nhlt : \u00acx < y\nhneq : x \u2260 y\n\u22a2 x > y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L17"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T12:13:44+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "9e907f77e6881e5b152b7da04fd775015061c36541c85e59db100be8987cadf8"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 21,
        "start_column": 2,
        "end_line": 21,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nhlt : \u00acx > y\nhneq : x \u2260 y\n\u22a2 x < y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T12:13:44+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "6dfb19ac34dfddd82a4fcbe36d2afb6e740c24619ebf113bd8532186e691cd36"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 25,
        "start_column": 2,
        "end_line": 25,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nh : compare x y = lt\n\u22a2 x < y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "ac6220aa42a5dfd0fd0c443c0f6610924bd5e8500143b24ad54967892e99d4dc"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nh : compare x y = gt\n\u22a2 x > y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "b86b226e49b158524b47b130e77e60ffd25c846c0071547b1c6a4cea5bcae4e6"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nh : compare x y = eq\n\u22a2 x = y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "9230840499660a775328af72dcc3866020504a2d6ef5ef7eb45cef9dff89f7b2"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nh : x < y\n\u22a2 x \u2260 y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "2503a36370cb97e019aaba5c9738bbf0b7c6d78097d8c02d8438197b98254b96"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 41,
        "start_column": 2,
        "end_line": 41,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nh : x > y\n\u22a2 x \u2260 y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "44eddca0ba8c69b3af781ab0b44150b5bfa20c7c25c09d002630416433adf2d6"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 54,
        "start_column": 2,
        "end_line": 54,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : \u03b1\n\u22a2 (x == y) = false \u2192 x \u2260 y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L54"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "857f8c30e8ae5fb1b6629cab8108e70ee199ea05dcbd81bd7dbe0cfa9f79ac8d"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "a9175fe24622b2ff7155ad85c1307639e69feda3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/LawfulEqOrd.lean",
        "start_line": 58,
        "start_column": 2,
        "end_line": 58,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : \u03b1\n\u22a2 \u00acx = y \u2194 x \u2260 y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/a9175fe24622b2ff7155ad85c1307639e69feda3/Katydid/Regex/Smart/LawfulEqOrd.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-28T09:03:16+01:00",
        "inclusion_date": "2025-05-29T05:25:51.849295+00:00"
      },
      "id": "7803778c823b0495d5271eaaf7c848a702243923cab4b8455e7dc51e7f37f801"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Test/realToFloat.lean",
        "start_line": 23,
        "start_column": 2,
        "end_line": 23,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 (fun x => x.1.exp + isomorph `RealToFloat (fun x => x.2 0) x) = fun p => p.1.exp + p.2 0",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/Test/realToFloat.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-11-19T16:57:30-05:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "c0d54bfa60547c746dc115d30556d3fd78b550ff3be63d063386c3bbc6a7e3a3"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Test/realToFloat.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 (fun x =>\n      x.1.exp + isomorph `RealToFloat (fun x => x.2 0) x \u2264 0 \u2227 x.1.exp + isomorph `RealToFloat (fun x => x.2 1) x \u2264 0) =\n    fun p => p.1.exp + p.2 0 \u2264 0 \u2227 p.1.exp + p.2 1 \u2264 0",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/Test/realToFloat.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-11-19T16:57:30-05:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "7b123661af1232e4b825d524f4b14b91d10feeed79958b038212934ea4eff3f4"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "examples/FloatTest.lean",
        "start_line": 13,
        "start_column": 82,
        "end_line": 13,
        "end_column": 87
      },
      "debug_info": {
        "goal": "x\u271d\u00b3 x\u271d\u00b2 x\u271d\u00b9 x\u271d : PUnit.{1}\n\u22a2 { data := #[1.0, 2.0, 3.0, 4.0, 3.0] }.toByteArray.size % 8 = 0",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/examples/FloatTest.lean#L13"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2025-01-07T15:43:19-05:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "e93dd22e7de6d89815d8ae7f4892b134cc27172d51d5b4fb7baa4430a35c18f3"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "SciLean/Util/Alternatives.lean",
        "start_line": 95,
        "start_column": 7,
        "end_line": 95,
        "end_column": 12
      },
      "debug_info": {
        "goal": "a b : Nat\nh : a = b\n\u22a2 (fun x =>\n      let y := x + x + x + x;\n      y + y) =\n    fun x =>\n    let y := x + x + x + x;\n    let y := x + x + x + x;\n    x + x + x + x",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/SciLean/Util/Alternatives.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2023-04-26T17:56:32-04:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "e3f23306dea9b48d572c6813e4bfa042f392a9c8a9c508c705e40a9a6faed581"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "SciLean/Modules/Prob/Erased.lean",
        "start_line": 18,
        "start_column": 63,
        "end_line": 18,
        "end_column": 68
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nx y : Erased \u03b1\n\u22a2 \u2191x = \u2191y \u2192 x = y",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/SciLean/Modules/Prob/Erased.lean#L18"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-02-08T10:58:37-05:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "d95d2b28923d5acab74c10e0cd02c67d503d88c285e1d739c64a6d33a604fe2a"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "SciLean/Modules/Prob/Erased.lean",
        "start_line": 25,
        "start_column": 56,
        "end_line": 25,
        "end_column": 61
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nx : \u03b1\n\u22a2 \u2191(erase x) = x",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/SciLean/Modules/Prob/Erased.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-02-08T10:58:37-05:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "d0806764df9631774d819e99b02e32abcceb28e50f1c5195ed7c7ed9ceb9ae42"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "SciLean/Modules/Prob/TestFunctionExtension.lean",
        "start_line": 23,
        "start_column": 15,
        "end_line": 23,
        "end_column": 20
      },
      "debug_info": {
        "goal": "X : Sort u_1\nY : Type u_2\ninst\u271d\u00b9 : NormedAddCommGroup Y\ninst\u271d : NormedSpace \u211d Y\nF : (X \u2192 \u211d) \u2192 \u211d\n\u03c6 : X \u2192 \u211d\ny : Y\n\u22a2 (testFunctionExtension F fun x => \u03c6 x \u2022 y) = F \u03c6 \u2022 y",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/SciLean/Modules/Prob/TestFunctionExtension.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-02-08T10:58:37-05:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "9976edfd75788d3dc0c71c4c4a46b38ea4a270f563b97cb44d917f295408e866"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "SciLean/Modules/Prob/TestFunctionExtension.lean",
        "start_line": 36,
        "start_column": 11,
        "end_line": 36,
        "end_column": 16
      },
      "debug_info": {
        "goal": "X : Sort u_1\nY : Type u_2\ninst\u271d\u00b9 : NormedAddCommGroup Y\ninst\u271d : NormedSpace \u211d Y\nF : (X \u2192 \u211d) \u2192 \u211d\nG : (X \u2192 Y) \u2192 Y\nf : X \u2192 Y\nh : \u2200 (\u03c6 : X \u2192 \u211d) (y : Y), F \u03c6 \u2022 y = G fun x => \u03c6 x \u2022 y\n\u22a2 testFunctionExtension F f = G f",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/SciLean/Modules/Prob/TestFunctionExtension.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-02-08T10:58:37-05:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "29518c5d6253911c7eb3fa92f134ea72db67c78dfd03bdcb61589c8a8ed8868f"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "SciLean/Modules/Prob/DerivUnderIntegralSign.lean",
        "start_line": 32,
        "start_column": 41,
        "end_line": 32,
        "end_column": 46
      },
      "debug_info": {
        "goal": "X : Type u_2\ninst\u271d\u00b3 : NormedAddCommGroup X\ninst\u271d\u00b2 : NormedSpace \u211d X\nY : Type u_1\nx\u271d : MeasurableSpace Y\nZ : Type u_3\ninst\u271d\u00b9 : NormedAddCommGroup Z\ninst\u271d : NormedSpace \u211d Z\n\u03bc : X \u2192 Measure Y\nf : X \u2192 Y \u2192 Z\nx dx : X\nh : DifferentiableUnderIntegralAt f \u03bc x\n\u22a2 (fderiv \u211d (fun x => \u222b (y : Y), f x y \u2202\u03bc x) x) dx =\n    (fderiv \u211d (fun x' => \u222b (y : Y), f x y \u2202\u03bc x') x) dx + \u222b (y : Y), (fderiv \u211d (fun x => f x y) x) dx \u2202\u03bc x",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/SciLean/Modules/Prob/DerivUnderIntegralSign.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-02-12T01:13:42+01:00",
        "inclusion_date": "2025-05-29T05:45:13.961831+00:00"
      },
      "id": "e66469233f8695318fb5a7795a86667299fdda620175d88571bb47deba716703"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 499,
        "start_column": 8,
        "end_line": 499,
        "end_column": 13
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u00ac\u2191i\u1d63 = x\u2081\nhx\u2082 : \u2191i\u1d63 \u2260 x\u2082\nhX\u1d63 : \u2191i\u1d63 \u2208 X\u1d63\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u00ac\u2191j\u2097 = y\u2081\nhy\u2082 : \u2191j\u2097 \u2260 y\u2082\nhY\u2097 : \u2191j\u2097 \u2208 Y\u2097\n\u22a2 |((Matrix.of fun i =>\n              ![B\u1d63.toCanonicalSigning \u27e8x\u2080, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8x\u2082, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 \u27e8y\u2082, \u22ef\u27e9 \u27e8\u2191i, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9,\n                B\u1d63.toCanonicalSigning \u27e8x\u2080, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8x\u2082, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 \u27e8y\u2082, \u22ef\u27e9 \u27e8\u2191i, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9]) *\n            !![B\u2097.toCanonicalSigning \u27e8x\u2080, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8x\u2082, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 \u27e8y\u2082, \u22ef\u27e9 \u27e8x\u2080, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9,\n                  B\u2097.toCanonicalSigning \u27e8x\u2080, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8x\u2082, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 \u27e8y\u2082, \u22ef\u27e9 \u27e8x\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9;\n                B\u2097.toCanonicalSigning \u27e8x\u2080, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8x\u2082, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 \u27e8y\u2082, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9,\n                  B\u2097.toCanonicalSigning \u27e8x\u2080, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8x\u2082, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 \u27e8y\u2082, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9]\u207b\u00b9 *\n          ![B\u2097.toCanonicalSigning \u27e8x\u2080, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8x\u2082, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 \u27e8y\u2082, \u22ef\u27e9 \u27e8x\u2080, \u22ef\u27e9 \u2218 \u22ef.elem,\n            B\u2097.toCanonicalSigning \u27e8x\u2080, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u27e8x\u2082, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 \u27e8y\u2082, \u22ef\u27e9 \u27e8x\u2081, \u22ef\u27e9 \u2218 \u22ef.elem])\n        \u27e8\u2191i\u1d63, \u22ef\u27e9 \u27e8\u2191j\u2097, \u22ef\u27e9| =\n    (((Matrix.of fun i => ![if B\u1d63 \u27e8\u2191i, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 = 0 then 0 else 1, if B\u1d63 \u27e8\u2191i, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 = 0 then 0 else 1]) *\n            !![if B\u2097 \u27e8x\u2080, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 = 0 then 0 else 1, if B\u2097 \u27e8x\u2080, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 = 0 then 0 else 1;\n                if B\u2097 \u27e8x\u2081, \u22ef\u27e9 \u27e8y\u2080, \u22ef\u27e9 = 0 then 0 else 1, if B\u2097 \u27e8x\u2081, \u22ef\u27e9 \u27e8y\u2081, \u22ef\u27e9 = 0 then 0 else 1]\u207b\u00b9 *\n          ![Matrix.of (fun x1 x2 => if B\u2097 x1 x2 = 0 then 0 else 1) \u27e8x\u2080, \u22ef\u27e9 \u2218 \u22ef.elem,\n            Matrix.of (fun x1 x2 => if B\u2097 x1 x2 = 0 then 0 else 1) \u27e8x\u2081, \u22ef\u27e9 \u2218 \u22ef.elem])\n        \u27e8\u2191i\u1d63, \u22ef\u27e9 \u27e8\u2191j\u2097, \u22ef\u27e9).cast",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L499"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "c5af3cfd53d0f079c9646f6e78ccfd0374deed2c73d742c98a7a35a871ced31b"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 446,
        "start_column": 30,
        "end_line": 446,
        "end_column": 35
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u2191i\u1d63 = x\u2080\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u2191j\u2097 = y\u2081\n\u22a2 y\u2081 \u2260 y\u2080",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L446"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "2141210059ec758ffb15b326c12125d73c2ae5903ee1c6f8438e333d3703f5ae"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 452,
        "start_column": 34,
        "end_line": 452,
        "end_column": 39
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u2191i\u1d63 = x\u2080\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u00ac\u2191j\u2097 = y\u2081\n\u22a2 \u2191j\u2097 \u2260 y\u2082",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L452"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "599c5c7a5083a133293925f3d3f3c83a19e77252078b93d289b3a33e3449ff8f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 453,
        "start_column": 34,
        "end_line": 453,
        "end_column": 39
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u2191i\u1d63 = x\u2080\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u00ac\u2191j\u2097 = y\u2081\nhy\u2082 : \u2191j\u2097 \u2260 y\u2082\n\u22a2 \u2191j\u2097 \u2208 Y\u2097",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L453"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "8ec5624bd3d493c1441fa396a9b984060e8fad78befebb76956dbff01a1b2cf6"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 459,
        "start_column": 28,
        "end_line": 459,
        "end_column": 33
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u2191i\u1d63 = x\u2081\n\u22a2 x\u2081 \u2260 x\u2080",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L459"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "215a65013b6a428bb6a1571fcc90de38f21643b85d4077e63dea2f647b630fd5"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 466,
        "start_column": 30,
        "end_line": 466,
        "end_column": 35
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u2191i\u1d63 = x\u2081\nhxx : x\u2081 \u2260 x\u2080\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u2191j\u2097 = y\u2081\n\u22a2 y\u2081 \u2260 y\u2080",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L466"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "2c1a7d5f9fca0050834ef2d67749fbe7bd770f91671fc8f47426a2e315720387"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 472,
        "start_column": 34,
        "end_line": 472,
        "end_column": 39
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u2191i\u1d63 = x\u2081\nhxx : x\u2081 \u2260 x\u2080\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u00ac\u2191j\u2097 = y\u2081\n\u22a2 \u2191j\u2097 \u2260 y\u2082",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L472"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "90e77fa204f8ad355c206e67b0f6cbc39121bf4f8f79d001c7bf4851c4909b77"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 473,
        "start_column": 34,
        "end_line": 473,
        "end_column": 39
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u2191i\u1d63 = x\u2081\nhxx : x\u2081 \u2260 x\u2080\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u00ac\u2191j\u2097 = y\u2081\nhy\u2082 : \u2191j\u2097 \u2260 y\u2082\n\u22a2 \u2191j\u2097 \u2208 Y\u2097",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L473"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "1f6cb717067d23861c8ecd7be90d8f81da115af6c4d5a28b1737b05763eb0227"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 479,
        "start_column": 32,
        "end_line": 479,
        "end_column": 37
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u00ac\u2191i\u1d63 = x\u2081\n\u22a2 \u2191i\u1d63 \u2260 x\u2082",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L479"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "82294a095c9cd47144241244a13a3c275130c2779a3cdd40e02068da1afb3828"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 480,
        "start_column": 32,
        "end_line": 480,
        "end_column": 37
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u00ac\u2191i\u1d63 = x\u2081\nhx\u2082 : \u2191i\u1d63 \u2260 x\u2082\n\u22a2 \u2191i\u1d63 \u2208 X\u1d63",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L480"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "2db6c05a476e8ebd3a9299433b4f007240de0853bf590766f86fc497300b6579"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 487,
        "start_column": 30,
        "end_line": 487,
        "end_column": 35
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u00ac\u2191i\u1d63 = x\u2081\nhx\u2082 : \u2191i\u1d63 \u2260 x\u2082\nhX\u1d63 : \u2191i\u1d63 \u2208 X\u1d63\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u2191j\u2097 = y\u2081\n\u22a2 y\u2081 \u2260 y\u2080",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L487"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "43280cfc9686f7f52758858790b67610beb90b96c046ba5c3a6159ced9421d24"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 493,
        "start_column": 34,
        "end_line": 493,
        "end_column": 39
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u00ac\u2191i\u1d63 = x\u2081\nhx\u2082 : \u2191i\u1d63 \u2260 x\u2082\nhX\u1d63 : \u2191i\u1d63 \u2208 X\u1d63\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u00ac\u2191j\u2097 = y\u2081\n\u22a2 \u2191j\u2097 \u2260 y\u2082",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L493"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "4feb4be5b5a3b42707ea0b71ae765f4395b9317f649318f8ad55d3c0ffe9515a"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 494,
        "start_column": 34,
        "end_line": 494,
        "end_column": 39
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : \u2200 (i : \u2191X\u2097) (j : \u2191Y\u2097), B\u2097 i j \u2208 SignType.cast.range\nhB\u1d63 : \u2200 (i : \u2191X\u1d63) (j : \u2191Y\u1d63), B\u1d63 i j \u2208 SignType.cast.range\nx\u2080\u2097 : \u2191X\u2097 := \u27e8x\u2080, \u22ef\u27e9\nx\u2080\u1d63 : \u2191X\u1d63 := \u27e8x\u2080, \u22ef\u27e9\nx\u2081\u2097 : \u2191X\u2097 := \u27e8x\u2081, \u22ef\u27e9\nx\u2081\u1d63 : \u2191X\u1d63 := \u27e8x\u2081, \u22ef\u27e9\nx\u2082\u2097 : \u2191X\u2097 := \u27e8x\u2082, \u22ef\u27e9\nx\u2082\u1d63 : \u2191X\u1d63 := \u27e8x\u2082, \u22ef\u27e9\ny\u2080\u2097 : \u2191Y\u2097 := \u27e8y\u2080, \u22ef\u27e9\ny\u2080\u1d63 : \u2191Y\u1d63 := \u27e8y\u2080, \u22ef\u27e9\ny\u2081\u2097 : \u2191Y\u2097 := \u27e8y\u2081, \u22ef\u27e9\ny\u2081\u1d63 : \u2191Y\u1d63 := \u27e8y\u2081, \u22ef\u27e9\ny\u2082\u2097 : \u2191Y\u2097 := \u27e8y\u2082, \u22ef\u27e9\ny\u2082\u1d63 : \u2191Y\u1d63 := \u27e8y\u2082, \u22ef\u27e9\nA\u2097 : Matrix (\u2191(X\u2097.drop2 x\u2080\u2097 x\u2081\u2097)) (\u2191(Y\u2097.drop1 y\u2082\u2097)) Z2 := B\u2097.support.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097\nD\u2097 : Matrix (Fin 2) (\u2191(Y\u2097.drop3 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097)) Z2 := B\u2097.support.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097\nD\u2080 : Matrix (Fin 2) (Fin 2) Z2 := B\u2097.support.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097\nD\u1d63 : Matrix (\u2191(X\u1d63.drop3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63)) (Fin 2) Z2 := B\u1d63.support.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nA\u1d63 : Matrix (\u2191(X\u1d63.drop1 x\u2082\u1d63)) (\u2191(Y\u1d63.drop2 y\u2080\u1d63 y\u2081\u1d63)) Z2 := B\u1d63.support.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63\nhB\u2097\u2080\u2080 : |B\u2097 x\u2080\u2097 y\u2080\u2097| = 1\nhB\u2097\u2080\u2082 : |B\u2097 x\u2080\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2080 : |B\u2097 x\u2082\u2097 y\u2080\u2097| = 1\nhB\u2097\u2081\u2082 : |B\u2097 x\u2081\u2097 y\u2082\u2097| = 1\nhB\u2097\u2082\u2081 : |B\u2097 x\u2082\u2097 y\u2081\u2097| = 1\nhB\u1d63\u2080\u2080 : |B\u1d63 x\u2080\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2080\u2082 : |B\u1d63 x\u2080\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2080 : |B\u1d63 x\u2082\u1d63 y\u2080\u1d63| = 1\nhB\u1d63\u2081\u2082 : |B\u1d63 x\u2081\u1d63 y\u2082\u1d63| = 1\nhB\u1d63\u2082\u2081 : |B\u1d63 x\u2082\u1d63 y\u2081\u1d63| = 1\ni\u1d63 : \u2191(X\u1d63.drop1 \u27e8x\u2082, \u22ef\u27e9)\nj\u2097 : \u2191(Y\u2097.drop1 \u27e8y\u2082, \u22ef\u27e9)\nhx\u2080 : \u00ac\u2191i\u1d63 = x\u2080\nhx\u2081 : \u00ac\u2191i\u1d63 = x\u2081\nhx\u2082 : \u2191i\u1d63 \u2260 x\u2082\nhX\u1d63 : \u2191i\u1d63 \u2208 X\u1d63\nhy\u2080 : \u00ac\u2191j\u2097 = y\u2080\nhy\u2081 : \u00ac\u2191j\u2097 = y\u2081\nhy\u2082 : \u2191j\u2097 \u2260 y\u2082\n\u22a2 \u2191j\u2097 \u2208 Y\u2097",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L494"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-29T11:00:39+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "0cb304e806fd1aa3ee7f9cacfec12276c200f0f0f286504e18b218617d2d7a75"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1006,
        "start_column": 14,
        "end_line": 1006,
        "end_column": 19
      },
      "debug_info": {
        "goal": "case specialize_4\nX : Sequent\nW : Type\nM : KripkeModel W\n\u03c6 : Formula\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) {v w : W},\n    (M, v)\u22a8Y \u2192\n      (M, w)\u22a8~''(AnyFormula.normal \u03c6) \u2192\n        \u2200 (\u03b1 : Program) (\u03b1s : List Program),\n          relateSeq M (\u03b1 :: \u03b1s) v w \u2192\n            (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side Y \u2192\n              (Y.without (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true \u2192\n                \u2203 Y_1 \u2208 endNodesOf (next Y a),\n                  (M, v)\u22a8Y_1 \u2227\n                    (Y_1.isFree = true \u2228\n                      \u2203 F \u03b3,\n                        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y_1 \u2227\n                          relateSeq M \u03b3 v w \u2227\n                            (M, v)\u22a8F \u2227\n                              (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227\n                                (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6)\n\u03b1 : Program\n\u03b1s : List Program\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side (L, R, O)\nno_other_loading : (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true\nu : W\nv_\u03b1_u : relate M \u03b1 v u\nu_\u03b1s_w : relateSeq M \u03b1s u w\nF : List Formula\n\u03c7' : LoadFormula\n\u03c7_def : AnyFormula.loaded \u03c7' = AnyFormula.loadBoxes \u03b1s (AnyFormula.normal \u03c6)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\n\u03b1s_nonEmpty : \u03b1s \u2260 []\nd : Program\n\u03b4s : List Program\n_in_H : (F, d :: \u03b4s) \u2208 H \u03b1\nv_F : (M, v)\u22a8(F, d :: \u03b4s).1\nv_\u03b4_u : relateSeq M (d :: \u03b4s) v u\nin_B : (L ++ F, R, some (Sum.inl (~'\u230a\u230ad :: \u03b4s\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 (Sequent.without (L ++ F, R, some (Sum.inl (~'\u230a\u230ad :: \u03b4s\u230b\u230b\u03c7')))\n        (~''(AnyFormula.loadBoxes (d :: (\u03b4s ++ \u03b1s)) (AnyFormula.normal \u03c6)))).isFree =\n    true",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-29T18:50:08+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "54ef5c605c07166f09cca75a27e5e191c28523ae80cad7ce0025c0a11067827d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "0f4564c02d499ce4dfd3c42a1818cf0c492ac43c",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1021,
        "start_column": 14,
        "end_line": 1021,
        "end_column": 19
      },
      "debug_info": {
        "goal": "case intro.intro.intro.inr.intro.intro.intro.intro.intro.intro\nX : Sequent\nW : Type\nM : KripkeModel W\n\u03c6 : Formula\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6)\n\u03b1 : Program\n\u03b1s : List Program\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side (L, R, O)\nno_other_loading : (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true\nu : W\nv_\u03b1_u : relate M \u03b1 v u\nu_\u03b1s_w : relateSeq M \u03b1s u w\nF : List Formula\n\u03c7' : LoadFormula\n\u03c7_def : AnyFormula.loaded \u03c7' = AnyFormula.loadBoxes \u03b1s (AnyFormula.normal \u03c6)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\n\u03b1s_nonEmpty : \u03b1s \u2260 []\nd : Program\n\u03b4s : List Program\n_in_H : (F, d :: \u03b4s) \u2208 H \u03b1\nv_F : (M, v)\u22a8(F, d :: \u03b4s).1\nv_\u03b4_u : relateSeq M (d :: \u03b4s) v u\nin_B : (L ++ F, R, some (Sum.inl (~'\u230a\u230ad :: \u03b4s\u230b\u230b\u03c7'))) \u2208 B\nY : Sequent\nY_in : Y \u2208 endNodesOf (next (L ++ F, R, some (Sum.inl (~'\u230a\u230ad :: \u03b4s\u230b\u230b\u03c7'))) in_B)\nv_Y : (M, v)\u22a8Y\nG : List Formula\n\u03b3s : List Program\nin_Y : (~''(AnyFormula.loadBoxes \u03b3s (AnyFormula.normal \u03c6))).in_side side Y\nv_\u03b3s_w : relateSeq M \u03b3s v w\nv_G : (M, v)\u22a8G\nin_Hl : (G, \u03b3s) \u2208 Hl (d :: (\u03b4s ++ \u03b1s))\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b3s (AnyFormula.normal \u03c6)))).isFree = true\n\u22a2 \u03b3s = d :: (\u03b4s ++ \u03b1s)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/0f4564c02d499ce4dfd3c42a1818cf0c492ac43c/Pdl/Soundness.lean#L1021"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-29T18:50:08+02:00",
        "inclusion_date": "2025-05-30T05:28:05.075477+00:00"
      },
      "id": "42d58e7742eaf35c9d1c66c1e4636e3135c83310a35d7b8e4a6b15aced6e3590"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1032,
        "start_column": 10,
        "end_line": 1032,
        "end_column": 15
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\n\u03c6\u271d : Formula\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) {v w : W},\n    (M, v)\u22a8Y \u2192\n      (M, w)\u22a8~''(AnyFormula.normal \u03c6\u271d) \u2192\n        \u2200 (\u03b1 : Program) (\u03b1s : List Program),\n          relateSeq M (\u03b1 :: \u03b1s) v w \u2192\n            (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6\u271d))).in_side side Y \u2192\n              (Y.without (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6\u271d)))).isFree = true \u2192\n                \u2203 Y_1 \u2208 endNodesOf (next Y a),\n                  (M, v)\u22a8Y_1 \u2227\n                    (Y_1.isFree = true \u2228\n                      \u2203 F \u03b3,\n                        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6\u271d))).in_side side Y_1 \u2227\n                          relateSeq M \u03b3 v w \u2227\n                            (M, v)\u22a8F \u2227\n                              (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227\n                                (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6\u271d)))).isFree = true)\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6\u271d)\n\u03b1 : Program\n\u03b1s : List Program\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6\u271d))).in_side side (L, R, O)\nno_other_loading :\n  (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6\u271d)))).isFree = true\nu : W\nv_\u03b1_u : relate M \u03b1 v u\nu_\u03b1s_w : relateSeq M \u03b1s u w\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : (M, v)\u22a8(F, \u03b4).1\nv_\u03b4_u : relateSeq M \u03b4 v u\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule\n          (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)))\n            (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6\u271d))).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227\n              (M, v)\u22a8F \u2227\n                (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6\u271d)))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L1032"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-26T23:22:48+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "ecdd1e93948d1c0759a89959a057ea6b0fbc7c9074f57704270186b17dd493b3"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1036,
        "start_column": 8,
        "end_line": 1036,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\n\u03c6 : Formula\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) {v w : W},\n    (M, v)\u22a8Y \u2192\n      (M, w)\u22a8~''(AnyFormula.normal \u03c6) \u2192\n        \u2200 (\u03b1 : Program) (\u03b1s : List Program),\n          relateSeq M (\u03b1 :: \u03b1s) v w \u2192\n            (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side Y \u2192\n              (Y.without (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true \u2192\n                \u2203 Y_1 \u2208 endNodesOf (next Y a),\n                  (M, v)\u22a8Y_1 \u2227\n                    (Y_1.isFree = true \u2228\n                      \u2203 F \u03b3,\n                        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y_1 \u2227\n                          relateSeq M \u03b3 v w \u2227\n                            (M, v)\u22a8F \u2227\n                              (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227\n                                (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6)\n\u03b1 : Program\n\u03b1s : List Program\nv_\u03b1s_w : relateSeq M (\u03b1 :: \u03b1s) v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side (L, R, O)\nno_other_loading : (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227\n              (M, v)\u22a8F \u2227\n                (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L1036"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-26T23:22:48+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "b641ccfb43961371af80a9cb261e14c8fada122e282fd5eb819b3f56a3f49bc7"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 2160,
        "start_column": 23,
        "end_line": 2160,
        "end_column": 28
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\nIH :\n  t = t0 \u2192\n    \u2203 s,\n      Relation.TransGen (cEdge X tab) t s \u2227\n        (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n          (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\na\u271d\u00b9 a\u271d : Program\n\u03b1_def : \u03b1 = (a\u271d\u00b9;'a\u271d)\nthis : nodeAt t = Z\n\u03c7 : LoadFormula\n\u03be_def : \u03be = AnyFormula.loaded \u03c7\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n        (~''(AnyFormula.loaded \u03c7)).in_side side (nodeAt s) \u2227\n          (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''(AnyFormula.loaded \u03c7))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L2160"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-29T16:38:23+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "9dfb6c5dd9049d232194abf487506fa7163d1ade8db3fe3f8a81c9df6b290e2b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 2160,
        "start_column": 23,
        "end_line": 2160,
        "end_column": 28
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\nIH :\n  t = t0 \u2192\n    \u2203 s,\n      Relation.TransGen (cEdge X tab) t s \u2227\n        (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n          (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\na\u271d\u00b9 a\u271d : Program\n\u03b1_def : \u03b1 = (a\u271d\u00b9\u22d3a\u271d)\nthis : nodeAt t = Z\n\u03c7 : LoadFormula\n\u03be_def : \u03be = AnyFormula.loaded \u03c7\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n        (~''(AnyFormula.loaded \u03c7)).in_side side (nodeAt s) \u2227\n          (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''(AnyFormula.loaded \u03c7))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L2160"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-29T16:38:23+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "79e4552be2f1602ddbd5aa18f2270bca56e0d15fcecfb3dd46ce7eb7c4682cc6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "6c073596b5cf868b75933fb0c60ca164e14e51fd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 2160,
        "start_column": 23,
        "end_line": 2160,
        "end_column": 28
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\nIH :\n  t = t0 \u2192\n    \u2203 s,\n      Relation.TransGen (cEdge X tab) t s \u2227\n        (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n          (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\na\u271d : Formula\n\u03b1_def : \u03b1 = (?'a\u271d)\nthis : nodeAt t = Z\n\u03c7 : LoadFormula\n\u03be_def : \u03be = AnyFormula.loaded \u03c7\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n        (~''(AnyFormula.loaded \u03c7)).in_side side (nodeAt s) \u2227\n          (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''(AnyFormula.loaded \u03c7))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/6c073596b5cf868b75933fb0c60ca164e14e51fd/Pdl/Soundness.lean#L2160"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-29T16:38:23+02:00",
        "inclusion_date": "2025-05-31T05:36:13.607817+00:00"
      },
      "id": "ea71a843ed043515e49d88549269ff15f46395a380337068dfd2a3d4f06d9ef3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/Basic.lean",
        "start_line": 866,
        "start_column": 67,
        "end_line": 866,
        "end_column": 72
      },
      "debug_info": {
        "goal": "F : \u2115 \u2192 Type u_1\ninst : @BinaryTower.BinaryTowerField F\n\u03ba \u03c4 : \u2115\nh : Fact (\u03ba < \u03c4)\ninstleft : Algebra (F \u03ba) (F (\u03ba + 1)) := sorry\ninstright : Algebra (F (\u03ba + 1)) (F \u03c4) := sorry\ninstSMul : SMul (F \u03ba) (F \u03c4) := sorry\n\u22a2 IsScalarTower (F \u03ba) (F (\u03ba + 1)) (F \u03c4)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/Basic.lean#L866"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "91a35056e7bc739197ab2c408a98db707ecba89b3f54e7c9d28255a0a65ccef6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/Basic.lean",
        "start_line": 899,
        "start_column": 56,
        "end_line": 899,
        "end_column": 61
      },
      "debug_info": {
        "goal": "F : \u2115 \u2192 Type u_1\ninst : @BinaryTower.BinaryTowerField F\n\u03ba \u03c4 : \u2115\nh : Fact (\u03ba < \u03c4)\nbasis_vectors : Finset (Fin (\u03c4 - \u03ba)) \u2192 F \u03c4 :=\n  fun s => \u220f i \u2208 s, @BinaryTower.BinaryTowerField.special_elements_of_range F inst (\u03ba + 1) \u03c4 \u22ef \u2191\u2191i\ninstModule : Module (F \u03ba) (F \u03c4) := @BinaryTower.BinaryTowerField.module_cross_tower F inst \u03ba \u03c4 h\n\u22a2 LinearIndependent (F \u03ba) basis_vectors",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "54c9abac1c547163ed44967b3956adf2d0e137f092637fa2995890ca6a6310c7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/Basic.lean",
        "start_line": 900,
        "start_column": 69,
        "end_line": 900,
        "end_column": 74
      },
      "debug_info": {
        "goal": "F : \u2115 \u2192 Type u_1\ninst : @BinaryTower.BinaryTowerField F\n\u03ba \u03c4 : \u2115\nh : Fact (\u03ba < \u03c4)\nbasis_vectors : Finset (Fin (\u03c4 - \u03ba)) \u2192 F \u03c4 :=\n  fun s => \u220f i \u2208 s, @BinaryTower.BinaryTowerField.special_elements_of_range F inst (\u03ba + 1) \u03c4 \u22ef \u2191\u2191i\ninstModule : Module (F \u03ba) (F \u03c4) := @BinaryTower.BinaryTowerField.module_cross_tower F inst \u03ba \u03c4 h\nhli : LinearIndependent (F \u03ba) basis_vectors\n\u22a2 \u22a4 \u2264 Submodule.span (F \u03ba) (Set.range basis_vectors)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/Basic.lean#L900"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "d9e0f4c392d82c094b54d4263f364a67e9716223e12273c2b609e0fcc9a3af59"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean",
        "start_line": 267,
        "start_column": 52,
        "end_line": 267,
        "end_column": 57
      },
      "debug_info": {
        "goal": "K\u271d : Type u_1\nL\u271d : Type u_2\nR\u271d : Type u_3\nl\u03ba r\u03ba : \u2115\ninst\u271d\u00b2\u2070 : Field K\u271d\ninst\u271d\u00b9\u2079 : Field L\u271d\ninst\u271d\u00b9\u2078 : Field R\u271d\ninst\u271d\u00b9\u2077 : Algebra K\u271d L\u271d\ninst\u271d\u00b9\u2076 : Algebra K\u271d R\u271d\ninst\u271d\u00b9\u2075 : Fact (finrank K\u271d L\u271d = l\u03ba)\ninst\u271d\u00b9\u2074 : Fact (finrank K\u271d R\u271d = r\u03ba)\ninst\u271d\u00b9\u00b3 : SMulCommClass K\u271d L\u271d L\u271d\ninst\u271d\u00b9\u00b2 : SMulCommClass K\u271d R\u271d R\u271d\nK : Type u\nL : Type v\nR : Type w\ninst\u271d\u00b9\u00b9 : Field K\ninst\u271d\u00b9\u2070 : Field L\ninst\u271d\u2079 : Field R\ninst\u271d\u2078 : Module K L\ninst\u271d\u2077 : Module K R\ninst\u271d\u2076 : Semiring (TensorProduct K L R)\ninst\u271d\u2075 : Module L (TensorProduct K L R)\ninst\u271d\u2074 : Algebra K R\ninst\u271d\u00b3 : Algebra K L\ninst\u271d\u00b2 : Algebra R (TensorProduct K L R)\ninst\u271d\u00b9 : IsScalarTower K R (TensorProduct K L R)\n\u03b9R : Type u_4\ninst\u271d : _root_.Fintype \u03b9R\nbR : Basis \u03b9R K R\nthis : Module L (TensorProduct K L R) := inferInstance\nbasis_vectors : \u03b9R \u2192 TensorProduct K L R := fun i => 1 \u2297\u209c[K] bR i\n\u22a2 LinearIndependent L basis_vectors",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean#L267"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "5d26ebb820aef0a09cab7b31dae4dcc8743cf14176a08c44df960c47b5171bc4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean",
        "start_line": 268,
        "start_column": 65,
        "end_line": 268,
        "end_column": 70
      },
      "debug_info": {
        "goal": "K\u271d : Type u_1\nL\u271d : Type u_2\nR\u271d : Type u_3\nl\u03ba r\u03ba : \u2115\ninst\u271d\u00b2\u2070 : Field K\u271d\ninst\u271d\u00b9\u2079 : Field L\u271d\ninst\u271d\u00b9\u2078 : Field R\u271d\ninst\u271d\u00b9\u2077 : Algebra K\u271d L\u271d\ninst\u271d\u00b9\u2076 : Algebra K\u271d R\u271d\ninst\u271d\u00b9\u2075 : Fact (finrank K\u271d L\u271d = l\u03ba)\ninst\u271d\u00b9\u2074 : Fact (finrank K\u271d R\u271d = r\u03ba)\ninst\u271d\u00b9\u00b3 : SMulCommClass K\u271d L\u271d L\u271d\ninst\u271d\u00b9\u00b2 : SMulCommClass K\u271d R\u271d R\u271d\nK : Type u\nL : Type v\nR : Type w\ninst\u271d\u00b9\u00b9 : Field K\ninst\u271d\u00b9\u2070 : Field L\ninst\u271d\u2079 : Field R\ninst\u271d\u2078 : Module K L\ninst\u271d\u2077 : Module K R\ninst\u271d\u2076 : Semiring (TensorProduct K L R)\ninst\u271d\u2075 : Module L (TensorProduct K L R)\ninst\u271d\u2074 : Algebra K R\ninst\u271d\u00b3 : Algebra K L\ninst\u271d\u00b2 : Algebra R (TensorProduct K L R)\ninst\u271d\u00b9 : IsScalarTower K R (TensorProduct K L R)\n\u03b9R : Type u_4\ninst\u271d : _root_.Fintype \u03b9R\nbR : Basis \u03b9R K R\nthis : Module L (TensorProduct K L R) := inferInstance\nbasis_vectors : \u03b9R \u2192 TensorProduct K L R := fun i => 1 \u2297\u209c[K] bR i\nhli : LinearIndependent L basis_vectors\n\u22a2 \u22a4 \u2264 Submodule.span L (Set.range basis_vectors)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean#L268"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "a6a95594a3bda6f9ceab6c85dbf407738cc3f677bb209d6371287af90931e2dd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean",
        "start_line": 280,
        "start_column": 52,
        "end_line": 280,
        "end_column": 57
      },
      "debug_info": {
        "goal": "K\u271d : Type u_1\nL\u271d : Type u_2\nR\u271d : Type u_3\nl\u03ba r\u03ba : \u2115\ninst\u271d\u00b9\u2079 : Field K\u271d\ninst\u271d\u00b9\u2078 : Field L\u271d\ninst\u271d\u00b9\u2077 : Field R\u271d\ninst\u271d\u00b9\u2076 : Algebra K\u271d L\u271d\ninst\u271d\u00b9\u2075 : Algebra K\u271d R\u271d\ninst\u271d\u00b9\u2074 : Fact (finrank K\u271d L\u271d = l\u03ba)\ninst\u271d\u00b9\u00b3 : Fact (finrank K\u271d R\u271d = r\u03ba)\ninst\u271d\u00b9\u00b2 : SMulCommClass K\u271d L\u271d L\u271d\ninst\u271d\u00b9\u00b9 : SMulCommClass K\u271d R\u271d R\u271d\nK : Type u\nL : Type v\nR : Type w\ninst\u271d\u00b9\u2070 : Field K\ninst\u271d\u2079 : Field R\ninst\u271d\u2078 : Field L\ninst\u271d\u2077 : Module K L\ninst\u271d\u2076 : Module K R\ninst\u271d\u2075 : Semiring (TensorProduct K L R)\ninst\u271d\u2074 : Module R (TensorProduct K L R)\ninst\u271d\u00b3 : Algebra K R\ninst\u271d\u00b2 : Algebra K L\ninst\u271d\u00b9 : Algebra R (TensorProduct K L R)\ninst\u271d : IsScalarTower K R (TensorProduct K L R)\n\u03b9L : Type u_4\nbL : Basis \u03b9L K L\nthis : Module R (TensorProduct K L R) := inferInstance\nbasis_vectors : \u03b9L \u2192 TensorProduct K L R := fun i => bL i \u2297\u209c[K] 1\n\u22a2 LinearIndependent R basis_vectors",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "067a7d2197d0aa20af4acdf787c681744185155de1092818d276f96e4d7fb8de"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean",
        "start_line": 281,
        "start_column": 65,
        "end_line": 281,
        "end_column": 70
      },
      "debug_info": {
        "goal": "K\u271d : Type u_1\nL\u271d : Type u_2\nR\u271d : Type u_3\nl\u03ba r\u03ba : \u2115\ninst\u271d\u00b9\u2079 : Field K\u271d\ninst\u271d\u00b9\u2078 : Field L\u271d\ninst\u271d\u00b9\u2077 : Field R\u271d\ninst\u271d\u00b9\u2076 : Algebra K\u271d L\u271d\ninst\u271d\u00b9\u2075 : Algebra K\u271d R\u271d\ninst\u271d\u00b9\u2074 : Fact (finrank K\u271d L\u271d = l\u03ba)\ninst\u271d\u00b9\u00b3 : Fact (finrank K\u271d R\u271d = r\u03ba)\ninst\u271d\u00b9\u00b2 : SMulCommClass K\u271d L\u271d L\u271d\ninst\u271d\u00b9\u00b9 : SMulCommClass K\u271d R\u271d R\u271d\nK : Type u\nL : Type v\nR : Type w\ninst\u271d\u00b9\u2070 : Field K\ninst\u271d\u2079 : Field R\ninst\u271d\u2078 : Field L\ninst\u271d\u2077 : Module K L\ninst\u271d\u2076 : Module K R\ninst\u271d\u2075 : Semiring (TensorProduct K L R)\ninst\u271d\u2074 : Module R (TensorProduct K L R)\ninst\u271d\u00b3 : Algebra K R\ninst\u271d\u00b2 : Algebra K L\ninst\u271d\u00b9 : Algebra R (TensorProduct K L R)\ninst\u271d : IsScalarTower K R (TensorProduct K L R)\n\u03b9L : Type u_4\nbL : Basis \u03b9L K L\nthis : Module R (TensorProduct K L R) := inferInstance\nbasis_vectors : \u03b9L \u2192 TensorProduct K L R := fun i => bL i \u2297\u209c[K] 1\nhli : LinearIndependent R basis_vectors\n\u22a2 \u22a4 \u2264 Submodule.span R (Set.range basis_vectors)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean#L281"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "2b586d651ca91f23e994151fb0f496806f86f7188e1c9339fba173de3e3e5149"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean",
        "start_line": 334,
        "start_column": 25,
        "end_line": 334,
        "end_column": 30
      },
      "debug_info": {
        "goal": "K\u271d : Type u_1\nL\u271d : Type u_2\nR\u271d : Type u_3\nl\u03ba r\u03ba : \u2115\ninst\u271d\u00b2\u00b3 : Field K\u271d\ninst\u271d\u00b2\u00b2 : Field L\u271d\ninst\u271d\u00b2\u00b9 : Field R\u271d\ninst\u271d\u00b2\u2070 : Algebra K\u271d L\u271d\ninst\u271d\u00b9\u2079 : Algebra K\u271d R\u271d\ninst\u271d\u00b9\u2078 : Fact (finrank K\u271d L\u271d = l\u03ba)\ninst\u271d\u00b9\u2077 : Fact (finrank K\u271d R\u271d = r\u03ba)\ninst\u271d\u00b9\u2076 : SMulCommClass K\u271d L\u271d L\u271d\ninst\u271d\u00b9\u2075 : SMulCommClass K\u271d R\u271d R\u271d\nK : Type u_4\nL : Type u_5\nR : Type u_6\ninst\u271d\u00b9\u2074 : Field K\ninst\u271d\u00b9\u00b3 : Field L\ninst\u271d\u00b9\u00b2 : Field R\ninst\u271d\u00b9\u00b9 : Algebra K L\ninst\u271d\u00b9\u2070 : Algebra K R\ninst\u271d\u2079 : IsScalarTower K L (TensorProduct K L R)\ninst\u271d\u2078 : IsScalarTower K R (TensorProduct K L R)\n\u03b9L : Type u_7\n\u03b9R : Type u_8\ninst\u271d\u2077 : _root_.Fintype \u03b9L\ninst\u271d\u2076 : _root_.Fintype \u03b9R\n\u03ba \u03c4 \u03b9 : \u2115\ninst\u271d\u2075 : Fact (\u03ba < \u03c4)\ninst\u271d\u2074 : Fact (\u03b9 < \u03c4)\ninst\u271d\u00b3 : Module (BTField \u03ba) (BTField \u03c4)\ninst\u271d\u00b2 : Module (BTField \u03ba) (BTField \u03b9)\ninst\u271d\u00b9 : Algebra (BTField \u03ba) (BTField \u03c4)\ninst\u271d : Algebra (BTField \u03ba) (BTField \u03b9)\n\u22a2 Nonempty\n    (TensorProduct (BTField \u03ba) (BTField \u03c4) (BTField \u03b9) \u2243\u2090[BTField \u03ba] TensorProduct (BTField \u03ba) (BTField \u03c4) (BTField \u03b9))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean#L334"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "91cd0bfc6a5396a5935f93e308f43a01e230725ac968820a66debe2af2d80a49"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "tensor-algebra",
        "commit": "b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean",
        "start_line": 347,
        "start_column": 25,
        "end_line": 347,
        "end_column": 30
      },
      "debug_info": {
        "goal": "K\u271d : Type u_1\nL\u271d : Type u_2\nR\u271d : Type u_3\nl\u03ba r\u03ba : \u2115\ninst\u271d\u00b2\u2070 : Field K\u271d\ninst\u271d\u00b9\u2079 : Field L\u271d\ninst\u271d\u00b9\u2078 : Field R\u271d\ninst\u271d\u00b9\u2077 : Algebra K\u271d L\u271d\ninst\u271d\u00b9\u2076 : Algebra K\u271d R\u271d\ninst\u271d\u00b9\u2075 : Fact (finrank K\u271d L\u271d = l\u03ba)\ninst\u271d\u00b9\u2074 : Fact (finrank K\u271d R\u271d = r\u03ba)\ninst\u271d\u00b9\u00b3 : SMulCommClass K\u271d L\u271d L\u271d\ninst\u271d\u00b9\u00b2 : SMulCommClass K\u271d R\u271d R\u271d\nK : Type u_4\nL : Type u_5\nR : Type u_6\ninst\u271d\u00b9\u00b9 : Field K\ninst\u271d\u00b9\u2070 : Field L\ninst\u271d\u2079 : Field R\ninst\u271d\u2078 : Algebra K L\ninst\u271d\u2077 : Algebra K R\ninst\u271d\u2076 : IsScalarTower K L (TensorProduct K L R)\ninst\u271d\u2075 : IsScalarTower K R (TensorProduct K L R)\n\u03b9L : Type u_7\n\u03b9R : Type u_8\ninst\u271d\u2074 : _root_.Fintype \u03b9L\ninst\u271d\u00b3 : _root_.Fintype \u03b9R\n\u03ba \u03c4 : \u2115\ninst\u271d\u00b2 : Fact (\u03ba < \u03c4)\ninst\u271d\u00b9 : Module (BTField \u03ba) (BTField \u03c4)\ninst\u271d : Algebra (BTField \u03ba) (BTField \u03c4)\n\u22a2 Nonempty\n    (TensorProduct (BTField \u03ba) (BTField \u03c4) (BTField \u03c4) \u2243\u2090[BTField \u03ba] TensorProduct (BTField \u03ba) (BTField \u03c4) (BTField \u03c4))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/b26d47c7d8aced407a40c77d07cf6e8b6c1c09f5/ArkLib/Data/FieldTheory/BinaryTowerField/TensorAlgebra.lean#L347"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-05-30T05:28:52+07:00",
        "inclusion_date": "2025-05-30T06:35:34.554180+00:00"
      },
      "id": "f2539cbd5d2f19fcab033448f4cfec69f67329dff8bd40d0980212e639af8383"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 7,
        "start_column": 54,
        "end_line": 7,
        "end_column": 59
      },
      "debug_info": {
        "goal": "A B : Type\nF : Set (A \u00d7 B)\n\u22a2 (\u2203 f, graph f = F) \u2192 is_func_graph F",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d306a2896591ca62c4c52bc4d014cbaef283fee98205e4ce72c8134d9f9a163d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 13,
        "start_column": 23,
        "end_line": 13,
        "end_column": 28
      },
      "debug_info": {
        "goal": "A B C : Type\nR : Set (A \u00d7 B)\nS : Set (B \u00d7 C)\nf : A \u2192 C\nh1 : \u2200 (b : B), b \u2208 Ran R \u2227 b \u2208 Dom S\nh2 : graph f = comp S R\n\u22a2 is_func_graph S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L13"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "fe605d5551132486e5e6e1d66335ab88600edbebca3a810885a60144db05df26"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 19,
        "start_column": 33,
        "end_line": 19,
        "end_column": 38
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nR : BinRel A\nS : BinRel B\nh : \u2200 (x y : A), R x y \u2194 S (f x) (f y)\n\u22a2 reflexive S \u2192 reflexive R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L19"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "506a178ed2eff45db839b3044c6cce43fcd5403a125517885cdc7d4f31c6f332"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 26,
        "start_column": 33,
        "end_line": 26,
        "end_column": 38
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nR : BinRel A\nS : BinRel B\nh : \u2200 (x y : B), S x y \u2194 \u2203 u v, f u = x \u2227 f v = y \u2227 R u v\n\u22a2 reflexive R \u2192 reflexive S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "3f7800684e023588f419ab6590414770c07bd14a46006c66b20a5d5dffc97eda"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 33,
        "start_column": 35,
        "end_line": 33,
        "end_column": 40
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nR : BinRel A\nS : BinRel B\nh : \u2200 (x y : B), S x y \u2194 \u2203 u v, f u = x \u2227 f v = y \u2227 R u v\n\u22a2 transitive R \u2192 transitive S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1c91ac987bbcd3a57469e93870b7aac1e6be06cdbd37d0fbb582fe8977b4a4a9"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 39,
        "start_column": 33,
        "end_line": 39,
        "end_column": 38
      },
      "debug_info": {
        "goal": "A B : Type\nR : BinRel B\nS : BinRel (A \u2192 B)\nh : \u2200 (f g : A \u2192 B), S f g \u2194 \u2200 (x : A), R (f x) (g x)\n\u22a2 symmetric R \u2192 symmetric S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "8f70e71ac8e2d69f4574aec9e6dcf34da5f9c88fcac74afd7988cd8794bad7db"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 43,
        "start_column": 59,
        "end_line": 43,
        "end_column": 64
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\na : A\nh : \u2200 (x : A), f x = a\n\u22a2 \u2200 (g : A \u2192 A), f \u2218 g = f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b84cc79d4d165fc8acc0c14ac60055a27e0691e40f650d5fdf61b210b5b36f95"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 48,
        "start_column": 37,
        "end_line": 48,
        "end_column": 42
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\na : A\nh : \u2200 (g : A \u2192 A), f \u2218 g = f\n\u22a2 \u2203 y, \u2200 (x : A), f x = y",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "38f5be1eff08a355ba8035c65e7f685d5421d6d736c589f6849dc4c8f6d81261"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 53,
        "start_column": 29,
        "end_line": 53,
        "end_column": 34
      },
      "debug_info": {
        "goal": "A B C : Type\nf : A \u2192 B\ng : B \u2192 C\n\u22a2 onto (g \u2218 f) \u2192 onto g",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L53"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "7690097126871100288605fefc558d5abfbf89bdae55f70d22ec5fae769b6581"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 57,
        "start_column": 41,
        "end_line": 57,
        "end_column": 46
      },
      "debug_info": {
        "goal": "A B C : Type\nf : A \u2192 B\ng : B \u2192 C\n\u22a2 one_to_one (g \u2218 f) \u2192 one_to_one f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2453be705fc71bdc678100497bceab381fe7fce27e6b96ed5353f66fa1034712"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 61,
        "start_column": 56,
        "end_line": 61,
        "end_column": 61
      },
      "debug_info": {
        "goal": "A B C : Type\nf : A \u2192 B\ng : B \u2192 C\n\u22a2 onto f \u2192 \u00acone_to_one g \u2192 \u00acone_to_one (g \u2218 f)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "49cd738d4e30631c0852829e67f700a1e4aa6e50c601fc901edc02c2207742a8"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 65,
        "start_column": 50,
        "end_line": 65,
        "end_column": 55
      },
      "debug_info": {
        "goal": "A B C : Type\nf : A \u2192 B\ng : B \u2192 C\n\u22a2 \u00aconto f \u2192 one_to_one g \u2192 \u00aconto (g \u2218 f)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "20d06e394fff1d56ee4c210ec9b6509147f141838e0dd6719461f4e2cafa83b4"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 70,
        "start_column": 29,
        "end_line": 70,
        "end_column": 34
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\ng : B \u2192 Set A\nh : \u2200 (b : B), g b = {a | f a = b}\n\u22a2 onto f \u2192 one_to_one g",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "69e1fb34b00c7de7e4d5a6928d7b606b421f683fa4a131621f0367a1e5aae085"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 76,
        "start_column": 23,
        "end_line": 76,
        "end_column": 28
      },
      "debug_info": {
        "goal": "A B C : Type\nR : Set (A \u00d7 B)\nS : Set (B \u00d7 C)\nf : A \u2192 C\ng : B \u2192 C\nh1 : graph f = comp S R\nh2 : graph g = S\nh3 : one_to_one g\n\u22a2 is_func_graph R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "0a0f20fb062b08031dd1b8875382a276f9e64f3f3e850e2b0fb749e84215bce0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 82,
        "start_column": 49,
        "end_line": 82,
        "end_column": 54
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nR : BinRel A\nS : BinRel B\nh1 : \u2200 (x y : B), S x y \u2194 \u2203 u v, f u = x \u2227 f v = y \u2227 R u v\nh2 : onto f\n\u22a2 reflexive R \u2192 reflexive S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "917ee94953c6eb4f1ca2f49d67e36dacc1b0e963ee3fb24332c8fe2b7504cf4e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 88,
        "start_column": 57,
        "end_line": 88,
        "end_column": 62
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nR : BinRel A\nS : BinRel B\nh1 : \u2200 (x y : B), S x y \u2194 \u2203 u v, f u = x \u2227 f v = y \u2227 R u v\nh2 : one_to_one f\n\u22a2 transitive R \u2192 transitive S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "0642ba4fc276eec3ef7b0bc64b5879d2fd0905fd26d0d847869143db388398b2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 92,
        "start_column": 56,
        "end_line": 92,
        "end_column": 61
      },
      "debug_info": {
        "goal": "A B C : Type\nf : B \u2192 C\ng h : A \u2192 B\nh1 : one_to_one f\nh2 : f \u2218 g = f \u2218 h\n\u22a2 g = h",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "82218994b703664aea204202bb92f83912b762186bc0766beb3efd46a94aadd2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 97,
        "start_column": 20,
        "end_line": 97,
        "end_column": 25
      },
      "debug_info": {
        "goal": "A B C : Type\nf : B \u2192 C\na : A\nh1 : \u2200 (g h : A \u2192 B), f \u2218 g = f \u2218 h \u2192 g = h\n\u22a2 one_to_one f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L97"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f33209e332d03decd546e6dea6ca3f17912f9883c2ce2df9ee869e10edc3db43"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 102,
        "start_column": 51,
        "end_line": 102,
        "end_column": 56
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\ng : B \u2192 A\nh1 : graph g = inv (graph f)\n\u22a2 f \u2218 g = id",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "eb14ae9dcabb92d68116a74b3954b429b7d67b4fa5c140e0d3b1297804d85ea2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 106,
        "start_column": 34,
        "end_line": 106,
        "end_column": 39
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\ng : B \u2192 A\nh1 : f \u2218 g = id\n\u22a2 onto f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L106"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-06-29T20:58:46-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "573e5f9f2ee665ec4ca26c802f208161f8d810d8ba27646015302a0b795747c6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 110,
        "start_column": 59,
        "end_line": 110,
        "end_column": 64
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\ng : B \u2192 A\n\u22a2 one_to_one f \u2192 f \u2218 g = id \u2192 graph g = inv (graph f)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L110"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e22d2e3c4867ea77e8f0dd4be61729a2bd002ed57d7676699822708c7085c7ab"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 114,
        "start_column": 53,
        "end_line": 114,
        "end_column": 58
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\ng : B \u2192 A\n\u22a2 onto f \u2192 g \u2218 f = id \u2192 graph g = inv (graph f)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "864580e2ffb69e073caac2f62ee65dcc7278010624100c8e50b0eb77693cb301"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 118,
        "start_column": 59,
        "end_line": 118,
        "end_column": 64
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\ng : B \u2192 A\nh : f \u2218 g = id\n\u22a2 \u2200 x \u2208 Ran (graph g), g (f x) = x",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9eccab34a6c1e824223a058e6380831fd7f4eb969455335fbf5637e6dc9ca7c2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 123,
        "start_column": 32,
        "end_line": 123,
        "end_column": 37
      },
      "debug_info": {
        "goal": "A B C : Type\nf : A \u2192 C\ng : B \u2192 C\nh1 : one_to_one g\nh2 : onto g\n\u22a2 \u2203 h, g \u2218 h = f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L123"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a52a7e197181271a992f9ebee65e9fb08d995eb9a812e81d695d7073f137c72e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 130,
        "start_column": 65,
        "end_line": 130,
        "end_column": 70
      },
      "debug_info": {
        "goal": "A : Type\n\u22a2 symmetric (HTPI.Exercises.conjugate A)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-06-15T16:17:51-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9c41fb870e4e1066fed3b911bec0f05124f48e270de3ecbe7a892c6e47ce029b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 135,
        "start_column": 27,
        "end_line": 135,
        "end_column": 32
      },
      "debug_info": {
        "goal": "A : Type\nf1 f2 : A \u2192 A\nh1 : HTPI.Exercises.conjugate A f1 f2\nh2 : \u2203 a, f1 a = a\n\u22a2 \u2203 a, f2 a = a",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L135"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "fd3ed71e03c4d28bfe510ac05631e25f102f69552384c31167d9fbc8990284c1"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 140,
        "start_column": 42,
        "end_line": 140,
        "end_column": 47
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\nB : Set A\n\u22a2 smallestElt (sub A) B F \u2192 B = \u22c2\u2080 F",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L140"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "cb3e536667ccf4041078f8df88e6aafed325ffc8eb535ef2c0b721768a939a0b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 146,
        "start_column": 69,
        "end_line": 146,
        "end_column": 74
      },
      "debug_info": {
        "goal": "A : Type\nf g : A \u2192 A\nC : Set A\nh1 : f \u2218 g = id\nh2 : closed f C\n\u22a2 closed g (HTPI.Exercises.complement A C)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L146"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "0d5c963a0340cd786aef1d804ffab5f42514ed9d19f19517ef49bf6c548e6cd7"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 150,
        "start_column": 66,
        "end_line": 150,
        "end_column": 71
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\nC1 C2 : Set A\nh1 : closed f C1\nh2 : closed f C2\n\u22a2 closed f (C1 \u222a C2)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "757cab835af7812472d5bca594616713fa064374a4972fbd1fc433911d92595f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 155,
        "start_column": 25,
        "end_line": 155,
        "end_column": 30
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\nB1 B2 C1 C2 : Set A\nh1 : closure f B1 C1\nh2 : closure f B2 C2\n\u22a2 B1 \u2286 B2 \u2192 C1 \u2286 C2",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1c477d1e4ab22a03fe25f68535a3fa4648bfebe7a33773907686a6265b517d1e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 160,
        "start_column": 37,
        "end_line": 160,
        "end_column": 42
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\nB1 B2 C1 C2 : Set A\nh1 : closure f B1 C1\nh2 : closure f B2 C2\n\u22a2 closure f (B1 \u222a B2) (C1 \u222a C2)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1e2045e459e570ac5263dae6cb1edc0c7ca1f556339731bf46b15b030d955b13"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 164,
        "start_column": 37,
        "end_line": 164,
        "end_column": 42
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A \u2192 A\nB : Set A\n\u22a2 \u2203 C, closure2 f B C",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "511dc29984c226a4235d7283aa98e5e1d00f95b128d437259da945c361d130b0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 168,
        "start_column": 43,
        "end_line": 168,
        "end_column": 48
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (A \u2192 A)\nB : Set A\n\u22a2 \u2203 C, closure_family F B C",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L168"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e75f1e13170fbce1cff055b6137f4071252cad9329eec14d58acde1b4038af96"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 174,
        "start_column": 47,
        "end_line": 174,
        "end_column": 52
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nW X : Set A\n\u22a2 image f (W \u222a X) = image f W \u222a image f X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L174"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "6f2dcc7949fe923838e267cfad85365dc1b6a5416e639b018d76ab71b996703b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 177,
        "start_column": 47,
        "end_line": 177,
        "end_column": 52
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nW X : Set A\n\u22a2 image f (W \\ X) = image f W \\ image f X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f39b722c736d6b48f34bdbaae6005747b2117ef134773e6f9e9a76ce8b0ef841"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 180,
        "start_column": 37,
        "end_line": 180,
        "end_column": 42
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nW X : Set A\n\u22a2 W \u2286 X \u2194 image f W \u2286 image f X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L180"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "15d915563d515b3f258762084360a4e72e1567874130b951cc87afa97003249e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 184,
        "start_column": 49,
        "end_line": 184,
        "end_column": 54
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nY Z : Set B\n\u22a2 inverse_image f (Y \u2229 Z) = inverse_image f Y \u2229 inverse_image f Z",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L184"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "414b9581016d3a0c043ab4154fdffb629384ebf30080b11c1e60e0b2b89ef43a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 188,
        "start_column": 49,
        "end_line": 188,
        "end_column": 54
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nY Z : Set B\n\u22a2 inverse_image f (Y \u222a Z) = inverse_image f Y \u222a inverse_image f Z",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L188"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "5f776fdd503ab45a8f0adcc913a84db0646fe1d3fbb19abf5e3793eb7f049c14"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 192,
        "start_column": 49,
        "end_line": 192,
        "end_column": 54
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nY Z : Set B\n\u22a2 inverse_image f (Y \\ Z) = inverse_image f Y \\ inverse_image f Z",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L192"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "c6cafc30720889a7c0f5310e7711d7bbbeece63c29dc56639657ccb4a6c482c9"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 195,
        "start_column": 53,
        "end_line": 195,
        "end_column": 58
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nY Z : Set B\n\u22a2 Y \u2286 Z \u2194 inverse_image f Y \u2286 inverse_image f Z",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L195"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "320bde519fc304f31fc1cbd917a8d66873c0e9d01e5dc5ca68c1a8bf474b7fe0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 198,
        "start_column": 39,
        "end_line": 198,
        "end_column": 44
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nX : Set A\n\u22a2 inverse_image f (image f X) = X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "8f6e9e42571c3f153c34547079a1c8f0bbfae1d5cfe3bb939cd31f7e432cf3da"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 201,
        "start_column": 39,
        "end_line": 201,
        "end_column": 44
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\nY : Set B\n\u22a2 image f (inverse_image f Y) = Y",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "760dbd2c249d0ee043f7fcae351a6b7ee06f60d2f775b1264a72871fbd0dca00"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 204,
        "start_column": 34,
        "end_line": 204,
        "end_column": 39
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\nC : Set A\n\u22a2 closed f C \u2192 image f C \u2286 C",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L204"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a42300b723f148629f9a581b7ccbc58278949d9e00a7be288c6e2cd94e4e7f34"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 207,
        "start_column": 45,
        "end_line": 207,
        "end_column": 50
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\nC : Set A\n\u22a2 image f C \u2286 C \u2192 C \u2286 inverse_image f C",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L207"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e6105b52f7c09525aa0e064a5521c310826cf5b2e10c35aad68dd2afcbd02a49"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 210,
        "start_column": 42,
        "end_line": 210,
        "end_column": 47
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\nC : Set A\n\u22a2 C \u2286 inverse_image f C \u2192 closed f C",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L210"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "77dc06db1505ed5c0cad3f27f8f4cc0230a224c90ef05190a46a4d770bd88a96"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap5Ex.lean",
        "start_line": 214,
        "start_column": 37,
        "end_line": 214,
        "end_column": 42
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\ng : B \u2192 A\nY : Set B\nh1 : f \u2218 g = id\nh2 : g \u2218 f = id\n\u22a2 inverse_image f Y = image g Y",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap5Ex.lean#L214"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-07T13:35:34-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "7875439f556e801763f7fcab956359c12366290dc902337289fc434b2a1510e2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 9,
        "start_column": 57,
        "end_line": 9,
        "end_column": 62
      },
      "debug_info": {
        "goal": "k : \u2115\n\u22a2 fnz (2 * k + 1) = -\u2191(k + 1)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L9"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-05T10:06:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2ae446ec05f7650d1e07a48c8cc9ecb1b3efae99ee5f6ea155f3fc3bd6087ade"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 12,
        "start_column": 35,
        "end_line": 12,
        "end_column": 40
      },
      "debug_info": {
        "goal": "\u22a2 fnz \u2218 fzn = id",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L12"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-05T10:06:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f4eba1086985f441e61948c998f5696350c7c21777fae1c8b4b493b9794f61e5"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 15,
        "start_column": 58,
        "end_line": 15,
        "end_column": 63
      },
      "debug_info": {
        "goal": "k : \u2115\n\u22a2 tri (k + 1) = tri k + k + 1",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L15"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-05T10:06:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "cdb9bc0fe846ee25e52cc526bfced1fc24c8b1abb2c9785df10016fe9efd5427"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 18,
        "start_column": 59,
        "end_line": 18,
        "end_column": 64
      },
      "debug_info": {
        "goal": "j k : \u2115\nh1 : j \u2264 k\n\u22a2 tri j \u2264 tri k",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L18"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-05T10:06:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "c2710fe83f37cf6cec0c9dc98a86ad4e9e337bd26dfd64182eba60189e87990f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 21,
        "start_column": 62,
        "end_line": 21,
        "end_column": 67
      },
      "debug_info": {
        "goal": "U V : Type\nf : U \u2192 V\n\u22a2 range f = Ran (graph f)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4fc08b386b87de3a969ce63089df9f4e22da84dc411caead72a41b4efe7a06d2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 25,
        "start_column": 33,
        "end_line": 25,
        "end_column": 38
      },
      "debug_info": {
        "goal": "U V : Type\nf : U \u2192 V\n\u22a2 onto f \u2194 range f = Univ V",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "11181ca00d3b62010dabb21c0748dfd95b7d74f3f8c061a3b0d5fca61ce6444a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 30,
        "start_column": 45,
        "end_line": 30,
        "end_column": 50
      },
      "debug_info": {
        "goal": "U V : Type\nh1 : U \u223c V\nh2 : ctble U\n\u22a2 ctble V",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L30"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9a8587bb9f7aba582e0592ce662da4a41f3bbe0579c71a585880b457c7694d11"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 33,
        "start_column": 55,
        "end_line": 33,
        "end_column": 60
      },
      "debug_info": {
        "goal": "\u22a2 denum \u2191{n | even n}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a5a372ef4d9b20adf267d1691057b2e9a73aa3a059ae6478d8f9cd338d062275"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 37,
        "start_column": 66,
        "end_line": 37,
        "end_column": 71
      },
      "debug_info": {
        "goal": "U V : Type\n\u22a2 U \u223c V \u2194 \u2203 f g, f \u2218 g = id \u2227 g \u2218 f = id",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "033f5d98c5d10f9fbf133bb129ddb962df513156112fb968e6942880eb390c96"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 41,
        "start_column": 53,
        "end_line": 41,
        "end_column": 58
      },
      "debug_info": {
        "goal": "U V : Type\nf : U \u2192 V\ng : V \u2192 U\nh : g \u2218 f = id\n\u22a2 image g \u2218 image f = id",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "8a41b018e3d71687651481d5de324f17e4fbacd9bb07b68aad8a418df9fc0729"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 45,
        "start_column": 35,
        "end_line": 45,
        "end_column": 40
      },
      "debug_info": {
        "goal": "U V : Type\nh : U \u223c V\n\u22a2 Set U \u223c Set V",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L45"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "949b1751af147c8bd57163576cf40a2b75ba2d3efde6e0caafa149bf5683358c"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 53,
        "start_column": 55,
        "end_line": 53,
        "end_column": 60
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\nX1 X2 : Set \u2191A\nh : HTPI.Exercises.val_image U A X1 = HTPI.Exercises.val_image U A X2\n\u22a2 X1 \u2286 X2",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L53"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f6bbd116db036aa5e16a38205a2c0632f1f6c28d771201fdd69e855d30f264bf"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 57,
        "start_column": 32,
        "end_line": 57,
        "end_column": 37
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\n\u22a2 one_to_one (HTPI.Exercises.val_image U A)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2b3004208d5db45bbd21567a72d2c0471efde8955a253ce78772f623b802311b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 61,
        "start_column": 33,
        "end_line": 61,
        "end_column": 38
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\n\u22a2 range (HTPI.Exercises.val_image U A) = \ud835\udcab A",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e2226382bb15401e583eb3c78d5b7f40068a5d60ef5a7161cbd3bafbe07aff6c"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 65,
        "start_column": 19,
        "end_line": 65,
        "end_column": 24
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\n\u22a2 Set \u2191A \u223c \u2191(\ud835\udcab A)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "de35b8110e0665ce27b0fc3609662d8af5b1fbda43271a5ce679a69ec5ce6096"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 70,
        "start_column": 31,
        "end_line": 70,
        "end_column": 36
      },
      "debug_info": {
        "goal": "U V : Type\nA : Set U\nB : Set V\nh : \u2191A \u223c \u2191B\n\u22a2 \u2191(\ud835\udcab A) \u223c \u2191(\ud835\udcab B)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b0f7f001d206778779951af643b6b0e6d6a8e5fa7f480567b8ce1477d412b838"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 74,
        "start_column": 45,
        "end_line": 74,
        "end_column": 50
      },
      "debug_info": {
        "goal": "U V : Type\nA : Set U\nf : \u2191A \u2192 V\nv : V\n\u22a2 func_restrict (func_extend f v) A = f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e818c34b38119520359ceebd1b8a1e27812533702991c44f9b3e277ca9fe60a8"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 78,
        "start_column": 47,
        "end_line": 78,
        "end_column": 52
      },
      "debug_info": {
        "goal": "U : Type\n\u22a2 ctble U \u2194 \u2203 f, one_to_one f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d7d968ec102edfaafbefe640d80877d4b734a7eb4af08eda9ee2a2911cb5c9f1"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 82,
        "start_column": 43,
        "end_line": 82,
        "end_column": 48
      },
      "debug_info": {
        "goal": "U : Type\nh : ctble U\nA : Set U\n\u22a2 ctble \u2191A",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "329615b5bb4b1f31f28b908f29578888c10fb64451e3996b83357a2cb87d8460"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 86,
        "start_column": 45,
        "end_line": 86,
        "end_column": 50
      },
      "debug_info": {
        "goal": "U : Type\nA B : Set U\nh1 : B \u2286 A\nh2 : ctble \u2191A\n\u22a2 ctble \u2191B",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b72797232c8fe014a9391924901425c1b2ff0c0fbdf711dac1fd8b1038483807"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 91,
        "start_column": 53,
        "end_line": 91,
        "end_column": 58
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\nf : U \u2192 \u2115\nh : empty A\n\u22a2 image f A = I 0",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "13c1f51ed143da6f4767bcc13e9057e83491bc36f338c2f8a40a6b5e972eebf6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 97,
        "start_column": 61,
        "end_line": 97,
        "end_column": 66
      },
      "debug_info": {
        "goal": "U V : Type\nA : Set U\nB : Set V\na : U\nb : V\nf : U \u2192 V\nh1 : one_one_on f A\nh2 : image f A = B\nh3 : a \u2208 A\nh4 : f a = b\n\u22a2 \u2191(A \\ {a}) \u223c \u2191(B \\ {b})",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L97"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "5c57ac855fdb2ef273b0c4ad9a25560bad0ca0afed966de2062798863e60808a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 101,
        "start_column": 53,
        "end_line": 101,
        "end_column": 58
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\na : U\nh1 : a \u2208 A\nh2 : empty (A \\ {a})\n\u22a2 A = {a}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4231aa48413f6c9da256acd084780623ae46ff7e505a64f4d6a4f3d565a38171"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 104,
        "start_column": 69,
        "end_line": 104,
        "end_column": 74
      },
      "debug_info": {
        "goal": "n : \u2115\nh : \u2191(I 0) \u223c \u2191(I n)\n\u22a2 n = 0",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "662c011f53e9653e7c2aee57218e3bc84672209a313ebf3b2d0af557d8401bed"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 108,
        "start_column": 64,
        "end_line": 108,
        "end_column": 69
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983m n : \u2115\u2984, \u2191(I m) \u223c \u2191(I n) \u2192 m = n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "588bf0ff7ccd24700012dff931c31d6843db6ecef4e4a58e708039a60dbd9644"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 112,
        "start_column": 53,
        "end_line": 112,
        "end_column": 58
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\nm n : \u2115\nh1 : numElts A m\nh2 : numElts A n\n\u22a2 m = n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "24f996e04e5f80086290fa0442664ddb49adef58b2873817c3bfe6e2a5e0eca7"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 116,
        "start_column": 60,
        "end_line": 116,
        "end_column": 65
      },
      "debug_info": {
        "goal": "m : \u2115\n\u22a2 \u2200 \u2983k : \u2115\u2984, k \u2264 m \u2192 num_elts_below (set_rp_below m) k = num_rp_below m k",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1dd5ffdf488142dcbd6a12e55d3850fcbfd7b5b473f2f02d0f85f3bb807ab486"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 122,
        "start_column": 45,
        "end_line": 122,
        "end_column": 50
      },
      "debug_info": {
        "goal": "m n : \u2115\n\u22a2 image (qr n) (I (m * n)) = I m \u00d7\u209b I n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L122"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-03T16:43:00-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "bbe87891bb133625fa7cbd7d3a65a52de626ea84c46c3a9ee019657c4c3b516d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 144,
        "start_column": 35,
        "end_line": 144,
        "end_column": 40
      },
      "debug_info": {
        "goal": "U V : Type\nA C : Set U\nf : \u2191A \u2192 V\ng : \u2191C \u2192 V\nh1 : empty (range f \u2229 range g)\nh2 : one_to_one f\nh3 : one_to_one g\n\u22a2 one_to_one (HTPI.Exercises.func_union U V A C f g)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "18760f583ccfdbe477aac0ff63b6c8b258d2a908c6b2da4567a55696d27569ed"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 149,
        "start_column": 50,
        "end_line": 149,
        "end_column": 55
      },
      "debug_info": {
        "goal": "U V : Type\nA C : Set U\nf : \u2191A \u2192 V\ng : \u2191C \u2192 V\nh : empty (A \u2229 C)\n\u22a2 range (HTPI.Exercises.func_union U V A C f g) = range f \u222a range g",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "47b6381185d362a5ae4721c4fd5a992c632917acb4ac037d682dd5eb398d585d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 156,
        "start_column": 55,
        "end_line": 156,
        "end_column": 60
      },
      "debug_info": {
        "goal": "U V : Type\nA C : Set U\nB D : Set V\nh1 : empty (A \u2229 C)\nh2 : empty (B \u2229 D)\nh3 : \u2191A \u223c \u2191B\nh4 : \u2191C \u223c \u2191D\n\u22a2 \u2191(A \u222a C) \u223c \u2191(B \u222a D)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "efa0984b0c941705c058d53ff39ab442735315adb4bf4c29d8eb8f8d14eabc59"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 159,
        "start_column": 64,
        "end_line": 159,
        "end_column": 69
      },
      "debug_info": {
        "goal": "n m : \u2115\n\u22a2 \u2191(I m) \u223c \u2191(I (n + m) \\ I n)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L159"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2cbea053e5ed1339339b7e3549478b5f4417b12385bf7fc4fc3075b47057cf39"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 164,
        "start_column": 31,
        "end_line": 164,
        "end_column": 36
      },
      "debug_info": {
        "goal": "U : Type\nA B : Set U\nn m : \u2115\nh1 : empty (A \u2229 B)\nh2 : numElts A n\nh3 : numElts B m\n\u22a2 numElts (A \u222a B) (n + m)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-10T16:20:53-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "471f475ca5c6306e62acf21c86b7ea31a9574b49a06f0dec8093ab10f61a9333"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 168,
        "start_column": 64,
        "end_line": 168,
        "end_column": 69
      },
      "debug_info": {
        "goal": "U V : Type\nA C : Set U\nB : Set V\nh1 : \u2191A \u223c \u2191B\nh2 : C \u2286 A\n\u22a2 \u2203 D \u2286 B, \u2191C \u223c \u2191D",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L168"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-10T16:20:53-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "278c67d0558deacc7bddd5ab47705e0891cdad13913cc94a9a7b2ec7567cbcf2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 172,
        "start_column": 47,
        "end_line": 172,
        "end_column": 52
      },
      "debug_info": {
        "goal": "U : Type\nA B : Set U\nh1 : finite \u2191A\nh2 : B \u2286 A\n\u22a2 finite \u2191B",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-10T16:20:53-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "02135f943e6b94dceb237e0e447fdf626f4a9378199f2867e8744d748aa68e1a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 176,
        "start_column": 35,
        "end_line": 176,
        "end_column": 40
      },
      "debug_info": {
        "goal": "A : Set \u2115\nh : finite \u2191A\n\u22a2 \u2203 m, \u2200 n \u2208 A, n < m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L176"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "72e44976f7921203c7f9ff0e923488f42890fec0b4b152166c8264f7c2ad4c69"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 179,
        "start_column": 36,
        "end_line": 179,
        "end_column": 41
      },
      "debug_info": {
        "goal": "\u22a2 \u00acfinite \u2115",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L179"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b5ddff0bee00c25ecbf26594ad519efc6f96a03729bca3b5f35402338e55f12b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 183,
        "start_column": 33,
        "end_line": 183,
        "end_column": 38
      },
      "debug_info": {
        "goal": "U : Type\nh : denum U\n\u22a2 \u00acfinite U",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L183"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "90deea9a67d707c5749df306ac5521396a5754294071923a8feac4eb0a362be6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 188,
        "start_column": 52,
        "end_line": 188,
        "end_column": 57
      },
      "debug_info": {
        "goal": "U : Type\nf : U \u2192 U\nh1 : one_to_one f\nh2 : finite U\n\u22a2 onto f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L188"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "77c034b6736a15d7481b5d5e115f85c650ba88a377995082bc0355e1f35f80fe"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 193,
        "start_column": 43,
        "end_line": 193,
        "end_column": 48
      },
      "debug_info": {
        "goal": "U : Type\na b : U\n\u22a2 ctble \u2191{a, b}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L193"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "37b1b4d381f4e205235be2f717cb25d5afb4f3c9e8faf0f3487c7baf8be15ca4"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 198,
        "start_column": 54,
        "end_line": 198,
        "end_column": 59
      },
      "debug_info": {
        "goal": "U : Type\nA B : Set U\nh1 : ctble \u2191A\nh2 : ctble \u2191B\n\u22a2 ctble \u2191(A \u222a B)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e4711b97f42e04ff48370dc4cacae3f9d2f18b89ed538a1eef9962f4995aef67"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 202,
        "start_column": 48,
        "end_line": 202,
        "end_column": 53
      },
      "debug_info": {
        "goal": "U : Type\nF : Set (Set U)\n\u22a2 \u22c3\u2080 {A | A \u2208 F \u2227 \u00acempty A} = \u22c3\u2080 F",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L202"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "42a51f48f39e92f60077e54faa7a7b0040e20911a63361962e2acfb5d7d94bf2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 207,
        "start_column": 33,
        "end_line": 207,
        "end_column": 38
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\nn : \u2115\n\u22a2 image (seq_cons U) (A \u00d7\u209b seq_by_length A n) = seq_by_length A (n + 1)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L207"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-10T16:20:53-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1c55f2ebd95648578cccfedccec7d153443a3aae9ef9d7c0110b8e76e120d784"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 212,
        "start_column": 38,
        "end_line": 212,
        "end_column": 43
      },
      "debug_info": {
        "goal": "U : Type\nh : ctble U\n\u22a2 ctble (List U)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L212"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "027eb23edf4584a184ee61671a2c3a55aa177a4e5d08bcafebf25bc313d56654"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 222,
        "start_column": 43,
        "end_line": 222,
        "end_column": 48
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\nh : finite \u2191A\n\u22a2 \u2203 l, HTPI.Exercises.list_to_set U l = A",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L222"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9be2cd8b8774a9daa9f76caad3015e37c0c7b8b9f2ed45c9466af8e429701a8d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 227,
        "start_column": 36,
        "end_line": 227,
        "end_column": 41
      },
      "debug_info": {
        "goal": "U : Type\nh : ctble U\n\u22a2 ctble \u2191{X | finite \u2191X}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L227"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "93fb0c49a86414f8e000ef73bf1e6bec4a1365e82fc92937bd582e11c205c6ce"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 231,
        "start_column": 36,
        "end_line": 231,
        "end_column": 41
      },
      "debug_info": {
        "goal": "U V W : Type\n\u22a2 (U \u00d7 V \u2192 W) \u223c (U \u2192 V \u2192 W)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "073c10c84e4add92ae0018e09321a2d41e09d8785810c8b7928cb6da66f52cf0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 235,
        "start_column": 48,
        "end_line": 235,
        "end_column": 53
      },
      "debug_info": {
        "goal": "\u22a2 \u2203 P, partition P \u2227 denum \u2191P \u2227 \u2200 X \u2208 P, denum \u2191X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L235"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-27T10:42:05-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "90c9dfbc37bd4c7a192876efeef89fb6706fba86f979938b2a4bb727cd0b8a5e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 239,
        "start_column": 40,
        "end_line": 239,
        "end_column": 45
      },
      "debug_info": {
        "goal": "\u22a2 \u00acctble \u2191{X | \u00acfinite \u2191X}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L239"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-07T13:35:34-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "791702da1af95dfdc5c4433275ca398fa45db347a8948216a2045fa10a1ca10b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 243,
        "start_column": 52,
        "end_line": 243,
        "end_column": 57
      },
      "debug_info": {
        "goal": "U : Type\nA B : Set U\nh : empty (A \u2229 B)\n\u22a2 \u2191(\ud835\udcab(A \u222a B)) \u223c \u2191(\ud835\udcab A \u00d7\u209b \ud835\udcab B)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-10T16:20:53-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "5894b9fe88877adde0bf6fbcf9cb75681209b34bcd2e076fa5aa4135fc5b71e5"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 249,
        "start_column": 47,
        "end_line": 249,
        "end_column": 52
      },
      "debug_info": {
        "goal": "U V : Type\nX : Set U\nx : U\nf : U \u2192 V\ng : V \u2192 U\nh : x \u2209 X\ny : V\n\u22a2 (x, y) \u2208 csb_func_graph f g X \u2194 g y = x",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L249"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "05adc02a65c4791f0750b55ee7ccbe707ee2a9f0ad5ea36d4684bd0c59e535c6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 253,
        "start_column": 63,
        "end_line": 253,
        "end_column": 68
      },
      "debug_info": {
        "goal": "\u22a2 \u2191{x | 0 < x \u2227 x < 1} \u223c \u2191{x | 0 < x \u2227 x \u2264 1}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L253"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-07T13:35:34-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "202837347e4915cd3100530f785e68099b300780e54431bf820116bdd2817cb1"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 259,
        "start_column": 54,
        "end_line": 259,
        "end_column": 59
      },
      "debug_info": {
        "goal": "U V : Type\nR S : Rel U V\nh : \u2200 (u : U) (v : V), R u v \u2194 S u v\n\u22a2 R = S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2a1cb0380dea4068230230cc20209edbd101494b2a115b3b89d70179efae1b30"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 281,
        "start_column": 60,
        "end_line": 281,
        "end_column": 65
      },
      "debug_info": {
        "goal": "U : Type\n\u22a2 \u2191(HTPI.Exercises.EqRel U) \u223c \u2191(HTPI.Exercises.Part U)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L281"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e41a8530e1fe4e0784efd4b009c086c6b4f794b362c46d4badaba68032a4662e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 285,
        "start_column": 28,
        "end_line": 285,
        "end_column": 33
      },
      "debug_info": {
        "goal": "U : Type\n\u22a2 \u2191(HTPI.Exercises.EqRel U) \u223c \u2191(HTPI.Exercises.EqRelExt U)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L285"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d11f44c21ec40a90180c6875463f86cf66d678da1a9070ff787d968236607228"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 289,
        "start_column": 49,
        "end_line": 289,
        "end_column": 54
      },
      "debug_info": {
        "goal": "\u22a2 \u2203 f, one_to_one f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L289"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "141ba8d755a8f4776b385a814f7120da1a871d93dc675ddc150354aab21af250"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 292,
        "start_column": 63,
        "end_line": 292,
        "end_column": 68
      },
      "debug_info": {
        "goal": "X : Set \u2115\n\u22a2 HTPI.Exercises.saz_pair X \u2208 HTPI.Exercises.Part \u2115",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L292"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "bc779320464d7ca7a79eabc41ac9f39af5961dd4eb9257b9c9dc4aef6688c288"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap8Ex.lean",
        "start_line": 299,
        "start_column": 59,
        "end_line": 299,
        "end_column": 64
      },
      "debug_info": {
        "goal": "\u22a2 \u2191(HTPI.Exercises.EqRel \u2115) \u223c Set \u2115",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap8Ex.lean#L299"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "28686619f33b37185be35270d269441d26487d2e1d154d506ab656e3c17447a3"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 7,
        "start_column": 50,
        "end_line": 7,
        "end_column": 55
      },
      "debug_info": {
        "goal": "A B C : Type\nR : Set (A \u00d7 B)\nS : Set (B \u00d7 C)\n\u22a2 Dom (comp S R) \u2286 Dom R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "ee7d7093d1364045e4e7b221e673497ad164058e134f783103239dde220f436f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 11,
        "start_column": 66,
        "end_line": 11,
        "end_column": 71
      },
      "debug_info": {
        "goal": "A B C : Type\nR : Set (A \u00d7 B)\nS : Set (B \u00d7 C)\n\u22a2 Ran R \u2286 Dom S \u2192 Dom (comp S R) = Dom R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L11"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "339b27b41af175d088bfc1906007612c871548843eee146ce7bb824558fd7fd4"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 16,
        "start_column": 56,
        "end_line": 16,
        "end_column": 61
      },
      "debug_info": {
        "goal": "___ : Sort u_1\nA B C : Type\nR : Set (A \u00d7 B)\nS : Set (B \u00d7 C)\n\u22a2 ___ \u2192 Ran (comp S R) = Ran S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L16"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "33ccf6dde6a06b387eac9115d2d1eb735148dbebcad154ae2bf906e1d9575517"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 21,
        "start_column": 48,
        "end_line": 21,
        "end_column": 53
      },
      "debug_info": {
        "goal": "A B C : Type\nR : Set (A \u00d7 B)\nS T : Set (B \u00d7 C)\n\u22a2 comp S R \\ comp T R \u2286 comp (S \\ T) R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "3c9fbd05701f5bae15b9d5d2173961b92afaa4320f83654dd75e53430c7a98a1"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 27,
        "start_column": 48,
        "end_line": 27,
        "end_column": 53
      },
      "debug_info": {
        "goal": "A B C : Type\nR : Set (A \u00d7 B)\nS T : Set (B \u00d7 C)\n\u22a2 comp (S \\ T) R \u2286 comp S R \\ comp T R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "dadcbc8eb7d13e8c747f3cb4c90de3d994d8cb003c6495b1422632dc055d16f8"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 33,
        "start_column": 48,
        "end_line": 33,
        "end_column": 53
      },
      "debug_info": {
        "goal": "A B C : Type\nR : Set (A \u00d7 B)\nS T : Set (B \u00d7 C)\n\u22a2 comp (S \u2229 T) R = comp S R \u2229 comp T R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "fe908945ac0f2409546cf658da4d315690e1b62fe678c3059f9c23814480b886"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 39,
        "start_column": 48,
        "end_line": 39,
        "end_column": 53
      },
      "debug_info": {
        "goal": "A B C : Type\nR : Set (A \u00d7 B)\nS T : Set (B \u00d7 C)\n\u22a2 comp (S \u222a T) R = comp S R \u222a comp T R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f6818e8b672f063a9c531a2e252b995fc35174af0623617ec921192f9f696855"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 44,
        "start_column": 60,
        "end_line": 44,
        "end_column": 65
      },
      "debug_info": {
        "goal": "\u22a2 elementhood \u2124 6 {n | \u2203 k, n = 2 * k}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-07T13:35:34-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "5ddc19e6b72a1e38536d456376bf247cd5ef6660eb1cb0d25287c5ab708d5282"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 48,
        "start_column": 60,
        "end_line": 48,
        "end_column": 65
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\n\u22a2 reflexive R \u2194 {x | @HTPI.Exercises.Theorem_4_3_4_1.match_1 A (fun x => Prop) x fun x y => x = y} \u2286 extension R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-07T13:35:34-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "5046c8008ea7f5f07699bef907578037d49803fdcb7d886514f3f405b774cb58"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 53,
        "start_column": 56,
        "end_line": 53,
        "end_column": 61
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\n\u22a2 transitive R \u2194 comp (extension R) (extension R) \u2286 extension R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L53"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1351ca9dcce2f7f5854a6540c6d7ec547d04502f46ee34ef28daf668e05b8bb0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 57,
        "start_column": 50,
        "end_line": 57,
        "end_column": 55
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nh1 : reflexive R\n\u22a2 reflexive (RelFromExt (inv (extension R)))",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-23T10:36:50-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "95d28b3ee49f29a69b547bae2e86470e15e2f246292e661702566d2371b5fd32"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 61,
        "start_column": 51,
        "end_line": 61,
        "end_column": 56
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nh1 : transitive R\n\u22a2 transitive (RelFromExt (inv (extension R)))",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-23T10:36:50-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "54117a85008427ea168ba8648b8acd33999f87371b3bde6cbdac0fd2d95d104b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 68,
        "start_column": 66,
        "end_line": 68,
        "end_column": 71
      },
      "debug_info": {
        "goal": "A : Type\nR S : BinRel A\nh1 : transitive R\nh2 : transitive S\nh3 : comp (extension S) (extension R) \u2286 comp (extension R) (extension S)\n\u22a2 transitive (RelFromExt (comp (extension R) (extension S)))",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-23T10:36:50-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "89e8b531bb9a6c859f89030cfb72f731743fc666f42fd019a9ec08e5a2fb9d46"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 74,
        "start_column": 35,
        "end_line": 74,
        "end_column": 40
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nS : BinRel (Set A)\nh : \u2200 (X Y : Set A), S X Y \u2194 X \u2260 \u2205 \u2227 Y \u2260 \u2205 \u2227 \u2200 (x y : A), x \u2208 X \u2192 y \u2208 Y \u2192 R x y\n\u22a2 transitive R \u2192 transitive S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-28T17:55:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "dfa9636576bec902d0c3b43674c033577e3c1547115e241b6832189333da433d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 80,
        "start_column": 64,
        "end_line": 80,
        "end_column": 69
      },
      "debug_info": {
        "goal": "A : Type\nR1 R2 : BinRel A\nh1 : symmetric R1\nh2 : symmetric R2\n\u22a2 symmetric (RelFromExt (extension R1 \u222a extension R2))",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-23T10:36:50-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a74b14e3c1a81e4b9c65923898ff220e9d14df88c7f04cd9a47e071a286d9d56"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 86,
        "start_column": 65,
        "end_line": 86,
        "end_column": 70
      },
      "debug_info": {
        "goal": "A : Type\nR1 R2 : BinRel A\nh1 : transitive R1\nh2 : transitive R2\n\u22a2 transitive (RelFromExt (extension R1 \u222a extension R2))",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-23T10:36:50-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1403369f2a74daada43f357fed6508fd049b4da4538e9c895b5ca467700d2a92"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 92,
        "start_column": 35,
        "end_line": 92,
        "end_column": 40
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nS : BinRel (Set A)\nh : \u2200 (X Y : Set A), S X Y \u2194 \u2203 x y, x \u2208 X \u2227 y \u2208 Y \u2227 R x y\n\u22a2 transitive R \u2192 transitive S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-28T17:55:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d1dc4e12b6f3667ce2b27a3469459b60fafc107b3745ae469533c6e876de4f2d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 96,
        "start_column": 62,
        "end_line": 96,
        "end_column": 67
      },
      "debug_info": {
        "goal": "A : Type\n\u22a2 partial_order (sub A)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L96"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "8b42c67d1adb9b29d0e400fa60cb2ebbed735b5df1e9abc37d517b89e206075d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 101,
        "start_column": 44,
        "end_line": 101,
        "end_column": 49
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nB : Set A\nb : A\nh1 : partial_order R\nh2 : smallestElt R b B\n\u22a2 \u2200 (c : A), smallestElt R c B \u2192 b = c",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2459c227aa8339124f786112de4a0a5cda0c5fbd5662743c048d1e81997fc0d8"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 106,
        "start_column": 28,
        "end_line": 106,
        "end_column": 33
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\n\u22a2 lub (sub A) (\u22c3\u2080 F) F",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L106"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "73f9542ec911af3d3db75745127e51e44f295e823c5da8c1dd6beee655ad296a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 113,
        "start_column": 23,
        "end_line": 113,
        "end_column": 28
      },
      "debug_info": {
        "goal": "A B : Type\nR : BinRel A\nS : BinRel B\nT : BinRel (A \u00d7 B)\nh1 : partial_order R\nh2 : partial_order S\nh3 : \u2200 (a a' : A) (b b' : B), T (a, b) (a', b') \u2194 R a a' \u2227 S b b'\n\u22a2 partial_order T",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "57dd7de3bc59781ccf5077ea5ad17aeeccdd3ca6c387d09067a94f1c1fd53fc8"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 121,
        "start_column": 47,
        "end_line": 121,
        "end_column": 52
      },
      "debug_info": {
        "goal": "A B : Type\nR : BinRel A\nS : BinRel B\nL : BinRel (A \u00d7 B)\nh1 : total_order R\nh2 : total_order S\nh3 : \u2200 (a a' : A) (b b' : B), L (a, b) (a', b') \u2194 R a a' \u2227 (a = a' \u2192 S b b')\n\u22a2 \u2200 (a a' : A) (b b' : B), L (a, b) (a', b') \u2228 L (a', b') (a, b)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "5f58bc8cd2502697997a25e6afa2421201ec48f652cd09e68d5261863d792f46"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 128,
        "start_column": 47,
        "end_line": 128,
        "end_column": 52
      },
      "debug_info": {
        "goal": "A : Type\nR1 R2 : BinRel A\nB : Set A\nb : A\nh1 : partial_order R1\nh2 : partial_order R2\nh3 : extension R1 \u2286 extension R2\n\u22a2 smallestElt R1 b B \u2192 smallestElt R2 b B",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "527dc59fdf93b560818f3e10839d7b795e504804338d8f01f91cc680a8172b0b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 135,
        "start_column": 45,
        "end_line": 135,
        "end_column": 50
      },
      "debug_info": {
        "goal": "A : Type\nR1 R2 : BinRel A\nB : Set A\nb : A\nh1 : partial_order R1\nh2 : partial_order R2\nh3 : extension R1 \u2286 extension R2\n\u22a2 minimalElt R2 b B \u2192 minimalElt R1 b B",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L135"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "ca28ddae0414391f8f8edd13662e892290a55313cc44800393dd9d7ab8898950"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 141,
        "start_column": 50,
        "end_line": 141,
        "end_column": 55
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nB1 B2 : Set A\nh1 : partial_order R\nh2 : \u2200 x \u2208 B1, \u2203 y \u2208 B2, R x y\nh3 : \u2200 x \u2208 B2, \u2203 y \u2208 B1, R x y\n\u22a2 \u2200 (x : A), upperBd R x B1 \u2194 upperBd R x B2",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d3898e52805e167f5425928f210ff672dd5f7662751a53a2bd318c27d86616c0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 147,
        "start_column": 25,
        "end_line": 147,
        "end_column": 30
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nB1 B2 : Set A\nx1 x2 : A\nh1 : partial_order R\nh2 : lub R x1 B1\nh3 : lub R x2 B2\n\u22a2 B1 \u2286 B2 \u2192 R x1 x2",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "05ebe9be9f6cdfefe7f5d7bce97155b79fa2754772a00de41b321584a39ddc5b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 152,
        "start_column": 60,
        "end_line": 152,
        "end_column": 65
      },
      "debug_info": {
        "goal": "A : Type\nR : Set (A \u00d7 A)\n\u22a2 smallestElt (sub (A \u00d7 A)) (R \u222a inv R) {T | R \u2286 T \u2227 symmetric (RelFromExt T)}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L152"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-07T13:35:34-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "70afe9b4e700377efa5cea3b95fa9074bfe72f673ea11d636ce2ab9fac6b91dd"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 158,
        "start_column": 58,
        "end_line": 158,
        "end_column": 63
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\nh : partition F\n\u22a2 \u2200 X \u2208 F, \u2200 Y \u2208 F, \u2200 x \u2208 X, x \u2208 Y \u2192 X = Y",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "fdbda07c184630d6a57ed7af0f05eea2276929a7abb9e0eedc3380d1365794b8"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 162,
        "start_column": 35,
        "end_line": 162,
        "end_column": 40
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\nh : partition F\n\u22a2 reflexive (EqRelFromPart F)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a3d78fb62d0e76a97b037f29d54662dd4ab5379e7324414a62f6dd15b5a16e16"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 166,
        "start_column": 35,
        "end_line": 166,
        "end_column": 40
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\nh : partition F\n\u22a2 symmetric (EqRelFromPart F)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a1b331716c539aa43ad687b8986fc6dcbaf01c031a80532e5801b1d1e1f64970"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 170,
        "start_column": 36,
        "end_line": 170,
        "end_column": 41
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\nh : partition F\n\u22a2 transitive (EqRelFromPart F)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "8b7fce6b60c1c429684c90855c0591a114d1676682083fcfe00474f516bcbef6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 174,
        "start_column": 60,
        "end_line": 174,
        "end_column": 65
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\nh : partition F\n\u22a2 \u2200 X \u2208 F, \u2200 x \u2208 X, equivClass (EqRelFromPart F) x = X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L174"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9e3b2774afca49f43b77e8edc8b88e5d3d05bf2c8c43f389cc085cb9d19349c3"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 179,
        "start_column": 50,
        "end_line": 179,
        "end_column": 55
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nh : equiv_rel R\n\u22a2 \u2200 X \u2208 mod A R, \u2200 x \u2208 X, equivClass R x = X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L179"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "33a8c3bc9f4e220b1681f1da55dea5e836fcea935359e26db7336633825625da"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 191,
        "start_column": 28,
        "end_line": 191,
        "end_column": 33
      },
      "debug_info": {
        "goal": "A : Type\nR S : BinRel A\nh1 : equiv_rel R\nh2 : equiv_rel S\n\u22a2 equiv_rel (HTPI.Exercises.conj A R S)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L191"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1bc8f303b7a600f9c59b283687241ad4112d2b0246735e31f4789afda445f051"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 197,
        "start_column": 41,
        "end_line": 197,
        "end_column": 46
      },
      "debug_info": {
        "goal": "A : Type\nR S : BinRel A\nh1 : equiv_rel R\nh2 : equiv_rel S\n\u22a2 \u2200 (x : A), equivClass (HTPI.Exercises.conj A R S) x = equivClass R x \u2229 equivClass S x",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d9851bbf235280592c42d7ac5ead51e4341545b99447adcfd19dd2d6ff3226e3"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 202,
        "start_column": 50,
        "end_line": 202,
        "end_column": 55
      },
      "debug_info": {
        "goal": "A : Type\nR S : BinRel A\nh1 : equiv_rel R\nh2 : equiv_rel S\n\u22a2 mod A (HTPI.Exercises.conj A R S) = HTPI.Exercises.dot A (mod A R) (mod A S)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L202"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d87e35458e872b74630d3e04f2db0fba65c1f43288b428c13d4c9c6ffe493364"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap4Ex.lean",
        "start_line": 207,
        "start_column": 65,
        "end_line": 207,
        "end_column": 70
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (m : \u2124), equiv_rel (HTPI.Exercises.equiv_mod m)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap4Ex.lean#L207"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f0fb9944ad4f1d501c6e6493025817af101857a25a95d69833f8f0cfee90d808"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 7,
        "start_column": 47,
        "end_line": 7,
        "end_column": 52
      },
      "debug_info": {
        "goal": "a b d : \u2115\nh1 : d \u2223 b\nh2 : d \u2223 a % b\n\u22a2 d \u2223 a",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "eb4a54754bf101bfaadbe8e056395db87a39e596f0895f27c9b197c0ed144b3d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 10,
        "start_column": 65,
        "end_line": 10,
        "end_column": 70
      },
      "debug_info": {
        "goal": "a b : \u2115\nh : a < b\n\u22a2 gcd a b = gcd b a",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L10"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-05T10:06:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d0afa45cdeded544904ef1fb41b9d74c4e735b2bbcb416e2b3e65bfb5659e58b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 12,
        "start_column": 52,
        "end_line": 12,
        "end_column": 57
      },
      "debug_info": {
        "goal": "a b : \u2115\n\u22a2 gcd a b = gcd b a",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L12"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-05T10:06:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "3014f0e8990715e94b8d3183568ea6ee28e012a38f269535dc9e0fd2d1abebae"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 16,
        "start_column": 67,
        "end_line": 16,
        "end_column": 72
      },
      "debug_info": {
        "goal": "a b : \u2115\nn : \u2124\n\u22a2 (\u2203 s t, s * \u2191a + t * \u2191b = n) \u2194 \u2191(gcd a b) \u2223 n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L16"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-09-13T20:28:50-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "fcc0de8893b8a6dce6b3ec9ced5acba2264cb2933e3c099cc7129e3e5457a2a7"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 20,
        "start_column": 35,
        "end_line": 20,
        "end_column": 40
      },
      "debug_info": {
        "goal": "a b c : \u2115\n\u22a2 gcd a b = gcd (a + b * c) b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L20"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "12212a4c91ee66bb619e8f110a2b4ef69d251f6613714e575d7d035387808b4e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 24,
        "start_column": 19,
        "end_line": 24,
        "end_column": 24
      },
      "debug_info": {
        "goal": "a b : \u2115\nh : a \u2260 0 \u2228 b \u2260 0\n\u22a2 gcd a b \u2260 0",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L24"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2554d5ce2386093e3b4475a1557cdd97c2e6e038a640f01c81c17b2cc7c395e1"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 28,
        "start_column": 47,
        "end_line": 28,
        "end_column": 52
      },
      "debug_info": {
        "goal": "a b d : \u2115\nh1 : gcd a b \u2260 0\nh2 : d \u2223 a\nh3 : d \u2223 b\n\u22a2 d \u2264 gcd a b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "09500b9b8a61d1e15662d217373aff22ff0b13b928e44e808336665238e37bfe"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 32,
        "start_column": 49,
        "end_line": 32,
        "end_column": 54
      },
      "debug_info": {
        "goal": "a b n : \u2115\nh : a \u2223 b\n\u22a2 n * a \u2223 n * b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-09-12T10:05:44-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "34d627d44259c2060491c3e9adb9655e5b2553c962dddb598ca1fd53a4a3905f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 35,
        "start_column": 53,
        "end_line": 35,
        "end_column": 58
      },
      "debug_info": {
        "goal": "a b n : \u2115\nh1 : n \u2260 0\nh2 : n * a \u2223 n * b\n\u22a2 a \u2223 b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-09-12T10:05:44-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "496bc6e4d93f936bcd097a19a6b349fc05f5977f9d8e1987df46c6f5b2c7abac"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 38,
        "start_column": 41,
        "end_line": 38,
        "end_column": 46
      },
      "debug_info": {
        "goal": "a b : \u2115\nh1 : a \u2223 b\nh2 : b \u2223 a\n\u22a2 a = b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-09-12T10:05:44-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "7d36e6241b532809a35223c77df74a4fc22ad209364be07f220fc3846b1ba302"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 41,
        "start_column": 41,
        "end_line": 41,
        "end_column": 46
      },
      "debug_info": {
        "goal": "a b n : \u2115\n\u22a2 gcd (n * a) (n * b) = n * gcd a b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4943afcd28647cb16c690d50c81461cda56729cf70337ac1759f155fc4abce17"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 46,
        "start_column": 51,
        "end_line": 46,
        "end_column": 56
      },
      "debug_info": {
        "goal": "a p : \u2115\nh1 : prime p\nh2 : a \u2223 p\n\u22a2 a = 1 \u2228 a = p",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "0ed859fb10b44971aa84146311d6be44fe1eea285915f85dda0882a1f91d88f2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 51,
        "start_column": 37,
        "end_line": 51,
        "end_column": 42
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (l : List \u2115), (\u2200 a \u2208 l, a \u2260 0) \u2192 prod l \u2260 0",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L51"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-11-10T14:58:19-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f2d8b63eedfe2f3f189b185a03023ded0fc2a1c12aceb176020d023638c382ab"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 55,
        "start_column": 61,
        "end_line": 55,
        "end_column": 66
      },
      "debug_info": {
        "goal": "a b : \u2115\n\u22a2 rel_prime a b \u2194 \u00ac\u2203 p, prime p \u2227 p \u2223 a \u2227 p \u2223 b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-28T17:55:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "62acc5efe6150aa4321f78c2f5f04e5ca4d1084d10262c62e9a1546d3c352f02"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 59,
        "start_column": 21,
        "end_line": 59,
        "end_column": 26
      },
      "debug_info": {
        "goal": "a b : \u2115\nh : rel_prime a b\n\u22a2 rel_prime b a",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L59"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-10T20:59:07-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "c047734d6d6c26c0cadcf1f05bac1d5f83d246a49c27e6083b1fa251dabca56c"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 64,
        "start_column": 32,
        "end_line": 64,
        "end_column": 37
      },
      "debug_info": {
        "goal": "a : \u2115\nl : List \u2115\nh1 : prime_factorization a l\np : \u2115\n\u22a2 p \u2208 l \u2194 prime_factor p a",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L64"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-09-14T11:03:42-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a96f82868ec6af7ccaf9126588369e59d0151c96c4ef20acf882c294b2f6979e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "a b : \u2115\nl m : List \u2115\nh1 : prime_factorization a l\nh2 : prime_factorization b m\n\u22a2 rel_prime a b \u2194 \u00ac\u2203 p \u2208 l, p \u2208 m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-28T17:55:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2def431079bc7e3f241d4c1ea98a2a0ee9e8134a00f559e8671ba9801838ed77"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 73,
        "start_column": 56,
        "end_line": 73,
        "end_column": 61
      },
      "debug_info": {
        "goal": "a b : \u2115\n\u22a2 rel_prime a b \u2194 \u2203 s t, s * \u2191a + t * \u2191b = 1",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L73"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "ab8b2e88f48d2351fee382dc06e1024e7db0fe03017290ed440adaf40149f741"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 78,
        "start_column": 23,
        "end_line": 78,
        "end_column": 28
      },
      "debug_info": {
        "goal": "a b a' b' : \u2115\nh1 : rel_prime a b\nh2 : a' \u2223 a\nh3 : b' \u2223 b\n\u22a2 rel_prime a' b'",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "621100a0f85ce4291e7fe0a0227b5b1b6c26b62bf2e2ee0d661d268992d1d146"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 83,
        "start_column": 21,
        "end_line": 83,
        "end_column": 26
      },
      "debug_info": {
        "goal": "a b j k : \u2115\nh1 : gcd a b \u2260 0\nh2 : a = j * gcd a b\nh3 : b = k * gcd a b\n\u22a2 rel_prime j k",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-09-15T14:18:40-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2e41e423020e7b0fbb64a783ad6eae39c4ffd6846a272ff33f8feeed2c0bae8f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 87,
        "start_column": 41,
        "end_line": 87,
        "end_column": 46
      },
      "debug_info": {
        "goal": "a b c : \u2115\n\u22a2 gcd a (b * c) \u2223 gcd a b * gcd a c",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L87"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-13T14:20:00-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "960adf1ff0c23f9a3c70d8f7835481ae2d27c92235df40f3c395a32e10a6eb6f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 92,
        "start_column": 53,
        "end_line": 92,
        "end_column": 58
      },
      "debug_info": {
        "goal": "m : \u2115\na\u271d b\u271d c\u271d : \u2124\n\u22a2 a\u271d \u2261 b\u271d (MOD m) \u2192 b\u271d \u2261 c\u271d (MOD m) \u2192 a\u271d \u2261 c\u271d (MOD m)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d562863d71c04d04400dfb9e9b871cfa051fc7368390404c41c5fd4613faa6cf"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 95,
        "start_column": 66,
        "end_line": 95,
        "end_column": 71
      },
      "debug_info": {
        "goal": "m : \u2115\nX : ZMod m\n\u22a2 X + [0]_m = X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f853d5c8797a7ce96ff5568897e1d105afcc6a7519f9c8b6e9bd6cf453edc608"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 99,
        "start_column": 37,
        "end_line": 99,
        "end_column": 42
      },
      "debug_info": {
        "goal": "m : \u2115\nX : ZMod m\n\u22a2 \u2203 Y, X + Y = [0]_m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "fc57671847cf6b5e9ba19c7126bebd93a86f193151d39a4473ef9022d95a1fe6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 104,
        "start_column": 51,
        "end_line": 104,
        "end_column": 56
      },
      "debug_info": {
        "goal": "m : \u2115\nZ1 Z2 : ZMod m\nh1 : \u2200 (X : ZMod m), X + Z1 = X\nh2 : \u2200 (X : ZMod m), X + Z2 = X\n\u22a2 Z1 = Z2",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-13T14:20:00-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1a7f0e413ea1a424ff2d91710eda1c1cff50db9242b2a0910b576fd2efec844a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 108,
        "start_column": 61,
        "end_line": 108,
        "end_column": 66
      },
      "debug_info": {
        "goal": "m : \u2115\nX Y1 Y2 : ZMod m\nh1 : X + Y1 = [0]_m\nh2 : X + Y2 = [0]_m\n\u22a2 Y1 = Y2",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "7093aa2e3fa72b2d8dfe558b92ef9777a78d82e6086c527fd54840eab33f047e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 112,
        "start_column": 65,
        "end_line": 112,
        "end_column": 70
      },
      "debug_info": {
        "goal": "m a : \u2115\nb : \u2124\n\u22a2 \u00ac\u2191(gcd m a) \u2223 b \u2192 \u00ac\u2203 x, \u2191a * x \u2261 b (MOD m)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-09-25T21:59:07-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f54458a24badc9853376a92ee170cb11cee0c26e2ee6710958ac0e722e8ba392"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 116,
        "start_column": 49,
        "end_line": 116,
        "end_column": 54
      },
      "debug_info": {
        "goal": "m n : \u2115\na b : \u2124\nh1 : n \u2260 0\n\u22a2 \u2191n * a \u2261 \u2191n * b (MOD n * m) \u2194 a \u2261 b (MOD m)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "704e2d6134ad483ffd1cd3b20876c5c691a52c7bdf701eadc1136033d67d32db"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 120,
        "start_column": 42,
        "end_line": 120,
        "end_column": 47
      },
      "debug_info": {
        "goal": "m : \u2115\na b : \u2124\nh : a \u2261 b (MOD m)\n\u22a2 \u2200 (n : \u2115), a ^ n \u2261 b ^ n (MOD m)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L120"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1865ee087f8454f0e524511280c799dc7084f0193373f11e149276a9147c124d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 124,
        "start_column": 47,
        "end_line": 124,
        "end_column": 52
      },
      "debug_info": {
        "goal": "m : \u2115\ninst\u271d : NeZero m\nX : ZMod m\n\u22a2 \u2203! a, 0 \u2264 a \u2227 a < \u2191m \u2227 X = [a]_m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L124"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "bf90ebec91f9ad61ffae8c8d3162d5972bce17a9a23a0c698cc3e48a2990359d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 128,
        "start_column": 37,
        "end_line": 128,
        "end_column": 42
      },
      "debug_info": {
        "goal": "m a b : \u2115\nh1 : \u2191a \u2261 \u2191b (MOD m)\n\u22a2 rel_prime m a \u2194 rel_prime m b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-06-29T20:58:46-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "09d4aa6ec3f5366878de6fa687b9ad55de2207684225c2f2dfdfdf860d24a2e7"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 133,
        "start_column": 43,
        "end_line": 133,
        "end_column": 48
      },
      "debug_info": {
        "goal": "m a : \u2115\n\u22a2 rel_prime m (a % m) \u2194 rel_prime m a",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L133"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-06-29T20:58:46-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "ef0a591301484805b6119bf70eff961ef3e713c66e9cf92ec78d27bdf4d98f87"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 137,
        "start_column": 39,
        "end_line": 137,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : \u2115\na b : \u2124\ninst\u271d : NeZero m\n\u22a2 a \u2261 b (MOD m) \u2194 a % \u2191m = b % \u2191m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L137"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-08-06T15:17:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "965aec3a823b28874214d123948269b7e5af95f03b7ea377e5fa04344b4290c8"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 142,
        "start_column": 39,
        "end_line": 142,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m a b : \u2115\ninst\u271d : NeZero m\n\u22a2 \u2191a \u2261 \u2191b (MOD m) \u2194 a % m = b % m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-08-06T15:17:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a54523059fdeea34f3ea877d9142b9b7e00d63c7347175be380b9dc37df80a4e"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 151,
        "start_column": 42,
        "end_line": 151,
        "end_column": 47
      },
      "debug_info": {
        "goal": "m : \u2115\na : \u2124\n\u22a2 \u2200 (n : \u2115), [a]_m ^ n = [a ^ n]_m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "7a2d83986918882342d88dc5a392b681ad36ec371d2737c3d7d9990a94d0a41c"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 155,
        "start_column": 56,
        "end_line": 155,
        "end_column": 61
      },
      "debug_info": {
        "goal": "n : \u2115\ng g' : \u2115 \u2192 \u2115\nh1 : \u2200 i < n, g' (g i) = i\n\u22a2 one_one_below n g",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-28T17:55:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "0e48fe30d18bad687c2fd916da7ed8b345815a6c12e14b990c2718d58b360505"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 160,
        "start_column": 28,
        "end_line": 160,
        "end_column": 33
      },
      "debug_info": {
        "goal": "n : \u2115\nf g : \u2115 \u2192 \u2115\nh1 : perm_below n f\nh2 : perm_below n g\n\u22a2 perm_below n (f \u2218 g)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-28T17:55:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "8010a8deef9adde3410d790ea4f683fdcec0b967605a32944f9df472e05b4c9f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 164,
        "start_column": 67,
        "end_line": 164,
        "end_column": 72
      },
      "debug_info": {
        "goal": "n : \u2115\ng : \u2115 \u2192 \u2115\nh1 : perm_below (n + 1) g\nh2 : g n = n\n\u22a2 perm_below n g",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-28T17:55:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "3b9861747906ec931b804ec00a402c2fddb5940267e9c272d732880ddfb9f49c"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 168,
        "start_column": 59,
        "end_line": 168,
        "end_column": 64
      },
      "debug_info": {
        "goal": "a b c : \u2115\n\u22a2 rel_prime (a * b) c \u2194 rel_prime a c \u2227 rel_prime b c",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L168"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-28T17:55:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b1aee068173164b13fffa0d60263763121254f51a7de82bf2af2c2391e6675e9"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 172,
        "start_column": 35,
        "end_line": 172,
        "end_column": 40
      },
      "debug_info": {
        "goal": "m a : \u2115\ninst\u271d : NeZero m\nh1 : rel_prime m a\n\u22a2 \u2191a ^ (phi m + 1) \u2261 \u2191a (MOD m)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "de650e5c10ba76aa14cac7e54a7c2feaa4ce05b4b33ce7fd31e2ac0e731837d3"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 177,
        "start_column": 33,
        "end_line": 177,
        "end_column": 38
      },
      "debug_info": {
        "goal": "m a p : \u2115\ninst\u271d : NeZero m\nh1 : rel_prime m a\nh2 : p + 1 = phi m\n\u22a2 [\u2191a]_m * [\u2191a ^ p]_m = [1]_m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "473abb2fbd13099a621f49d0736f5d2dea9be7df9e26b5c66a60053f2ccbdce8"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 182,
        "start_column": 29,
        "end_line": 182,
        "end_column": 34
      },
      "debug_info": {
        "goal": "m a p q k : \u2115\ninst\u271d : NeZero m\nh1 : rel_prime m a\nh2 : p = q + phi m * k\n\u22a2 \u2191a ^ p \u2261 \u2191a ^ q (MOD m)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L182"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-17T12:43:06-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "c15c1cf75122894c15693e09a899520c72e2d54fa05627c6be6384ce66a82738"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 188,
        "start_column": 43,
        "end_line": 188,
        "end_column": 48
      },
      "debug_info": {
        "goal": "p : \u2115\nh1 : prime p\n\u22a2 \u2200 k < p, num_rp_below p (k + 1) = k",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L188"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-11-10T14:58:19-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f53d0e98f16edb886fb0f971c0f94f1732248c9762261f912fe3dd174ccff482"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 191,
        "start_column": 31,
        "end_line": 191,
        "end_column": 36
      },
      "debug_info": {
        "goal": "\u22a2 prime 3",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L191"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-10T20:59:07-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b09246604e64f413d7a9cdc24fc933beed5ed4739b91573ad8b489a29b9b2f73"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 196,
        "start_column": 27,
        "end_line": 196,
        "end_column": 32
      },
      "debug_info": {
        "goal": "a : \u2115\nh1 : rel_prime 561 a\n\u22a2 \u2191a ^ 560 \u2261 1 (MOD 3)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L196"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-02T16:18:40-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "3f6a132ba1270c61c944efcf50194985e39765f175f5a8ea26c71372321c71ac"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 201,
        "start_column": 58,
        "end_line": 201,
        "end_column": 63
      },
      "debug_info": {
        "goal": "p : \u2115\na b : \u2124\nh1 : prime p\nh2 : \u2191p \u2223 a * b\n\u22a2 \u2191p \u2223 a \u2228 \u2191p \u2223 b",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-05-10T20:59:07-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d3d637724516a21812d4c0350ed0a91c64579e9ee22e6e8b476e46ae072508c2"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap7Ex.lean",
        "start_line": 207,
        "start_column": 38,
        "end_line": 207,
        "end_column": 43
      },
      "debug_info": {
        "goal": "n : \u2115\nb : \u2124\nh1 : prime n\nh2 : b ^ 2 \u2261 1 (MOD n)\n\u22a2 b \u2261 1 (MOD n) \u2228 b \u2261 -1 (MOD n)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap7Ex.lean#L207"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-11-10T14:58:19-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "80f607f61a3f492c17a2293ed7c138ff81cc5d80b1143123d5221c3f6d10c79b"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 7,
        "start_column": 59,
        "end_line": 7,
        "end_column": 64
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), 2 * Sum i from 0 to n, i = n * (n + 1)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "149ba7ba6e7f994d3d2c9e83c041b437c8dc88e6aa0892a38faa865987f53857"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 11,
        "start_column": 63,
        "end_line": 11,
        "end_column": 68
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), Sum i from 0 to n, 2 * i + 1 = (n + 1) ^ 2",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L11"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e30aca0a191d3c095a3c46d131f59a649baa9344efcfa9416a4a14494e883b56"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 14,
        "start_column": 56,
        "end_line": 14,
        "end_column": 61
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), 2 \u2223 n ^ 2 + n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L14"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "30c7fdb446436c791c64001b3986c9569bdb2d68ddb3094b2f2e6ed3b4ecd797"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 18,
        "start_column": 58,
        "end_line": 18,
        "end_column": 63
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (a b : \u2124) (n : \u2115), a - b \u2223 a ^ n - b ^ n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L18"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2cedd6b24cd2530c7952d7130c795be3f036217d8d32b10d9a6556a166035244"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 21,
        "start_column": 53,
        "end_line": 21,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 n \u2265 10, 2 ^ n > n ^ 3",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "88e69bfd768e77a58bc7791651af234a08387ea5e8a85204f5aff18448ba3ab1"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 25,
        "start_column": 51,
        "end_line": 25,
        "end_column": 56
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), n \u2260 0 \u2192 \u2203 m, n = m + 1",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-06-29T20:58:46-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b3f094d4ddf3f28a0ec9f58b5d4f044cf4c600fa27fca5a31f8c908bd73c04ca"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 29,
        "start_column": 43,
        "end_line": 29,
        "end_column": 48
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), nat_even n \u2228 nat_odd n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "c84f4966990a5635c44f0d7d391494054893d0c79455c98464827c39289d8505"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 35,
        "start_column": 46,
        "end_line": 35,
        "end_column": 51
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), \u00ac(nat_even n \u2227 nat_odd n)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "6b3f13fdb77788f924f714f04e666c1d52936d3af9fce64e6236527acba8e488"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 41,
        "start_column": 40,
        "end_line": 41,
        "end_column": 45
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nB : Set A\nb c : A\nh1 : partial_order R\nh2 : b \u2208 B\nh3 : minimalElt R c (B \\ {b})\nh4 : \u00acR b c\n\u22a2 minimalElt R c B",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "de4521da247f8a12f671e7cd2932065ec9c6ef2027301b19e8cb99470ca4031d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 45,
        "start_column": 56,
        "end_line": 45,
        "end_column": 61
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nb : A\nh : partial_order R\n\u22a2 reflexive (extendPO R b)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L45"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "c712a995f2ff1988f7acdd393ce6d012693bfce5908014b3e481ac895b627f4f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 49,
        "start_column": 57,
        "end_line": 49,
        "end_column": 62
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nb : A\nh : partial_order R\n\u22a2 transitive (extendPO R b)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "5ff5271557e8e700314afcfccbb4b633c1bdf90f9b4fb4a4260d7e479a88e855"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 53,
        "start_column": 60,
        "end_line": 53,
        "end_column": 65
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nb : A\nh : partial_order R\n\u22a2 antisymmetric (extendPO R b)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L53"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2bc3b95d3e4f08d28f9aa83791f44b570f4b6d41a6c6dc314d56e32ce56430a7"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 58,
        "start_column": 50,
        "end_line": 58,
        "end_column": 55
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nh : total_order R\n\u22a2 \u2200 n \u2265 1, \u2200 (B : Set A), numElts B n \u2192 \u2203 b, smallestElt R b B",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "3663053569652cb1312131a4dd76b0ad3da4a1d1158375ae7a92f6c1f14b0eaf"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 64,
        "start_column": 64,
        "end_line": 64,
        "end_column": 69
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nh : \u2200 (x y : A), R x y \u2228 R y x\n\u22a2 \u2200 n \u2265 1, \u2200 (B : Set A), numElts B n \u2192 \u2203 x \u2208 B, \u2200 y \u2208 B, \u2203 z, R x z \u2227 R z y",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L64"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4017805bc4b5a8473fef4dca9fa9e97c3711ad708977fbb48ca363b72915209c"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 69,
        "start_column": 46,
        "end_line": 69,
        "end_column": 51
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A\nh : one_to_one f\n\u22a2 \u2200 (n : \u2115) (B : Set A), numElts B n \u2192 closed f B \u2192 \u2200 y \u2208 B, \u2203 x \u2208 B, f x = y",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-03T16:43:00-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b2b357f2725e67ae2cf4adb12a6fada795c2e2aea2480899b08218dc824631ae"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 76,
        "start_column": 52,
        "end_line": 76,
        "end_column": 57
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nh1 : \u2203 n, numElts {x | x = x} n\nh2 : partial_order R\n\u22a2 \u2203 T, total_order T \u2227 \u2200 (x y : A), R x y \u2192 T x y",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "a029e5a9ea4cb2c5cfa83fc3de544400b8d1302eebf3430bf4b4f87963f0189f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 82,
        "start_column": 43,
        "end_line": 82,
        "end_column": 48
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), 3 * Sum i from 0 to n, (2 * i + 1) ^ 2 = (n + 1) * (2 * n + 1) * (2 * n + 3)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b622c5397579b69c55f5cbdd33179041594bd7dc0822e7340fac37441f3d5517"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 86,
        "start_column": 63,
        "end_line": 86,
        "end_column": 68
      },
      "debug_info": {
        "goal": "f : \u2115 \u2192 \u211d\nc : \u211d\n\u22a2 \u2200 (n : \u2115), Sum i from 0 to n, c * f i = c * Sum i from 0 to n, f i",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f0299159b6910473506d0f2979ff25fdef9f081eb95617f4ea4d6e23cd1f84a5"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 89,
        "start_column": 46,
        "end_line": 89,
        "end_column": 51
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), fact n \u2265 1",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1aa79d5adc2b5dd965cc0a022e1a0df3500ec0bd9e47eb4b0ae56f0541358b05"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 94,
        "start_column": 38,
        "end_line": 94,
        "end_column": 43
      },
      "debug_info": {
        "goal": "k : \u2115\n\u22a2 \u2200 (n : \u2115), fact (k ^ 2 + n) \u2265 k ^ (2 * n)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "f07d6b6892697ef70a270a52bcca0c6c0242d3ad07d93c3ab3770378bb9014dd"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 101,
        "start_column": 22,
        "end_line": 101,
        "end_column": 27
      },
      "debug_info": {
        "goal": "k : \u2115\n\u22a2 \u2200 n \u2265 2 * k ^ 2, fact n \u2265 k ^ n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d483d3a80a6c971868b778141132006fb61d1e24b3e87be17a39d399b398fbcf"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 110,
        "start_column": 36,
        "end_line": 110,
        "end_column": 41
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), HTPI.Exercises.seq_6_3_15 n = 2 ^ n - \u2191n - 1",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L110"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1b1a8f511751d45a8ca63a51f4fb9b57149158129e75f0e359c76fabd885a823"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 119,
        "start_column": 26,
        "end_line": 119,
        "end_column": 31
      },
      "debug_info": {
        "goal": "___ : \u2115\n\u22a2 \u2200 (n : \u2115), HTPI.Exercises.seq_6_3_16 n = ___",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L119"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4e4778c636eb65567530cb3c3a5778e8dffb29788098837cb9a00470d3fc0ea0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 125,
        "start_column": 37,
        "end_line": 125,
        "end_column": 42
      },
      "debug_info": {
        "goal": "n : \u2115\n\u22a2 nat_even (n * n) \u2194 nat_even n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L125"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4cc0d3194287adf8fd8485921a9d9c0edc61c362f38cb1df2a4566b0cb87283a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 130,
        "start_column": 51,
        "end_line": 130,
        "end_column": 56
      },
      "debug_info": {
        "goal": "\u22a2 \u00ac\u2203 q p, p * p = 6 * (q * q) \u2227 q \u2260 0",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "3c1b96cfa0195433044fb0aa7479e8089c0347058c4ceb634964869d2edb75a6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 134,
        "start_column": 50,
        "end_line": 134,
        "end_column": 55
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 n \u2265 12, \u2203 a b, 3 * a + 7 * b = n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "43d90f3e932e9fc773c49c377e7c27431f167575beb90deb191833882db45622"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 138,
        "start_column": 52,
        "end_line": 138,
        "end_column": 57
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), (Sum i from 0 to n, Fib i) + 1 = Fib (n + 2)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d750a1cf131bed1578d5eb3bac8fb6bcece530eb5acb2ca8762b7a430598321c"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 142,
        "start_column": 60,
        "end_line": 142,
        "end_column": 65
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), Sum i from 0 to n, Fib (2 * i + 1) = Fib (2 * n + 2)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "8c47c1640555ea7cf4fe67bfae06012b30a5e053a47e20db10653941d413f6ce"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 146,
        "start_column": 67,
        "end_line": 146,
        "end_column": 72
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (m n : \u2115), Fib (m + n + 1) = Fib m * Fib n + Fib (m + 1) * Fib (n + 1)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L146"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "06914e32ea4666c1846bc3bc0d5fb4612f0e8f5c2ec4d1dc7423cca94bd5cdcb"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 149,
        "start_column": 64,
        "end_line": 149,
        "end_column": 69
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (m k : \u2115), Fib m \u2223 Fib (m * k)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "1cbdf1d7d856ff634a8eb8c0c832c7df3f5086cc9bded51981777e6c247de5ab"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 158,
        "start_column": 62,
        "end_line": 158,
        "end_column": 67
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), HTPI.Exercises.Fib_like n = 2 ^ n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "93c8fcdeef0e1022a8191d1e0f167627307209bda2ddfbc65bc8478dd9ac2c70"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 170,
        "start_column": 49,
        "end_line": 170,
        "end_column": 54
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : \u2115), HTPI.Exercises.triple_rec n = 2 ^ n * Fib n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "7647f9fe94a5a84d18c37c2a18db924364cab0fbab86ddd2a658d6fb22f611f0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 174,
        "start_column": 61,
        "end_line": 174,
        "end_column": 66
      },
      "debug_info": {
        "goal": "m q r q' r' : \u2115\nh1 : m * q + r = m * q' + r'\nh2 : r' < m\n\u22a2 q \u2264 q'",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L174"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "96134790874b414472934e406824632bf5ecd81a2c529d38af9002d45025264c"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 178,
        "start_column": 23,
        "end_line": 178,
        "end_column": 28
      },
      "debug_info": {
        "goal": "m q r q' r' : \u2115\nh1 : m * q + r = m * q' + r'\nh2 : r < m\nh3 : r' < m\n\u22a2 q = q' \u2227 r = r'",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L178"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "c62446f4ff38bf8bfa7c93992e4d228848fa3f2ed2dea45dd71d77f2f7be4e80"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 182,
        "start_column": 65,
        "end_line": 182,
        "end_column": 70
      },
      "debug_info": {
        "goal": "m n q r : \u2115\nh1 : n = m * q + r\nh2 : r < m\n\u22a2 q = n / m \u2227 r = n % m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L182"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-04-08T15:48:59-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "e94acde85b161c92552c656fdb3980d3cc8441326daff4c0fe1372cc3a2568be"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 233,
        "start_column": 47,
        "end_line": 233,
        "end_column": 52
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (A \u2192 A)\nB D : Set A\nh1 : B \u2286 D\nh2 : closed_family F D\n\u22a2 \u2200 (n : \u2115), HTPI.Exercises.rep_image_family A F n B \u2286 D",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L233"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4e53c4dca1b5457b8de46d6913f9a020db4d254bf55d3028ff326537a98d648a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 236,
        "start_column": 51,
        "end_line": 236,
        "end_column": 56
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (A \u2192 A)\nB : Set A\n\u22a2 closure_family F B (HTPI.Exercises.cumul_image_family A F B)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L236"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9c7d201d91b74f3dc0dc0472bfb179fbdff8d5fe7a531b6c2474e58adde679b6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 248,
        "start_column": 36,
        "end_line": 248,
        "end_column": 41
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A \u2192 A\nB : Set A\n\u22a2 closed2 f (HTPI.Exercises.cumul_image2 A f B)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "fad8bba11717530727779d3475bd822983d80f726f444cfe208086cb70119de6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 261,
        "start_column": 49,
        "end_line": 261,
        "end_column": 54
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A \u2192 A\nB : Set A\n\u22a2 \u2200 (m n : \u2115), m \u2264 n \u2192 HTPI.Exercises.rep_un_image2 A f m B \u2286 HTPI.Exercises.rep_un_image2 A f n B",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L261"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "eeaf4388da24df0d8a30ef14a6dc5ec5c4398ba3965db31069a77059bda17eb5"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 265,
        "start_column": 44,
        "end_line": 265,
        "end_column": 49
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A \u2192 A\nB D : Set A\nh1 : B \u2286 D\nh2 : closed2 f D\n\u22a2 \u2200 (n : \u2115), HTPI.Exercises.rep_un_image2 A f n B \u2286 D",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L265"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "c935fa6cc6375316342686d335121955f2b2d2a2c9d8807e4a416a4cf592f6a6"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 271,
        "start_column": 35,
        "end_line": 271,
        "end_column": 40
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A \u2192 A\nB : Set A\nx y : A\nnx ny n : \u2115\nh1 : x \u2208 HTPI.Exercises.rep_un_image2 A f nx B\nh2 : y \u2208 HTPI.Exercises.rep_un_image2 A f ny B\nh3 : nx \u2264 n\nh4 : ny \u2264 n\n\u22a2 f x y \u2208 HTPI.Exercises.cumul_un_image2 A f B",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L271"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "cd80f7ae5cdbaff29042ef9bdc7cc2a427e1ebeecc90665ec8ef9ffd914ea7d9"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 274,
        "start_column": 42,
        "end_line": 274,
        "end_column": 47
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A \u2192 A\nB : Set A\n\u22a2 closure2 f B (HTPI.Exercises.cumul_un_image2 A f B)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L274"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "6c92724706d77c4b25809601d61dc06853e6e66167536f5f573b8f7d3ddad7b4"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 288,
        "start_column": 24,
        "end_line": 288,
        "end_column": 29
      },
      "debug_info": {
        "goal": "A : Type\nR : Set (A \u00d7 A)\n\u22a2 HTPI.Exercises.rep_comp A R 1 = R",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L288"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9223fb77034cbf113ddb8d3a98b7c5e015b4334a340a5386a7f2b178ffb38ace"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 293,
        "start_column": 42,
        "end_line": 293,
        "end_column": 47
      },
      "debug_info": {
        "goal": "A : Type\nR : Set (A \u00d7 A)\n\u22a2 \u2200 (m n : \u2115),\n    HTPI.Exercises.rep_comp A R (m + n) = comp (HTPI.Exercises.rep_comp A R m) (HTPI.Exercises.rep_comp A R n)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L293"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-18T13:01:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4d0e08c67d136c9f3e5163459cfa51b8e06faadc74dfb86d4529cef2d5209a0d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 298,
        "start_column": 33,
        "end_line": 298,
        "end_column": 38
      },
      "debug_info": {
        "goal": "A : Type\nR S : Set (A \u00d7 A)\nh1 : R \u2286 S\nh2 : transitive (RelFromExt S)\n\u22a2 \u2200 n \u2265 1, HTPI.Exercises.rep_comp A R n \u2286 S",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L298"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-23T10:36:50-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "76a5bbe55151f7a34c4aecddd0ffca6352690dafe91d8b6222dc29a45c0c5b86"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Chap6Ex.lean",
        "start_line": 303,
        "start_column": 61,
        "end_line": 303,
        "end_column": 66
      },
      "debug_info": {
        "goal": "A : Type\nR : Set (A \u00d7 A)\n\u22a2 smallestElt (sub (A \u00d7 A)) (HTPI.Exercises.cumul_comp A R) {S | R \u2286 S \u2227 transitive (RelFromExt S)}",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/Chap6Ex.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-12-07T13:35:34-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "92a2701c0019625e1e85565b7261462cf462fd74e7d6dde293182697fbc46b34"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap4.lean",
        "start_line": 360,
        "start_column": 58,
        "end_line": 360,
        "end_column": 63
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\nh : HTPI.partition A F\n\u22a2 \u2200 X \u2208 F, \u2200 Y \u2208 F, \u2200 x \u2208 X, x \u2208 Y \u2192 X = Y",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap4.lean#L360"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-01-20T16:52:44-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9bc91d8857e44f13ef23f3e404fae0ce957845069a818402ea2ed425f3bf9d46"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap4.lean",
        "start_line": 376,
        "start_column": 60,
        "end_line": 376,
        "end_column": 65
      },
      "debug_info": {
        "goal": "A : Type\nF : Set (Set A)\nh : HTPI.partition A F\n\u22a2 \u2200 X \u2208 F, \u2200 x \u2208 X, HTPI.equivClass A (HTPI.EqRelFromPart A F) x = X",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap4.lean#L376"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-01-20T16:52:44-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "b9fd5944a6f6ad184d833983bfbfde4b513e8e1998cbe4500950de0c6cabdece"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 89,
        "start_column": 57,
        "end_line": 89,
        "end_column": 62
      },
      "debug_info": {
        "goal": "k : \u2115\n\u22a2 HTPI.fnz (2 * k + 1) = -\u2191(k + 1)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-03T16:43:00-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "cb42e61854416a2aa987601a1be8848836b2e1b000c9a1225795ecb76d872727"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 116,
        "start_column": 35,
        "end_line": 116,
        "end_column": 40
      },
      "debug_info": {
        "goal": "\u22a2 HTPI.fnz \u2218 HTPI.fzn = id",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-03T16:43:00-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "26f38c4cf1c46adeb625b6dbf3fd7cd4d81de4ee399ac1dea38202cd8132d208"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 138,
        "start_column": 58,
        "end_line": 138,
        "end_column": 63
      },
      "debug_info": {
        "goal": "k : \u2115\n\u22a2 HTPI.tri (k + 1) = HTPI.tri k + k + 1",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-03T16:43:00-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "542f7d3be6fc0f20c42721c2cf065d825a49a171e3c5a1b5c21c30cd42ad0cef"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 140,
        "start_column": 59,
        "end_line": 140,
        "end_column": 64
      },
      "debug_info": {
        "goal": "j k : \u2115\nh1 : j \u2264 k\n\u22a2 HTPI.tri j \u2264 HTPI.tri k",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L140"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-03T16:43:00-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d9a5431e5e75b7c1518cbb4e0aa5c17f251afffd994dedfbd23e5d3a91c24386"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 402,
        "start_column": 33,
        "end_line": 402,
        "end_column": 38
      },
      "debug_info": {
        "goal": "U V : Type\nf : U \u2192 V\n\u22a2 onto f \u2194 range f = HTPI.Univ V",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L402"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "6f524e667501762b0936ed908b81ff15c21ba276cadf75bb820b62eb95820fb0"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 599,
        "start_column": 60,
        "end_line": 599,
        "end_column": 65
      },
      "debug_info": {
        "goal": "m : \u2115\n\u22a2 \u2200 \u2983k : \u2115\u2984, k \u2264 m \u2192 HTPI.num_elts_below (HTPI.set_rp_below m) k = num_rp_below m k",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L599"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "097bf74b7c30430035b6bd5c7cb10402259c6278ee1a18db9e814ee5179c62e7"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 742,
        "start_column": 49,
        "end_line": 742,
        "end_column": 54
      },
      "debug_info": {
        "goal": "m n : \u2115\n\u22a2 image (HTPI.qr n) (I (m * n)) = HTPI.set_prod \u2115 \u2115 (I m) (I n)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L742"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "0dd97b565dea36bd65f905bf3f5e9e8c4e485ff433ebfe6cdee20cd060f26159"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 923,
        "start_column": 49,
        "end_line": 923,
        "end_column": 54
      },
      "debug_info": {
        "goal": "U : Type\nF G : Set (Set U)\n\u22a2 F \u2286 G \u2192 \u22c3\u2080 F \u2286 \u22c3\u2080 G",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L923"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "fa1dcf9884feb7a7da85041232c47778c21b30a4db0946b8ff4e11ecb01fde48"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 1084,
        "start_column": 33,
        "end_line": 1084,
        "end_column": 38
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\nn : \u2115\n\u22a2 image (HTPI.seq_cons U) (HTPI.set_prod U (List U) A (HTPI.seq_by_length U A n)) = HTPI.seq_by_length U A (n + 1)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L1084"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-07-10T16:20:53-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "9dfaccdf4cbdfe6a3d314bbec1fcecd7f3cdc1ff62eb210a8e29881059d1d128"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part2.lean",
        "start_line": 1224,
        "start_column": 47,
        "end_line": 1224,
        "end_column": 52
      },
      "debug_info": {
        "goal": "U V : Type\nX : Set U\nx : U\nf : U \u2192 V\ng : V \u2192 U\nh : x \u2209 X\ny : V\n\u22a2 (x, y) \u2208 HTPI.csb_func_graph U V f g X \u2194 g y = x",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part2.lean#L1224"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "0ed3e54b0d7c39886b6f026f62a1e73919ad4736a0dfbf7adc7e94e99fe865c9"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap6.lean",
        "start_line": 232,
        "start_column": 56,
        "end_line": 232,
        "end_column": 61
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nb : A\nh : partial_order R\n\u22a2 reflexive (HTPI.extendPO A R b)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap6.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-15T10:17:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "64759c19a3015ee576e9c8080bc04d3e5922640fa3f6b5dbb461b22a743e7547"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap6.lean",
        "start_line": 235,
        "start_column": 57,
        "end_line": 235,
        "end_column": 62
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nb : A\nh : partial_order R\n\u22a2 transitive (HTPI.extendPO A R b)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap6.lean#L235"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-15T10:17:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "01b08088aafaeb9dbc10fa8e15e9b3bbb97ba247e3f2d4690cf3b55a31944099"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap6.lean",
        "start_line": 238,
        "start_column": 60,
        "end_line": 238,
        "end_column": 65
      },
      "debug_info": {
        "goal": "A : Type\nR : BinRel A\nb : A\nh : partial_order R\n\u22a2 antisymmetric (HTPI.extendPO A R b)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap6.lean#L238"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-15T10:17:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "bb41ca486bbcbb9ef2c1b59209a66be16cb1b2e28b5cb6f4fcfb839332e8475d"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap6.lean",
        "start_line": 530,
        "start_column": 68,
        "end_line": 530,
        "end_column": 73
      },
      "debug_info": {
        "goal": "n : \u2115\n\u22a2 HTPI.nat_even (n * n) \u2194 HTPI.nat_even n",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap6.lean#L530"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-02-15T10:17:52-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "ee3ad1ae7e34423b44c131bbe2c35daf58796cfc2fef4a636ac6a9ec57c540d5"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap5.lean",
        "start_line": 230,
        "start_column": 51,
        "end_line": 230,
        "end_column": 56
      },
      "debug_info": {
        "goal": "A B : Type\nf : A \u2192 B\ng : B \u2192 A\nh1 : HTPI.graph B A g = inv (HTPI.graph A B f)\n\u22a2 f \u2218 g = id",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap5.lean#L230"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-01-20T16:52:44-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4c77c4a28755eba140da958406900dac559c2022b33cf8058aef011014957869"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap5.lean",
        "start_line": 328,
        "start_column": 37,
        "end_line": 328,
        "end_column": 42
      },
      "debug_info": {
        "goal": "A : Type\nf : A \u2192 A \u2192 A\nB : Set A\n\u22a2 \u2203 C, HTPI.closure2 A f B C",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap5.lean#L328"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-01-20T16:52:44-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "4aa240eafbd58688d7ac08f3da268f07611d0c64d928745fb6ac0e8fbf44a901"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part1.lean",
        "start_line": 197,
        "start_column": 45,
        "end_line": 197,
        "end_column": 50
      },
      "debug_info": {
        "goal": "U V : Type\nA : Set U\nf : \u2191A \u2192 V\nv : V\n\u22a2 HTPI.func_restrict U V (HTPI.func_extend U V A f v) A = f",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part1.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "73affcf504652976c7af1d6ae150a0dc334431ec7b98c91085c25d54e756071f"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap8Part1.lean",
        "start_line": 329,
        "start_column": 53,
        "end_line": 329,
        "end_column": 58
      },
      "debug_info": {
        "goal": "U : Type\nA : Set U\nf : U \u2192 \u2115\nh : empty A\n\u22a2 image f A = HTPI.I 0",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap8Part1.lean#L329"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2025-05-12T09:44:57-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "27d816671502889ec2e519ec5548a1f5f423c26e3203b2948135213ff834be09"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap7.lean",
        "start_line": 570,
        "start_column": 51,
        "end_line": 570,
        "end_column": 56
      },
      "debug_info": {
        "goal": "a p : \u2115\nh1 : HTPI.prime p\nh2 : a \u2223 p\n\u22a2 a = 1 \u2228 a = p",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap7.lean#L570"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-08-06T15:17:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "2886986ffa41349900bc07303f0549df19c76c97c3aa804ebf39c6eb0cfa719a"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap7.lean",
        "start_line": 1036,
        "start_column": 56,
        "end_line": 1036,
        "end_column": 61
      },
      "debug_info": {
        "goal": "a b : \u2115\n\u22a2 HTPI.rel_prime a b \u2194 \u2203 s t, s * \u2191a + t * \u2191b = 1",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap7.lean#L1036"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-08-06T15:17:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "d5e2e34eeacef042a7cb53c30d6cdaaa18ca256ef8e407e75ee818a20221e634"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap7.lean",
        "start_line": 1285,
        "start_column": 39,
        "end_line": 1285,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m a b : \u2115\ninst\u271d : NeZero m\n\u22a2 HTPI.congr_mod m \u2191a \u2191b \u2194 a % m = b % m",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap7.lean#L1285"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-08-06T15:17:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "7c88d9fbe36a158c9e0d62c54a4dce48a6c3075452ccb6af77ee3a55cbe3f8fa"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap7.lean",
        "start_line": 1689,
        "start_column": 42,
        "end_line": 1689,
        "end_column": 47
      },
      "debug_info": {
        "goal": "m : \u2115\na : \u2124\n\u22a2 \u2200 (n : \u2115), HTPI.cc m a ^ n = HTPI.cc m (a ^ n)",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap7.lean#L1689"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-08-06T15:17:58-04:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "cfb58d14e2551890dce1790c3be67c7e0d53a8098f60625e5800c59be37fe080"
    },
    {
      "repo": {
        "remote": "https://github.com/djvelleman/HTPILeanPackage",
        "branch": "master",
        "commit": "12aa060f2cb7f7a6c94d7072a3df3acd32d07848",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "HTPILib/Chap7.lean",
        "start_line": 1713,
        "start_column": 43,
        "end_line": 1713,
        "end_column": 48
      },
      "debug_info": {
        "goal": "p : \u2115\nh1 : HTPI.prime p\n\u22a2 \u2200 k < p, HTPI.num_rp_below p (k + 1) = k",
        "url": "https://github.com/djvelleman/HTPILeanPackage/blob/12aa060f2cb7f7a6c94d7072a3df3acd32d07848/HTPILib/Chap7.lean#L1713"
      },
      "metadata": {
        "blame_email_hash": "915d100f01e6",
        "blame_date": "2023-11-10T14:58:19-05:00",
        "inclusion_date": "2025-05-31T05:00:24.676572+00:00"
      },
      "id": "67746b27d47d70da2b09610fddc82e26fe0db2a10404772b0f91cc59730964f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 616,
        "start_column": 2,
        "end_line": 616,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let D := matrix3sumBottomLeft x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 D\u2097 D\u2080 D\u1d63;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      \u2200 (j : \u2191(Y\u2097.drop1 y\u2082\u2097)),\n        (fun x => D x j) = 0 \u2228\n          (fun x => D x j) = c\u2080 \u2228\n            (fun x => D x j) = -c\u2080 \u2228\n              (fun x => D x j) = c\u2081 \u2228 (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L616"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "1f3e20c71907ad9c8ffd07ba9861d835465888d5d4b20e524aff84bf01f142ff"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nc\u2080 c\u2081 : \u2191X\u1d63 \u2192 \u211a\nC : matrix3sumLike X\u2097 Y\u2097 X\u1d63 Y\u1d63 c\u2080 c\u2081\nx : \u2191X\u2097\ny : \u2191Y\u2097\nhxy : C.A\u2097 x y \u2260 0\n\u22a2 False",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-30T14:58:25+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "f9233751df5aaf2086f5b528b328be72ec9d581757e6e283156c4ff107231d2e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nc\u2080 c\u2081 : \u2191X\u1d63 \u2192 \u211a\nC : matrix3sumLike X\u2097 Y\u2097 X\u1d63 Y\u1d63 c\u2080 c\u2081\n\u22a2 C.matrix.IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-30T14:58:25+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "d554533a778eca11d2239361249e713742b83ec1f7cf0e2afd0896340323b617"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 48,
        "start_column": 9,
        "end_line": 48,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\n\u22a2 \u2200 (i : \u2191(X\u1d63 \\ {x\u2082})), B\u1d63._col \u27e8y\u2080, \u22ef\u27e9 i \u2208 Set.range SignType.cast",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-30T14:58:25+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "e16a54f5892745b72b19a29c53736c3fade2fc19ea7973d45de7d8d9b64ba6e3"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 49,
        "start_column": 9,
        "end_line": 49,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\n\u22a2 \u2200 (i : \u2191(X\u1d63 \\ {x\u2082})), B\u1d63._col \u27e8y\u2081, \u22ef\u27e9 i \u2208 Set.range SignType.cast",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-30T14:58:25+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "c4096a07806dfb55dbe043fca9433e2a3e73fce7f55819ea2f237d120b84df68"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 50,
        "start_column": 10,
        "end_line": 50,
        "end_column": 15
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\n\u22a2 \u2200 (i : \u2191(X\u1d63 \\ {x\u2082})), B\u1d63._col \u27e8y\u2080, \u22ef\u27e9 i - B\u1d63._col \u27e8y\u2081, \u22ef\u27e9 i \u2208 Set.range SignType.cast",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-30T14:58:25+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "e311a882c6a9dbcea6960d9663bbf5ce0f7cc7011936b5a46fc9b4ee95d66eef"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 51,
        "start_column": 9,
        "end_line": 51,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\n\u22a2 (sorry \u229f sorry).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L51"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-30T14:58:25+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "e1489a57a4be6c41d329f55178acc7ab9ef4088371b4d43c6e4f40b3e44965dd"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 52,
        "start_column": 9,
        "end_line": 52,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\n\u22a2 (\u25aeB\u1d63._col \u27e8y\u2080, \u22ef\u27e9 \u25eb \u25aeB\u1d63._col \u27e8y\u2081, \u22ef\u27e9 \u25eb \u25ae(B\u1d63._col \u27e8y\u2080, \u22ef\u27e9 - B\u1d63._col \u27e8y\u2081, \u22ef\u27e9) \u25eb sorry).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-30T14:58:25+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "37ddad3a245d26b7d9ca7cfd6beb3c3f71d02d9d0f524619e0aaf445b63382e4"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "f39a2554b1e7f205c562c26e6462cbe258744a46",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/MatrixFamily.lean",
        "start_line": 53,
        "start_column": 8,
        "end_line": 53,
        "end_column": 13
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\n\u22a2 \u2200 (j : \u2191(Y\u2097 \\ {y\u2082})),\n    (fun x => sorry x j) = 0 \u2228\n      (fun x => sorry x j) = B\u1d63._col \u27e8y\u2080, \u22ef\u27e9 \u2228\n        (fun x => sorry x j) = -B\u1d63._col \u27e8y\u2080, \u22ef\u27e9 \u2228\n          (fun x => sorry x j) = B\u1d63._col \u27e8y\u2081, \u22ef\u27e9 \u2228\n            (fun x => sorry x j) = -B\u1d63._col \u27e8y\u2081, \u22ef\u27e9 \u2228\n              (fun x => sorry x j) = B\u1d63._col \u27e8y\u2080, \u22ef\u27e9 - B\u1d63._col \u27e8y\u2081, \u22ef\u27e9 \u2228\n                (fun x => sorry x j) = B\u1d63._col \u27e8y\u2081, \u22ef\u27e9 - B\u1d63._col \u27e8y\u2080, \u22ef\u27e9",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/f39a2554b1e7f205c562c26e6462cbe258744a46/Seymour/Matroid/Operations/Sum3/MatrixFamily.lean#L53"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-30T14:58:25+02:00",
        "inclusion_date": "2025-05-31T05:05:16.321598+00:00"
      },
      "id": "e4434ccd68920e099bfb1f039e4f724b0b6d96e5de39b76e04bf72816bc9e548"
    }
  ]
}