[
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/MaximalConsistentSet.lean",
      "start_line": 191,
      "start_column": 4,
      "end_line": 191,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case inl\n\u03b1 : Type u_1\nS : Type u_2\ninst\u271d\u00b3 : Entailment (Formula \u03b1) S\n\ud835\udce2 : S\ninst\u271d\u00b2 : DecidableEq \u03b1\nT : FormulaSet \u03b1\ninst\u271d\u00b9 : Entailment.Cl \ud835\udce2\n\u03c6 : Formula \u03b1\ninst\u271d : Necessitation \ud835\udce2\nT_consis : Consistent \ud835\udce2 T\nh : \u223c\u25a1\u03c6 \u2208 T\nh\u0393 : \u2191\u2205 \u2286 {\u223c\u03c6}\n\u22a2 \u2191\u2205 *\u22ac[\ud835\udce2] \u22a5",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/MaximalConsistentSet.lean#L191"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-05-12T12:29:45+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "16bf128716f7898dc911f671d8ef2b1417c9789e709da5084d5ac4000b39f3c6"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/MaximalConsistentSet.lean",
      "start_line": 194,
      "start_column": 4,
      "end_line": 194,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case inr\n\u03b1 : Type u_1\nS : Type u_2\ninst\u271d\u00b3 : Entailment (Formula \u03b1) S\n\ud835\udce2 : S\ninst\u271d\u00b2 : DecidableEq \u03b1\nT : FormulaSet \u03b1\ninst\u271d\u00b9 : Entailment.Cl \ud835\udce2\n\u03c6 : Formula \u03b1\ninst\u271d : Necessitation \ud835\udce2\nT_consis : Consistent \ud835\udce2 T\nh : \u223c\u25a1\u03c6 \u2208 T\nh\u0393 : \u2191{\u223c\u03c6} \u2286 {\u223c\u03c6}\n\u22a2 \u2191{\u223c\u03c6} *\u22ac[\ud835\udce2] \u22a5",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/MaximalConsistentSet.lean#L194"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-05-12T12:29:45+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "ec60fa49e5ecd09d8454c8d07337a05aa1b6ff1ceb384dfed9bd0c12e9669f8b"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Hilbert/NNFormula.lean",
      "start_line": 232,
      "start_column": 8,
      "end_line": 232,
      "end_column": 13
    },
    "debug_info": {
      "goal": "\u03c6 : NNFormula \u2115\n\u22a2 \u2203 \u03c8, \u03c8.isModalCNF \u2227 Hilbert.K \u22a2! \u03c6.toFormula \u2b64 \u03c8.toFormula",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Hilbert/NNFormula.lean#L232"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-10T09:06:15+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "bcf644c470f475c7994ab03bf0e0b46312f04b170fd9bea7dd71558840925546"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Hilbert/NNFormula.lean",
      "start_line": 236,
      "start_column": 8,
      "end_line": 236,
      "end_column": 13
    },
    "debug_info": {
      "goal": "\u03c6 : NNFormula \u2115\n\u22a2 \u2203 \u03c8, \u03c8.isModalDNF \u2227 Hilbert.K \u22a2! \u03c6.toFormula \u2b64 \u03c8.toFormula",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Hilbert/NNFormula.lean#L236"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-10T09:06:15+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "2e5fd2d1ca89d742b05bf59bd6ed8a7908bc37efbb142bd4d13970da275f017b"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Maximal/Makinson.lean",
      "start_line": 29,
      "start_column": 25,
      "end_line": 29,
      "end_column": 30
    },
    "debug_info": {
      "goal": "L : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\n\u22a2 \u03b3 \u2208 L",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Maximal/Makinson.lean#L29"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-10T09:06:15+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "c7a960f4d195c6fdbc65af7eb8de1b233da630460f066d3ee2d62197174de5bd"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Maximal/Makinson.lean",
      "start_line": 30,
      "start_column": 33,
      "end_line": 30,
      "end_column": 38
    },
    "debug_info": {
      "goal": "L : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\n\u22a2 \u03b3 \u2209 Logic.Ver",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Maximal/Makinson.lean#L30"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-10T09:06:15+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "1c29e71612ada3ce8fd3d9b9df9ae659d79c9e25d1d80e60c579177b0189255d"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Maximal/Makinson.lean",
      "start_line": 33,
      "start_column": 4,
      "end_line": 33,
      "end_column": 9
    },
    "debug_info": {
      "goal": "L : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\nh\u03b3V : \u03b3 \u2209 Logic.Ver\n\u22a2 \u2203 \u03b4 \u2208 \u0393, (\u2191\u03b4).toFormula \u2208 L \u2227 (\u2191\u03b4).toFormula \u2209 Logic.Ver",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Maximal/Makinson.lean#L33"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-10T09:06:15+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "545a7b40619b1186dafca2abb8710cd85eec8003cac79343198bb094a72e0698"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Maximal/Makinson.lean",
      "start_line": 38,
      "start_column": 4,
      "end_line": 38,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case mk.intro\nL : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis\u271d : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\nh\u03b3V : \u03b3 \u2209 Logic.Ver\n\u0394 : List { \u03c8 // \u03c8.isPrebox \u2228 \u03c8.isPredia \u2228 \u03c8.degree = 0 }\nh\u03b4\u0393 : \u27e8\u22c1\u0394.unattach, \u22ef\u27e9 \u2208 \u0393\nh\u03b4L : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2208 L\nh\u03b4V : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2209 Logic.Ver\n\u03be : NNFormula \u2115\nproperty\u271d : (\u25a1\u03be).isPrebox \u2228 (\u25a1\u03be).isPredia \u2228 (\u25a1\u03be).degree = 0\nh\u03c8\u2081 : \u27e8\u25a1\u03be, property\u271d\u27e9 \u2208 \u0394\nh\u03c8\u2082 : (\u2191\u27e8\u25a1\u03be, property\u271d\u27e9).isPrebox\nthis : \u25a1\u03be.toFormula \u2208 Logic.Ver\n\u22a2 False",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Maximal/Makinson.lean#L38"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-10T09:06:15+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "a82657060dc6aefdaf942d6c99ddb8e4426dc9e7570f8f7931c186844756b8db"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Maximal/Makinson.lean",
      "start_line": 40,
      "start_column": 49,
      "end_line": 40,
      "end_column": 54
    },
    "debug_info": {
      "goal": "L : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\nh\u03b3V : \u03b3 \u2209 Logic.Ver\n\u0394 : List { \u03c8 // \u03c8.isPrebox \u2228 \u03c8.isPredia \u2228 \u03c8.degree = 0 }\nh\u03b4\u0393 : \u27e8\u22c1\u0394.unattach, \u22ef\u27e9 \u2208 \u0393\nh\u03b4L : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2208 L\nh\u03b4V : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2209 Logic.Ver\nh\u0394\u2081 : \u2200 \u03c8 \u2208 \u0394, \u00ac(\u2191\u03c8).isPrebox\n\u22a2 \u2203 \u0393, \u03c6 \u2b64 \u22c0\u0393 \u2208 L",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Maximal/Makinson.lean#L40"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-10T09:06:15+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "64c76c03c06f86a0870049904896116a76cfd7f08b6fd0e5b6bfe94211f83cf1"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Maximal/Makinson.lean",
      "start_line": 42,
      "start_column": 2,
      "end_line": 42,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case intro.intro.intro.intro.mk.intro.intro.intro\nL : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u00acHilbert.Ver \u22a2! \u03c6\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis\u271d : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\nh\u03b3V : \u03b3 \u2209 Logic.Ver\n\u0394 : List { \u03c8 // \u03c8.isPrebox \u2228 \u03c8.isPredia \u2228 \u03c8.degree = 0 }\nh\u03b4\u0393 : \u27e8\u22c1\u0394.unattach, \u22ef\u27e9 \u2208 \u0393\nh\u03b4L : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2208 L\nh\u03b4V : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2209 Logic.Ver\nh\u0394\u2081 : \u2200 \u03c8 \u2208 \u0394, \u00ac(\u2191\u03c8).isPrebox\nthis : \u2203 \u0393, \u03c6 \u2b64 \u22c0\u0393 \u2208 L\n\u22a2 \u2203 \u03c8, \u25c7\u03c8 \u2208 L",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Maximal/Makinson.lean#L42"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-10T09:06:15+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "be8bf55fc8172468fa6417a9957de39b6fa518ae160acfc9e942277be97796c3"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Kripke/Balloon.lean",
      "start_line": 63,
      "start_column": 2,
      "end_line": 63,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03c6 : Formula \u2115\nM : Model\ninst\u271d : IsStrictOrder M.World M.Rel\nx : M.World\nh : \u00acx \u22a7 \u25a1\u03c6\n\u22a2 \u2203 y, x \u227a y \u2227 \u00acy \u22a7 \u03c6 \u2227 y \u22a7 \u25a1\u03c6",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Kripke/Balloon.lean#L63"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-04-26T09:19:50+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "0c099c59504e71b41f15ba6f99326db35364c1d59006ff66a919cdfb9c2be314"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean",
      "start_line": 42,
      "start_column": 4,
      "end_line": 42,
      "end_column": 9
    },
    "debug_info": {
      "goal": "\u22a2 \u2200 {\u03c6 : Formula \u2115}, Grz.miniCanonicalFrame Hilbert.GrzPoint3 \u03c6 \u2208 FrameClass.finite_connected_partial_order",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean#L42"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-14T14:50:18+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "39bc3ea9cfec46b758df1d7b6d52a9a3728fde89c18cf4ef72a79e2c02790103"
  },
  {
    "repo": {
      "remote": "https://github.com/FormalizedFormalLogic/Foundation",
      "branch": "master",
      "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
      "lean_version": "v4.18.0-rc1"
    },
    "location": {
      "path": "Foundation/Modal/Kripke/Hilbert/GLPoint3.lean",
      "start_line": 33,
      "start_column": 101,
      "end_line": 33,
      "end_column": 106
    },
    "debug_info": {
      "goal": "\u22a2 Complete Hilbert.GLPoint3 FrameClass.finite_strict_linear_order",
      "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/Kripke/Hilbert/GLPoint3.lean#L33"
    },
    "metadata": {
      "blame_email_hash": "165d0178d95d",
      "blame_date": "2025-03-17T22:57:50+09:00",
      "inclusion_date": "2025-05-15T21:17:59.972985+00:00"
    },
    "id": "06b315c7c48ca584b60f9b5dcbeb344414dca3f7cd8f0168ac7e2811a9d1c9d2"
  },
  {
    "repo": {
      "remote": "https://github.com/HEPLean/PhysLean",
      "branch": "EMwave",
      "commit": "1a485b181fd479295c2fb42f33cf1c2537bd8f08",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PhysLean/Electromagnetism/Wave.lean",
      "start_line": 212,
      "start_column": 2,
      "end_line": 212,
      "end_column": 7
    },
    "debug_info": {
      "goal": "OM : OpticalMedium\nt : Time\nx : Space\n_p\u271d : ENNReal\ns : WithLp _p\u271d (Fin 3 \u2192 \u211d)\nE : ElectricField\nB : MagneticField\n\u22a2 \u221a(OM.\u03bc \u2022 OM.\u03b5)\u207b\u00b9 \u2022 B t x =\n    (WithLp.equiv 2 (Fin 3 \u2192 \u211d)).symm\n      ((crossProduct ((WithLp.equiv _p\u271d (Fin 3 \u2192 \u211d)) s)) ((WithLp.equiv 2 (Fin 3 \u2192 \u211d)) (E t x)))",
      "url": "https://github.com/HEPLean/PhysLean/blob/1a485b181fd479295c2fb42f33cf1c2537bd8f08/PhysLean/Electromagnetism/Wave.lean#L212"
    },
    "metadata": {
      "blame_email_hash": "95cd4b9b9759",
      "blame_date": "2025-05-11T15:58:00+01:00",
      "inclusion_date": "2025-05-12T21:29:35.871869+00:00"
    },
    "id": "6b6eba850caddc1f1c4115e76da72fe13cc0dedc9e47bcdbbaa861d65fd3d767"
  },
  {
    "repo": {
      "remote": "https://github.com/HEPLean/PhysLean",
      "branch": "EMwave",
      "commit": "1a485b181fd479295c2fb42f33cf1c2537bd8f08",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PhysLean/Electromagnetism/Wave.lean",
      "start_line": 217,
      "start_column": 2,
      "end_line": 217,
      "end_column": 7
    },
    "debug_info": {
      "goal": "OM : OpticalMedium\nt : Time\nx : Space\n_p\u271d : ENNReal\ns : WithLp _p\u271d (Fin 3 \u2192 \u211d)\nE : ElectricField\nB : MagneticField\n\u22a2 \u221a(OM.\u03bc \u2022 OM.\u03b5)\u207b\u00b9 \u2022 E t x =\n    (WithLp.equiv 2 (Fin 3 \u2192 \u211d)).symm\n      ((crossProduct ((WithLp.equiv _p\u271d (Fin 3 \u2192 \u211d)) s)) ((WithLp.equiv 2 (Fin 3 \u2192 \u211d)) (B t x)))",
      "url": "https://github.com/HEPLean/PhysLean/blob/1a485b181fd479295c2fb42f33cf1c2537bd8f08/PhysLean/Electromagnetism/Wave.lean#L217"
    },
    "metadata": {
      "blame_email_hash": "95cd4b9b9759",
      "blame_date": "2025-05-11T15:58:00+01:00",
      "inclusion_date": "2025-05-12T21:29:35.871869+00:00"
    },
    "id": "b4b84951b233c073f2979b62b63ff4f573acab44aa89beed1becaa52ff8ffa8f"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Smt/Reconstruct/BitVec/Bitblast.lean",
      "start_line": 37,
      "start_column": 2,
      "end_line": 37,
      "end_column": 7
    },
    "debug_info": {
      "goal": "w : Nat\nx y : BitVec w\n\u22a2 (x = y) = (BitVec.beq w x y = true)",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Smt/Reconstruct/BitVec/Bitblast.lean#L37"
    },
    "metadata": {
      "blame_email_hash": "a29bc6f92c6c",
      "blame_date": "2024-05-08T17:36:04-07:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "06903fb617edab65a9480d78f688920ee401e63324fbd0215080108f9415717e"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/BitVec/Shift.lean",
      "start_line": 8,
      "start_column": 2,
      "end_line": 8,
      "end_column": 7
    },
    "debug_info": {
      "goal": "x y : BitVec 2\n\u22a2 x ++ y = zeroExtend 4 x <<< 2#2 ||| zeroExtend 4 y",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/BitVec/Shift.lean#L8"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-08-05T17:11:15+02:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "10966eb3e5e3ab574d4d8098887b6d4905ac78eac95d16e1bd2d3e94afbafbfb"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/BitVec/Shift.lean",
      "start_line": 13,
      "start_column": 2,
      "end_line": 13,
      "end_column": 7
    },
    "debug_info": {
      "goal": "x y : BitVec 3\n\u22a2 x ++ y = zeroExtend 6 x <<< 3#2 ||| zeroExtend 6 y",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/BitVec/Shift.lean#L13"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-08-05T17:11:15+02:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "af1c238a9c4a4867f4aac73b8df81f7800516e0e37fcb9d0d31c93d503972fff"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/BitVec/XorComm.lean",
      "start_line": 5,
      "start_column": 2,
      "end_line": 5,
      "end_column": 7
    },
    "debug_info": {
      "goal": "x y : BitVec 2\n\u22a2 x ^^^ y = y ^^^ x",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/BitVec/XorComm.lean#L5"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-07-14T12:41:05-04:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "0fdae338de0f47f0a2a025dfc4c918ea4db52c7681734343316e257737edebc0"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/BitVec/XorComm.lean",
      "start_line": 9,
      "start_column": 2,
      "end_line": 9,
      "end_column": 7
    },
    "debug_info": {
      "goal": "x y : BitVec (4 + 4)\n\u22a2 x ^^^ y = y ^^^ x",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/BitVec/XorComm.lean#L9"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-07-14T12:41:05-04:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "d3457d2e5b75a9849b2e40aa258c7a298792a74d0797661c455499ab22a2885a"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "5d35ecc273cb1f8344b23f6d23dd69f33601ed31",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/String/Contains.lean",
      "start_line": 5,
      "start_column": 2,
      "end_line": 5,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u22a2 \"a\".contains 'a' = true",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/5d35ecc273cb1f8344b23f6d23dd69f33601ed31/Test/String/Contains.lean#L5"
    },
    "metadata": {
      "blame_email_hash": "a29bc6f92c6c",
      "blame_date": "2022-11-12T16:45:23-08:00",
      "inclusion_date": "2025-05-12T22:08:32.207683+00:00"
    },
    "id": "80d094f4e3c509afd0a796f85ff118e070893c7da20af85fedc39aa7fedc301d"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/Int/DefineSort.lean",
      "start_line": 8,
      "start_column": 2,
      "end_line": 8,
      "end_column": 7
    },
    "debug_info": {
      "goal": "a b : MyInt\n\u22a2 MyInt.add a b = MyInt.add b a",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/Int/DefineSort.lean#L8"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-07-14T12:41:05-04:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "0d9944a0ca335cee494beb1bb7ce91fc4fcb01f4e5ba50725acc2abcbec6f495"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/Int/Binders.lean",
      "start_line": 7,
      "start_column": 2,
      "end_line": 7,
      "end_column": 7
    },
    "debug_info": {
      "goal": "a b : Int\n\u22a2 curryAdd a b = curryAdd b a",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/Int/Binders.lean#L7"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-07-14T12:41:05-04:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "c3816f311a06b056280607cf44d7e694128a49d46908a9142cf27a506696e93b"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/Int/Binders.lean",
      "start_line": 13,
      "start_column": 2,
      "end_line": 13,
      "end_column": 7
    },
    "debug_info": {
      "goal": "a b : Int\n\u22a2 partCurryAdd a b = partCurryAdd b a",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/Int/Binders.lean#L13"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-07-14T12:41:05-04:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "428f82440944a46de6f9d4428e03dc90a566488748b2621d6c9b9c1b4eb67a6f"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/Int/Binders.lean",
      "start_line": 20,
      "start_column": 2,
      "end_line": 20,
      "end_column": 7
    },
    "debug_info": {
      "goal": "a b : Int\npartCurryAdd' : Int \u2192 Int \u2192 Int := fun a => HAdd.hAdd a\n\u22a2 partCurryAdd' a b = partCurryAdd' b a",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/Int/Binders.lean#L20"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-07-14T12:41:05-04:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "2f0e20ce24530f5768780759413afb347c84455200e92d0223d6b03297b7ad0a"
  },
  {
    "repo": {
      "remote": "https://github.com/ufmg-smite/lean-smt",
      "branch": "main",
      "commit": "e994ff05c81214b3397f8b59aaeca4c302bd41dc",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Test/Int/Binders.lean",
      "start_line": 27,
      "start_column": 2,
      "end_line": 27,
      "end_column": 7
    },
    "debug_info": {
      "goal": "a b : Int\n\u22a2 mismatchNamesAdd a b = mismatchNamesAdd b a",
      "url": "https://github.com/ufmg-smite/lean-smt/blob/e994ff05c81214b3397f8b59aaeca4c302bd41dc/Test/Int/Binders.lean#L27"
    },
    "metadata": {
      "blame_email_hash": "2d71a621927f",
      "blame_date": "2022-07-14T12:41:05-04:00",
      "inclusion_date": "2025-05-17T21:05:46.142719+00:00"
    },
    "id": "ac9133a1fe234f6c3ac92487eb1756784d8c4fc5bb11aa42e4000d948e148a4c"
  },
  {
    "repo": {
      "remote": "https://github.com/HEPLean/PhysLean",
      "branch": "jnlindsay/feat/restricted-Lorentz-group-equal-to-identity-component",
      "commit": "b4a420deef68762a68898a4245f54fb1992b6f4c",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PhysLean/Relativity/Lorentz/Group/Restricted.lean",
      "start_line": 75,
      "start_column": 17,
      "end_line": 75,
      "end_column": 22
    },
    "debug_info": {
      "goal": "d : \u2115\n\u22a2 (detRep 1, orthchroRep 1) = 1",
      "url": "https://github.com/HEPLean/PhysLean/blob/b4a420deef68762a68898a4245f54fb1992b6f4c/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L75"
    },
    "metadata": {
      "blame_email_hash": "f5ab4f28bed3",
      "blame_date": "2025-05-05T23:32:38+10:00",
      "inclusion_date": "2025-05-13T21:05:20.577468+00:00"
    },
    "id": "650ac535039891699611762b1607ed5e85a37f70539ce611cc534d7ae0dc8af2"
  },
  {
    "repo": {
      "remote": "https://github.com/HEPLean/PhysLean",
      "branch": "jnlindsay/feat/restricted-Lorentz-group-equal-to-identity-component",
      "commit": "b4a420deef68762a68898a4245f54fb1992b6f4c",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PhysLean/Relativity/Lorentz/Group/Restricted.lean",
      "start_line": 76,
      "start_column": 17,
      "end_line": 76,
      "end_column": 22
    },
    "debug_info": {
      "goal": "d : \u2115\n\u22a2 \u2200 (x y : \u2191(LorentzGroup d)),\n    (detRep (x * y), orthchroRep (x * y)) = (detRep x, orthchroRep x) * (detRep y, orthchroRep y)",
      "url": "https://github.com/HEPLean/PhysLean/blob/b4a420deef68762a68898a4245f54fb1992b6f4c/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L76"
    },
    "metadata": {
      "blame_email_hash": "f5ab4f28bed3",
      "blame_date": "2025-05-05T23:32:38+10:00",
      "inclusion_date": "2025-05-13T21:05:20.577468+00:00"
    },
    "id": "022053c370c0e74a030bf4a71f656252c855fee8d8d97949bb939c36be855ca5"
  },
  {
    "repo": {
      "remote": "https://github.com/HEPLean/PhysLean",
      "branch": "jnlindsay/feat/restricted-Lorentz-group-equal-to-identity-component",
      "commit": "b4a420deef68762a68898a4245f54fb1992b6f4c",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PhysLean/Relativity/Lorentz/Group/Restricted.lean",
      "start_line": 77,
      "start_column": 25,
      "end_line": 77,
      "end_column": 30
    },
    "debug_info": {
      "goal": "d : \u2115\n\u22a2 Continuous fun \u039b => (detRep \u039b, orthchroRep \u039b)",
      "url": "https://github.com/HEPLean/PhysLean/blob/b4a420deef68762a68898a4245f54fb1992b6f4c/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L77"
    },
    "metadata": {
      "blame_email_hash": "f5ab4f28bed3",
      "blame_date": "2025-05-05T23:32:38+10:00",
      "inclusion_date": "2025-05-13T21:05:20.577468+00:00"
    },
    "id": "69f4ede4c712f7bd8247e7278dc2e2e3b63522028b4a9ef070ef8fb870983b6c"
  },
  {
    "repo": {
      "remote": "https://github.com/HEPLean/PhysLean",
      "branch": "jnlindsay/feat/restricted-Lorentz-group-equal-to-identity-component",
      "commit": "b4a420deef68762a68898a4245f54fb1992b6f4c",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PhysLean/Relativity/Lorentz/Group/Restricted.lean",
      "start_line": 86,
      "start_column": 2,
      "end_line": 86,
      "end_column": 7
    },
    "debug_info": {
      "goal": "d : \u2115\n\u22a2 _root_.IsConnected \u2191(LorentzGroup.restricted d)",
      "url": "https://github.com/HEPLean/PhysLean/blob/b4a420deef68762a68898a4245f54fb1992b6f4c/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L86"
    },
    "metadata": {
      "blame_email_hash": "f5ab4f28bed3",
      "blame_date": "2025-05-13T20:30:02+10:00",
      "inclusion_date": "2025-05-13T21:05:20.577468+00:00"
    },
    "id": "56d416332db27680a625dc9e3fcef645b48675ece9e1ee3f47398a3dcf1da58f"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 62,
      "start_column": 9,
      "end_line": 62,
      "end_column": 14
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Components.lean#L62"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "0e97b74e5f5360c6aa3ec622974bcab452c34aeb47756d61bb41c219ca5e9431"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 80,
      "start_column": 2,
      "end_line": 80,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Components.lean#L80"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "3c5f1f38c9d326ce9c6a0e7cb6a47c91ec566f1961ae13283503bc0b575faf26"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 141,
      "start_column": 9,
      "end_line": 141,
      "end_column": 14
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Components.lean#L141"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "0cc4f8c795c59bf412d2aa10b631df5ab32c1e5223c34127fa8ceee5d0c17012"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 167,
      "start_column": 2,
      "end_line": 167,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Components.lean#L167"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "990c4bc92782a343d2684165f3f5aca2086c32985947d1e1587b12f35d5010df"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 259,
      "start_column": 2,
      "end_line": 259,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b9 : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Components.lean#L259"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "d16dad33e6e15b2203ac174f5fc72c58d2aa66719bcf1c7f248588d3ceb26c49"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Execution.lean",
      "start_line": 185,
      "start_column": 2,
      "end_line": 185,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190 (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Execution.lean#L185"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "a42615c0dcd7f9c166625dd652f53d11a9b5048af22bf1b4a29da4ab1ea76b71"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Execution.lean",
      "start_line": 278,
      "start_column": 2,
      "end_line": 278,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | \u27e80, isLt\u27e9 => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Execution.lean#L278"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "b4c5674e9013d00e94ad1261308b698acdadc5633dbcadd41e1689185fb49d06"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Equiv.lean",
      "start_line": 66,
      "start_column": 2,
      "end_line": 66,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u22a2 (do\n      let _ \u2190 liftM (query 0 ())\n      (fun a => (0, \u2191a)) <$> liftM (query 1 ())) =\n    do\n    let y \u2190 liftM (query 1 ())\n    (fun a => (0, \u2191y)) <$> liftM (query 0 ())",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Equiv.lean#L66"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "75a385d6f706fb02cc0a2babcb4d8aa6282775594d2307d820f224c9e2a336ff"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Equiv.lean",
      "start_line": 80,
      "start_column": 4,
      "end_line": 80,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case h.h.none\n\u22a2 (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a)))) none =\n    \u2211' (a : Fin 2), 2\u207b\u00b9 * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a_1 => (0, \u2191a)))) none",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Equiv.lean#L80"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-16T18:04:04-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "79dd8a1bd367dfba2387e5aa2e7b20d978be035a6bdebbe50f8fbadc273ec1b7"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Equiv.lean",
      "start_line": 85,
      "start_column": 4,
      "end_line": 85,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case h.h.some.mk\nx y : \u2115\n\u22a2 (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a => (0, \u2191y))))\n      (some (x, y))",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Equiv.lean#L85"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "df22ffd586ea46bfd33290e432194bd17215da155bff3c76d2294f9eac2a874e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Equiv.lean",
      "start_line": 102,
      "start_column": 2,
      "end_line": 102,
      "end_column": 7
    },
    "debug_info": {
      "goal": "f : (i : \u2115) \u2192 unifSpec.domain i \u2192 Fin (i + 1)\n\u22a2 (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun x => (fun a => (0, \u2191a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun y => (fun a => (0, \u2191y)) <$> lift (query 0 ())",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Equiv.lean#L102"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "77a072791f6f153c5a6d55be29a9301741f75f93d74bcee42f711d54bc4f0a57"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/OracleInterface.lean",
      "start_line": 312,
      "start_column": 2,
      "end_line": 312,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : R[X \u03c3]\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : R[X \u03c3]\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/OracleInterface.lean#L312"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "115ecd67f7209e8e132a3f629821233c6b0e8db72a162454af2d950a50cdd1ce"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/OracleInterface.lean",
      "start_line": 351,
      "start_column": 2,
      "end_line": 351,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : R[X]\n\u22a2 \u2203 x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          (statelessOracle spec [fun x => R[X]]\u2092 fun i q => oracle p q).impl) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/OracleInterface.lean#L351"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "08a00f0f13a1d94384832e345932c85176bdc4be5925ae4b9ee7292109451d1d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Transform/FiatShamir.lean",
      "start_line": 130,
      "start_column": 66,
      "end_line": 130,
      "end_column": 71
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u2074 : VCVCompatible StmtIn\ninst\u271d\u00b3 : (i : Fin n) \u2192 VCVCompatible (pSpec i).2\ninst\u271d\u00b2 : DecidableEq \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\ncompletenessError : \u211d\u22650\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 Reduction.completeness relIn relOut R completenessError \u2192\n    Reduction.completeness relIn relOut R.fiatShamir completenessError",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Transform/FiatShamir.lean#L130"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-06T23:33:56-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "4f5699711cc4a8036fb5349f0a1cf3fd6777de2d0d7e2e1b45a52b0495697506"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 100,
      "start_column": 2,
      "end_line": 100,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).1.natDegree \u2264 p.natDegree / 2",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/CommitmentScheme/Fold.lean#L100"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "58e2f3cbc2815ecf46d44e0ecfb1498e8ab009099e3f8cf7afe6d1ada679b8ec"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 104,
      "start_column": 2,
      "end_line": 104,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).2.natDegree \u2264 p.natDegree / 2",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/CommitmentScheme/Fold.lean#L104"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "7b1efeb6e97f94dbc94944ff62f55ae91ae27206a1762f621d49be473d529146"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 116,
      "start_column": 11,
      "end_line": 116,
      "end_column": 16
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pEven \u2208 R\u2983< n\u2984[X]",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/CommitmentScheme/Fold.lean#L116"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "a17ec414d6bc07ca6842c2cb5aef53fa37bdd3925111a209586d89682c6a4545"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 116,
      "start_column": 26,
      "end_line": 116,
      "end_column": 31
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pOdd \u2208 R\u2983< n\u2984[X]",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/CommitmentScheme/Fold.lean#L116"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "cd5c9919db030ec5557a5a59c8d228c111dbea978cdda14bcbb36d581ea4e45c"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
      "start_line": 219,
      "start_column": 6,
      "end_line": 219,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := generateProof \u03b1 i cache\n          verifyProof \u03b1 i leaves[i] (getRoot \u03b1 cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run \u2218 fun cache =>\n                verifyProof \u03b1 i (leaves.get i) (getRoot \u03b1 cache) (generateProof \u03b1 i cache))).mapM\n          fun {\u03b1_1} q =>\n          match \u03b1_1, q with\n          | .((spec \u03b1).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
    },
    "metadata": {
      "blame_email_hash": "ab200eba5736",
      "blame_date": "2025-04-16T13:24:09-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "e2e660023e51de65fcc014dc486806cb27d53f5ba7a9ae176412e44d5d2ba860"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/AGM/Basic.lean",
      "start_line": 160,
      "start_column": 2,
      "end_line": 160,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d\u00b2 : Fact (Nat.Prime p)\nG\u2081 : Type u_2\ninst\u271d\u00b9 : CommGroup G\u2081\ninst\u271d : IsPrimeOrderWith G\u2081 p\nn : \u2115\ng : G\u2081\na : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1))\n\u22a2 g ^ \u2211 i, a.val ^ \u2191i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (\u2211 x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ \u2191x).val",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/AGM/Basic.lean#L160"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-15T12:13:54+05:30",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "cd12116ba1935fa41ed2786c33f186e73a7b5e424edc52d2f1711ea52f1b1da0"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/AGM/Basic.lean",
      "start_line": 171,
      "start_column": 6,
      "end_line": 171,
      "end_column": 11
    },
    "debug_info": {
      "goal": "G : Type u_1\ninst\u271d\u2078 : CommGroup G\np : \u2115\ninst\u271d\u2077 : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG\u2081 : Type u_2\ninst\u271d\u2076 : CommGroup G\u2081\ninst\u271d\u2075 : IsPrimeOrderWith G\u2081 p\ng\u2081 : G\u2081\nG\u2082 : Type u_3\ninst\u271d\u2074 : CommGroup G\u2082\ninst\u271d\u00b3 : IsPrimeOrderWith G\u2082 p\ng\u2082 : G\u2082\nG\u209c : Type u_4\ninst\u271d\u00b2 : CommGroup G\u209c\ninst\u271d\u00b9 : IsPrimeOrderWith G\u209c p\npairing : Additive G\u2081 \u2192\u2097[\u2124] Additive G\u2082 \u2192\u2097[\u2124] Additive G\u209c\nn : \u2115\ninst\u271d : Fact (Nat.Prime p)\nsrs : Vector G\u2081 (n + 1)\ncoeffs : Fin (n + 1) \u2192 ZMod p\nz : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n\u22a2 ((\u2191poly - C (eval z \u2191poly)) / (X - C z)).degree < \u2191(n + 1)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/AGM/Basic.lean#L171"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-03-15T21:13:06-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "c534afb405ae3da111dc0eeaac82ed68f4c00f6b8db24373c6d8d28b5e3837cb"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 186,
      "start_column": 33,
      "end_line": 186,
      "end_column": 38
    },
    "debug_info": {
      "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 \u2016C\u2016\u2080' \u2260 \u22a4",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/CodingTheory/Basic.lean#L186"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "4e0fe4a92c4308e458f5c765d7bebd7884c340950f868c5e997e0fe2d6cf5fcf"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 187,
      "start_column": 4,
      "end_line": 187,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : \u2016C\u2016\u2080' \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => \u0394\u2080(\u2191x.1, \u2191x.2)) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d}",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/CodingTheory/Basic.lean#L187"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "4953ae420846c5a963357638ba4ff22c74eed5357af94057a53b76ef01de35af"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 231,
      "start_column": 4,
      "end_line": 231,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : \u0394\u2080(u, v) \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 \u2016u\u2016\u2080 \u2264 d",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/CodingTheory/Basic.lean#L231"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "364cc2fb21b2d0eb8edaa1c71f58a6bbcd5357ec942efc9afb69fed74c0ae6f2"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 234,
      "start_column": 4,
      "end_line": 234,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : \u2016u\u2016\u2080 \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/CodingTheory/Basic.lean#L234"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "181e8ea19edf25c9b118deb37e9cf8c0c8db1b4189a98e9fd5ee224157d5f577"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 269,
      "start_column": 67,
      "end_line": 269,
      "end_column": 72
    },
    "debug_info": {
      "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : Finite R\nC : Set (n \u2192 R)\n\u22a2 card \u2191C \u2264 card R ^ (card n - \u2016C\u2016\u2080 + 1)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/CodingTheory/Basic.lean#L269"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-26T22:44:38-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "d1f35d0fd5e4bbe9b6dcdba9f5e5969023e47bb7cb56469b8598b47db849cfaf"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 275,
      "start_column": 65,
      "end_line": 275,
      "end_column": 70
    },
    "debug_info": {
      "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - \u2016C.carrier\u2016\u2080 + 1",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/CodingTheory/Basic.lean#L275"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-26T22:44:38-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "8e83cbf18089be1be66c1ec72fb32dd8ba45efa0aaf9df00f76f6619968b98c2"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Probability/Notation.lean",
      "start_line": 70,
      "start_column": 76,
      "end_line": 70,
      "end_column": 81
    },
    "debug_info": {
      "goal": "F : Type\ninst\u271d\u00b9 : Nonempty F\ninst\u271d : Fintype F\n\u22a2 \u2191(do\n          let x \u2190 $\u1d56 F\n          let y \u2190 $\u1d56 F\n          let z \u2190 $\u1d56 (F \u00d7 F)\n          Pure.pure (z = (x, y)))\n      True =\n    1 / \u2191(Fintype.card (F \u00d7 F))",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Probability/Notation.lean#L70"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-06T23:33:56-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "a755e809e85c646e7e042b8b120e28847188f1515e8d6b30900127ec434448f1"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 34,
      "start_column": 14,
      "end_line": 34,
      "end_column": 19
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse ofSpec toSpec",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Equiv.lean#L34"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "799c38802508780dbca489cc1a9b11932df76cdd79b8a645cb96e51509e3058e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 35,
      "start_column": 15,
      "end_line": 35,
      "end_column": 20
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse ofSpec toSpec",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Equiv.lean#L35"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "793807be2326fa8d59d3cc10f9863cf2c93d626e464bb051e9211230e76ee662"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 43,
      "start_column": 2,
      "end_line": 43,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 (p + q).toSpec = p.toSpec + q.toSpec",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Equiv.lean#L43"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "f1c2376d810d87f1ca9828a233872a0bfe3cfcb74de08f7d3fbdca9dc9c309aa"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 47,
      "start_column": 2,
      "end_line": 47,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191p.toSpec",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Equiv.lean#L47"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "b790270f4e48a5b5f3ed14737bc8fedb2d98f2d738dc057076c8999b48919cfb"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 77,
      "start_column": 2,
      "end_line": 77,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L77"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-14T11:09:39-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "c83ede4483e7e7d270e9e86e6d0094e98b8dfde1bb326a695cc9b042e3b3e29e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 81,
      "start_column": 2,
      "end_line": 81,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 (cons a b).get \u2b1d\u1d65 (cons c d).get = a * c + b.get \u2b1d\u1d65 d.get",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L81"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-14T11:09:39-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "e579378544752d9f3fa49552ea8862e759f206dfaf9f698e3d1259a96d776fed"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 138,
      "start_column": 20,
      "end_line": 138,
      "end_column": 25
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b c : MlPoly R n), a + b + c = a + (b + c)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L138"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "1e99ff98577db5cc8dad8a16795fdcf4ecc4adcc000433096088f786362a624f"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 141,
      "start_column": 19,
      "end_line": 141,
      "end_column": 24
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), 0 + a = a",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L141"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "6a46bc37afacff026a65d4a8dbc45afbc685125784e7408b03db64750783f0be"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 142,
      "start_column": 19,
      "end_line": 142,
      "end_column": 24
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), a + 0 = a",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L142"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "6dbccdffac069339d8b20c8afda149ca2aba2c14ce77e635a5c818ecc35ae32a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 144,
      "start_column": 21,
      "end_line": 144,
      "end_column": 26
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (x : MlPoly R n), nsmul 0 x = 0",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L144"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "4fa5b9982c61fb37efbaff65a949cef4097d3b701ff41551cc717309b1eaa101"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 145,
      "start_column": 21,
      "end_line": 145,
      "end_column": 26
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (n_1 : \u2115) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L145"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "af9df26f0e9997359867268ac42245c665a531feaa1252345c98b412259a0353"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 139,
      "start_column": 19,
      "end_line": 139,
      "end_column": 24
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b : MlPoly R n), a + b = b + a",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L139"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "16c1a45f9d7ab39d2ef952afe783e8991f45b10ab25862932d60bf044428afaa"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 151,
      "start_column": 17,
      "end_line": 151,
      "end_column": 22
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (b : MlPoly R n), 1 \u2022 b = b",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L151"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "99fc705044f38a0801ef5565337943191eac358c6004ac3e3e40e34ad68c60db"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 156,
      "start_column": 18,
      "end_line": 156,
      "end_column": 23
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (x : MlPoly R n), 0 \u2022 x = 0",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MlPoly/Basic.lean#L156"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "153d697a464740cd1dd077fd91ab60df9748ca2ca5eed9df9313026f032bfdbd"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Fin.lean",
      "start_line": 374,
      "start_column": 43,
      "end_line": 374,
      "end_column": 48
    },
    "debug_info": {
      "goal": "n : \u2115\n\u03b1 : Fin n \u2192 Sort u\nl : List \u2115\nn' : \u2115\nl' : List \u2115\nmotive : Fin (n' :: l').sum \u2192 Sort u_1\ncases : (n : \u2115) \u2192 (h : n \u2208 n' :: l') \u2192 (i : Fin n) \u2192 motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : \u00ac\u2191i < n'\n\u22a2 \u2191i - n' < l'.sum",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Fin.lean#L374"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-07T14:25:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "b763335ccdfae76dd64e48af3c5413b46602355f7fce8be397edd69fa9e87e45"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Fin.lean",
      "start_line": 402,
      "start_column": 16,
      "end_line": 402,
      "end_column": 21
    },
    "debug_info": {
      "goal": "case ind\nn\u271d n : \u2115\nIH : \u2200 m < n, \u2200 {a : Fin m \u2192 \u2115}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n \u2192 \u2115\n\u22a2 (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Fin.lean#L402"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-11T17:39:02-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "72aca9aa998b4f08cd1005d31f321b24b7e10d07d8bbc906b72ba1389588f487"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Fin.lean",
      "start_line": 497,
      "start_column": 32,
      "end_line": 497,
      "end_column": 37
    },
    "debug_info": {
      "goal": "\u22a2 True",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Fin.lean#L497"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-11T17:39:02-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "6b18ee8a776cc302a0b9b4d6573800db611fb069612beadf5544e86b7201771e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Fin.lean",
      "start_line": 557,
      "start_column": 4,
      "end_line": 557,
      "end_column": 9
    },
    "debug_info": {
      "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, (a :: l').findSum j = some n",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Fin.lean#L557"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-03-14T00:01:07-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "5eeadb9c80335500e7bc6565790970e1131e2e6c2ecf3c0623098a09ef1dda48"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Fin.lean",
      "start_line": 569,
      "start_column": 80,
      "end_line": 569,
      "end_column": 85
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 l.findSumIdx \u2191j < l.length",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Fin.lean#L569"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-03-14T00:01:07-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "dd28583fb9aa300dab781e4003ddb2340844828b1fcd1b53e9c097cbbe9f68fe"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Operations.lean",
      "start_line": 155,
      "start_column": 2,
      "end_line": 155,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n \u2294 l.length = n' \u2294 l'.length\n\u22a2 l ++ replicate (n - l.length + (m - n' \u2294 l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' \u2294 l'.length)) unit",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Operations.lean#L155"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "056b78789a71a5e470ccc90132db8e078c43f06bbabe0317e068b867363d1ae4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Operations.lean",
      "start_line": 209,
      "start_column": 5,
      "end_line": 209,
      "end_column": 10
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l\u2081.matchSize l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Operations.lean#L209"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-14T17:35:17-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "18dfbfd0e628a00b47a2cfc5c6d2fac7f3f0476cda2033376678c89477c299fc"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Operations.lean",
      "start_line": 257,
      "start_column": 2,
      "end_line": 257,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\na : Array \u03b1\nn : \u2115\nunit : \u03b1\ni : \u2115\nh\u271d : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n\u22a2 { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Operations.lean#L257"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "e11132e3fccb44e59b2af9c79da10c880797988a0cf1b7c6d3a1ea903c5659ac"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Operations.lean",
      "start_line": 391,
      "start_column": 75,
      "end_line": 391,
      "end_column": 80
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp ((popWhile p as).getLast h) = true",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/Math/Operations.lean#L391"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-14T17:35:17-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "3db198c4a1f03f981e6978465299bde86485a615a4a96a351fdb435181e17e7f"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
      "start_line": 75,
      "start_column": 2,
      "end_line": 75,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : R[X \u03c3]\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-16T12:52:41-06:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "475b2b602ae748f14ccdd19f0792c1b279050115a01faaad44522e02ba0c90f6"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
      "start_line": 112,
      "start_column": 2,
      "end_line": 112,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : R[X Fin n]\n\u22a2 ((sumExceptFirst' n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-09-13T15:50:48-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "fcd58141b72b31e708d9b85c95a2e0a8d328d687bfdab10345feafeb5bf8f5c7"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
      "start_line": 69,
      "start_column": 58,
      "end_line": 69,
      "end_column": 63
    },
    "debug_info": {
      "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : R[X \u03c3]\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191(#({x \u2208 p.vars.pi S | (eval (extendDomain x)) p = 0})) / \u220f i \u2208 p.vars, \u2191(#(S i)) \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(#(S i))",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-30T15:40:43-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "0a066c79ee675d2faa880a11f66b7bbc753420bf174f0e585c9e3bc2da7ef6e3"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
      "start_line": 171,
      "start_column": 76,
      "end_line": 171,
      "end_column": 81
    },
    "debug_info": {
      "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : R[X \u03c3]\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < #(S i)\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-30T15:40:43-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "470a5645a1664c3b35bd414f6bee1eb28fb0db92da4584a285124b28f3b8aadf"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 571,
      "start_column": 2,
      "end_line": 571,
      "end_column": 7
    },
    "debug_info": {
      "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : UniPoly Q\ni : \u2115\nhi : i < Array.size (p.add_raw q)\n\u22a2 (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/UniPoly/Basic.lean#L571"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "0b845d2293c434d0994775bc927235869d83cdda430ad0eacf1b71550c906029"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 899,
      "start_column": 4,
      "end_line": 899,
      "end_column": 9
    },
    "debug_info": {
      "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n\u22a2 p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/UniPoly/Basic.lean#L899"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "733480bf5c2c870e60fe387dccdfdde981e5d91a5446b6d1ec8a50e84ad950ae"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 975,
      "start_column": 6,
      "end_line": 975,
      "end_column": 11
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : Ring R\ninst\u271d : BEq R\np : UniPoly R\n\u22a2 (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) \u2208 TropicallyBoundPoly R",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/UniPoly/Basic.lean#L975"
    },
    "metadata": {
      "blame_email_hash": "ab200eba5736",
      "blame_date": "2025-03-12T19:59:09-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "61bc8ca15479394304457e84e855bf48693dd0a10a1ac6a44b4d0a255400412d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 1005,
      "start_column": 22,
      "end_line": 1005,
      "end_column": 27
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/UniPoly/Basic.lean#L1005"
    },
    "metadata": {
      "blame_email_hash": "94b4cc0e139f",
      "blame_date": "2024-05-31T16:31:08-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "111e9542047e25b1ed5b9f718bb223a31a6b5055299c902a3f3b17083e84dbbd"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 1006,
      "start_column": 21,
      "end_line": 1006,
      "end_column": 26
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/UniPoly/Basic.lean#L1006"
    },
    "metadata": {
      "blame_email_hash": "94b4cc0e139f",
      "blame_date": "2024-05-31T16:31:08-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "77563b11762c76231d5c79dfcf0e68d7f8fb78f0369bd0069ca5fe850dc4c3e4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 1007,
      "start_column": 21,
      "end_line": 1007,
      "end_column": 26
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/Data/UniPoly/Basic.lean#L1007"
    },
    "metadata": {
      "blame_email_hash": "94b4cc0e139f",
      "blame_date": "2024-05-31T16:31:08-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "ae839a34336096365d4f0c55ebf4a1afe6cc750370b997db50d1e8bebd9f2c4b"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
      "start_line": 254,
      "start_column": 2,
      "end_line": 254,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case h\nm n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\nT : pSpec\u2081.FullTranscript\nT' : pSpec\u2082.FullTranscript\ni : Fin m\n\u22a2 _root_.cast \u22ef (T i) = (\u22ef \u25b8 T) i",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Sequential.lean#L254"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-07T12:49:22-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "af1a7bba5ec787dbbbaf6e981b8ba5c8e98cd9706e9f9fa09cea71347aefd312"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
      "start_line": 559,
      "start_column": 55,
      "end_line": 559,
      "end_column": 60
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u22a2 (compose 0 (fun x => n) fun x => pSpec) = pSpec",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Sequential.lean#L559"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-18T18:57:31+07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "743b134e1168b80238bb9ec5f21f4ed0b775307bf76b5f2b9bf381a9483544a1"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
      "start_line": 575,
      "start_column": 2,
      "end_line": 575,
      "end_column": 7
    },
    "debug_info": {
      "goal": "m : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\ni : Fin m\n\u22a2 compose (\u2191i + 1) (Fin.take (\u2191i + 2) \u22ef n) (Fin.take (\u2191i + 2) \u22ef pSpec) =\n    cast \u22ef (compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec) ++\u209a pSpec i.succ)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Sequential.lean#L575"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-12-06T19:22:58-03:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "51b05cbd8dc06ee8e51d9373edd4f8964c15e685f8f66daa73b2677a6cf5318c"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
      "start_line": 702,
      "start_column": 2,
      "end_line": 702,
      "end_column": 7
    },
    "debug_info": {
      "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIdx) \u2192 OracleInterface (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIdx) \u2192 OracleInterface (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (P\u2081.append P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    match __discr with\n      | (stmt\u2082, wit\u2082, transcript\u2081) => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        match __discr with\n          | (stmt\u2083, wit\u2083, transcript\u2082) => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Sequential.lean#L702"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-12-28T16:03:02+07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "5c18bac053097eddc36755afc0d2970e52ae5a1ce395c579782532f80a606fa4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
      "start_line": 728,
      "start_column": 89,
      "end_line": 728,
      "end_column": 94
    },
    "debug_info": {
      "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : \u211d\u22650\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (R\u2081.append R\u2082) (completenessError\u2081 + completenessError\u2082)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Sequential.lean#L728"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-12-01T17:09:18-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "e0acdcd5d4132d63220a538bfc9cb2a52e0793e76890e562b89b0b861dae4be2"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
      "start_line": 755,
      "start_column": 38,
      "end_line": 755,
      "end_column": 43
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nm : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d\u00b2 : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 2) \u2192 Type\nrel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (\u2211 i, completenessError i)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Sequential.lean#L755"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-12-06T19:22:58-03:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "17325c090f53afc7942fa2844c667765e34120c3dafe95d7729f92c8d4b77c58"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 151,
      "start_column": 2,
      "end_line": 151,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "2b4820efa935cf34960acf8447117b31ee2cba85305f62b20a6a2dff3b0ae56e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 164,
      "start_column": 2,
      "end_line": 164,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "3e924d1ac4edb29a694c9448457f768d4f43e37e819f7501ed6ef1799facf541"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 177,
      "start_column": 2,
      "end_line": 177,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190 Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "ea58b9adc2f12c1acee92b75886772c346da57a25183e6d9add5e9fa8654598b"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 201,
      "start_column": 2,
      "end_line": 201,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : \u211d\u22650\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d : x\u271d \u2208 (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x\u271d",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-22T09:32:10-04:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "c91fa6120e786ce22c2034aba2ef8db85bc075f48e0098ddd6d9199dcc640a38"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 215,
      "start_column": 2,
      "end_line": 215,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : \u211d\u22650\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n    \u2191soundnessError",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "1a07a6db1274471dac33cb8ce5b04db9434409105a6afc8e1e60019c82f9dc83"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 229,
      "start_column": 2,
      "end_line": 234,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : \u211d\u22650\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n        \u2191soundnessError",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "f3f48c5d00e8ad842a0bb86e1a87e39d2dc6e8e10955f9628a971ec0c6453642"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 278,
      "start_column": 4,
      "end_line": 278,
      "end_column": 9
    },
    "debug_info": {
      "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : \u2124[X]\nt : \u2124\nf : \u2124[X]\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "3e46132cc143af09834e39849a14b785ad61a17316af145d2b1edd4f8e1859f2"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 389,
      "start_column": 2,
      "end_line": 389,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : \u211d\u22650\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Security/Basic.lean#L389"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "ede022bf07ffd3e782a209be375fc836ac46a632ec8f1d83b6a51b654de418a1"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 409,
      "start_column": 75,
      "end_line": 409,
      "end_column": 80
    },
    "debug_info": {
      "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn StmtOut : Type\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrSoundnessError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrSoundness langIn langOut verifier rbrSoundnessError \u2192 soundness langIn langOut verifier (\u2211 i, rbrSoundnessError i)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Security/Basic.lean#L409"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-28T13:43:25-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "a01f69f624cb674c5511285d8ab957ba78715f5933cb374363ff8b4a301c482d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 419,
      "start_column": 2,
      "end_line": 419,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError \u2192\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier rbrKnowledgeError",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Security/Basic.lean#L419"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-28T13:43:25-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "653c0647e257920724ba1ab8e6d5d17d70c123bbd91123cbe241db6937df03ec"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 428,
      "start_column": 82,
      "end_line": 428,
      "end_column": 87
    },
    "debug_info": {
      "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError \u2192\n    knowledgeSoundness relIn relOut verifier (\u2211 i, rbrKnowledgeError i)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/OracleReduction/Security/Basic.lean#L428"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-28T13:43:25-07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "1bab6bebfe9d333ea39f458df068e9f99cbd99fd0357df66c6eb3422b47e3a6b"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 495,
      "start_column": 2,
      "end_line": 495,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5R\u2983\u2264 \u2191deg\u2984[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : \u2191(transcript 0) \u2208 R\u2983\u2264 \u2191deg\u2984[X]\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) \u2191(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = stmt.1.target then pure () else failure",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Sumcheck/Basic.lean#L495"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-18T19:07:20+07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "698b8a383775fe427016188f3fc14db6ead71e12afb724da03e17c8890335162"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 513,
      "start_column": 57,
      "end_line": 513,
      "end_column": 62
    },
    "debug_info": {
      "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 (do\n      let x \u2190\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                \u27e80, \u22ef\u27e9\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn\u271d)).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)\n      let a \u2190 liftM (query (Sum.inr \u27e81, \u22ef\u27e9) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  \u27e81, \u22ef\u27e9 x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)).neverFails",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Sumcheck/Basic.lean#L513"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "238f7e9a813334be76fd76f1e39ff378eae5aeba3c184b7e0867eb631671aec7"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 522,
      "start_column": 2,
      "end_line": 522,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case right\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) \u2208\n        (run ({ target := target, challenges := challenge }, oStmt) witIn\u271d\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support \u2192\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | \u27e8poly, property\u27e9 =>\n            \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x \u2218 Fin.cast \u22ef)) poly =\n              target) \u2227\n        (a, b) = (a_1, b_2)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Sumcheck/Basic.lean#L522"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-18T19:07:20+07:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "ad33836642d286bf0c50a7d5adf9fe688a0a4ce8d78d638933f60368e4412138"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 571,
      "start_column": 4,
      "end_line": 571,
      "end_column": 9
    },
    "debug_info": {
      "goal": "R\u271d : Type\ninst\u271d\u2075 : CommSemiring R\u271d\nn\u271d deg\u271d m\u271d : \u2115\nD\u271d : Fin m\u271d \u21aa R\u271d\n\u03b9\u271d : Type\noSpec\u271d : OracleSpec \u03b9\u271d\ninst\u271d\u2074 : VCVCompatible R\u271d\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni\u271d : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  \u00acrelation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i),\n    (a, b) \u2208 (Verifier.run stmt tr (verifier R n deg D oSpec i)).support \u2192\n      \u2200 (x : Unit), \u00acrelation R n deg D i.succ (a, b) x",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Sumcheck/Basic.lean#L571"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "9c2ea5effc267935efd2a27e832b3105fc54cd0208c36004d934e2bf2803ce6a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ZKLib",
      "branch": "main",
      "commit": "0ec8b2bbd257791ecf9ba7c0941595933611e2eb",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 646,
      "start_column": 42,
      "end_line": 646,
      "end_column": 47
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
      "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0ec8b2bbd257791ecf9ba7c0941595933611e2eb/ArkLib/ProofSystem/Sumcheck/Basic.lean#L646"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-15T21:42:17.749878+00:00"
    },
    "id": "ee0c0726a10b98eea0f4ba97dc36202d96f1a1adccd3ffd73aa13de65cdcbdcc"
  },
  {
    "repo": {
      "remote": "https://github.com/leanprover-community/duper",
      "branch": "dev",
      "commit": "0f56e6f6463c4d8d406de52cc69b29036e4bed7b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Duper/Tests/lastAsylum.lean",
      "start_line": 35,
      "start_column": 13,
      "end_line": 35,
      "end_column": 18
    },
    "debug_info": {
      "goal": "ax1 : \u2200 (x : Inhab), Peculiar x \u2194 (Sane x \u2194 \u00acDoctor x)\nax2 : \u2200 (x : Inhab), Special x \u2194 \u2200 (y : Inhab), \u00acDoctor y \u2194 (Sane y \u2194 Peculiar x)\nax3 : \u2200 (x y : Inhab), (Sane x \u2194 Special y) \u2192 (Sane (bf x) \u2194 \u00acDoctor y)\nax4 : Sane Tarr \u2194 (x : Inhab) \u2192 Doctor x \u2192 Sane x\nax5 : Sane Fether \u2194 \u2200 (x : Inhab), \u00acDoctor x \u2192 \u00acSane x\nax6 : Sane Fether \u2194 Sane Tarr\n\u22a2 False",
      "url": "https://github.com/leanprover-community/duper/blob/0f56e6f6463c4d8d406de52cc69b29036e4bed7b/Duper/Tests/lastAsylum.lean#L35"
    },
    "metadata": {
      "blame_email_hash": "d9c480704efb",
      "blame_date": "2022-08-01T22:37:02-04:00",
      "inclusion_date": "2025-05-14T21:05:24.329083+00:00"
    },
    "id": "3c116486d136d45fb4070181901af621002bb468281e1b49223e1212129ef279"
  },
  {
    "repo": {
      "remote": "https://github.com/leanprover-community/duper",
      "branch": "dev",
      "commit": "0f56e6f6463c4d8d406de52cc69b29036e4bed7b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Duper/Tests/test_continuity.lean",
      "start_line": 18,
      "start_column": 50,
      "end_line": 18,
      "end_column": 55
    },
    "debug_info": {
      "goal": "a : Real\n\u22a2 dist a a = zero",
      "url": "https://github.com/leanprover-community/duper/blob/0f56e6f6463c4d8d406de52cc69b29036e4bed7b/Duper/Tests/test_continuity.lean#L18"
    },
    "metadata": {
      "blame_email_hash": "4ac7eab8a488",
      "blame_date": "2023-06-05T10:39:00+02:00",
      "inclusion_date": "2025-05-14T21:05:24.329083+00:00"
    },
    "id": "f44f898036e0dc7614077ce5565e09d3488e31c69d59e89890de3e29cad71ab7"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/Wiener.lean",
      "start_line": 2281,
      "start_column": 61,
      "end_line": 2281,
      "end_column": 66
    },
    "debug_info": {
      "goal": "A x : \u211d\nG : \u2102 \u2192 \u2102\nf : \u2115 \u2192 \u211d\nhpos : 0 \u2264 f\nhG : ContinuousOn G {s | 1 \u2264 s.re}\nhG' : EqOn G (fun s => LSeries (fun n => \u2191(f n)) s - \u2191A / (s - 1)) {s | 1 < s.re}\nhf : \u2200 (\u03c3' : \u211d), 1 < \u03c3' \u2192 Summable (nterm (fun n => \u2191(f n)) \u03c3')\n\u03c8 : CS 2 \u2102\nh\u03c8pos : \u2200 (y : \u211d), 0 \u2264 (fourierIntegral \u03c8.toFun y).re \u2227 (fourierIntegral \u03c8.toFun y).im = 0\nhx : 1 \u2264 x\n\u22a2 \u2211' (n : \u2115), \u2191(f n) / \u2191n * fourierIntegral \u03c8.toFun (1 / (2 * Real.pi) * Real.log (\u2191n / x)) -\n      \u2191A * \u222b (u : \u211d) in Ici (-Real.log x), fourierIntegral \u03c8.toFun (u / (2 * Real.pi)) =\n    \u222b (t : \u211d), G (1 + \u2191t * I) * \u03c8.toFun t * \u2191x ^ (\u2191t * I)",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/Wiener.lean#L2281"
    },
    "metadata": {
      "blame_email_hash": "d7f0e4a42bbb",
      "blame_date": "2024-04-04T12:17:01-07:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "aa9786e41982bd041e5eb95c9985be0060a17bcf17c461255d6d1460a106d8bb"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/Wiener.lean",
      "start_line": 2303,
      "start_column": 90,
      "end_line": 2303,
      "end_column": 95
    },
    "debug_info": {
      "goal": "A : \u211d\nG : \u2102 \u2192 \u2102\nf : \u2115 \u2192 \u211d\nhpos : 0 \u2264 f\nhG : ContinuousOn G {s | 1 \u2264 s.re}\nhG' : EqOn G (fun s => LSeries (fun n => \u2191(f n)) s - \u2191A / (s - 1)) {s | 1 < s.re}\nhf : \u2200 (\u03c3' : \u211d), 1 < \u03c3' \u2192 Summable (nterm (fun n => \u2191(f n)) \u03c3')\n\u03c8 : CS 2 \u2102\nh\u03c8pos : \u2200 (y : \u211d), 0 \u2264 (fourierIntegral \u03c8.toFun y).re \u2227 (fourierIntegral \u03c8.toFun y).im = 0\n\u22a2 \u2203 B,\n    \u2200 (x : \u211d), 0 < x \u2192 \u2016\u2211' (n : \u2115), \u2191(f n) / \u2191n * fourierIntegral \u03c8.toFun (1 / (2 * Real.pi) * Real.log (\u2191n / x))\u2016 \u2264 B",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/Wiener.lean#L2303"
    },
    "metadata": {
      "blame_email_hash": "4d01d7c10d46",
      "blame_date": "2024-04-16T02:15:35+02:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "1ac82595f744a76fd670a9e7ef438f9a0cac19d425afa60bef87e30d74da4281"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest2.lean",
      "start_line": 16,
      "start_column": 2,
      "end_line": 16,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\n\u22a2 ArithmeticFunction.vonMangoldt n \u2264 Real.log \u2191n",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest2.lean#L16"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-05-02T11:17:08-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "5d1fabd35d078a86be873c000286a6abf768b1ed8e0e1bac53e7a22477652dc8"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest2.lean",
      "start_line": 42,
      "start_column": 4,
      "end_line": 42,
      "end_column": 9
    },
    "debug_info": {
      "goal": "F : \u211d \u2192 \u211d\nc\u2081 c\u2082 : \u211d\nc\u2081pos : 0 < c\u2081\nc\u2082pos : 0 < c\u2082\nc\u2082_lt_one : c\u2082 < 1\nFbddAbove : \u2200 (x : \u211d), F x \u2264 1\nFnonneg : \u2200 (x : \u211d), F x \u2265 0\nFzeroAfter : \u2200 X > 1, \u2200 (n : \u2115), \u2191n \u2265 (1 + c\u2081) * X \u2192 F (\u2191n / X) = 0\nFone : \u2200 X > 1, \u2200 (n : \u2115), 0 < n \u2192 \u2191n \u2264 (1 - c\u2082) * X \u2192 F (\u2191n / X) = 1\nX Y : \u211d\n\u22a2 \u2211' (n : \u2115), ArithmeticFunction.vonMangoldt n * F (\u2191n / X) =\n    \u2211 n \u2208 (Icc 0 \u230aY\u230b\u208a).toFinset, ArithmeticFunction.vonMangoldt n * F (\u2191n / X) +\n      \u2211' (n : \u2115),\n        let n' := n + \u230aY\u230b\u208a + 1;\n        ArithmeticFunction.vonMangoldt n' * F (\u2191n' / X)",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest2.lean#L42"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-05-02T11:17:08-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "2136795c4f124c4f1569a235a3e18d1aed68d136ac9fcd00e2763223be3cd9a9"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest2.lean",
      "start_line": 44,
      "start_column": 2,
      "end_line": 44,
      "end_column": 7
    },
    "debug_info": {
      "goal": "F : \u211d \u2192 \u211d\nc\u2081 c\u2082 : \u211d\nc\u2081pos : 0 < c\u2081\nc\u2082pos : 0 < c\u2082\nc\u2082_lt_one : c\u2082 < 1\nFbddAbove : \u2200 (x : \u211d), F x \u2264 1\nFnonneg : \u2200 (x : \u211d), F x \u2265 0\nFzeroAfter : \u2200 X > 1, \u2200 (n : \u2115), \u2191n \u2265 (1 + c\u2081) * X \u2192 F (\u2191n / X) = 0\nFone : \u2200 X > 1, \u2200 (n : \u2115), 0 < n \u2192 \u2191n \u2264 (1 - c\u2082) * X \u2192 F (\u2191n / X) = 1\nthis :\n  \u2200 (X Y : \u211d),\n    \u2211' (n : \u2115), ArithmeticFunction.vonMangoldt n * F (\u2191n / X) =\n      \u2211 n \u2208 (Icc 0 \u230aY\u230b\u208a).toFinset, ArithmeticFunction.vonMangoldt n * F (\u2191n / X) +\n        \u2211' (n : \u2115),\n          let n' := n + \u230aY\u230b\u208a + 1;\n          ArithmeticFunction.vonMangoldt n' * F (\u2191n' / X)\n\u22a2 \u2200\u1da0 (X : \u211d) in Filter.atTop,\n    \u2016\u2211' (n : \u2115), ArithmeticFunction.vonMangoldt n * F (\u2191n / X) -\n          (Finset.Icc 0 \u230aX\u230b\u208a).sum \u21d1ArithmeticFunction.vonMangoldt\u2016 \u2264\n      (c\u2081 + c\u2082) * X * Real.log ((1 + c\u2082) * X)",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest2.lean#L44"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-05-02T11:17:08-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "171a7291fe89bd3d5b3f707d32b65873c9b28b302b2e5fd22646c6bf4459fec0"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest.lean",
      "start_line": 33,
      "start_column": 4,
      "end_line": 33,
      "end_column": 9
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC : \u211d := c\u2081 + c\u2082 + 3\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nn : \u2115\n\u22a2 ArithmeticFunction.vonMangoldt n \u2264 Real.log \u2191n",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest.lean#L33"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-04-30T17:09:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "61468eff8f4b3cece5acfa98ee0d843a7bab84d7c3dd88a1f436f57760c0c80f"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest.lean",
      "start_line": 35,
      "start_column": 4,
      "end_line": 35,
      "end_column": 9
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC : \u211d := c\u2081 + c\u2082 + 3\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nvonManBnd : \u2200 (n : \u2115), ArithmeticFunction.vonMangoldt n \u2264 Real.log \u2191n\nn : \u2115\n\u22a2 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest.lean#L35"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-04-30T17:09:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "20a88a2290f650ce1e00833b608aab2fa8b178c78217cb2e14b13060e8c02067"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest.lean",
      "start_line": 37,
      "start_column": 4,
      "end_line": 37,
      "end_column": 9
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC : \u211d := c\u2081 + c\u2082 + 3\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nvonManBnd : \u2200 (n : \u2115), ArithmeticFunction.vonMangoldt n \u2264 Real.log \u2191n\nsmooth1BddAbove : \u2200 (n : \u2115), Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1\nn : \u2115\n\u22a2 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2265 0",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest.lean#L37"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-04-30T17:09:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "618d6119e547df62960ccc97b94d017d2b6a73862f0cf56dcc923a7637d734c5"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest.lean",
      "start_line": 44,
      "start_column": 2,
      "end_line": 44,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case intro.intro.intro.intro\nSmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC : \u211d := c\u2081 + c\u2082 + 3\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nvonManBnd : \u2200 (n : \u2115), ArithmeticFunction.vonMangoldt n \u2264 Real.log \u2191n\nsmooth1BddAbove : \u2200 (n : \u2115), Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1\nsmooth1BddBelow : \u2200 (n : \u2115), Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2265 0\nsmoothIs1 : \u2200 (n : \u2115), \u2191n \u2264 X * (1 - c\u2081 * \u03b5) \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 1\nsmoothIs0 : \u2200 (n : \u2115), X * (1 + c\u2082 * \u03b5) \u2264 \u2191n \u2192 1 + c\u2082 * \u03b5 \u2264 \u2191n / X \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 0\n\u22a2 \u2016\u2211' (n : \u2115), ArithmeticFunction.vonMangoldt n * Smooth1 SmoothingF \u03b5 (\u2191n / X) -\n        (Finset.range \u230aX\u230b\u208a).sum \u21d1ArithmeticFunction.vonMangoldt\u2016 \u2264\n    C * \u03b5 * X * Real.log X",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest.lean#L44"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-04-30T17:09:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "3fc7a152c5908133484f94b64ce58f4f2fb4c29fd393bc73d415417185f0e660"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest.lean",
      "start_line": 19,
      "start_column": 79,
      "end_line": 19,
      "end_column": 84
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\n\u22a2 \u2203 c, 0 < c \u2227 \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest.lean#L19"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-04-30T17:09:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "b363b987ceccf38ca60878a229e160f787bdb1fa4215d478703850cbc3e22b63"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest.lean",
      "start_line": 23,
      "start_column": 77,
      "end_line": 23,
      "end_column": 82
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\n\u22a2 \u2203 c, 0 < c \u2227 \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest.lean#L23"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-04-30T17:09:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "81a5931186b7089ecc923f2bcce571ac124b4c3d375738b37019d4e3ec254ca5"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest.lean",
      "start_line": 27,
      "start_column": 23,
      "end_line": 27,
      "end_column": 28
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC : \u211d := c\u2081 + c\u2082 + 3\n\u22a2 3 < C",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest.lean#L27"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-04-30T17:09:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "749fcac967a87863022ac7518945a1d6ee983b5589975a8dc2c5f5e5436e8a51"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest.lean",
      "start_line": 39,
      "start_column": 41,
      "end_line": 39,
      "end_column": 46
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC : \u211d := c\u2081 + c\u2082 + 3\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nvonManBnd : \u2200 (n : \u2115), ArithmeticFunction.vonMangoldt n \u2264 Real.log \u2191n\nsmooth1BddAbove : \u2200 (n : \u2115), Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1\nsmooth1BddBelow : \u2200 (n : \u2115), Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2265 0\nn : \u2115\nn_le : \u2191n \u2264 X * (1 - c\u2081 * \u03b5)\n\u22a2 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 1",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest.lean#L39"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-04-30T17:09:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "0a0be4d96cb334fe6525368247db72f13928050638ba279728a83f5cc3c16bfb"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest3.lean",
      "start_line": 158,
      "start_column": 4,
      "end_line": 158,
      "end_column": 9
    },
    "debug_info": {
      "goal": "Smooth1 : (\u211d \u2192 \u211d) \u2192 \u211d \u2192 \u211d \u2192 \u211d\nSmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nc\u2081_lt : c\u2081 < 1\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nc\u2082_lt : c\u2082 < 1\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC_gt' : 3 < c\u2081 + c\u2082 + 3\nC : \u211d\nC_eq : C = 2 * (c\u2081 + c\u2082 + 3)\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nthis_1 : 0 < X\nX_ne_zero : X \u2260 0\nn_on_X_pos : \u2200 {n : \u2115}, 0 < n \u2192 0 < \u2191n / X\nsmooth1BddAbove : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1\nsmooth1BddBelow : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2265 0\nsmoothIs1 : \u2200 (n : \u2115), 0 < n \u2192 \u2191n \u2264 X * (1 - c\u2081 * \u03b5) \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 1\nsmoothIs0 : \u2200 (n : \u2115), 1 + c\u2082 * \u03b5 \u2264 \u2191n / X \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 0\nF : \u211d \u2192 \u211d := Smooth1 SmoothingF \u03b5\nn\u2080 : \u2115 := \u230aX * (1 - c\u2081 * \u03b5)\u230b\u208a\nn\u2080_le : \u2191n\u2080 \u2264 X * (1 - c\u2081 * \u03b5)\nn\u2080_gt : X * (1 - c\u2081 * \u03b5) - 1 \u2264 \u2191n\u2080\nsum\u039b : Summable fun n => vonMangoldt n * F (\u2191n / X)\nsum\u039bn\u2080 : \u2200 (n\u2080 : \u2115), Summable fun n => vonMangoldt (n + n\u2080) * F ((\u2191n + \u2191n\u2080) / X)\nn\u2081 : \u2115 := \u2308X * (1 + c\u2082 * \u03b5)\u2309\u208a\nn\u2081_ge : X * (1 + c\u2082 * \u03b5) \u2264 \u2191n\u2081\nn\u2081_le : \u2191n\u2081 < X * (1 + c\u2082 * \u03b5) + 1\nn\u2081_ge_n\u2080 : n\u2080 \u2264 n\u2081\nn\u2081_sub_n\u2080 : \u2191n\u2081 - \u2191n\u2080 < X * \u03b5 * (c\u2082 + c\u2081) + 2\n\u22a2 \u2200 n \u2208 Finset.range (n\u2081 - n\u2080), \u2016vonMangoldt (n + n\u2080)\u2016 \u2264 Real.log (X * (1 + c\u2082 * \u03b5))",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest3.lean#L158"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-05-07T10:17:07-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "28b9e9557cf304c216e35cdca7dc393a453657ed176aed54275e198b8231be8c"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest3.lean",
      "start_line": 164,
      "start_column": 4,
      "end_line": 164,
      "end_column": 9
    },
    "debug_info": {
      "goal": "Smooth1 : (\u211d \u2192 \u211d) \u2192 \u211d \u2192 \u211d \u2192 \u211d\nSmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nc\u2081_lt : c\u2081 < 1\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nc\u2082_lt : c\u2082 < 1\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC_gt' : 3 < c\u2081 + c\u2082 + 3\nC : \u211d\nC_eq : C = 2 * (c\u2081 + c\u2082 + 3)\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nthis_1 : 0 < X\nX_ne_zero : X \u2260 0\nn_on_X_pos : \u2200 {n : \u2115}, 0 < n \u2192 0 < \u2191n / X\nsmooth1BddAbove : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1\nsmooth1BddBelow : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2265 0\nsmoothIs1 : \u2200 (n : \u2115), 0 < n \u2192 \u2191n \u2264 X * (1 - c\u2081 * \u03b5) \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 1\nsmoothIs0 : \u2200 (n : \u2115), 1 + c\u2082 * \u03b5 \u2264 \u2191n / X \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 0\nF : \u211d \u2192 \u211d := Smooth1 SmoothingF \u03b5\nn\u2080 : \u2115 := \u230aX * (1 - c\u2081 * \u03b5)\u230b\u208a\nn\u2080_le : \u2191n\u2080 \u2264 X * (1 - c\u2081 * \u03b5)\nn\u2080_gt : X * (1 - c\u2081 * \u03b5) - 1 \u2264 \u2191n\u2080\nsum\u039b : Summable fun n => vonMangoldt n * F (\u2191n / X)\nsum\u039bn\u2080 : \u2200 (n\u2080 : \u2115), Summable fun n => vonMangoldt (n + n\u2080) * F ((\u2191n + \u2191n\u2080) / X)\nn\u2081 : \u2115 := \u2308X * (1 + c\u2082 * \u03b5)\u2309\u208a\nn\u2081_ge : X * (1 + c\u2082 * \u03b5) \u2264 \u2191n\u2081\nn\u2081_le : \u2191n\u2081 < X * (1 + c\u2082 * \u03b5) + 1\nn\u2081_ge_n\u2080 : n\u2080 \u2264 n\u2081\nn\u2081_sub_n\u2080 : \u2191n\u2081 - \u2191n\u2080 < X * \u03b5 * (c\u2082 + c\u2081) + 2\nvonBnd1 : \u2200 n \u2208 Finset.range (n\u2081 - n\u2080), \u2016vonMangoldt (n + n\u2080)\u2016 \u2264 Real.log (X * (1 + c\u2082 * \u03b5))\n\u22a2 \u2211 n \u2208 Finset.range (n\u2081 - n\u2080), \u2016vonMangoldt (n + n\u2080)\u2016 * \u2016F ((\u2191n + \u2191n\u2080) / X)\u2016 \u2264\n    (\u2191n\u2081 - \u2191n\u2080) * Real.log (X * (1 + c\u2082 * \u03b5))",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest3.lean#L164"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-05-02T22:39:39-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "608ef92d6a9da135d829860c0d94356f843b8b5adffc6b3e9518898b01d5494b"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest3.lean",
      "start_line": 170,
      "start_column": 4,
      "end_line": 170,
      "end_column": 9
    },
    "debug_info": {
      "goal": "Smooth1 : (\u211d \u2192 \u211d) \u2192 \u211d \u2192 \u211d \u2192 \u211d\nSmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nc\u2081_lt : c\u2081 < 1\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nc\u2082_lt : c\u2082 < 1\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC_gt' : 3 < c\u2081 + c\u2082 + 3\nC : \u211d\nC_eq : C = 2 * (c\u2081 + c\u2082 + 3)\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nthis_1 : 0 < X\nX_ne_zero : X \u2260 0\nn_on_X_pos : \u2200 {n : \u2115}, 0 < n \u2192 0 < \u2191n / X\nsmooth1BddAbove : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1\nsmooth1BddBelow : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2265 0\nsmoothIs1 : \u2200 (n : \u2115), 0 < n \u2192 \u2191n \u2264 X * (1 - c\u2081 * \u03b5) \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 1\nsmoothIs0 : \u2200 (n : \u2115), 1 + c\u2082 * \u03b5 \u2264 \u2191n / X \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 0\nF : \u211d \u2192 \u211d := Smooth1 SmoothingF \u03b5\nn\u2080 : \u2115 := \u230aX * (1 - c\u2081 * \u03b5)\u230b\u208a\nn\u2080_le : \u2191n\u2080 \u2264 X * (1 - c\u2081 * \u03b5)\nn\u2080_gt : X * (1 - c\u2081 * \u03b5) - 1 \u2264 \u2191n\u2080\nsum\u039b : Summable fun n => vonMangoldt n * F (\u2191n / X)\nsum\u039bn\u2080 : \u2200 (n\u2080 : \u2115), Summable fun n => vonMangoldt (n + n\u2080) * F ((\u2191n + \u2191n\u2080) / X)\nn\u2081 : \u2115 := \u2308X * (1 + c\u2082 * \u03b5)\u2309\u208a\nn\u2081_ge : X * (1 + c\u2082 * \u03b5) \u2264 \u2191n\u2081\nn\u2081_le : \u2191n\u2081 < X * (1 + c\u2082 * \u03b5) + 1\nn\u2081_ge_n\u2080 : n\u2080 \u2264 n\u2081\nn\u2081_sub_n\u2080 : \u2191n\u2081 - \u2191n\u2080 < X * \u03b5 * (c\u2082 + c\u2081) + 2\nvonBnd1 : \u2200 n \u2208 Finset.range (n\u2081 - n\u2080), \u2016vonMangoldt (n + n\u2080)\u2016 \u2264 Real.log (X * (1 + c\u2082 * \u03b5))\nbnd1 :\n  \u2211 n \u2208 Finset.range (n\u2081 - n\u2080), \u2016vonMangoldt (n + n\u2080)\u2016 * \u2016F ((\u2191n + \u2191n\u2080) / X)\u2016 \u2264\n    (\u2191n\u2081 - \u2191n\u2080) * Real.log (X * (1 + c\u2082 * \u03b5))\n\u22a2 \u2211 x \u2208 Finset.range (\u230aX + 1\u230b\u208a - n\u2080), \u2016vonMangoldt (x + n\u2080)\u2016 \u2264 (\u2191\u230aX + 1\u230b\u208a - \u2191n\u2080) * Real.log (X + 1)",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest3.lean#L170"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-05-02T22:39:39-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "64bac1b21aea07d37c1f874e49f16e3bc0984e378cb44fad05e9ca45885136f6"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/AlphaProofTest3.lean",
      "start_line": 180,
      "start_column": 2,
      "end_line": 180,
      "end_column": 7
    },
    "debug_info": {
      "goal": "Smooth1 : (\u211d \u2192 \u211d) \u2192 \u211d \u2192 \u211d \u2192 \u211d\nSmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nc\u2081_lt : c\u2081 < 1\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nc\u2082_lt : c\u2082 < 1\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC_gt' : 3 < c\u2081 + c\u2082 + 3\nC : \u211d\nC_eq : C = 2 * (c\u2081 + c\u2082 + 3)\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nthis_1 : 0 < X\nX_ne_zero : X \u2260 0\nn_on_X_pos : \u2200 {n : \u2115}, 0 < n \u2192 0 < \u2191n / X\nsmooth1BddAbove : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1\nsmooth1BddBelow : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2265 0\nsmoothIs1 : \u2200 (n : \u2115), 0 < n \u2192 \u2191n \u2264 X * (1 - c\u2081 * \u03b5) \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 1\nsmoothIs0 : \u2200 (n : \u2115), 1 + c\u2082 * \u03b5 \u2264 \u2191n / X \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 0\nF : \u211d \u2192 \u211d := Smooth1 SmoothingF \u03b5\nn\u2080 : \u2115 := \u230aX * (1 - c\u2081 * \u03b5)\u230b\u208a\nn\u2080_le : \u2191n\u2080 \u2264 X * (1 - c\u2081 * \u03b5)\nn\u2080_gt : X * (1 - c\u2081 * \u03b5) - 1 \u2264 \u2191n\u2080\nsum\u039b : Summable fun n => vonMangoldt n * F (\u2191n / X)\nsum\u039bn\u2080 : \u2200 (n\u2080 : \u2115), Summable fun n => vonMangoldt (n + n\u2080) * F ((\u2191n + \u2191n\u2080) / X)\nn\u2081 : \u2115 := \u2308X * (1 + c\u2082 * \u03b5)\u2309\u208a\nn\u2081_ge : X * (1 + c\u2082 * \u03b5) \u2264 \u2191n\u2081\nn\u2081_le : \u2191n\u2081 < X * (1 + c\u2082 * \u03b5) + 1\nn\u2081_ge_n\u2080 : n\u2080 \u2264 n\u2081\nn\u2081_sub_n\u2080 : \u2191n\u2081 - \u2191n\u2080 < X * \u03b5 * (c\u2082 + c\u2081) + 2\nvonBnd1 : \u2200 n \u2208 Finset.range (n\u2081 - n\u2080), \u2016vonMangoldt (n + n\u2080)\u2016 \u2264 Real.log (X * (1 + c\u2082 * \u03b5))\n\u22a2 (\u2191n\u2081 - \u2191n\u2080) * Real.log (X * (1 + c\u2082 * \u03b5)) + (\u2191\u230aX + 1\u230b\u208a - \u2191n\u2080) * Real.log (X + 1) \u2264 C * \u03b5 * X * Real.log X",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest3.lean#L180"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-05-02T22:39:39-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "ce94bc231208aa109bbdc0d515ab47ba1794b51af37e41b87cf30dfb0fab2b48"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/ZetaBounds.lean",
      "start_line": 2617,
      "start_column": 2,
      "end_line": 2617,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case h\nA : \u211d\nhA : A \u2208 Ioc 0 (1 / 2)\nh\u271d :\n  \u2203 C,\n    \u2203 (_ : 0 < C),\n      \u2200 (\u03c3 t : \u211d),\n        3 < |t| \u2192\n          \u03c3 \u2208 Ico (1 - A / Real.log |t| ^ 9) 1 \u2192\n            \u2016deriv riemannZeta (\u2191\u03c3 + \u2191t * I) / riemannZeta (\u2191\u03c3 + \u2191t * I)\u2016 \u2264 C * Real.log |t| ^ 9\nT : \u211d\nT_gt : 3 < T\n\u22a2 HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (Ioc (1 - A / Real.log T ^ 9) 2 \u00d7\u2102 Icc (-T) T \\ {1})",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/ZetaBounds.lean#L2617"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-03-07T16:45:37-05:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "2d6fdacb880cb5784783f04ee6a96909077056e09fe07d292dde774b5d15944b"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
      "start_line": 369,
      "start_column": 2,
      "end_line": 369,
      "end_column": 7
    },
    "debug_info": {
      "goal": "Smooth1 : (\u211d \u2192 \u211d) \u2192 \u211d \u2192 \u211d \u2192 \u211d\nSmoothingF : \u211d \u2192 \u211d\nc\u2081 : \u211d\nc\u2081_pos : 0 < c\u2081\nhc\u2081 : \u2200 (\u03b5 x : \u211d), 0 < \u03b5 \u2192 0 < x \u2192 x \u2264 1 - c\u2081 * \u03b5 \u2192 Smooth1 SmoothingF \u03b5 x = 1\nc\u2082 : \u211d\nc\u2082_pos : 0 < c\u2082\nhc\u2082 : \u2200 (\u03b5 x : \u211d), \u03b5 \u2208 Ioo 0 1 \u2192 1 + c\u2082 * \u03b5 \u2264 x \u2192 Smooth1 SmoothingF \u03b5 x = 0\nC_gt' : 3 < c\u2081 + c\u2082 + 3\nC : \u211d\nC_eq : C = c\u2081 + c\u2082 + 3\nC_gt : 3 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\nthis_1 : 0 < X\nthis : X \u2260 0\nn_on_X_pos : \u2200 {n : \u2115}, 0 < n \u2192 0 < \u2191n / X\nsmooth1BddAbove : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2264 1\nsmooth1BddBelow : \u2200 (n : \u2115), 0 < n \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) \u2265 0\nsmoothIs1 : \u2200 (n : \u2115), 0 < n \u2192 \u2191n \u2264 X * (1 - c\u2081 * \u03b5) \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 1\nsmoothIs0 : \u2200 (n : \u2115), 1 + c\u2082 * \u03b5 \u2264 \u2191n / X \u2192 Smooth1 SmoothingF \u03b5 (\u2191n / X) = 0\n\u22a2 \u2016\u2191(\u2211' (n : \u2115), ArithmeticFunction.vonMangoldt n * Smooth1 SmoothingF \u03b5 (\u2191n / X)) -\n        \u2191((Finset.range \u230aX + 1\u230b\u208a).sum \u21d1ArithmeticFunction.vonMangoldt)\u2016 \u2264\n    C * \u03b5 * X * Real.log X",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/MediumPNT.lean#L369"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-05-02T22:39:39-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "2df7090cff040850fa37ab440035e62834096330d82b2330cda1f505316558c9"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
      "start_line": 471,
      "start_column": 2,
      "end_line": 471,
      "end_column": 7
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\n\u03b5 : \u211d\n\u03b5_pos : 0 < \u03b5\nX \u03c3\u2080 : \u211d\n\u03c3\u2080_pos : 0 < \u03c3\u2080\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) (Icc \u03c3\u2080 2 \u00d7\u2102 univ \\ {1})\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\n\u22a2 Integrable (fun t => SmoothedChebyshevIntegrand SmoothingF \u03b5 X (2 + \u2191t * I)) volume",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/MediumPNT.lean#L471"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-02-28T10:57:09-05:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "7dcd5128e4cd1bfa3c0522981f901d7bb5ee85f3f23b7ad3897b299964a4471b"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
      "start_line": 503,
      "start_column": 2,
      "end_line": 503,
      "end_column": 7
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\n\u03b5 : \u211d\n\u03b5_pos : 0 < \u03b5\nX T : \u211d\nT_pos : 0 < T\n\u03c3\u2080 : \u211d\n\u03c3\u2080_pos : 0 < \u03c3\u2080\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) (Icc \u03c3\u2080 2 \u00d7\u2102 univ \\ {1})\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\n\u22a2 Integrable (fun t => SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191(1 + (Real.log X)\u207b\u00b9) + \u2191t * I)) volume",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/MediumPNT.lean#L503"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-03-07T17:04:05-05:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "14aa1c60f86cca8ead6c81052865a6efd8540b35f89939a8579dccafa30c463a"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
      "start_line": 509,
      "start_column": 2,
      "end_line": 509,
      "end_column": 7
    },
    "debug_info": {
      "goal": "SmoothingF : \u211d \u2192 \u211d\n\u03b5 : \u211d\n\u03b5_pos : 0 < \u03b5\nX T : \u211d\nT_pos : 0 < T\n\u03c3\u2080 : \u211d\n\u03c3\u2080_pos : 0 < \u03c3\u2080\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) (Icc \u03c3\u2080 2 \u00d7\u2102 univ \\ {1})\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\n\u22a2 (1 / (2 * \u2191Real.pi * I)) \u2022\n      ((I \u2022 \u222b (t : \u211d) in Iic (-T), SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191(1 + (Real.log X)\u207b\u00b9) + \u2191t * I)) +\n          VIntegral (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) (1 + (Real.log X)\u207b\u00b9) (-T) T +\n        I \u2022 \u222b (t : \u211d) in Ici T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191(1 + (Real.log X)\u207b\u00b9) + \u2191t * I)) =\n    1 / (2 * \u2191Real.pi * I) *\n        (((((I * \u222b (t : \u211d) in Iic (-T), SmoothedChebyshevIntegrand SmoothingF \u03b5 X (1 + \u2191(Real.log X)\u207b\u00b9 + \u2191t * I)) -\n                \u222b (s : \u211d) in Icc \u03c3\u2080 (1 + (Real.log X)\u207b\u00b9), SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191s - \u2191T * I)) +\n              I * \u222b (t : \u211d) in Icc (-T) T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191\u03c3\u2080 + \u2191t * I)) +\n            \u222b (s : \u211d) in Icc \u03c3\u2080 (1 + (Real.log X)\u207b\u00b9), SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191s + \u2191T * I)) +\n          I * \u222b (t : \u211d) in Ici T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (1 + \u2191(Real.log X)\u207b\u00b9 + \u2191t * I)) +\n      MellinTransform (fun x => \u2191(Smooth1 SmoothingF \u03b5 x)) 1 * \u2191X",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/MediumPNT.lean#L509"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-02-10T12:59:29-05:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "5d18f0792d8ba46431457ddf3b8689dce481c3706776a8b6789f2cd3d76779bf"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
      "start_line": 579,
      "start_column": 2,
      "end_line": 579,
      "end_column": 7
    },
    "debug_info": {
      "goal": "c : \u211d := sorry\ncpos : 0 < c\nC : \u211d := sorry\nX\u2080 : \u211d := sorry\nX : \u211d\nX_ge_X\u2080 : X \u2265 X\u2080\n\u22a2 \u2016(ChebyshevPsi - id) X\u2016 \u2264 C * \u2016X * Real.exp (-c * Real.log X ^ (1 / 10))\u2016",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/MediumPNT.lean#L579"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2024-03-11T23:23:22-04:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "fa45b339aa0e7dcce091b6372bd54c246ca1778dd0551b28dc42d1fff013fa51"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
      "start_line": 569,
      "start_column": 23,
      "end_line": 569,
      "end_column": 28
    },
    "debug_info": {
      "goal": "c : \u211d := sorry\n\u22a2 0 < c",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/MediumPNT.lean#L569"
    },
    "metadata": {
      "blame_email_hash": "4bcdc021face",
      "blame_date": "2025-02-14T15:25:09-05:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "0dd2d532c038754930a6fde16ec84ecd87baa418fe48e6d2a7d0d6b8c58b4435"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/Consequences.lean",
      "start_line": 1844,
      "start_column": 2,
      "end_line": 1844,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u22a2 \u2203 c, (c =o[atTop] fun x => 1) \u2227 \u2200 (n : \u2115), \u2191(nth Nat.Prime n) = (1 + c n) * \u2191n * log \u2191n",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/Consequences.lean#L1844"
    },
    "metadata": {
      "blame_email_hash": "11451cd2f124",
      "blame_date": "2024-02-19T02:44:41-08:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "503bbb1a8d050d674a1022df9c2b422230f7cbbb09dcaba26ad7bec142948b00"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/Consequences.lean",
      "start_line": 2575,
      "start_column": 81,
      "end_line": 2575,
      "end_column": 86
    },
    "debug_info": {
      "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, moebius n) =o[atTop] fun x => x",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/Consequences.lean#L2575"
    },
    "metadata": {
      "blame_email_hash": "5ecb8fcfe98c",
      "blame_date": "2025-02-06T17:41:08+01:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "6ba709359dbcf67a047700f6cb5305713bf9fffb112e3b67661f5b55a0a39f93"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/Consequences.lean",
      "start_line": 2611,
      "start_column": 2,
      "end_line": 2611,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, (-1) ^ cardFactors n) =o[atTop] fun x => x",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/Consequences.lean#L2611"
    },
    "metadata": {
      "blame_email_hash": "11451cd2f124",
      "blame_date": "2024-02-19T02:44:41-08:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "839ece4b6f43eef5cc2b6909605ee8ea3ff227bdfd58f7cbf910cf595734ddaa"
  },
  {
    "repo": {
      "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "branch": "AK_work",
      "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "PrimeNumberTheoremAnd/Consequences.lean",
      "start_line": 2635,
      "start_column": 98,
      "end_line": 2635,
      "end_column": 103
    },
    "debug_info": {
      "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, \u2191(moebius n) / \u2191n) =o[atTop] fun x => 1",
      "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/Consequences.lean#L2635"
    },
    "metadata": {
      "blame_email_hash": "5ecb8fcfe98c",
      "blame_date": "2025-02-06T17:41:08+01:00",
      "inclusion_date": "2025-05-15T21:05:02.976307+00:00"
    },
    "id": "ad3d303bd5bc1cda1f0185bfbfce6d80f21788b3658c2a2672d949f216140b5f"
  }
]