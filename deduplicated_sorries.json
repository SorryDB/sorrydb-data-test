[
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/EasyDirection.lean",
      "start_line": 24,
      "start_column": 20,
      "end_line": 24,
      "end_column": 25
    },
    "debug_info": {
      "goal": "case cographic\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nM M\u271d : Matroid \u03b1\nhM : M\u271d.IsCographic\n\u22a2 M\u271d.IsRegular",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/EasyDirection.lean#L24"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-17T15:49:08+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "6f11a0b58fbcad4d71c07d723ef37f825b4b85e3c50225fe8ce5f90081fe372c"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/HardDirection.lean",
      "start_line": 8,
      "start_column": 2,
      "end_line": 8,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nM : Matroid \u03b1\nhM : M.IsRegular\n\u22a2 M.IsGood",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/HardDirection.lean#L8"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-02-13T12:19:44+01:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "314111654a3d06a1a1f1a56a903452e82a0d19da5d5f42be1257c3ab7afcc0ca"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum1.lean",
      "start_line": 60,
      "start_column": 6,
      "end_line": 60,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case h.mp\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set \u03b1\nhI : I \u2286 (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  I \u2286 (standardRepr1sumComposition hXY hYX).1.X \u222a (standardRepr1sumComposition hXY hYX).1.Y \u2227\n    LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb (standardRepr1sumComposition hXY hYX).1.B) x \u2218 Subtype.toSum)\n      (Subtype.val \u207b\u00b9' I)\n\u22a2 (True \u2227\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u2097.B) x \u2218 Subtype.toSum) (Subtype.val \u207b\u00b9' (I \u2229 (S\u2097.X \u222a S\u2097.Y)))) \u2227\n    (True \u2227\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u1d63.B) x \u2218 Subtype.toSum)\n          (Subtype.val \u207b\u00b9' (I \u2229 (S\u1d63.X \u222a S\u1d63.Y)))) \u2227\n      I \u2286 S\u2097.X \u222a S\u2097.Y \u222a (S\u1d63.X \u222a S\u1d63.Y)",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum1.lean#L60"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-02-15T17:08:53+01:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "6be51853771be67f7185222489c2a65373f67c616cf20fae5d335d1eb6858a25"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum1.lean",
      "start_line": 62,
      "start_column": 6,
      "end_line": 62,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case right\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set \u03b1\nhI : I \u2286 (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  (True \u2227\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u2097.B) x \u2218 Subtype.toSum) (Subtype.val \u207b\u00b9' (I \u2229 (S\u2097.X \u222a S\u2097.Y)))) \u2227\n    (True \u2227\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u1d63.B) x \u2218 Subtype.toSum)\n          (Subtype.val \u207b\u00b9' (I \u2229 (S\u1d63.X \u222a S\u1d63.Y)))) \u2227\n      I \u2286 S\u2097.X \u222a S\u2097.Y \u222a (S\u1d63.X \u222a S\u1d63.Y)\n\u22a2 LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb (standardRepr1sumComposition hXY hYX).1.B) x \u2218 Subtype.toSum)\n    (Subtype.val \u207b\u00b9' I)",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum1.lean#L62"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-02-15T17:08:53+01:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "23ffb195461132c929e2fdba15c86fd7ac7a2cc096b59ba2c177fac512f28592"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "main",
      "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 446,
      "start_column": 2,
      "end_line": 446,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nX Y : Set \u03b1\nQ : Matrix \u2191X \u2191Y \u211a\nx' y\u2080 y\u2081 : \u03b1\nhQ : Q.IsTotallyUnimodular\nhx' : x' \u2208 X\nhy\u2080 : y\u2080 \u2208 Y\nhy\u2081 : y\u2081 \u2208 Y\nhyy : y\u2080 \u2260 y\u2081\nhQy\u2080 : Q \u27e8x', hx'\u27e9 \u27e8y\u2080, hy\u2080\u27e9 = 1\nhQy\u2081 : Q \u27e8x', hx'\u27e9 \u27e8y\u2081, hy\u2081\u27e9 = 1\nhQy : \u2200 (y : \u2191Y), \u2191y \u2260 y\u2080 \u2227 \u2191y \u2260 y\u2081 \u2192 Q \u27e8x', hx'\u27e9 y = 0\n\u22a2 let c\u2080 := fun j => Q (\u22ef.elem j) \u27e8y\u2080, hy\u2080\u27e9;\n  let c\u2081 := fun j => Q (\u22ef.elem j) \u27e8y\u2081, hy\u2081\u27e9;\n  let Q' := Q.submatrix \u22ef.elem \u22ef.elem;\n  (Q' \u25eb \u25aec\u2080 \u25eb \u25aec\u2081 \u25eb \u25ae(c\u2080 - c\u2081)).IsTotallyUnimodular",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L446"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
    },
    "id": "429799f4e3b1e04f23af2a35557b3f848631a0652a62d962dd8d31502554ff90"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "main",
      "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 640,
      "start_column": 2,
      "end_line": 640,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  D =\n    (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n      (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L640"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
    },
    "id": "690c78822fa6e7ef8386935e976ac323da917650b794d0aaa94461617fa2700f"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "main",
      "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 729,
      "start_column": 2,
      "end_line": 729,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  \u2200 (i : \u2191(X\u1d63 \\ {x'})), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L729"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
    },
    "id": "cb2584c0dd84e62d560f3a126bd33b3129dd4ff1f51f0382dc5b61f970b87067"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "main",
      "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 818,
      "start_column": 2,
      "end_line": 818,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  \u2200 (j : \u2191(Y\u2097 \\ {y'})),\n    (fun x => D x j) = c\u2080 \u2228\n      (fun x => D x j) = -c\u2080 \u2228\n        (fun x => D x j) = c\u2081 \u2228\n          (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L818"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
    },
    "id": "e3f51d8945dabb8fbd0a5e82a7aae928c7ddf8c1c547392dc82a6c40bd9cad23"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "main",
      "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 907,
      "start_column": 2,
      "end_line": 907,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  (A\u1d63 \u25eb D).IsTotallyUnimodular",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L907"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
    },
    "id": "1f0883d9f106b8938e9f6e43961f0a7249dce894331d4961a6c8c4ea3c9864a5"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "main",
      "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 996,
      "start_column": 2,
      "end_line": 996,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  (A\u2097 \u229f D).IsTotallyUnimodular",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L996"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
    },
    "id": "116de01ff2b0257b395c9b107da9c556ee9ecd3a8428f071b5672fbdfa04e823"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "main",
      "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 1060,
      "start_column": 2,
      "end_line": 1060,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case intro.intro.intro.intro\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nB\u2097 : Matrix \u2191S\u2097.X \u2191S\u2097.Y \u211a\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhBB\u2097 : B\u2097.IsSigningOf S\u2097.B\nB\u1d63 : Matrix \u2191S\u1d63.X \u2191S\u1d63.Y \u211a\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\nhBB\u1d63 : B\u1d63.IsSigningOf S\u1d63.B\n\u22a2 (standardRepr3sumComposition_standard hXX hYY hXY hYX).1.B.HasTuSigning",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L1060"
    },
    "metadata": {
      "blame_email_hash": "1f3d9a693291",
      "blame_date": "2025-04-10T17:54:51+02:00",
      "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
    },
    "id": "bcc918ff93ca21eafc49ff7367831aa26042190cd694b3309b259ba5c3c3cd44"
  },
  {
    "repo": {
      "remote": "https://github.com/katydid/regex-deriv-lean",
      "branch": "main",
      "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
      "lean_version": "v4.14.0"
    },
    "location": {
      "path": "Katydid/Regex/Smart/SmartPropOr.lean",
      "start_line": 341,
      "start_column": 2,
      "end_line": 341,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nneq : x \u2260 y\n\u22a2 x < y \u2228 x > y",
      "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L341"
    },
    "metadata": {
      "blame_email_hash": "e3e649d9026a",
      "blame_date": "2025-05-19T15:53:17+02:00",
      "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
    },
    "id": "f5aa64966ef657cc819e5e3a94eaf73206e25eac52c6211b69539007e9af7d6b"
  },
  {
    "repo": {
      "remote": "https://github.com/katydid/regex-deriv-lean",
      "branch": "main",
      "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
      "lean_version": "v4.14.0"
    },
    "location": {
      "path": "Katydid/Regex/Smart/SmartPropOr.lean",
      "start_line": 389,
      "start_column": 2,
      "end_line": 389,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : Regex.notOr y\n\u22a2 OrIsSmart (insertOr x y)",
      "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L389"
    },
    "metadata": {
      "blame_email_hash": "e3e649d9026a",
      "blame_date": "2025-05-19T15:53:17+02:00",
      "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
    },
    "id": "556213af6d62a5dc3a2c50222b82a8c4361c5452f114946c826a99a30d7e2e83"
  },
  {
    "repo": {
      "remote": "https://github.com/katydid/regex-deriv-lean",
      "branch": "main",
      "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
      "lean_version": "v4.14.0"
    },
    "location": {
      "path": "Katydid/Regex/Smart/SmartPropOr.lean",
      "start_line": 394,
      "start_column": 2,
      "end_line": 394,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : OrIsSmart y\n\u22a2 OrIsSmart (mergeOr x y)",
      "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L394"
    },
    "metadata": {
      "blame_email_hash": "e3e649d9026a",
      "blame_date": "2025-05-15T15:28:17+02:00",
      "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
    },
    "id": "d03824fe8e5542a27c2ef5fdcce8ffaca864d633f564122920b4432eaa85c82b"
  },
  {
    "repo": {
      "remote": "https://github.com/katydid/regex-deriv-lean",
      "branch": "main",
      "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
      "lean_version": "v4.14.0"
    },
    "location": {
      "path": "Katydid/Regex/Smart/SmartPropOr.lean",
      "start_line": 399,
      "start_column": 2,
      "end_line": 399,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : OrIsSmart y\n\u22a2 OrIsSmart (smartOr x y)",
      "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L399"
    },
    "metadata": {
      "blame_email_hash": "e3e649d9026a",
      "blame_date": "2025-05-15T15:28:17+02:00",
      "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
    },
    "id": "38e3014f89189364f6ecdfc2980c13019738ee80663f7bf782b6d46b6cb19937"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/Regev.lean",
      "start_line": 433,
      "start_column": 2,
      "end_line": 433,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst\u271d \u03c7 he)\n\u22a2 |[=true|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).exec do\n              let b \u2190\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).lift_probComp\n                    ($\u1d57Bool)\n              let __discr \u2190 keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal -\n        [=false|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).exec\n              do\n              let b \u2190\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).lift_probComp\n                    ($\u1d57Bool)\n              let __discr \u2190 keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr fun m\u2081 m\u2082 st =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2082\n                    __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr fun m\u2081 m\u2082 st =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2082\n                    __do_jp y].toReal| +\n      |[=true|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr\n                            fun m\u2081 m\u2082 st =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr\n                            fun m\u2081 m\u2082 st =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal|",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/Regev.lean#L433"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-27T11:58:04-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "ab802c6afff31144c950eead790bb136dcfbd1a39feaba2d4565586818fb8f9e"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/Regev.lean",
      "start_line": 494,
      "start_column": 2,
      "end_line": 494,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst\u271d \u03c7 he)\n\u22a2 |(2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal -\n        (2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal| +\n      |[=true|do\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let r2 \u2190 $\u1d57Vector (Fin 2) m\n              let b \u2190 $\u1d57Bool\n              let A_1 \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u_1 \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A_1, u_1)\n              (fun a => decide (b = a)) <$>\n                  adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) r2).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) r2).get)].toReal -\n          [=true|do\n              let x \u2190 $\u1d57Vector (Fin p) n\n              let y \u2190 $\u1d57Fin p\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (x, y)].toReal|",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/Regev.lean#L494"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-27T11:58:04-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "a180805320b13f4ff5c1dce9150a129faffcc7d141eb46638c7c3899571ba41b"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/FrankingProtocol.lean",
      "start_line": 223,
      "start_column": 2,
      "end_line": 223,
      "end_column": 7
    },
    "debug_info": {
      "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/FrankingProtocol.lean#L223"
    },
    "metadata": {
      "blame_email_hash": "f78b4540360d",
      "blame_date": "2025-02-05T21:14:45-06:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "ecd13b80d76640635d045dabccc8675a6b8e6f3a5b4704475d88299cbdc79830"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/FrankingProtocol.lean",
      "start_line": 257,
      "start_column": 2,
      "end_line": 257,
      "end_column": 7
    },
    "debug_info": {
      "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n            else {none},\n          OracleComp.neverFails\n              (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                (fun _ => pure none) fun verified_msg =>\n                pure\n                  (some\n                    (SimulationData.mk verified_msg\n                      (MessagePackage.mk\n                        (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                        (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                        (ReportingTag.mk\n                          (mock_hmac_sha256 (123456789#256)\n                            (string_to_bitvec\n                              (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                (bitvec_to_string 1730230302#256)))))\n                        (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                      123456789#256))) \u2227\n            \u2200\n              x_2 \u2208\n                OracleComp.support\n                  (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))),\n              OracleComp.neverFails\n                (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag (MessagePackage.reporting_tag (SimulationData.message_package data)))))) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                          x))\n                  else pure none\n              let maybeData \u2190\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content a).1, a)).1\n                          a))\n                  else pure none\n              let maybeData \u2190\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content a).1))\n                            (FrankingTag.mk (mock_hmac_sha256 a (serialize_message_data message_content a).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) a)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/FrankingProtocol.lean#L257"
    },
    "metadata": {
      "blame_email_hash": "f78b4540360d",
      "blame_date": "2025-02-05T21:14:45-06:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "e6c97bdc7d25723987af1c47fa0c88c1ae284ee314086ab333c4a6ca421790fe"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/FrankingProtocol.lean",
      "start_line": 269,
      "start_column": 2,
      "end_line": 269,
      "end_column": 7
    },
    "debug_info": {
      "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n          else {none},\n        OracleComp.neverFails\n            (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n              (fun _ => pure none) fun verified_msg =>\n              pure\n                (some\n                  (SimulationData.mk verified_msg\n                    (MessagePackage.mk (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                      (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                      (ReportingTag.mk\n                        (mock_hmac_sha256 (123456789#256)\n                          (string_to_bitvec\n                            (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                              (bitvec_to_string 1730230302#256)))))\n                      (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                    123456789#256))) \u2227\n          \u2200\n            x_2 \u2208\n              OracleComp.support\n                (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                  (fun _ => pure none) fun verified_msg =>\n                  pure\n                    (some\n                      (SimulationData.mk verified_msg\n                        (MessagePackage.mk\n                          (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                          (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                          (ReportingTag.mk\n                            (mock_hmac_sha256 (123456789#256)\n                              (string_to_bitvec\n                                (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                  (bitvec_to_string 1730230302#256)))))\n                          (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                        123456789#256))),\n            OracleComp.neverFails\n              (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                (fun _ => pure true) fun val => pure false)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/FrankingProtocol.lean#L269"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-09T11:17:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "09692b72302cb7b792d4aac326df59cc1b404c7a702c324a5012be43630874ee"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/FrankingProtocol.lean",
      "start_line": 290,
      "start_column": 2,
      "end_line": 290,
      "end_column": 7
    },
    "debug_info": {
      "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n      else pure none).neverFails",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/FrankingProtocol.lean#L290"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-09T11:17:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "bb798511e425087d71c18728b72b228a88d840fcadd07d898d66c06895f9be17"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/HHS_Elgamal.lean",
      "start_line": 28,
      "start_column": 2,
      "end_line": 28,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\ninst\u271d : spec.FiniteRange\n\u03b1 \u03b2 \u03b3 \u03b4 \u03b5 : Type\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\noc : OracleComp spec \u03b3\nod : OracleComp spec \u03b4\noe : \u03b1 \u2192 \u03b2 \u2192 \u03b3 \u2192 \u03b4 \u2192 OracleComp spec \u03b5\nz : \u03b5\n\u22a2 [=z|do\n      let a \u2190 oa\n      let b \u2190 ob\n      let c \u2190 oc\n      let d \u2190 od\n      oe a b c d] =\n    [=z|do\n      let d \u2190 od\n      let a \u2190 oa\n      let b \u2190 ob\n      let c \u2190 oc\n      oe a b c d]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/HHS_Elgamal.lean#L28"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "db1330ac3bf201eaf56a8497540ffde5b0fa3fac0dfde1efa5932da249128f0d"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/HHS_Elgamal.lean",
      "start_line": 33,
      "start_column": 2,
      "end_line": 33,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\noa : Bool \u2192 ProbComp \u03b1\nx : \u03b1\n\u22a2 [=x|$\u1d57Bool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/HHS_Elgamal.lean#L33"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "e46e871547643439a4036995af126ddf520682009071bcf9d3ce0f3055e79252"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/HHS_Elgamal.lean",
      "start_line": 93,
      "start_column": 4,
      "end_line": 93,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst\u271d\u2076 inst\u271d\u2075 AddCommGroup.toAddGroup inst\u271d\u00b3 inst\u271d\u00b2)\nx : P\ng\u2081 : G\n\u22a2 [=()|do\n      let a \u2190\n        (simulateQ\n                (idOracle ++\u209b\u2092\n                  {\n                      impl := fun {\u03b1} x_1 =>\n                        match \u03b1, x_1 with\n                        | .((P \u00d7 P \u2192\u2092 P \u00d7 P).range ()), query PUnit.unit (m\u2081, m\u2082) =>\n                          (fun a => (a +\u1d65 x, m\u2081 * (a +\u1d65 g\u2081 +\u1d65 x))) <$> ($\u1d57G) }.withCaching)\n                (adversary (x, g\u2081 +\u1d65 x))).run\n            \u2205\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let b' \u2190\n        simulateQ\n            (idOracle ++\u209b\u2092\n              {\n                impl := fun {\u03b1} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun \u03b1 x => ProbComp \u03b1) \u03b1 x_1\n                    fun m\u2081 _m\u2082 => pure (c +\u1d65 x, m\u2081 * (c +\u1d65 g\u2081 +\u1d65 x)) })\n            (adversary (x, g\u2081 +\u1d65 x))\n      if b' = true then pure () else failure]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/HHS_Elgamal.lean#L93"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "5083a5a0aa026816f5ca2af7316116de075804642c887dcb8a34093991a93e64"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Examples/HHS_Elgamal.lean",
      "start_line": 98,
      "start_column": 4,
      "end_line": 98,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst\u271d\u2076 inst\u271d\u2075 AddCommGroup.toAddGroup inst\u271d\u00b3 inst\u271d\u00b2)\nx : P\ng\u2081 : G\n\u22a2 [=()|do\n      let a \u2190\n        (simulateQ\n                (idOracle ++\u209b\u2092\n                  {\n                      impl := fun {\u03b1} x_1 =>\n                        match \u03b1, x_1 with\n                        | .((P \u00d7 P \u2192\u2092 P \u00d7 P).range ()), query PUnit.unit (m\u2081, m\u2082) =>\n                          (fun a => (a +\u1d65 x, m\u2082 * (a +\u1d65 g\u2081 +\u1d65 x))) <$> ($\u1d57G) }.withCaching)\n                (adversary (x, g\u2081 +\u1d65 x))).run\n            \u2205\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let y \u2190 $\u1d57P\n      let b' \u2190\n        simulateQ\n            (idOracle ++\u209b\u2092\n              {\n                impl := fun {\u03b1} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun \u03b1 x => ProbComp \u03b1) \u03b1 x_1\n                    fun m\u2081 _m\u2082 => pure (c +\u1d65 x, m\u2081 * y) })\n            (adversary (x, g\u2081 +\u1d65 x))\n      if b' = false then pure () else failure]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/HHS_Elgamal.lean#L98"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "6024d61645870d8be02252e425a57e1a63a3f702c8b8bf184a22f9989522665d"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Traversal.lean",
      "start_line": 83,
      "start_column": 4,
      "end_line": 83,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        ((x : \u03b1) \u2192\n          (x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs) \u2192\n            @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x))\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          ((x_1 : \u03b1) \u2192\n            x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x) \u2192\n              @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1))) \u2194\n    (Q (query i t) \u2227\n        ((x : spec.range i) \u2192\n          x \u2208 possible_outputs (query i t) \u2192\n            @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x))) \u2227\n      ((x : \u03b1) \u2192\n        (x_1 : spec.range i) \u2192\n          x_1 \u2208 possible_outputs (query i t) \u2192\n            x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n              @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x))",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Traversal.lean#L83"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "747ab189c36765a871a35cf51b18a120e7d3f2a3b1f345ca4b81e7ab19246f0d"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/QueryBound.lean",
      "start_line": 49,
      "start_column": 2,
      "end_line": 49,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryBound.lean#L49"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "0fdc8f68702bb333ef2fc54454bafff3c032a6dd9629240eb252816c7ccb41d9"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 27,
      "start_column": 2,
      "end_line": 27,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L27"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "d0542739f758131dcb6d0a8f66bcee211f737247bb075c6321961b8aefeb4ec5"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 32,
      "start_column": 2,
      "end_line": 32,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nx : \u03b1\ny : \u03b2\n\u22a2 [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L32"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "4b234ef72c9a9ea4834dd69731a213928f04ca04ad376710f2f6b7f47f2ef9b0"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 38,
      "start_column": 2,
      "end_line": 38,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L38"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "7207ac74bb6e72a103b75a06aac8144c53e55dfc01279c1bfd0e32eaa5829191"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 44,
      "start_column": 2,
      "end_line": 44,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L44"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "3ac3843ce28131dfaa1aad23957312b6f0359b79df92e66892c9ada0736752fe"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 50,
      "start_column": 2,
      "end_line": 50,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L50"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "e7c5a26a2602c4c37fbc270a8f26b8be912011589e15bcad99c38078a3b29a76"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 57,
      "start_column": 2,
      "end_line": 57,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L57"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "075642ce9bf7341c73f719646cda46fa999822788a090c9e781c0509126722b2"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 67,
      "start_column": 2,
      "end_line": 67,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L67"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "6461eac217afba45cccd16549ef6b562f74459e59868f84d5b2a724e2d4ace9d"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 77,
      "start_column": 2,
      "end_line": 77,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ny : \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L77"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "6d04f5357de8b15bfeb2333ccbe537e2992f78ece6642fbfa645d147bd8e9c18"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 82,
      "start_column": 2,
      "end_line": 82,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nx : \u03b1\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L82"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "c13447a0f5efe7cead4700efe5a2546947c79efc13beb12a5b4090a7009bdc6e"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 88,
      "start_column": 2,
      "end_line": 88,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b3\ny : \u03b2\nz : \u03b3 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L88"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "6f4adfde40e1b9aa23dd6034458e7fa5621fff95e3d4df0ff07e80d5cfefe0f9"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 94,
      "start_column": 2,
      "end_line": 94,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nf : \u03b2 \u2192 \u03b3\nx : \u03b1\nz : \u03b1 \u00d7 \u03b3\n\u22a2 [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L94"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "77d9335e4a12568a4bdc4a3815ce2a412cbaeeae4af424991d63c559eb03b321"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 150,
      "start_column": 2,
      "end_line": 150,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf).support =\n    (fun s => (s, s)) '' (cf <$> main).support",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L150"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "ff9e0a3be8697bea93780a711fd159bfc2b8c41025488d04a6cb758867f82f52"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 154,
      "start_column": 2,
      "end_line": 154,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf).finSupport =\n    Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L154"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "b607ef126c3c533e83d2ea2c73a3de1bae4f9e2d472ac7f042ca46ab540fb249"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 158,
      "start_column": 2,
      "end_line": 158,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 support (OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf)\n\u22a2 cf x\u2081 = cf x\u2082",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L158"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "5ac77fa5375a64983edc657442bac1f51d30916aeef262e50906693d82103bca"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 162,
      "start_column": 2,
      "end_line": 162,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(none, s)|Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf] = 0",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L162"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "21549bc4569044e29779fe868e6cb454326a1fc72a331ee7836db7289b5fbb56"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 166,
      "start_column": 2,
      "end_line": 166,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(s, none)|Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf] = 0",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L166"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "5eff346b67338fb611a2ec2e964f558a63c49d019d3fad50cae07b0d85ed0f9b"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 177,
      "start_column": 2,
      "end_line": 177,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 support (OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf)\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L177"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "59a41fe1531ba0bfa9f76802dd5b5cf6578c1f48fdbf8beb7434e975f338924a"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 280,
      "start_column": 10,
      "end_line": 280,
      "end_column": 15
    },
    "debug_info": {
      "goal": "case e_a\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] =\n    [=(some s, some s)|do\n      let shared_seed \u2190 liftM (generateSeed spec (update qb i \u2191s) js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n      let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n      pure (cf x\u2081, cf x\u2082)]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L280"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "737bd903487f7685a856969c7aa3cb4fafac9e4e941a98b50f20559483751383"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 282,
      "start_column": 53,
      "end_line": 282,
      "end_column": 58
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed \u2208 (liftM (generateSeed spec qb js)).support\n\u22a2 \u2191(s + 1) < (seed i).length",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L282"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "eabef388b95902fed84eb337a9685d4014f29a6508aeab28f160f1e08686b6e2"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 382,
      "start_column": 6,
      "end_line": 382,
      "end_column": 11
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 \u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h \u2264\n    \u2211 s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L382"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "6db888ffca87e303ead9161404b645e8d2cb814bcfadc1f25ca8d9835467d8ec"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 384,
      "start_column": 6,
      "end_line": 384,
      "end_column": 11
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h) =\n    1 - \u2211 s, [=some s|cf <$> main] ^ 2 + \u2211 s, [=some s|cf <$> main] / h",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L384"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "7776b098a4982a6af9ea225c25a7547412d5ede52b4fa85b18bc3f4426454457"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/Fork.lean",
      "start_line": 404,
      "start_column": 8,
      "end_line": 404,
      "end_column": 13
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 acc * h\u207b\u00b9 + (1 - acc ^ 2 * (\u2191q)\u207b\u00b9) = 1 - (acc ^ 2 * (\u2191q)\u207b\u00b9 - acc * h\u207b\u00b9)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L404"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "ff3544f30b78fc14066266ac57b69cb4a825c5d4ff810b2a2eeecf7072000e18"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
      "start_line": 66,
      "start_column": 2,
      "end_line": 66,
      "end_column": 7
    },
    "debug_info": {
      "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : @SymmEncAlg m M K C\ninst\u271d : @SymmEncAlg.Complete m M K C inst\u271d\u2075 encAlg\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 @SymmEncAlg.perfectSecrecy m M K C inst\u271d\u2075 encAlg \u2194\n    (\u2200 (k : K),\n        [=k|ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg) (@SymmEncAlg.keygen m M K C encAlg)] =\n          (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C),\n        \u2203! k,\n          k \u2208\n              support\n                (ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg)\n                  (@SymmEncAlg.keygen m M K C encAlg)) \u2227\n            @SymmEncAlg.encrypt m M K C encAlg k m_1 = c",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "128f7b6f0f5175c50feaaf49cfe0fc4ee810fb1f6bb842311a1792e27e16030d"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/FiatShamir.lean",
      "start_line": 79,
      "start_column": 29,
      "end_line": 79,
      "end_column": 34
    },
    "debug_info": {
      "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p inst\u271d\u2075 inst\u271d\u2074\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (let so := idOracle ++\u209b\u2092 randomOracle;\n    (simulateQ so (monadLift c)).run' \u2205) =\n    c",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/FiatShamir.lean#L79"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "22d97f81ea4dcd841eebd7908c387eea7c76a2f4f6cea469e10a605c04bf1cf9"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean",
      "start_line": 126,
      "start_column": 2,
      "end_line": 126,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n m p : \u2115\ninst\u271d : NeZero p\nerrSamp : ProbComp (Fin p)\nadv : LWE_Adversary n m p\n\u22a2 |[=true|do\n              let y \u2190 LWE_Distr n m p inst\u271d errSamp\n              @adv y].toReal +\n          [=true|do\n              let y \u2190 LWE_Uniform_Distr n m p inst\u271d\n              (fun a => !a) <$> @adv y].toReal -\n        ([=true|do\n              let a \u2190 LWE_Distr n m p inst\u271d errSamp\n              not <$> @adv a].toReal +\n          [=true|do\n              let a \u2190 LWE_Uniform_Distr n m p inst\u271d\n              @adv a].toReal)| =\n    |[=true|do\n            let y \u2190 LWE_Distr n m p inst\u271d errSamp\n            @adv y].toReal -\n        [=true|do\n            let a \u2190 LWE_Uniform_Distr n m p inst\u271d\n            @adv a].toReal|",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean#L126"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-27T11:58:04-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "ec56a77610a3e37c717258ec30a8672f293551c6347c440356eb748e1be259e2"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/ProgramLogic/Unary/DijkstraMonad.lean",
      "start_line": 138,
      "start_column": 45,
      "end_line": 138,
      "end_column": 50
    },
    "debug_info": {
      "goal": "m : Type u \u2192 Type v\nn : Type u \u2192 Type w\nw : Type u_1 \u2192 Type u_2\nd : {\u03b1 : Type u_1} \u2192 w \u03b1 \u2192 Type u_3\ninst\u271d\u00b2 : Monad w\ninst\u271d\u00b9 : @DijkstraMonad w d inst\u271d\u00b2\nh : LawfulMonad w\ninst\u271d : @LawfulDijkstraMonad w (fun {\u03b1} => d) inst\u271d\u00b2 h inst\u271d\u00b9\n\u03b1 : Type u_1\nx : w \u03b1\ny : d x\n\u22a2 HEq\n    (@DijkstraMonad.dBind w d inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 \u03b1 x (fun a => pure a) y fun a =>\n      @DijkstraMonad.dPure w d inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 a)\n    y",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/ProgramLogic/Unary/DijkstraMonad.lean#L138"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T11:21:13+07:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "97776e6783fdc9468755ff844e2cc355258698216bb5b0c98c60a4f1ade76333"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
      "start_line": 79,
      "start_column": 2,
      "end_line": 79,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "3ba094adb2355d20111bd320b2baec3ca80966a474c0b79d9f98fc0357ce8186"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
      "start_line": 186,
      "start_column": 2,
      "end_line": 186,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "1c52ecfcc8e2b1cda57d1ce6890b1be0ec348db0adabe9329a32ee7ee3c5e607"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
      "start_line": 74,
      "start_column": 2,
      "end_line": 74,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      let x \u2190 (simulateQ (@seededOracle \u03b9 spec inst\u271d\u00b3) oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "6785446a950a93cc0ddf22bc60b3d64aa7ee97f5e147327a5c5e987f433ab22a"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
      "start_line": 85,
      "start_column": 2,
      "end_line": 85,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ (@seededOracle \u03b9 spec inst\u271d\u00b3) oa).run seed] =\n    [=y|f <$> oa]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "6b4d7a2036b5b434eb324f2a031328525fffeaa27ef8de2a2b80639c34d1c404"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
      "start_line": 69,
      "start_column": 53,
      "end_line": 69,
      "end_column": 58
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (QueryImpl.impl (@countingOracle \u03b9 inst\u271d spec) q).run.neverFails",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "907c1755527923f56d64e20699b168fc8900f91db18356f29fd48df0a4e14688"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
      "start_line": 72,
      "start_column": 53,
      "end_line": 72,
      "end_column": 58
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (QueryImpl.impl (@loggingOracle \u03b9 spec) q).run.neverFails",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "e5e4162f0f23ecb345e3c868058d54e9ee768b54b51c431a826dbe0ceba2a0da"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
      "start_line": 280,
      "start_column": 2,
      "end_line": 280,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\n\u22a2 neverFails (OracleComp.uniformOfFintype \u03b1 h\u03b1)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "fcd53fd3232696c1caddc49efb46a94c174576b4e116584861117b81d475a417"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
      "start_line": 405,
      "start_column": 4,
      "end_line": 405,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case zero\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nx y : Matrix (Fin 0) (Fin m) \u03b1\n\u22a2 (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-26T12:07:39-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "e789c663c49e88f1956203933073f08aaaf5dc7399a61f35aa188c114976dbc2"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
      "start_line": 407,
      "start_column": 4,
      "end_line": 407,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nm : \u2115\nih :\n  \u2200 (x y : Matrix (Fin m) (Fin m\u271d) \u03b1),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m\u271d) \u03b1\n\u22a2 [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-26T12:07:39-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "cb5fb543c78c8ce43131c31802582cf69df537398ad16d0d2cf54f79e978b3f9"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
      "start_line": 412,
      "start_column": 4,
      "end_line": 412,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nm : \u2115\nih :\n  [\u22a5|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n\u22a2 Vector \u03b1 m\u271d \u2192\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          Fin.cons top.get <$> ihn)\n        m)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-26T12:07:39-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "8644cd82fdc528c60d1e8dfd6e6448ce5a35f1ae372787e259b44cc12e72e594"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
      "start_line": 77,
      "start_column": 2,
      "end_line": 77,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-01-16T01:24:48-06:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "5ca8c734bb1bc89482ee14ed362524c918a5ae9b99efa4bd6f65ca33bd2d112b"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
      "start_line": 86,
      "start_column": 2,
      "end_line": 86,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b9 spec inst\u271d qc js) =\n    {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2024-12-05T21:45:03-06:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "af1ec1675e06a82df7aac8a9aae5db667e9d987c54942c040b3f68876d5aaea3"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
      "start_line": 117,
      "start_column": 2,
      "end_line": 117,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d : DecidableEq spec.QuerySeed\n\u22a2 finSupport (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc js) \u2260 \u2205",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "14f31404dadb6b6e0f33eb70b5547477d479f2356d350ce1095f413e98f3af13"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
      "start_line": 134,
      "start_column": 4,
      "end_line": 134,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc j),\n    [=seed|OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc j] =\n      1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        List.foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-01-16T01:24:48-06:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "98d51f88f24403ae4bc02a57a162f3c71085c49fd44012bf33184a9417478e0b"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
      "start_line": 141,
      "start_column": 2,
      "end_line": 141,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js)\n\u22a2 [=seed|OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js] =\n    (\u2191(finSupport (OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js)).card)\u207b\u00b9",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "7ff8e5594d6cd09d6ac2350ad152ec151aaa24cbf46c50193bfcd27c037b6caf"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 28,
      "start_column": 2,
      "end_line": 28,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "9d98ec848087e6433dc683bda1db583351ca5e4aa9f3999ae5df6655646397c3"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 33,
      "start_column": 2,
      "end_line": 33,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "def663ee4d8a24c96cf0132dbb5ce8bb01a6711a1e6aa331b5724658d6131639"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 38,
      "start_column": 2,
      "end_line": 38,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "268c9e94c2b457eb05cc6118dd949b5f8c1d85012970204deeb82573c46c059f"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 43,
      "start_column": 2,
      "end_line": 43,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 (x : \u03b1), [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "2c79bb68d0611d187d6c6015a6cebe8ca11bc2de52a77d52325c7e6bdb77bc2a"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 49,
      "start_column": 2,
      "end_line": 49,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\ny : \u03b2\nz : \u03b3\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z|oc x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z|oa >>= oc]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "bca2f7f6ce93ea2903b441002d5d1b5f23624ff70f3d33f55ea2231408a3407b"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 55,
      "start_column": 2,
      "end_line": 55,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nr : ENNReal\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x] / r\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082] / r",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "c96b7aa242350c1b750973427e4e09e46a43012036367ba17ed29f4a7214a703"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 75,
      "start_column": 2,
      "end_line": 75,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "d724c5a10bcc37d657840bb722ea58a66ec2f42c13a5b2a1196db83026c99080"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 83,
      "start_column": 2,
      "end_line": 83,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "67d8337635b22092d4d27a4cbf0de1336b4bd7874314485517798ca798f68115"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 91,
      "start_column": 2,
      "end_line": 91,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "229f187a394f7a0d432ee44d5e887e15dff6fdf3e948bfcb7cfd9475f6a01330"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
      "start_line": 99,
      "start_column": 2,
      "end_line": 99,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "45e39d1238a745178bfa3f0eb6342573bc7ba2cf93bdc6d1b71f50ac2337007e"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
      "start_line": 721,
      "start_column": 83,
      "end_line": 721,
      "end_column": 88
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : ENNReal\nh' : @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 s + (1 - s) * r",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "0d69340f5c6939ae1b7120f1951d462c4133ed58d5b1a260b5e2a5258339222c"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
      "start_line": 727,
      "start_column": 73,
      "end_line": 727,
      "end_column": 78
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : ENNReal\nh' : @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 s + r",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "31ccf4c13fa11a2ade0e70d94956ce70e63f0db86f16bdd76f13219cfa6300f4"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
      "start_line": 732,
      "start_column": 69,
      "end_line": 732,
      "end_column": 74
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 r",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "3cb49419745e96fa76f548eb415993033f35edb162257526752cc0d3b1a277da"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
      "start_line": 736,
      "start_column": 59,
      "end_line": 736,
      "end_column": 64
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) =\n    \u2211' (x : \u03b1), @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d oa x * @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "381a08dfcd6e38f0a0d3f023cc90e9f45299373f236021741cf772b540b103f2"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
      "start_line": 932,
      "start_column": 2,
      "end_line": 932,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = 0 \u2194 oa.neverFails",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "6282c3ac72a00871e7a590ea114a7bb029ca7e42073502a8788c215613a545c3"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
      "start_line": 940,
      "start_column": 2,
      "end_line": 940,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa \u2194 \u00acoa.neverFails",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "cf822fa1ca73c655b8a2f240f281a7ce2d013de751011ec5f6268696159d75c5"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
      "start_line": 972,
      "start_column": 2,
      "end_line": 972,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\n\u03b1 : Type\noa : OracleComp spec \u03b1\nh : oa.neverFails\np : \u03b1 \u2192 Prop\ninst\u271d : DecidablePred p\n\u22a2 (\u2211' (x : \u03b1), if p x then @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d\u00b9 oa x else 0) =\n    1 - \u2211' (x : \u03b1), if p x then 0 else @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d\u00b9 oa x",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L972"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-27T11:58:04-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "23686e6d9d7307e77a535413afb61bb9578491e805451c5655c8e10bd20836a2"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
      "start_line": 26,
      "start_column": 35,
      "end_line": 26,
      "end_column": 40
    },
    "debug_info": {
      "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-16T14:51:55-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "f7a0a90cc17b96f50f287115e714df8020a3733e416bbb851d6e16ffd39c3229"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
      "start_line": 29,
      "start_column": 4,
      "end_line": 29,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "b452cab0107a2685bcc108c4b6248d5bd9752cdf8c64cda41bc76bc61ea2ff90"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
      "start_line": 52,
      "start_column": 2,
      "end_line": 52,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T16:46:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "a94e8dd8646e68d0911118a3cb9649ed6754a434c33cd29825a4aac9ac5a1d4c"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/List.lean",
      "start_line": 180,
      "start_column": 8,
      "end_line": 180,
      "end_column": 13
    },
    "debug_info": {
      "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/List.lean#L180"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-01-28T07:23:40-06:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "d0e11d363ae2b0816550e30c8ea2f9d4fd56addbda6a15e84b1e057d22a9f495"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/List.lean",
      "start_line": 315,
      "start_column": 4,
      "end_line": 315,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/List.lean#L315"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-25T15:22:19-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "73e032806449add47586c5afa1c3a2d3cc76b0f5cf3ed8db18ea8b37b755acbe"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/DistSemantics/List.lean",
      "start_line": 327,
      "start_column": 4,
      "end_line": 327,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case v_insert\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nn : \u2115\nf : \u03b1 \u2192 OracleComp spec \u03b2\nn\u271d : \u2115\nhd : \u03b1\ntl : Vector \u03b1 n\u271d\nih : \u2200 {x : Vector \u03b2 n\u271d}, x \u2208 (Vector.mapM f tl).support \u2194 \u2200 (i : Fin n\u271d), x[i] \u2208 (f tl[i]).support\nx : Vector \u03b2 (n\u271d + 1)\n\u22a2 x \u2208 (Vector.mapM f { toArray := #[hd] ++ tl.toArray, size_toArray := \u22ef }).support \u2194\n    \u2200 (i : Fin (n\u271d + 1)), x[\u2191i] \u2208 (f (#[hd] ++ tl.toArray)[\u2191i]).support",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/List.lean#L327"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-26T12:07:39-04:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "76ab197bec858b1ff6aee862ae13625fbe3115c74b8672ee6f90d9dd0e19d7c4"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
      "start_line": 37,
      "start_column": 2,
      "end_line": 37,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "f23635b3a5e060d9bd1a3190c4c3778d5bbe4276bc6e19bc2270f6a3c51cf681"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
      "start_line": 61,
      "start_column": 2,
      "end_line": 61,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "d2410e70be5b21a1ad79e7ac159466e570bb809c74187cdd840e531d2cc1c9ee"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "generalize-eval-dist",
      "commit": "436d8067a742848a225e5a729cfc8e9381541214",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
      "start_line": 66,
      "start_column": 2,
      "end_line": 66,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type u\np : PMF \u03b1\nx : \u03b1\n\u22a2 (PMF.map some p) (some x) = p x",
      "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L66"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-05-24T05:43:31-05:00",
      "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
    },
    "id": "127e81914a740f15ef6f77f9d7945bcaf6f70ab2e20000a814c5cacafcd24443"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "generalize-eval-dist",
      "commit": "436d8067a742848a225e5a729cfc8e9381541214",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
      "start_line": 69,
      "start_column": 2,
      "end_line": 69,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type u\np : PMF \u03b1\nx : \u03b1\n\u22a2 (some <$> p) (some x) = p x",
      "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L69"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-05-24T05:43:31-05:00",
      "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
    },
    "id": "f158a31c7401a06f0e6790b66aae80f3c1cfbd41b0a94d309bf10184c58a3468"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
      "start_line": 84,
      "start_column": 4,
      "end_line": 84,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh1 : @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst c = some <$> PMF.pure a\nh2 : @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b2 Prod.snd c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (@Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst c) x = (some <$> PMF.pure a) x\n\u22a2 c = @pure SPMF Applicative.toPure (\u03b1 \u00d7 \u03b2) (a, b)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T16:46:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "ba715a276e50fe3b067966dc529b023b92da472ddafb1e35645ebcc9d22bbf20"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
      "start_line": 91,
      "start_column": 13,
      "end_line": 91,
      "end_column": 18
    },
    "debug_info": {
      "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : @SPMF.IsCoupling \u03b1 \u03b2 c OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T16:46:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "216df46282d66df30a34e2e16af779d70ee06eae02bbef8ccdd1c69807d48f39"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
      "start_line": 92,
      "start_column": 42,
      "end_line": 92,
      "end_column": 47
    },
    "debug_info": {
      "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst OptionT.fail = OptionT.fail",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T16:46:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "9ff339e2afa5371c2731713ea93cf62fd6d3dd2789fec6e07a3ceac609ef8a49"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
      "start_line": 92,
      "start_column": 42,
      "end_line": 92,
      "end_column": 47
    },
    "debug_info": {
      "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b2 Prod.snd OptionT.fail = OptionT.fail",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T16:46:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "23a5f2bf96ee6b813049e5a6e9046481467c9ed2c425ce20c18b7c8e808c75a0"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
      "start_line": 102,
      "start_column": 59,
      "end_line": 102,
      "end_column": 64
    },
    "debug_info": {
      "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : @SPMF \u03b1\u2081\nq : @SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 @SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 @SPMF \u03b2\u2082\nc : @SPMF.Coupling \u03b1\u2081 \u03b1\u2082 p q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 @SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : (a\u2081 : \u03b1\u2081) \u2192 (a\u2082 : \u03b1\u2082) \u2192 \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\nhc\u2081 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2081 Prod.fst \u2191c = p\nhc\u2082 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2082 Prod.snd \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b2\u2081 \u00d7 \u03b2\u2082) \u03b2\u2081 Prod.fst (@d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2) = @f (a\u2081, a\u2082).1",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T16:46:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "0c8ce21453b5383da2b4faed23e0f0c9c438f3725cb70770df9810383137e0c9"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
      "start_line": 103,
      "start_column": 18,
      "end_line": 103,
      "end_column": 23
    },
    "debug_info": {
      "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : @SPMF \u03b1\u2081\nq : @SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 @SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 @SPMF \u03b2\u2082\nc : @SPMF.Coupling \u03b1\u2081 \u03b1\u2082 p q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 @SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : (a\u2081 : \u03b1\u2081) \u2192 (a\u2082 : \u03b1\u2082) \u2192 \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\nhc\u2081 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2081 Prod.fst \u2191c = p\nhc\u2082 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2082 Prod.snd \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      @Functor.map SPMF Applicative.toFunctor (\u03b2\u2081 \u00d7 \u03b2\u2082) \u03b2\u2082 Prod.snd (@d a.1 a.2)) =\n    do\n    let a \u2190 \u2191c\n    @g a.2",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T16:46:26-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "8373d0c1bcee230600973df2009af93f26ba03f4b7747f642272626a0f7ec8b7"
  },
  {
    "repo": {
      "remote": "https://github.com/dtumad/VCV-io",
      "branch": "master",
      "commit": "14ed781543483774b7c5772b361f0ee26a977132",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ToMathlib/Control/WriterT.lean",
      "start_line": 95,
      "start_column": 39,
      "end_line": 95,
      "end_column": 44
    },
    "debug_info": {
      "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
      "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/Control/WriterT.lean#L95"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-04-15T06:05:56-05:00",
      "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
    },
    "id": "e6c6ab690c6240e0e8353cd28fad4dc15820d2286a8bc3c18a8204af1b3a98bd"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 794,
      "start_column": 2,
      "end_line": 794,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nX Y : Set \u03b1\nQ : Matrix \u2191X \u2191Y \u211a\nx\u2082 y\u2080 y\u2081 : \u03b1\nhQ : Q.IsTotallyUnimodular\nhx\u2082 : x\u2082 \u2208 X\nhy\u2080 : y\u2080 \u2208 Y\nhy\u2081 : y\u2081 \u2208 Y\nhyy : y\u2080 \u2260 y\u2081\nhQy\u2080 : Q \u27e8x\u2082, hx\u2082\u27e9 \u27e8y\u2080, hy\u2080\u27e9 = 1\nhQy\u2081 : Q \u27e8x\u2082, hx\u2082\u27e9 \u27e8y\u2081, hy\u2081\u27e9 = 1\nhQy : \u2200 (y : \u2191Y), \u2191y \u2260 y\u2080 \u2227 \u2191y \u2260 y\u2081 \u2192 Q \u27e8x\u2082, hx\u2082\u27e9 y = 0\n\u22a2 let c\u2080 := Q._col \u27e8y\u2080, hy\u2080\u27e9;\n  let c\u2081 := Q._col \u27e8y\u2081, hy\u2081\u27e9;\n  let Q' := Q.drop1row2cols x\u2082 y\u2080 y\u2081;\n  (Q' \u25eb \u25aec\u2080 \u25eb \u25aec\u2081 \u25eb \u25ae(c\u2080 - c\u2081)).IsTotallyUnimodular",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L794"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "c833c00894ea246d3aa7016afc87c00ea738c29cda662f021fc46681769f46f2"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 896,
      "start_column": 2,
      "end_line": 896,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n  | (r\u2080, r\u2081, snd) =>\n    (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY =\n      (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n        (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L896"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "511d2ccc1ef5704e69ed15ff82098947f851c8e36ab9ccc25c8d4de4dcbee03e"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 934,
      "start_column": 2,
      "end_line": 934,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n  | (r\u2080, r\u2081, r\u2082) => \u2200 (i : \u2191(X\u1d63 \\ {x\u2082})), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L934"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "8b1edfd9257dbae318f31e8ecdf61f3d5504d09d9f3a020f8714a493fa9681a7"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 973,
      "start_column": 2,
      "end_line": 973,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  \u2200 (j : \u2191(Y\u2097 \\ {y\u2082})),\n    (fun x => D x j) = c\u2080 \u2228\n      (fun x => D x j) = -c\u2080 \u2228\n        (fun x => D x j) = c\u2081 \u2228\n          (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L973"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "9b7db6ed1cc4680de38ea8a85abb6a768fdd27ab2b32c3bb539d116e88d7a315"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 996,
      "start_column": 2,
      "end_line": 996,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080\u1d63 := B\u1d63.submatrix2x2 x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n      let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u1d63.drop1row2cols x\u2082 y\u2080 y\u2081 \u25eb (\u229e D\u2097 D\u2080\u1d63(D\u1d63 * D\u2080\u1d63\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L996"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "f8b063eeb98107caa45a1b9de0f4ddb9895beac709d01be58e3bde0111d3f93c"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 1019,
      "start_column": 2,
      "end_line": 1019,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n      let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n      let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097.drop2rows1col x\u2080 x\u2081 y\u2082 \u229f (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1019"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-20T12:58:38+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "cf5fbb6cc193d50f37fc3a5bc56c5e28de3fbf58cfd479a5940587f14ef250aa"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 1101,
      "start_column": 4,
      "end_line": 1101,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case h.left\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\n\u22a2 (matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY).IsTotallyUnimodular",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1101"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-23T09:42:03+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "ca7e0efa923f051cd9cdee3b5c6bc9ab24bd1d131d8cbd85443f873b10949137"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 1144,
      "start_column": 10,
      "end_line": 1144,
      "end_column": 15
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u2097 : \u2191(X\u2097 \\ (x\u2080 \u1543 {x\u2081}))\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\nhx\u2082 : \u2191i\u2097 = x\u2082\nhy\u2082 : \u00ac\u2191j\u1d63 = y\u2082\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25e9i\u2097 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25e9i\u2097 \u25eaj\u1d63))",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1144"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-23T09:42:03+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "08bcd4ff94909e5b2acdfa86dc69816ccf3c1f3536bddc3998ccb76fd4b8862e"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 1146,
      "start_column": 8,
      "end_line": 1146,
      "end_column": 13
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u2097 : \u2191(X\u2097 \\ (x\u2080 \u1543 {x\u2081}))\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\nhx\u2082 : \u00ac\u2191i\u2097 = x\u2082\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25e9i\u2097 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25e9i\u2097 \u25eaj\u1d63))",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1146"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-23T09:42:03+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "cf0c4cb5fcfe0c6b4b354738e6a11c86da06509f0ea04247bc71d3ed820383a2"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 1147,
      "start_column": 6,
      "end_line": 1147,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case h.right.inr.inl\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u1d63 : \u2191(X\u1d63 \\ {x\u2082})\nj\u2097 : \u2191(Y\u2097 \\ {y\u2082})\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25eai\u1d63 \u25e9j\u2097| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25eai\u1d63 \u25e9j\u2097))",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1147"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-23T09:42:03+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "b2ccfca0a6268e1db0180f2955d0a7fb3ac63dbf8dfbdfa97f04122b610db907"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3.lean",
      "start_line": 1148,
      "start_column": 6,
      "end_line": 1148,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case h.right.inr.inr\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u1d63 : \u2191(X\u1d63 \\ {x\u2082})\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25eai\u1d63 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25eai\u1d63 \u25eaj\u1d63))",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1148"
    },
    "metadata": {
      "blame_email_hash": "a853c166ca8e",
      "blame_date": "2025-05-23T09:54:27+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "ccfcd1ea3895e781fa5b563b54e46140cf4063ea289b028a08be04543373fcc9"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3RefactorTest.lean",
      "start_line": 359,
      "start_column": 2,
      "end_line": 359,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let _x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let _y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let A\u2097 := Matrix.A\u2097_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let A\u2097' := Matrix.A\u2097'_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := Matrix.D\u2097_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u2080 := Matrix.D\u2080_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u1d63 := Matrix.D\u1d63_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let A\u1d63' := Matrix.A\u1d63'_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let A\u1d63 := Matrix.A\u1d63_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let S := matrix3sumComposition_alt2 A\u2097 A\u2097' D\u2097 D\u2080 D\u1d63 A\u1d63' A\u1d63;\n  matrix3sumComposition_alt2_mapped' S = matrix3sumComposition_curr S\u2097.B S\u1d63.B hXX hYY",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3RefactorTest.lean#L359"
    },
    "metadata": {
      "blame_email_hash": "1f3d9a693291",
      "blame_date": "2025-05-23T19:21:41+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "fecfcd460fee795d31706f5cd1dec7b77e0bd6a3246c9a96ed56dc99f13c407b"
  },
  {
    "repo": {
      "remote": "https://github.com/Ivan-Sergeyev/seymour",
      "branch": "sum3-refactor",
      "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "Seymour/Matroid/Operations/Sum3RefactorTest.lean",
      "start_line": 391,
      "start_column": 2,
      "end_line": 391,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\n\u22a2 standardRepr3sumComposition_alt2 hXX hYY hXY hYX = standardRepr3sumComposition_curr hXX hYY hXY hYX",
      "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3RefactorTest.lean#L391"
    },
    "metadata": {
      "blame_email_hash": "1f3d9a693291",
      "blame_date": "2025-05-23T19:21:41+02:00",
      "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
    },
    "id": "2c9443fcb82e64add418da5fdec62c3bbde4e4b86ba0a50cf643afab5f58f5b3"
  },
  {
    "repo": {
      "remote": "https://github.com/katydid/regex-deriv-lean",
      "branch": "main",
      "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
      "lean_version": "v4.14.0"
    },
    "location": {
      "path": "Katydid/Regex/Smart/SmartOr.lean",
      "start_line": 163,
      "start_column": 6,
      "end_line": 163,
      "end_column": 11
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh : z1 = y\n\u22a2 OrIsSmart (z1.or z2)",
      "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L163"
    },
    "metadata": {
      "blame_email_hash": "e3e649d9026a",
      "blame_date": "2025-05-24T14:29:51+01:00",
      "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
    },
    "id": "0795b5a855a8a96f21ff3d57526a36dafa6372c1ec93b975cfd2550366f28e73"
  },
  {
    "repo": {
      "remote": "https://github.com/katydid/regex-deriv-lean",
      "branch": "main",
      "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
      "lean_version": "v4.14.0"
    },
    "location": {
      "path": "Katydid/Regex/Smart/SmartOr.lean",
      "start_line": 166,
      "start_column": 6,
      "end_line": 166,
      "end_column": 11
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh\u271d : \u00acz1 = y\nh : z1 < y\n\u22a2 OrIsSmart (z1.or (insertOr y z2))",
      "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L166"
    },
    "metadata": {
      "blame_email_hash": "e3e649d9026a",
      "blame_date": "2025-05-24T14:29:51+01:00",
      "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
    },
    "id": "0e418e6715bdb1ade9ed6b376531fc245b37660de998a287a08d9883f9fe3919"
  },
  {
    "repo": {
      "remote": "https://github.com/katydid/regex-deriv-lean",
      "branch": "main",
      "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
      "lean_version": "v4.14.0"
    },
    "location": {
      "path": "Katydid/Regex/Smart/SmartOr.lean",
      "start_line": 168,
      "start_column": 6,
      "end_line": 168,
      "end_column": 11
    },
    "debug_info": {
      "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh\u271d : \u00acz1 = y\nh : \u00acz1 < y\n\u22a2 OrIsSmart (x.or (consOr y (z1.or z2)))",
      "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L168"
    },
    "metadata": {
      "blame_email_hash": "e3e649d9026a",
      "blame_date": "2025-05-24T14:29:51+01:00",
      "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
    },
    "id": "e384f72ddd3bb1e2ebc724ca8fa1a3a2835cb01b2bd239f51c3f55d3f24771c4"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/SemQuot.lean",
      "start_line": 22,
      "start_column": 31,
      "end_line": 22,
      "end_column": 36
    },
    "debug_info": {
      "goal": "\u22a2 \u2200 \u2983a b : Formula\u2984, a \u2248 b \u2192 (~a) \u2248 (~b)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/SemQuot.lean#L22"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-07-22T18:21:35+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "4ee4bdb1d34026567ddebdec55c937d8b6732296eb01f0929f9ac401e5e37901"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/SemQuot.lean",
      "start_line": 25,
      "start_column": 32,
      "end_line": 25,
      "end_column": 37
    },
    "debug_info": {
      "goal": "\u22a2 \u2200 \u2983a\u2081 a\u2082 : Formula\u2984, a\u2081 \u2248 a\u2082 \u2192 \u2200 \u2983b\u2081 b\u2082 : Formula\u2984, b\u2081 \u2248 b\u2082 \u2192 a\u2081\u22c0b\u2081 \u2248 a\u2082\u22c0b\u2082",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/SemQuot.lean#L25"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-07-22T18:21:35+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "e58bd7d072cb6dcd4114332c91b3b0ff9bdc5f77ab0fe7d8de8bd758b4cfe4d8"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 798,
      "start_column": 10,
      "end_line": 798,
      "end_column": 15
    },
    "debug_info": {
      "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 sorry \u2208 endNodesOf (next (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u22ef)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L798"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-15T19:37:25+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "1b432b149d3ecaabf0e5d85660d24b32ef55589a41bef02416f79332bc245c9f"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 799,
      "start_column": 10,
      "end_line": 799,
      "end_column": 15
    },
    "debug_info": {
      "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 (M, v)\u22a8sorry \u2227\n    (sorry.isFree = true \u2228\n      \u2203 F \u03b3,\n        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side sorry \u2227\n          relateSeq M \u03b3 v w \u2227\n            (\u2200 f \u2208 F, evaluate M v f) \u2227\n              (F, \u03b3) \u2208 H \u03b1 \u2227 (sorry.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L799"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-15T19:37:25+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "918e00b6289d9292a7814658bdda41078873db8924c8d3e19bcdfcc4a9cf0ca4"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 802,
      "start_column": 8,
      "end_line": 802,
      "end_column": 13
    },
    "debug_info": {
      "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203 Y,\n    (\u2203 l, (\u2203 a, \u2203 (h : a \u2208 B), endNodesOf (next a \u22ef) = l) \u2227 Y \u2208 l) \u2227\n      (M, v)\u22a8Y \u2227\n        (Y.isFree = true \u2228\n          \u2203 F \u03b3,\n            (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n              relateSeq M \u03b3 v w \u2227\n                (\u2200 f \u2208 F, evaluate M v f) \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L802"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-15T19:37:25+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "334319fa8a6458631a6b4e44d452af22c30f528d226984c70fc62d78726cfd4c"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 806,
      "start_column": 6,
      "end_line": 806,
      "end_column": 11
    },
    "debug_info": {
      "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227 (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L806"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-15T19:37:25+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "58d35097cbd28533cf57c0e1ee3ba19939939a672abd41b375635cf1a74e104a"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "main",
      "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 844,
      "start_column": 2,
      "end_line": 844,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      satisfiable (nodeAt s) \u2227\n        (\u00accEquiv X tab s t \u2228\n          (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L844"
    },
    "metadata": {
      "blame_email_hash": "cc8f18f5e466",
      "blame_date": "2025-04-09T11:04:11+02:00",
      "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
    },
    "id": "18dfb1953a0d28f5ea92372abefe2584b42b9e49ddbd8918137bd8537deb4a7f"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "main",
      "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 1021,
      "start_column": 16,
      "end_line": 1021,
      "end_column": 21
    },
    "debug_info": {
      "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : \u2115\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u00b7a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : M.Rel a\u271d v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u00b7a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : \u03b4[\u2191k] = \u00b7a\u271d\n\u22a2 False",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1021"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-21T00:03:28+01:00",
      "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
    },
    "id": "a8d9aaca55b8fa15a40801a99fdb558f4114123502b455396067280acb923214"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "main",
      "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 1025,
      "start_column": 16,
      "end_line": 1025,
      "end_column": 21
    },
    "debug_info": {
      "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : Relation.ReflTransGen (relate M a\u271d) v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram \u03b4[\u2191k] \u2264 1 + lengthOfProgram a\u271d\n\u22a2 lengthOfProgram \u03b4[\u2191k] < 1 + lengthOfProgram a\u271d",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1025"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-21T00:03:28+01:00",
      "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
    },
    "id": "fd08048676cc54ddaa64757d999b54fe3bc589fcf320148ac31b41f3a5fa234e"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "main",
      "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 1362,
      "start_column": 6,
      "end_line": 1362,
      "end_column": 11
    },
    "debug_info": {
      "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\nIH :\n  t = s \u2192\n    \u2203 s_1,\n      Relation.TransGen (cEdge X tab) s s_1 \u2227\n        (satisfiable (nodeAt s_1) \u2227 \u00accEquiv X tab s_1 s \u2228\n          (~''\u03be).in_side side (nodeAt s_1) \u2227 (M, w)\u22a8nodeAt s_1 \u2227 ((nodeAt s_1).without (~''\u03be)).isFree = true)\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.lrep lpr\u27e9\u27e9\n\u22a2 (tabAt t).snd.snd = Tableau.lrep (\u22ef \u25b8 lpr)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1362"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-11-21T22:55:48+01:00",
      "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
    },
    "id": "96f22d4d42ae5622d1adb4559d423d44894e1a2307c895995a5ff91ce4254210"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/TableauGame.lean",
      "start_line": 21,
      "start_column": 13,
      "end_line": 21,
      "end_column": 18
    },
    "debug_info": {
      "goal": "\u22a2 \u2200 (p next : Sequent \u2295 Sequent \u00d7 Formula \u00d7 Rule), next \u2208 sorry p \u2192 sorry next < sorry p",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauGame.lean#L21"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-03T14:06:27+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "6711a94129bd08dcec641bc0778e83f9f98926678f98b1dfe1182c334200addd"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/TableauGame.lean",
      "start_line": 42,
      "start_column": 2,
      "end_line": 42,
      "end_column": 7
    },
    "debug_info": {
      "goal": "X : Sequent\ns : Strategy tableauGame Player.A\nh : winning (Sum.inl X) s\n\u22a2 Nonempty (Tableau [] X)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauGame.lean#L42"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-26T00:40:09+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "030641f995b96d37e0ad2a06399e7d29d168e12fa7aa782120d5572ae8d4059c"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/TableauGame.lean",
      "start_line": 49,
      "start_column": 2,
      "end_line": 49,
      "end_column": 7
    },
    "debug_info": {
      "goal": "X : Sequent\ns : Strategy tableauGame Player.B\nh : winning (Sum.inl X) s\n\u22a2 \u2203 WS mg, X.toFinset \u2208 WS",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauGame.lean#L49"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-12-26T00:40:09+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "541e1b025e5d0b97d2ea581d14a81dabbd0571614616d071443f595132fc4cd6"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 40,
      "start_column": 4,
      "end_line": 40,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case inr.inl.intro.intro.h\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\n\u03c4 : Formula\n\u03c4_in : \u03c4 \u2208 testsOfProgram \u03b1\n\u03c8_in : (~\u03c4) \u2208 L\nx_in_voc_\u03c8 : x \u2208 \u03c4.voc\n\u22a2 x \u2208 \u03b1.voc",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L40"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-10-18T22:57:53+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "79205e14ba3dedfa464d67fe21aeb13e5ad90555b85748571f3f0fb41b1291d9"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 43,
      "start_column": 4,
      "end_line": 43,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case inr.inr.intro.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\na : \u2115\n\u03b4 : List Program\n\u03c8_in : (\u2308\u00b7a\u2309\u2308\u2308\u03b4\u2309\u2309\u03c6) \u2208 L\nright\u271d : \u00b7a \u2208 subprograms \u03b1 \u2227 \u2200 a \u2208 \u03b4, a \u2208 subprograms \u03b1\nx_in_voc_\u03c8 : x = Sum.inr a \u2228 x \u2208 \u03b4.pvoc \u222a \u03c6.voc\n\u22a2 x \u2208 \u03b1.voc \u2228 x \u2208 \u03c6.voc",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L43"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-10-18T22:57:53+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "55d1543282ef1234a508b1b032ff1505a0067a30319930965e643b869d081ece"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 70,
      "start_column": 6,
      "end_line": 70,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case h.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nFs : List Formula\n\u03b4 : List Program\nin_H : (Fs, \u03b4) \u2208 H \u03b1\nthis : \u2200 (\u03b1 : Program) {Fs : List Formula} {\u03b4 : List Program}, (Fs, \u03b4) \u2208 H \u03b1 \u2192 \u03b4 = [] \u2228 \u2203 a \u03b4', \u03b4 = \u00b7a :: \u03b4'\n\u03b1' : Program\n\u03b1'_in : \u03b1' \u2208 \u03b4\nx_in : x \u2208 \u03b1'.voc\n\u22a2 x \u2208 \u03b1.voc",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L70"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-10-18T22:57:53+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "88b676747afe4c084b8b960d9532b68125be7f907b41690b330da79cdf9996e4"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 108,
      "start_column": 4,
      "end_line": 108,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case intro.intro.intro.intro.intro\nx : \u2115 \u2295 \u2115\nress : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7 : LoadFormula\nlrule : LoadRule (~'\u03c7) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) \u2208 ress\n\u03c6 : Formula\n\u03c6_in_L : \u03c6 \u2208 L\nbla : x \u2208 \u03c6.voc\n\u22a2 False",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L108"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-10-18T22:57:53+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "2b5e82f69a12e185fa8487a3b0b804c2e793bafcd7ba9dccb2b54a115a4849f5"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 114,
      "start_column": 2,
      "end_line": 114,
      "end_column": 7
    },
    "debug_info": {
      "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.1.fvoc \u2286 Rcond.fvoc",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L114"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-09-13T00:22:40+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "e4202b0532185bbd4d111e20c1cb07a6ce49ec561c1677958b0ffcc669b6e741"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 118,
      "start_column": 2,
      "end_line": 118,
      "end_column": 7
    },
    "debug_info": {
      "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.2.voc \u2286 Ocond.voc",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L118"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-09-13T00:22:40+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "726a5d8a3a9c035ef217fcf10e3437047aafdfc67d77f38c3d972b62ec57fe9f"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 129,
      "start_column": 4,
      "end_line": 129,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L \u2227 Rcond.Subperm R \u2227 Ocond \u2286 O\ncL cR : List Formula\ncO : Olf\nx : \u2115 \u2295 \u2115\nx_in_voc_C :\n  (x \u2208 Vocab.fromList (List.map Formula.voc cL) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc (Olf.toForms cO))) \u2227\n    (x \u2208 Vocab.fromList (List.map Formula.voc cR) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc (Olf.toForms cO)))\nthis : \u2200 res \u2208 ress, res.1.fvoc \u2286 Lcond.fvoc\nC_in : (cL, cR, cO) \u2208 applyLocalRule lrule (L, R, O)\n\u22a2 x \u2208 jvoc (L, R, O)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L129"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-09-13T00:22:40+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "bf58f705bb0cddf77938d6e8dba799587dd2664e2d8d8881bc76c2ec5d2f4887"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 154,
      "start_column": 8,
      "end_line": 154,
      "end_column": 13
    },
    "debug_info": {
      "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nL_and_n\u03b8_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n\u22a2 False",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L154"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-07-11T22:21:56+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "a899e1f6d17fb8b249eb3291eee3e31a7d493b6c8ddef6329c87954859a63da5"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 156,
      "start_column": 8,
      "end_line": 156,
      "end_column": 13
    },
    "debug_info": {
      "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nR_and_\u03b8_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n\u22a2 False",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L156"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-07-11T22:21:56+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "d1a6cdfab5ae66d659002b1ffeb9f0569e581b53e8da66b77fcf93f7da2152b4"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 170,
      "start_column": 6,
      "end_line": 170,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nL_and_n\u03b8_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n\u22a2 False",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L170"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-09-13T00:22:40+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "71251aae6763bef16ec2e1ef4bfece7f0bab3213c9b8d07df4391e6e46341c63"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/PartInterpolation.lean",
      "start_line": 172,
      "start_column": 6,
      "end_line": 172,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nR_and_\u03b8_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n\u22a2 False",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L172"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-09-13T00:22:40+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "c694bf9fbe56cb8d5c44a39fd0f7c302a7b6ab649930e194a8fe784322cc37c9"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/TableauExamples.lean",
      "start_line": 165,
      "start_column": 2,
      "end_line": 165,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u22a2 \u00acprovable (~(\u2308\u2217a\u2309~\u2308a\u2309p)\u22c0(~p))",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauExamples.lean#L165"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2025-01-24T21:13:32+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "f564e6af7f10cec0148281facc22ee461937b5f50655beb508345e676acc502b"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/TableauExamples.lean",
      "start_line": 170,
      "start_column": 2,
      "end_line": 170,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u22a2 \u00acprovable (~(\u2308a\u2309\u2308\u2217a\u2309p)\u22c0(~\u2308a\u2309\u2308\u2217a\u2309q))",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauExamples.lean#L170"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2025-01-24T21:13:32+01:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "0ce3ddd2f2a5d3996d1b9acf53baeebbf3fdfc7f3b2a71b5276b5ab248aa3874"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 55,
      "start_column": 42,
      "end_line": 55,
      "end_column": 47
    },
    "debug_info": {
      "goal": "\u22a2 4 \u2208 []",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L55"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-07-03T12:15:03+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "690c3bf14a304d64953477a20fe411ed1547bbea3298cb7f04c0cf9449e29b73"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 56,
      "start_column": 42,
      "end_line": 56,
      "end_column": 47
    },
    "debug_info": {
      "goal": "\u22a2 4 \u2208 [3]",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L56"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-07-03T12:15:03+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "e0479a60e806bc365dd9d971fd8f8b6ce1d695de1a4063988ff5c051656c08fe"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 68,
      "start_column": 2,
      "end_line": 68,
      "end_column": 7
    },
    "debug_info": {
      "goal": "a\u271d : List \u2115\nt : NiceTree a\u271d\nk : \u2115\nk_in_N : k \u2208 a\u271d\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L68"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-07-03T12:15:03+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "2382546d1be0fe9c641b7633ab280e855afe8311a59fdb200ae1f34e6e9fe383"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 227,
      "start_column": 4,
      "end_line": 227,
      "end_column": 9
    },
    "debug_info": {
      "goal": "n : \u2115\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\nthis : k < List.length Hp\n\u22a2 k \u2264 PathIn.length [] n root p",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L227"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-05-13T21:59:41+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "8806c94e27f435217af140d76d4caea6b6376c0cfcc90c526c5f54347cfdae40"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 222,
      "start_column": 28,
      "end_line": 222,
      "end_column": 33
    },
    "debug_info": {
      "goal": "n : \u2115\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\n\u22a2 k < List.length Hp",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L222"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-05-13T21:59:41+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "eb859dfe0ae16476e4675c55dd90c5a0e87239e940cc7d1e872d5f5afb656609"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 248,
      "start_column": 4,
      "end_line": 248,
      "end_column": 9
    },
    "debug_info": {
      "goal": "H : History\nn : \u2115\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\nthis : k < List.length Hp\n\u22a2 k \u2264 PathIn.length H n root p",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L248"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-05-09T19:21:30+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "236ba65b7f2ba0836ee55c1a84900ebeecaa4df3cc0ccfc9c56614a5543025bf"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 243,
      "start_column": 28,
      "end_line": 243,
      "end_column": 33
    },
    "debug_info": {
      "goal": "H : History\nn : \u2115\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\n\u22a2 k < List.length Hp",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L243"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-05-13T21:59:41+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "699914277ac6c6764ea627ce65cf77b2651c3fa05e0299bd4950d4912a31b231"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 289,
      "start_column": 2,
      "end_line": 289,
      "end_column": 7
    },
    "debug_info": {
      "goal": "m : \u2115\na\u271d\u00b9 : List \u2115\nm_in_ms : m \u2208 a\u271d\u00b9\na\u271d : \u2115\nst : Step a\u271d a\u271d\u00b9\ntail\u271d : List \u2115\nnext : {m : \u2115} \u2192 m \u2208 a\u271d\u00b9 \u2192 HisTree (a\u271d :: tail\u271d) m\nrest rest' : PathIn (a\u271d :: tail\u271d) m (@next m m_in_ms)\nhyp :\n  Sigma.fst (treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest) =\n    Sigma.fst (treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest')\n\u22a2 (treeAtP._proof_27 tail\u271d a\u271d a\u271d\u00b9 m m_in_ms next rest \u25b8 treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest).fst =\n    (treeAtP._proof_27 tail\u271d a\u271d a\u271d\u00b9 m m_in_ms (fun {m} => @next m) rest' \u25b8\n        treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest').fst",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L289"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-04-01T19:43:15+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "999b17b8c5ed061be127510687bc39a0a9143da7b86766bf72d9792c05764999"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 311,
      "start_column": 4,
      "end_line": 311,
      "end_column": 9
    },
    "debug_info": {
      "goal": "n : \u2115\nms : List \u2115\nm : \u2115\nm_in_ms : m \u2208 ms\nst : Step n ms\nnext : {m : \u2115} \u2192 m \u2208 ms \u2192 HisTree [n] m\nrest : PathIn [n] m (@next m m_in_ms)\np_is_rep : isRep (treeAt [] n (HisTree.step n [] ms st next) (PathIn.cons [] ms n m m_in_ms st next rest))\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L311"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-04-01T19:43:15+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "8760f43a1cb9249d09e615e864b0e680e9e9212c6b9196b98e25d2696721c81b"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 350,
      "start_column": 8,
      "end_line": 350,
      "end_column": 13
    },
    "debug_info": {
      "goal": "n st : \u2115\nH : List \u2115\nk\u271d : \u2115\n_in_empty : some k\u271d = List.idxOf? n (st :: H)\np_is_rep : True\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L350"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-04-01T19:43:15+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "6f90ecd3b7a643168a0f3ebaecdf238bd1d61958ddb607ee0b10985fdb10c702"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 370,
      "start_column": 4,
      "end_line": 370,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case refl.refl.refl.refl\nn\u271d : \u2115\nms\u271d : List \u2115\nm\u271d : \u2115\nm_in\u271d : m\u271d \u2208 ms\u271d\ns\u271d : Step n\u271d ms\u271d\nnext\u271d : {m : \u2115} \u2192 m \u2208 ms\u271d \u2192 HisTree [n\u271d] m\nrest\u271d : PathIn [n\u271d] m\u271d (@next\u271d m\u271d m_in\u271d)\np_is_rep\u271d\u00b2 : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) (PathIn.cons [] ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\nn : (n : \u2115) \u00d7' (ht : HisTree [] n) \u00d7' (p : PathIn [] n ht) \u00d7' isRep (treeAt [] n ht p)\na\u271d\u00b3 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht\u271d : (ht : HisTree [] n\u271d) \u00d7' (p : PathIn [] n\u271d ht) \u00d7' isRep (treeAt [] n\u271d ht p)\na\u271d\u00b2 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree [] n\u271d\np\u271d\u00b9 : (p : PathIn [] n\u271d ht) \u00d7' isRep (treeAt [] n\u271d ht p)\na\u271d\u00b9 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np\u271d : PathIn [] n\u271d ht\np_is_rep\u271d\u00b9 : isRep (treeAt [] n\u271d ht p\u271d)\na\u271d : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\n\u03b2\u271d : Type\np : PathIn [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d)\np_is_rep\u271d : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) p)\n\u03b2 : Type\np_is_rep : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) (PathIn.cons [] ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\n\u22a2 1 + PathIn.length [n\u271d] m\u271d (@next\u271d m\u271d m_in\u271d) rest\u271d < [].length + PathIn.length [] n\u271d ht p\u271d",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L370"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-04-01T19:43:15+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "12db5b987ec02f142048f143805d26aa1f274db00aad3c54d0bcc48d255d7e05"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 373,
      "start_column": 4,
      "end_line": 373,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case refl.refl.refl.refl.refl\nn\u271d head\u271d : \u2115\ntail\u271d ms\u271d : List \u2115\nm\u271d : \u2115\nm_in\u271d : m\u271d \u2208 ms\u271d\ns\u271d : Step n\u271d ms\u271d\nnext\u271d : {m : \u2115} \u2192 m \u2208 ms\u271d \u2192 HisTree (n\u271d :: head\u271d :: tail\u271d) m\nrest\u271d : PathIn (n\u271d :: head\u271d :: tail\u271d) m\u271d (@next\u271d m\u271d m_in\u271d)\np_is_rep\u271d\u00b2 :\n  isRep\n    (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\n      (PathIn.cons (head\u271d :: tail\u271d) ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\nn :\n  (n : \u2115) \u00d7'\n    (ht : HisTree (head\u271d :: tail\u271d) n) \u00d7' (p : PathIn (head\u271d :: tail\u271d) n ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n ht p)\na\u271d\u00b3 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht\u271d :\n  (ht : HisTree (head\u271d :: tail\u271d) n\u271d) \u00d7' (p : PathIn (head\u271d :: tail\u271d) n\u271d ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p)\na\u271d\u00b2 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree (head\u271d :: tail\u271d) n\u271d\np\u271d\u00b9 : (p : PathIn (head\u271d :: tail\u271d) n\u271d ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p)\na\u271d\u00b9 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np\u271d : PathIn (head\u271d :: tail\u271d) n\u271d ht\np_is_rep\u271d\u00b9 : isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p\u271d)\na\u271d : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\n\u03b2\u271d : Type\np : PathIn (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\np_is_rep\u271d : isRep (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d) p)\n\u03b2 : Type\np_is_rep :\n  isRep\n    (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\n      (PathIn.cons (head\u271d :: tail\u271d) ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\n\u22a2 tail\u271d.length + 1 + 1 + PathIn.length (n\u271d :: head\u271d :: tail\u271d) m\u271d (@next\u271d m\u271d m_in\u271d) rest\u271d <\n    (head\u271d :: tail\u271d).length + PathIn.length (head\u271d :: tail\u271d) n\u271d ht p\u271d",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L373"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-04-01T19:43:15+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "f54ef1c79db185ebb390b04aab794ca95312cab02f39d4e3d1fa15f5473a5759"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Unused/Repeat.lean",
      "start_line": 397,
      "start_column": 6,
      "end_line": 397,
      "end_column": 11
    },
    "debug_info": {
      "goal": "n : \u2115\nH' : History\nn' : \u2115\nH\u271d : History\nm\u271d k\u271d : \u2115\n_in_H : some k\u271d = List.idxOf? m\u271d H\u271d\np_is_rep :\n  @isRep.match_1 (fun x => Prop) \u27e8H\u271d, \u27e8m\u271d, HisTree.rep H\u271d m\u271d k\u271d _in_H\u27e9\u27e9 (fun fst fst_1 k a => True) fun x => False\nms : List \u2115\nm : \u2115\nm_in : m \u2208 ms\ns : Step n ms\nnext : {m : \u2115} \u2192 m \u2208 ms \u2192 HisTree [n] m\nrest : PathIn [n] m (@next m m_in)\np_ht_def :\n  \u27e8H\u271d, \u27e8m\u271d, HisTree.rep H\u271d m\u271d k\u271d _in_H\u27e9\u27e9 =\n    treeAt [] n (HisTree.step n [] ms s next) (PathIn.cons [] ms n m m_in s next rest)\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L397"
    },
    "metadata": {
      "blame_email_hash": "f9cc4b9ec8ec",
      "blame_date": "2024-04-01T19:43:15+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "8daf839542f9888a4d1fe113fbc207b3d06ef16c2827f84d563c3cbfc907f28b"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 1014,
      "start_column": 112,
      "end_line": 1014,
      "end_column": 117
    },
    "debug_info": {
      "goal": "\u03c7 : LoadFormula\n\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\n\u03b1_natom : \u00ac\u03b1.isAtomic\n\u22a2 \u2203 s,\n    t \u22d6_ s \u2227\n      \u2200 F\u03b4 \u2208 H \u03b1,\n        if side = Side.LL then\n          if \u03be = AnyFormula.loaded \u03c7 then\n            nodeAt s = ((nodeAt s).1 ++ F\u03b4.1, (nodeAt s).2.1, some (Sum.inl (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n          else nodeAt s = ((nodeAt s).1 ++ F\u03b4.1, (nodeAt s).2.1, some (Sum.inl (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n        else\n          if \u03be = AnyFormula.loaded \u03c7 then\n            nodeAt s = ((nodeAt s).1, (nodeAt s).2.1 ++ F\u03b4.1, some (Sum.inr (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n          else nodeAt s = ((nodeAt s).1, (nodeAt s).2.1 ++ F\u03b4.1, some (Sum.inr (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L1014"
    },
    "metadata": {
      "blame_email_hash": "cc8f18f5e466",
      "blame_date": "2025-05-24T17:50:42+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "4fdbf85b4dfd54d969e3c66fcf33812a90fdc8a1c1a29d3bfeb2219daadf7df6"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 1614,
      "start_column": 16,
      "end_line": 1614,
      "end_column": 21
    },
    "debug_info": {
      "goal": "case inr.intro.intro.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\n\u03b2 : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF\u271d : List Formula\n\u03b4\u271d : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4\u271d v w\nv_F : (M, v)\u22a8F\u271d\nF\u03b4_in_H : (F\u271d, \u03b4\u271d) \u2208 H (\u2217\u03b2)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be))).isFree = true\n\u03b4_ne\u271d : \u00ac\u03b4\u271d = []\nv_\u03b1_w : Relation.ReflTransGen (relate M \u03b2) v w\nn : \u2115\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : \u2200 (i : Fin n), relate M \u03b2 (ws.get i.castSucc) (ws.get i.succ)\nk : Fin n\nih :\n  \u2203 sk,\n    Relation.TransGen (cEdge X tab) t sk \u2227\n      (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n        \u2203 \u03b3,\n          (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n            (M, ws[k.castSucc])\u22a8nodeAt sk \u2227\n              ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)\nne : \u00acws[k.castSucc] = ws[k.succ]\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n\u03b3 : List Program\ninside_con : (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk)\nwk_sk : (M, ws[k.castSucc])\u22a8nodeAt sk\nloaded_con : ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true\nprincipal_con : True\nF : List Formula\n\u03b4 : List Program\nF\u03b4_in : (F, \u03b4) \u2208 H \u03b2\nwk_F : (M, ws[k.castSucc])\u22a8(F, \u03b4).1\nwk_\u03b4_wk1 : relateSeq M (F, \u03b4).2 ws[k.castSucc] ws[k.succ]\n\u03b4_ne : \u03b4 \u2260 []\nH\u03b2star_prop : (F, \u03b4 ++ [\u2217\u03b2]) \u2208 H (\u2217\u03b2)\n\u22a2 \u2203 sk,\n    Relation.TransGen (cEdge X tab) t sk \u2227\n      (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n        \u2203 \u03b3,\n          (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n            (M, ws[k.succ])\u22a8nodeAt sk \u2227\n              ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L1614"
    },
    "metadata": {
      "blame_email_hash": "cc8f18f5e466",
      "blame_date": "2025-05-24T17:50:42+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "c6e69c43f25323d299938bbd4d3eee3f238cc6afe9fbe2b9b68d6ceeec47ce55"
  },
  {
    "repo": {
      "remote": "https://github.com/m4lvin/lean4-pdl",
      "branch": "multisetEqTo",
      "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Pdl/Soundness.lean",
      "start_line": 1624,
      "start_column": 10,
      "end_line": 1624,
      "end_column": 15
    },
    "debug_info": {
      "goal": "case inr.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\n\u03b2 : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : (M, v)\u22a8F\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217\u03b2)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\n\u03b4_ne : \u00ac\u03b4 = []\nv_\u03b1_w : Relation.ReflTransGen (relate M \u03b2) v w\nn : \u2115\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : \u2200 (i : Fin n), relate M \u03b2 (ws.get i.castSucc) (ws.get i.succ)\nclaim :\n  \u2200 (k : Fin n.succ),\n    \u2203 sk,\n      Relation.TransGen (cEdge X tab) t sk \u2227\n        (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n          \u2203 \u03b3,\n            (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n              (M, ws[k])\u22a8nodeAt sk \u2227 ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)\nh : w = w\nsn : PathIn tab\nt_sn : Relation.TransGen (cEdge X tab) t sn\nloaded_con : List Program\nw_sn : (~''(AnyFormula.loaded (\u230a\u230aloaded_con\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sn)\nwithout_con :\n  (M, w)\u22a8nodeAt sn \u2227 ((nodeAt sn).without (~''(AnyFormula.loaded (\u230a\u230aloaded_con\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True\n\u03b1_natom : \u00ac(\u2217\u03b2).isAtomic\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n        (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
      "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L1624"
    },
    "metadata": {
      "blame_email_hash": "cc8f18f5e466",
      "blame_date": "2025-05-24T17:50:42+02:00",
      "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
    },
    "id": "d3ba8589e077136158acee0b7e6c615694a8f54052a72a44176aaddc37a03af0"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "Scratch/Fiddle4.lean",
      "start_line": 203,
      "start_column": 2,
      "end_line": 203,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u22a2 2 \u2264 1",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L203"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-04-30T15:46:18+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "4e5d858219041619f8f5efc8d198eaf9f2c466db0c76b4693fa808fba0e585be"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "Scratch/Fiddle4.lean",
      "start_line": 234,
      "start_column": 18,
      "end_line": 234,
      "end_column": 23
    },
    "debug_info": {
      "goal": "P Q : Prop\n\u22a2 Q",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L234"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-07-22T19:06:07+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "63889ee39d18a4100cd7e6938c97f0c9d35a34bafd96a25389f804d2b0329a8b"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "Scratch/Fiddle4.lean",
      "start_line": 235,
      "start_column": 22,
      "end_line": 235,
      "end_column": 27
    },
    "debug_info": {
      "goal": "P Q : Prop\nass : Q\n\u22a2 Q \u2192 P",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L235"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-07-22T19:06:07+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "3eef76804a987db488b9ba4dc1536a105e1060653ef38ca0183a1c40c353b1fc"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "Scratch/Fiddle4.lean",
      "start_line": 239,
      "start_column": 25,
      "end_line": 239,
      "end_column": 30
    },
    "debug_info": {
      "goal": "P : \u2115 \u2192 Prop\nf : \u2115 \u2192 \u2115\n\u22a2 \u2200 (n : \u2115), P n",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L239"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-07-22T19:06:07+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "cc7304237ba6b5308bf06ad7247a6b1b0625d3072dff20bf5f38336277789b9e"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "Scratch/Fiddle4.lean",
      "start_line": 243,
      "start_column": 28,
      "end_line": 243,
      "end_column": 33
    },
    "debug_info": {
      "goal": "p\u2081 p\u2082 p\u2083 q : Prop\n\u22a2 p\u2081 \u2228 p\u2082 \u2228 p\u2083",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L243"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-08-02T10:30:50+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "2b1cd5e46731b0389f8ca7dee2933e3a10047a3cd77cc2db1204b332316838b3"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "Scratch/Fiddle4.lean",
      "start_line": 250,
      "start_column": 43,
      "end_line": 250,
      "end_column": 48
    },
    "debug_info": {
      "goal": "n : \u2115\nq : Prop\n\u22a2 n = 1 \u2228 n = 2 \u2228 n = 3",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L250"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-08-02T10:30:50+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "fd29ca647327a32c8f69903aa3a713e798a3bfa405370a192ab5203d5132fd5f"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Fin/Basic.lean",
      "start_line": 558,
      "start_column": 32,
      "end_line": 558,
      "end_column": 37
    },
    "debug_info": {
      "goal": "\u22a2 True",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L558"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "ea72e91ae7f0d174174a192a3e94c4873a0a9040509bb277e6b35f8e937c4a74"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "CodeGen/from_statement_17638710709303199183.lean",
      "start_line": 86,
      "start_column": 78,
      "end_line": 86,
      "end_column": 83
    },
    "debug_info": {
      "goal": "n : \u2115\nh\u271d : Even n\ncalculation_104313057753019104 : \u2203 k, \u2191n = 2 * k \u2192 \u2191n * (\u2191n + 1) = 2 * k * (2 * k + 1)\n\u22a2 \u2203 k, \u2191n = 2 * k",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_17638710709303199183.lean#L86"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2025-02-01T02:51:42+00:00",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "31a109dbd90a75b55992032e01af42d18eef6b6783ec5ad367a3967a2b0c8f4d"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "CodeGen/from_statement_17638710709303199183.lean",
      "start_line": 93,
      "start_column": 49,
      "end_line": 93,
      "end_column": 54
    },
    "debug_info": {
      "goal": "n : \u2115\nh\u271d : \u00acEven n\n\u22a2 Odd n",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_17638710709303199183.lean#L93"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2025-02-01T02:51:42+00:00",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "7209b19745e89134690230053bac4711304bba9aad7c60e82dc8d7cc5cefcec1"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "CodeGen/from_statement_17638710709303199183.lean",
      "start_line": 100,
      "start_column": 6,
      "end_line": 100,
      "end_column": 11
    },
    "debug_info": {
      "goal": "n : \u2115\nh\u271d : \u00acEven n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : \u2203 k, \u2191n = 2 * k + 1 \u2192 True\n\u22a2 \u2203 k, \u2191n = 2 * k + 1 \u2192 2 * k + 1 = (2 * k + 1) * (2 * k + 2)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_17638710709303199183.lean#L100"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2025-02-01T02:51:42+00:00",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "45277d3e11d05022e5aea8805bd5c1bda9e160750bad0cffe5ae7e0a425f54c8"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "CodeGen/from_statement_17638710709303199183.lean",
      "start_line": 104,
      "start_column": 6,
      "end_line": 104,
      "end_column": 11
    },
    "debug_info": {
      "goal": "n : \u2115\nh\u271d : \u00acEven n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : \u2203 k, \u2191n = 2 * k + 1 \u2192 True\ncalculation_2616508765904695607 : \u2203 k, \u2191n = 2 * k + 1 \u2192 2 * k + 1 = (2 * k + 1) * (2 * k + 2)\n\u22a2 \u2203 k, \u2191n = 2 * (2 * k + 1) * (k + 1)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_17638710709303199183.lean#L104"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2025-02-01T02:51:42+00:00",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "3ec98b65ad551b6408062a877da9479347064ac7bcb02b55d6c44f9edc4c66d3"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "DataGenAide/ThmInfo.lean",
      "start_line": 36,
      "start_column": 51,
      "end_line": 36,
      "end_column": 56
    },
    "debug_info": {
      "goal": "\u22a2 \u2200 (n : Nat), n + 2 = 2 + n",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/DataGenAide/ThmInfo.lean#L36"
    },
    "metadata": {
      "blame_email_hash": "daa7bcb7d9e3",
      "blame_date": "2022-08-16T17:16:08+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "e3503a1176647b5bcd3e447b0f7c01737454b9c8df20603189b51e5eb6624456"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "DataGenAide/ThmInfo.lean",
      "start_line": 39,
      "start_column": 50,
      "end_line": 39,
      "end_column": 55
    },
    "debug_info": {
      "goal": "a b c : Nat\n\u22a2 a ^ 3 + b ^ 3 = c ^ 3 \u2192 a * b * c = 0",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/DataGenAide/ThmInfo.lean#L39"
    },
    "metadata": {
      "blame_email_hash": "daa7bcb7d9e3",
      "blame_date": "2022-08-16T17:16:08+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "1aeb318cf210058837c469a8e5ebdf88ff5043651837ee2b624c9194ecff5742"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "DataGenAide/ConstDeps.lean",
      "start_line": 114,
      "start_column": 17,
      "end_line": 114,
      "end_column": 22
    },
    "debug_info": {
      "goal": "case succ\nm n : Nat\nih : n + m = m + n\n\u22a2 n + 1 + m = m + (n + 1)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/DataGenAide/ConstDeps.lean#L114"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-05-05T19:52:08+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "b7b1645900c28ff1bb6936a6aadbaf667425acb9c989c6daea22ae65199fe827"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanAide/CheckedSorry.lean",
      "start_line": 41,
      "start_column": 26,
      "end_line": 41,
      "end_column": 41
    },
    "debug_info": {
      "goal": "\u22a2 1 + 1 = 2",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L41"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-11-11T13:21:12+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "4f7efb18841f972dcd9251d8f7fe3745c7e6874d309726e479abb5ecf5c1ae7c"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanAide/CheckedSorry.lean",
      "start_line": 46,
      "start_column": 44,
      "end_line": 46,
      "end_column": 59
    },
    "debug_info": {
      "goal": "n : Nat\n\u22a2 1 + 1 = 2",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L46"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-11-11T13:21:12+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "4146e501e7a04260042e32ac74dc68f0f711ccd1b93f1033160d0e67825d0a04"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanAide/CheckedSorry.lean",
      "start_line": 99,
      "start_column": 2,
      "end_line": 99,
      "end_column": 17
    },
    "debug_info": {
      "goal": "case left\n\u22a2 1 + 1 = 2",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L99"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-11-11T13:21:12+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "f80b5acf092e04dda12f40b2a5bf2c4c3668b700397ef8957c6ddca2e0e2ca42"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanAide/CheckedSorry.lean",
      "start_line": 101,
      "start_column": 2,
      "end_line": 101,
      "end_column": 17
    },
    "debug_info": {
      "goal": "case right.left\n\u22a2 2 + 2 = 4",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L101"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-11-11T13:21:12+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "28f1ed08e927eeefd194a2018d953602c298ceff99b9bf6612d74986dd160212"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanAide/CheckedSorry.lean",
      "start_line": 102,
      "start_column": 2,
      "end_line": 102,
      "end_column": 17
    },
    "debug_info": {
      "goal": "case right.right\n\u22a2 1 + 1 = 2",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L102"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-11-11T13:21:12+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "a812b6c594cdb09f74837f853b2439bdbd57d2d73dd7fd3e75aa3b297968ceb8"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 19,
      "start_column": 104,
      "end_line": 19,
      "end_column": 109
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {a b : \u2124},\n      \u2203 x y z w,\n        a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2227\n          \u2203 x y z w, b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2192 \u2203 x y z w, a * b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2) \u2192\n    let is_sum_of_four_squares := fun n => \u2203 a b c d, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2;\n    \u2200 (x y : \u2115), is_sum_of_four_squares x \u2192 is_sum_of_four_squares y \u2192 is_sum_of_four_squares (x * y)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L19"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "3ab59edd7c375394edb7b9b1170bf770ffc7fa4595efa5dc4bc4e57b877fdfed"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 21,
      "start_column": 267,
      "end_line": 21,
      "end_column": 272
    },
    "debug_info": {
      "goal": "\u22a2 (let is_sum_of_four_squares := fun n => \u2203 a b c d, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2;\n    \u2200 (x y : \u2115), is_sum_of_four_squares x \u2192 is_sum_of_four_squares y \u2192 is_sum_of_four_squares (x * y)) \u2192\n    \u2200 {a b : \u2124},\n      \u2203 x y z w,\n        a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2227 b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2192\n          \u2203 x y z w, a * b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L21"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "a8a67e413b7e20200a9e483bb31d124dbb2f219908bdad4589b060b48130ab38"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 30,
      "start_column": 2,
      "end_line": 30,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case a\nh : {R : Type u} \u2192 [inst : CommRing R] \u2192 (\u2200 (x : R), x * x = x) \u2192 CommRing R\nR : Type u\nRRing : Ring R\nhyp : \u2200 (x : R), x * x = x\nthis : CommRing R\nx : R\n\u22a2 x * x = x",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L30"
    },
    "metadata": {
      "blame_email_hash": "daa7bcb7d9e3",
      "blame_date": "2022-11-12T12:43:25+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "969c60b995551ef7a0c397f95b4f5870e6a07272348d28ff68c294cfb7ea656c"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 40,
      "start_column": 2,
      "end_line": 40,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case h.left\nh : \u2200 (n : \u2115), \u2203 p\u2081 p\u2082, Nat.Prime p\u2081 \u2227 Nat.Prime p\u2082 \u2227 p\u2081 + 2 = p\u2082 \u2227 2 + n < p\u2082\nn p\u2081 p\u2082 : \u2115\nPrime_p\u2081 : Nat.Prime p\u2081\nPrime_p\u2082 : Nat.Prime p\u2082\nhyp\u2081 : p\u2081 + 2 = p\u2082\nhyp\u2082 : 2 + n < p\u2082\n\u22a2 p\u2081 > n",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L40"
    },
    "metadata": {
      "blame_email_hash": "daa7bcb7d9e3",
      "blame_date": "2022-11-12T12:43:25+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "ee6fb76685df32f6f4659d67c521b76b7139a3c8c308e53f953067c06e62006b"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 51,
      "start_column": 28,
      "end_line": 51,
      "end_column": 33
    },
    "debug_info": {
      "goal": "h : \u2200 (n : \u2115), \u2203 p > n, Nat.Prime p \u2227 Nat.Prime (p + 2)\nn p : \u2115\nhpn : p > n\nPrime_p : Nat.Prime p\nPrime_pp2 : Nat.Prime (p + 2)\n\u22a2 2 + n < p + 2",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L51"
    },
    "metadata": {
      "blame_email_hash": "daa7bcb7d9e3",
      "blame_date": "2022-11-14T19:44:46+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "01ccd0085368235a0730a2f92a19f85eed4627a0231e6af8a399207fcb47326e"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 58,
      "start_column": 350,
      "end_line": 58,
      "end_column": 355
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {r : \u03b1 \u2192 \u03b1 \u2192 Prop} [inst : Preorder \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain r c \u2192 \u2203 ub, \u2200 a \u2208 c, r a ub) \u2192 \u2200 [inst : Nonempty \u03b1], \u2203 m, \u2200 (a : \u03b1), r m a \u2192 r a m) \u2192\n    \u2200 {\u03b1 : Type u} [inst : PartialOrder \u03b1] [inst_1 : Nonempty \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain LE.le c \u2192 \u2203 b, \u2200 a \u2208 c, a \u2264 b) \u2192 \u2203 m, \u2200 (a : \u03b1), m \u2264 a \u2192 a = m",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L58"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "663f1d7bed0a07da1b4b022f0896edf609082f4923aac93ba6c2242baed4653b"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 59,
      "start_column": 350,
      "end_line": 59,
      "end_column": 355
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : PartialOrder \u03b1] [inst_1 : Nonempty \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain LE.le c \u2192 \u2203 b, \u2200 a \u2208 c, a \u2264 b) \u2192 \u2203 m, \u2200 (a : \u03b1), m \u2264 a \u2192 a = m) \u2192\n    \u2200 {\u03b1 : Type u_1} {r : \u03b1 \u2192 \u03b1 \u2192 Prop} [inst : Preorder \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain r c \u2192 \u2203 ub, \u2200 a \u2208 c, r a ub) \u2192 \u2200 [inst : Nonempty \u03b1], \u2203 m, \u2200 (a : \u03b1), r m a \u2192 r a m",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L59"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "72fa5673545f23f21204579d2e2bdbd4316dfea4fb13fc9b48c208a13a9deabb"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 62,
      "start_column": 420,
      "end_line": 62,
      "end_column": 425
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} {\u03b3 : Type u_3} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2]\n      [inst_2 : UniformSpace \u03b3] {f : \u03b1 \u2192 \u03b2} {g : \u03b2 \u2192 \u03b3},\n      UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)) \u2192\n    \u2200 {\u03b1 \u03b2 \u03b3 : Type u} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2] [inst_2 : UniformSpace \u03b3] (f : \u03b1 \u2192 \u03b2)\n      (g : \u03b2 \u2192 \u03b3), UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L62"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "1ed0c4569a254e4c6ed7dc09554aee0af9329886a9a8e1a13e78d353cbc6355d"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 63,
      "start_column": 420,
      "end_line": 63,
      "end_column": 425
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 \u03b2 \u03b3 : Type u} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2] [inst_2 : UniformSpace \u03b3] (f : \u03b1 \u2192 \u03b2)\n      (g : \u03b2 \u2192 \u03b3), UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)) \u2192\n    \u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} {\u03b3 : Type u_3} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2]\n      [inst_2 : UniformSpace \u03b3] {f : \u03b1 \u2192 \u03b2} {g : \u03b2 \u2192 \u03b3},\n      UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L63"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "2644c07ea1f0df7797d6745d8bf3c181cad089d5f9eb6e2dadaf1f97291c8a66"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 67,
      "start_column": 488,
      "end_line": 67,
      "end_column": 493
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {C : Type u\u2081} [inst : CategoryTheory.Category.{u_3, u\u2081} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\n      {T T' : C} (t : CategoryTheory.Limits.IsTerminal T),\n      CategoryTheory.Limits.IsTerminal T' \u2192 CategoryTheory.IsIso (t.from T')) \u2192\n    \u2200 {C : Type u_4} [inst : CategoryTheory.Category.{u_5, u_4} C] (T\u2081 T\u2082 : C),\n      CategoryTheory.Limits.IsTerminal T\u2081 \u2192 CategoryTheory.Limits.IsTerminal T\u2082 \u2192 \u2203 \u03b9, \u2200 (\u03b9' : T\u2081 \u2245 T\u2082), \u03b9 = \u03b9'",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L67"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "9ef757eff2319a133ecd20e70df68091c888370384a35912f8fdb150ea0e4b94"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 68,
      "start_column": 488,
      "end_line": 68,
      "end_column": 493
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {C : Type u_3} [inst : CategoryTheory.Category.{u_4, u_3} C] (T\u2081 T\u2082 : C),\n      CategoryTheory.Limits.IsTerminal T\u2081 \u2192 CategoryTheory.Limits.IsTerminal T\u2082 \u2192 \u2203 \u03b9, \u2200 (\u03b9' : T\u2081 \u2245 T\u2082), \u03b9 = \u03b9') \u2192\n    \u2200 {C : Type u\u2081} [inst : CategoryTheory.Category.{u_5, u\u2081} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\n      {T T' : C} (t : CategoryTheory.Limits.IsTerminal T),\n      CategoryTheory.Limits.IsTerminal T' \u2192 CategoryTheory.IsIso (t.from T')",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L68"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "c663d343c0db9ea5b173e622b518238ab5bddf4ddedbec6851b16186f7d2478e"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 71,
      "start_column": 104,
      "end_line": 71,
      "end_column": 109
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 (a b c : \u2124), a ^ 3 + b ^ 3 \u2260 c ^ 3) \u2192 \u2200 (a b c : \u2115), a > 0 \u2192 b > 0 \u2192 \u00aca ^ 3 + b ^ 3 = c ^ 3",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L71"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "e35c9a5aa981d6ec97f6ca5f1d9d14f4688c689fd69fad5fe5c6dc05c9a34cbf"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 72,
      "start_column": 104,
      "end_line": 72,
      "end_column": 109
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 (a b c : \u2115), a > 0 \u2192 b > 0 \u2192 \u00aca ^ 3 + b ^ 3 = c ^ 3) \u2192 \u2200 (a b c : \u2124), a ^ 3 + b ^ 3 \u2260 c ^ 3",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L72"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "19e8535422803b1595460313d54c4aadd1dceae5c809641e07aeb05ce60f580e"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 75,
      "start_column": 183,
      "end_line": 75,
      "end_column": 188
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {G : Type u_1} [inst : Group G], (\u2200 (x : G), x ^ 2 = 1) \u2192 \u2200 {x y : G}, Commute x y) \u2192\n    \u2200 {G : Type u} [inst : Group G], (\u2200 (x : G), G \u2192 x * x = 1) \u2192 \u2200 (x y : G), Commute x y",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L75"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "0438722d586fd8e17dc2869a27a52e187152da4a5af3ceeb63b75c1758c19e00"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 76,
      "start_column": 183,
      "end_line": 76,
      "end_column": 188
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {G : Type u} [inst : Group G], (\u2200 (x : G), G \u2192 x * x = 1) \u2192 \u2200 (x y : G), Commute x y) \u2192\n    \u2200 {G : Type u_1} [inst : Group G], (\u2200 (x : G), x ^ 2 = 1) \u2192 \u2200 {x y : G}, Commute x y",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L76"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "62cf8b873407764dfabab1067ab9af91e69d5eb886e360ca0f3ffeabf10bded3"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 79,
      "start_column": 89,
      "end_line": 79,
      "end_column": 94
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {p q : \u2115}, p = q + 1 \u2192 Even (p * q)) \u2192 \u2200 (n : \u2115), Even (n * (n + 1))",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L79"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "c86656f44ad14cd03106f340e7e4651fadd120af04bbf2e527534d5b3ec8f564"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 80,
      "start_column": 89,
      "end_line": 80,
      "end_column": 94
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 (n : \u2115), Even (n * (n + 1))) \u2192 \u2200 {p q : \u2115}, p = q + 1 \u2192 Even (p * q)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L80"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T10:45:47+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "d9b8232dad3f51debcf164925a297ec80bfd8f4550a2c4b948c30289b7fba032"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 83,
      "start_column": 120,
      "end_line": 83,
      "end_column": 125
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 (\u03b1 : Type u), Monoid.IsTorsionFree (FreeGroup \u03b1)) \u2192 \u2200 {\u03b1 : Type u}, Monoid.IsTorsionFree (FreeGroup \u03b1)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L83"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "9b29d4e46fb190ebea3ef7f1bdd1217f07f27f28df7e2f87297b75e99c81d0e9"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 84,
      "start_column": 120,
      "end_line": 84,
      "end_column": 125
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 : Type u}, Monoid.IsTorsionFree (FreeGroup \u03b1)) \u2192 \u2200 (\u03b1 : Type u), Monoid.IsTorsionFree (FreeGroup \u03b1)",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L84"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "ac33ad033bd3a6c2a6ff9fcca308504ea6c758ef2c0b5ec79d2c84dda1207263"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 88,
      "start_column": 58,
      "end_line": 88,
      "end_column": 63
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {n : \u2115}, 1 < n \u2192 \u2203 p, Nat.Prime p \u2227 p \u2223 n) \u2192 \u2200 n > 1, \u2203 p, Nat.Prime p \u2227 \u2203 d, p * d = n",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L88"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "82cb2e8514f1f346f837e9bedca83952637b520b289e4ee545f559abf135a3e9"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 89,
      "start_column": 124,
      "end_line": 89,
      "end_column": 129
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 n > 1, \u2203 p, Nat.Prime p \u2227 \u2203 d, p * d = n) \u2192 \u2200 {n : \u2115}, 1 < n \u2192 \u2203 p, Nat.Prime p \u2227 p \u2223 n",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L89"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "f093a45c38a98320b5490594ce6312df77ec2bf86616f34ed196bed0b45c2b16"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 98,
      "start_column": 310,
      "end_line": 98,
      "end_column": 315
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} [inst : Group \u03b1] [inst_1 : Group \u03b2] [inst_2 : Fintype \u03b1] [inst_3 : Fintype \u03b2]\n      {f : \u03b1 \u2192 \u03b2}, IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f) \u2192\n    \u2200 {\u03b1 : Type u} [inst : Finite \u03b1] (f : FreeGroup \u03b1 \u2192 FreeGroup \u03b1),\n      IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L98"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "003c141b7d015e3e5cb6dd3a8a60205c6878cd7820c7a004c806aade4c913631"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 99,
      "start_column": 310,
      "end_line": 99,
      "end_column": 315
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : Finite \u03b1] (f : FreeGroup \u03b1 \u2192 FreeGroup \u03b1),\n      IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f) \u2192\n    \u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} [inst : Group \u03b1] [inst_1 : Group \u03b2] [inst_2 : Fintype \u03b1] [inst_3 : Fintype \u03b2]\n      {f : \u03b1 \u2192 \u03b2}, IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L99"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "c7dee68ddd88dedd3f20b275f0d2e27116494451a32583ca3f7381be7f072b99"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 102,
      "start_column": 167,
      "end_line": 102,
      "end_column": 172
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {n : \u2115}, 0 < n \u2192 Even n \u2192 \u2203 p q, Nat.Prime p \u2227 Nat.Prime q \u2227 p + q = n) \u2192\n    \u2200 n > 0, Even n \u2192 \u2203 p q, Nat.Prime p \u2192 Nat.Prime q \u2192 n = p + q",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L102"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "8206c9aaa2fa9184f9c229d2222d0fb67551d4760e758efd5c07ed7c70960dc6"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 103,
      "start_column": 167,
      "end_line": 103,
      "end_column": 172
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 n > 0, Even n \u2192 \u2203 p q, Nat.Prime p \u2192 Nat.Prime q \u2192 n = p + q) \u2192\n    \u2200 {n : \u2115}, 0 < n \u2192 Even n \u2192 \u2203 p q, Nat.Prime p \u2227 Nat.Prime q \u2227 p + q = n",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L103"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "47b0123095d16240592f5ebfd32ad9edbb62c2f285bf0b435506003ebb5c1a58"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 108,
      "start_column": 139,
      "end_line": 108,
      "end_column": 144
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {M : Type u} [inst : Semiring M] [inst_1 : DecidableEq M] (a : M), Even (a * a) \u2192 Even a) \u2192\n    \u2200 (n : \u2115), Even (n ^ 2) \u2192 Even n",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L108"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:02:22+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "17f545e86ffb4cb8350a95be0e8c7d55b251c2a838fb8fd924b7a2911fb3ff6d"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 109,
      "start_column": 139,
      "end_line": 109,
      "end_column": 144
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 (n : \u2115), Even (n ^ 2) \u2192 Even n) \u2192\n    \u2200 {M : Type u} [inst : Semiring M] [inst_1 : DecidableEq M] (a : M), Even (a * a) \u2192 Even a",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L109"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:02:22+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "f6af45e546f3cd9befe593e471508ca5c018cabbd6d0e38042d2911848f09f42"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 113,
      "start_column": 228,
      "end_line": 113,
      "end_column": 233
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : TopologicalSpace \u03b1] {s : Set \u03b1}, (\u2200 x \u2208 s, \u2203 t, IsOpen t \u2227 x \u2208 t) \u2192 IsOpen s) \u2192\n    \u2200 {X : Type u} [inst : TopologicalSpace X] (S : Set X), (\u2200 x \u2208 S, \u2203 U, IsOpen U) \u2192 IsOpen S",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L113"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:02:22+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "12eb71883f898de749d67714e9931c8181f4bd7dea68bb6913c9f81e7fc6728c"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 114,
      "start_column": 228,
      "end_line": 114,
      "end_column": 233
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {X : Type u} [inst : TopologicalSpace X] (S : Set X), (\u2200 x \u2208 S, \u2203 U, IsOpen U) \u2192 IsOpen S) \u2192\n    \u2200 {\u03b1 : Type u} [inst : TopologicalSpace \u03b1] {s : Set \u03b1}, (\u2200 x \u2208 s, \u2203 t, IsOpen t \u2227 x \u2208 t) \u2192 IsOpen s",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L114"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:02:22+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "6123f134b839694867bd942fcd7b4b38cc78fd3b2436461fdac58a8645d8b2d3"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 117,
      "start_column": 176,
      "end_line": 117,
      "end_column": 181
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : DecidableEq \u03b1] {x : FreeGroup \u03b1}, x \u2260 1 \u2192 \u00acIsOfFinOrder x) \u2192\n    \u2200 {G : Type u} [inst : Group G], FreeGroup G \u2192 \u2200 (g : G), g \u2260 1 \u2192 orderOf g = 0",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L117"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "6bf20589b9981e30ae355ec982c65aca6e28295e85e601898344954a16b3aae0"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 118,
      "start_column": 176,
      "end_line": 118,
      "end_column": 181
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {G : Type u} [inst : Group G], FreeGroup G \u2192 \u2200 (g : G), g \u2260 1 \u2192 orderOf g = 0) \u2192\n    \u2200 {\u03b1 : Type u} [inst : DecidableEq \u03b1] {x : FreeGroup \u03b1}, x \u2260 1 \u2192 \u00acIsOfFinOrder x",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L118"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "99064a8e68711877876dac1419e217d62be230e3215a054baf2d12847be9993d"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 121,
      "start_column": 220,
      "end_line": 121,
      "end_column": 225
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 {m n : \u2115}, 0 < m \u2192 0 < n \u2192 m.gcd n = 1 \u2192 \u2200 N > m * n, \u2203 x y, N = m * x + n * y) \u2192\n    \u2200 (a b : \u2115), a > 0 \u2192 b > 0 \u2192 a.Coprime b \u2192 \u2203 m, \u2200 N > m, \u2203 x y, N = a * x + b * y",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L121"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-02-07T16:00:51+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "61b5e1cead9ff13f2be61d51975ce0c7f12348d260397327ffb0bd5b64c04dbc"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 122,
      "start_column": 220,
      "end_line": 122,
      "end_column": 225
    },
    "debug_info": {
      "goal": "\u22a2 (\u2200 (a b : \u2115), a > 0 \u2192 b > 0 \u2192 a.Coprime b \u2192 \u2203 m, \u2200 N > m, \u2203 x y, N = a * x + b * y) \u2192\n    \u2200 {m n : \u2115}, 0 < m \u2192 0 < n \u2192 m.gcd n = 1 \u2192 \u2200 N > m * n, \u2203 x y, N = m * x + n * y",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L122"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2024-02-07T16:00:51+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "08c6247ca6908e5befdba1cae97f09f870a17a9f74746b4e376af43e3ceacc7b"
  },
  {
    "repo": {
      "remote": "https://github.com/siddhartha-gadgil/LeanAide",
      "branch": "main",
      "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
      "lean_version": "v4.15.0"
    },
    "location": {
      "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
      "start_line": 133,
      "start_column": 189,
      "end_line": 133,
      "end_column": 194
    },
    "debug_info": {
      "goal": "\u22a2 Unit \u2192\n    \u2200 {\u03b7 : Type u_1} (G : Type u_2) [inst : Group G] {\u0393 : Type u_3} [inst_1 : Group \u0393],\n      Monoid.IsTorsionFree (G \u00d7 \u0393) \u2192 Monoid.IsTorsionFree G \u2227 Monoid.IsTorsionFree \u0393",
      "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L133"
    },
    "metadata": {
      "blame_email_hash": "7b8d77610b35",
      "blame_date": "2022-11-12T11:31:19+05:30",
      "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
    },
    "id": "6f7bdd694ad934042f57942c62247bbd21c90a3ddb60f28fe6eaef9e67733fdb"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "rotation-composition",
      "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Examples/Add32LawfulCircuit.lean",
      "start_line": 48,
      "start_column": 2,
      "end_line": 48,
      "end_column": 7
    },
    "debug_info": {
      "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : \u2115\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n\u22a2 (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) \u2227\n    (True \u2192 env.get (i0 + 1) = 0 \u2228 env.get (i0 + 1) = 1) \u2227\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 \u2227\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n          (True \u2192 env.get (i0 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1) = 1) \u2227\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 \u2227\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                (True \u2192 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 \u2227\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                      (True \u2192\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Examples/Add32LawfulCircuit.lean#L48"
    },
    "metadata": {
      "blame_email_hash": "0130f16e5d6d",
      "blame_date": "2025-04-09T16:01:46+02:00",
      "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
    },
    "id": "f0c5f0a21b04be6c4c327e368d92dbc7bdbb4f0c9811904a8f43fcb0da7a3e2b"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "blake3-blueprint",
      "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
      "lean_version": "v4.17.0"
    },
    "location": {
      "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
      "start_line": 95,
      "start_column": 2,
      "end_line": 95,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 = FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef \u2227\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\nh0 : env.get i0 = FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\n\u22a2 (ZMod.val (FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef) < 2 ^ \u2191offset.castSucc \u2227\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)) < 2 ^ \u2191(8 - offset.castSucc)) \u2227\n    FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset) * 2 ^ \u2191offset +\n        -x =\n      0",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-15T17:59:45+02:00",
      "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
    },
    "id": "74b0c0d504d68ffe06c9e81635cd8db56a92bf63319a791d180d9b1b3b676f41"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "rotation-composition",
      "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
      "start_line": 195,
      "start_column": 2,
      "end_line": 195,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case mk.mk\np : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx0_var x1_var x2_var x3_var x4_var x5_var x6_var x7_var : Expression (F p)\nhenv :\n  env.uses_local_witnesses_completeness\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)\nx0 x1 x2 x3 x4 x5 x6 x7 : F p\nh_eval :\n  eval env\n      { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n        x7 := x7_var } =\n    { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }\nas : { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }.is_normalized\n\u22a2 Circuit.constraints_hold.completeness env\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L195"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-04-24T23:40:51+02:00",
      "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
    },
    "id": "92c463ac250db2dcc2d407c28901fa9cf443a7c2481d3b0a6231e726353431fb"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "rotation-composition",
      "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
      "start_line": 102,
      "start_column": 2,
      "end_line": 102,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\nx0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 x0_l x1_l x2_l x3_l x4_l x5_l x6_l x7_l x0_h x1_h x2_h x3_h x4_h x5_h x6_h x7_h :\n  F p\nh_x0_l : ZMod.val x0_l = ZMod.val x0 % 2 ^ \u2191offset\nh_x0_h : ZMod.val x0_h = ZMod.val x0 / 2 ^ \u2191offset\nh_x1_l : ZMod.val x1_l = ZMod.val x1 % 2 ^ \u2191offset\nh_x1_h : ZMod.val x1_h = ZMod.val x1 / 2 ^ \u2191offset\nh_x2_l : ZMod.val x2_l = ZMod.val x2 % 2 ^ \u2191offset\nh_x2_h : ZMod.val x2_h = ZMod.val x2 / 2 ^ \u2191offset\nh_x3_l : ZMod.val x3_l = ZMod.val x3 % 2 ^ \u2191offset\nh_x3_h : ZMod.val x3_h = ZMod.val x3 / 2 ^ \u2191offset\nh_x4_l : ZMod.val x4_l = ZMod.val x4 % 2 ^ \u2191offset\nh_x4_h : ZMod.val x4_h = ZMod.val x4 / 2 ^ \u2191offset\nh_x5_l : ZMod.val x5_l = ZMod.val x5 % 2 ^ \u2191offset\nh_x5_h : ZMod.val x5_h = ZMod.val x5 / 2 ^ \u2191offset\nh_x6_l : ZMod.val x6_l = ZMod.val x6 % 2 ^ \u2191offset\nh_x6_h : ZMod.val x6_h = ZMod.val x6 / 2 ^ \u2191offset\nh_x7_l : ZMod.val x7_l = ZMod.val x7 % 2 ^ \u2191offset\nh_x7_h : ZMod.val x7_h = ZMod.val x7 / 2 ^ \u2191offset\neq0 : x1_l * 2 ^ \u2191offset + x0_h + -y0 = 0\neq1 : x2_l * 2 ^ \u2191offset + x1_h + -y1 = 0\neq2 : x3_l * 2 ^ \u2191offset + x2_h + -y2 = 0\neq3 : x4_l * 2 ^ \u2191offset + x3_h + -y3 = 0\neq4 : x5_l * 2 ^ \u2191offset + x4_h + -y4 = 0\neq5 : x6_l * 2 ^ \u2191offset + x5_h + -y5 = 0\neq6 : x7_l * 2 ^ \u2191offset + x6_h + -y6 = 0\neq7 : x0_l * 2 ^ \u2191offset + x7_h + -y7 = 0\n\u22a2 let x_val :=\n    ZMod.val x0 + ZMod.val x1 * 256 + ZMod.val x2 * 256 ^ 2 + ZMod.val x3 * 256 ^ 3 + ZMod.val x4 * 256 ^ 4 +\n          ZMod.val x5 * 256 ^ 5 +\n        ZMod.val x6 * 256 ^ 6 +\n      ZMod.val x7 * 256 ^ 7;\n  let y_val :=\n    ZMod.val y0 + ZMod.val y1 * 256 + ZMod.val y2 * 256 ^ 2 + ZMod.val y3 * 256 ^ 3 + ZMod.val y4 * 256 ^ 4 +\n          ZMod.val y5 * 256 ^ 5 +\n        ZMod.val y6 * 256 ^ 6 +\n      ZMod.val y7 * 256 ^ 7;\n  y_val = x_val % 2 ^ (\u2191offset % 64) * 2 ^ (64 - \u2191offset % 64) + x_val / 2 ^ (\u2191offset % 64)",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L102"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-14T10:54:41+02:00",
      "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
    },
    "id": "c9e16c0b63930228ef71dd642a19a2b3ffa6699bd90e5c1434e05d80ce1d12d8"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "blake3-blueprint",
      "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
      "lean_version": "v4.17.0"
    },
    "location": {
      "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
      "start_line": 144,
      "start_column": 2,
      "end_line": 144,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n\u22a2 Completeness (F p) (elaborated offset) assumptions",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-13T11:26:47+02:00",
      "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
    },
    "id": "73640cd7f201a98d030dbe244c200522848e43f9a7ee96fa6af9dea3d47ffe50"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "num2bits",
      "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Rotation64/Theorems.lean",
      "start_line": 22,
      "start_column": 2,
      "end_line": 22,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\nx : \u2115\nh : x < 2 ^ 64\noffset : \u2115\n\u22a2 rot_right64 x offset = (x.toUInt64.toBitVec.rotateRight offset).toNat",
      "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Rotation64/Theorems.lean#L22"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-14T10:55:07+02:00",
      "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
    },
    "id": "0ae68486d5ab0d0867e0c851276992357719b505854f05ea436c53a8c75a382d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "num2bits",
      "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Rotation64/Theorems.lean",
      "start_line": 41,
      "start_column": 35,
      "end_line": 41,
      "end_column": 40
    },
    "debug_info": {
      "goal": "x n m : \u2115\nh : x < 2 ^ 64\n\u22a2 (x.toUInt64.toBitVec.rotateRight n).toNat < 2 ^ 64",
      "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Rotation64/Theorems.lean#L41"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-14T10:55:07+02:00",
      "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
    },
    "id": "9df668f2fbf95b90ce0afe9bd3e5cb03e0316e52b387663e782bbb2eef95d08a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "num2bits",
      "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Rotation64/Theorems.lean",
      "start_line": 43,
      "start_column": 2,
      "end_line": 43,
      "end_column": 7
    },
    "debug_info": {
      "goal": "x n m : \u2115\nh : x < 2 ^ 64\n\u22a2 ((x.toUInt64.toBitVec.rotateRight n).toNat.toUInt64.toBitVec.rotateRight m).toNat =\n    (x.toUInt64.toBitVec.rotateRight (n + m)).toNat",
      "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Rotation64/Theorems.lean#L43"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-13T16:41:17+02:00",
      "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
    },
    "id": "fe5ad8cd95a86323386f86d2993de86f5e26928ea04f088823e86cc8820d4d49"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "blake3-blueprint",
      "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
      "lean_version": "v4.17.0"
    },
    "location": {
      "path": "Clean/Gadgets/Keccak/ThetaD.lean",
      "start_line": 93,
      "start_column": 2,
      "end_line": 93,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[4]).is_normalized \u2227\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[3])) \u2227\n            (eval env state_var[1]).is_normalized \u2227\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[4])) \u2227\n        (eval env state_var[2]).is_normalized \u2227\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[3]).is_normalized \u2227\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Keccak/ThetaD.lean#L93"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-04-15T00:48:02+02:00",
      "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
    },
    "id": "c97b72c6c746ca6a5cf69a3d0da4c36e62d4fb22f473375a9f93a0b3fcb8ef12"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "rotation-composition",
      "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
      "start_line": 95,
      "start_column": 2,
      "end_line": 95,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 =\n      FieldUtils.mod (Expression.eval env x_var)\n        \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n        (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) \u2227\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\nh0 :\n  env.get i0 =\n    FieldUtils.mod (Expression.eval env x_var)\n      \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n      (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\n\u22a2 (ZMod.val\n          (FieldUtils.mod (Expression.eval env x_var)\n            \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)) <\n        2 ^ \u2191offset.castSucc \u2227\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)) < 2 ^ \u2191(8 - offset.castSucc)) \u2227\n    FieldUtils.mod (Expression.eval env x_var)\n            \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset) * 2 ^ \u2191offset +\n        -x =\n      0",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-15T17:59:45+02:00",
      "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
    },
    "id": "127cc9d60b9cb0a8be3ae8aa5284652ef4b664efdc1b71c796658603b2306669"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "rotation-composition",
      "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
      "start_line": 144,
      "start_column": 2,
      "end_line": 144,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n\u22a2 Completeness (F p) (Gadgets.Rotation64Bits.elaborated p inst\u271d p_large_enough offset)\n    (Gadgets.Rotation64Bits.assumptions p)",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-13T11:26:47+02:00",
      "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
    },
    "id": "bd8387a907616e161be344739409e09b7e1e8de60b885c75a7918f05ff363db3"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "rotation-composition",
      "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Keccak/ThetaD.lean",
      "start_line": 93,
      "start_column": 2,
      "end_line": 93,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : Gadgets.Keccak256.ThetaD.assumptions p state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[4]).is_normalized \u2227\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[3])) \u2227\n            (eval env state_var[1]).is_normalized \u2227\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[4])) \u2227\n        (eval env state_var[2]).is_normalized \u2227\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[3]).is_normalized \u2227\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Keccak/ThetaD.lean#L93"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-04-15T00:48:02+02:00",
      "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
    },
    "id": "53272a8b2423e13b5b7dd30af589c356cedbed90cedc541a0621ed68ed50056e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "num2bits",
      "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Bits.lean",
      "start_line": 57,
      "start_column": 4,
      "end_line": 57,
      "end_column": 9
    },
    "debug_info": {
      "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\nn k : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : field (F p)\nh_input : Expression.eval env x_var = x\nh_assumptions : ZMod.val x < 2 ^ n\nh_holds :\n  match\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset,\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength,\n    (Equality.circuit id).to_subcircuit\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n      (x_var, Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0) with\n  | m, Operations.empty .(m), s =>\n    Expression.eval env x_var =\n      Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n  | x, x_1, s =>\n    Circuit.constraints_hold.soundness env\n        (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n              (fun bit =>\n                StateT.modifyGet fun s =>\n                  (PUnit.unit,\n                    { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                      withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n              (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                (Gadgets.ToBits.main._proof_3 p prime))\n              { offset := k + n,\n                withLength :=\n                  (Operations.empty k).witness n fun eval =>\n                    Vector.ofFn fun i =>\n                      if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n      Expression.eval env x_var =\n        Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n\u22a2 \u2200 i < n, env.get (k + i) = if (ZMod.val x).testBit i = true then 1 else 0",
      "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Bits.lean#L57"
    },
    "metadata": {
      "blame_email_hash": "0130f16e5d6d",
      "blame_date": "2025-05-23T17:56:13+02:00",
      "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
    },
    "id": "b0c6b16f96678fba0d31f695cf18f4aef9fca34891abab9e89999a8e1020e98a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "num2bits",
      "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Bits.lean",
      "start_line": 62,
      "start_column": 4,
      "end_line": 62,
      "end_column": 9
    },
    "debug_info": {
      "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\nn k : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : field (F p)\nh_input : Expression.eval env x_var = x\nh_assumptions : ZMod.val x < 2 ^ n\nh_env :\n  env.uses_local_witnesses_completeness\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n    ((Equality.circuit id).to_subcircuit\n          (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n                (fun bit =>\n                  StateT.modifyGet fun s =>\n                    (PUnit.unit,\n                      { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                        withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n                (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                  (Gadgets.ToBits.main._proof_3 p prime))\n                { offset := k + n,\n                  withLength :=\n                    (Operations.empty k).witness n fun eval =>\n                      Vector.ofFn fun i =>\n                        if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n          (x_var,\n            Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x))\n              0)).uses_local_witnesses\n      env\n\u22a2 match\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset,\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength,\n    (Equality.circuit id).to_subcircuit\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n      (x_var, Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0) with\n  | m, Operations.empty .(m), s =>\n    Expression.eval env x_var =\n      Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n  | x, x_1, s =>\n    Circuit.constraints_hold.completeness env\n        (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n              (fun bit =>\n                StateT.modifyGet fun s =>\n                  (PUnit.unit,\n                    { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                      withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n              (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                (Gadgets.ToBits.main._proof_3 p prime))\n              { offset := k + n,\n                withLength :=\n                  (Operations.empty k).witness n fun eval =>\n                    Vector.ofFn fun i =>\n                      if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n      Expression.eval env x_var =\n        Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)",
      "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Bits.lean#L62"
    },
    "metadata": {
      "blame_email_hash": "0130f16e5d6d",
      "blame_date": "2025-05-23T17:56:13+02:00",
      "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
    },
    "id": "7d551fb92a802b27274735eb877a266592b6e82182d7e6a094ec0794db89aabe"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/clean",
      "branch": "rotation-composition",
      "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "Clean/Gadgets/Rotation64/Theorems.lean",
      "start_line": 171,
      "start_column": 2,
      "end_line": 171,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case pred\nx n m : \u2115\nh : x < 2 ^ 64\nx' : BitVec 64 := BitVec.ofNat 64 x\ni : \u2115\nhi : i < 64\n\u22a2 (bif decide (i < 64 - m % 64) then (x'.rotateRight n).getLsbD (m % 64 + i)\n    else decide (i < 64) && (x'.rotateRight n).getLsbD (i - (64 - m % 64))) =\n    (x'.rotateRight (n + m)).getLsbD i",
      "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Rotation64/Theorems.lean#L171"
    },
    "metadata": {
      "blame_email_hash": "14eb31066b7e",
      "blame_date": "2025-05-13T16:41:17+02:00",
      "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
    },
    "id": "92720eb8e709c6b9c2a459d883b49596c566037fee15e7d4bd4ccd504dc98fe6"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 62,
      "start_column": 9,
      "end_line": 62,
      "end_column": 14
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L62"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "97aa16f9a8af4f414c4128b572e9e6a19fbd44cd675108fc3610e421ab8bd6bc"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 80,
      "start_column": 2,
      "end_line": 80,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L80"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "dbcc645bb6f878d24f46fc861fa646b55f514e691bb48d6d2a6e90ce49e71266"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 141,
      "start_column": 9,
      "end_line": 141,
      "end_column": 14
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L141"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "773e371970a6e26ff0c722aaf561c13030bb4f6324f2a983ba22dcedf407e40d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 167,
      "start_column": 2,
      "end_line": 167,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L167"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "191e218863e97da77bda846402aeee2b1610bccf7e0c5c43a204eca965d0a659"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 259,
      "start_column": 2,
      "end_line": 259,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b9 : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L259"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "1d32f3467a459ffcceaf7a9ece9c7d1d4634a1b70f860a47fbf74f80ea9fe8df"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Execution.lean",
      "start_line": 185,
      "start_column": 2,
      "end_line": 185,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190 (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Execution.lean#L185"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "568e916ecdea4ca421599b43c67580d82ecd96d04cbfddd9964b37d6e7c74af6"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Execution.lean",
      "start_line": 278,
      "start_column": 2,
      "end_line": 278,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | \u27e80, isLt\u27e9 => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Execution.lean#L278"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "0b7d3ffdef348d6460dbe6ea9c5c933d52ed63bc57ad329cc074b4b047402918"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Equiv.lean",
      "start_line": 66,
      "start_column": 2,
      "end_line": 66,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u22a2 (do\n      let _ \u2190 liftM (query 0 ())\n      (fun a => (0, \u2191a)) <$> liftM (query 1 ())) =\n    do\n    let y \u2190 liftM (query 1 ())\n    (fun a => (0, \u2191y)) <$> liftM (query 0 ())",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Equiv.lean#L66"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "ef27c3dea2207edc82dc06d73fea74e37f3d1eaf7942d1f961f39eb7198cc067"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Equiv.lean",
      "start_line": 80,
      "start_column": 4,
      "end_line": 80,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case h.h.none\n\u22a2 (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a)))) none =\n    \u2211' (a : Fin 2), 2\u207b\u00b9 * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a_1 => (0, \u2191a)))) none",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Equiv.lean#L80"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-16T18:04:04-04:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "e39dac02572db17b3813aab7ad10a23979a2b95e30de19e2de61c349a2679610"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Equiv.lean",
      "start_line": 85,
      "start_column": 4,
      "end_line": 85,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case h.h.some.mk\nx y : \u2115\n\u22a2 (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a => (0, \u2191y))))\n      (some (x, y))",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Equiv.lean#L85"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "90fd449fd5c5623bee4284dbc91c0db5fed3f73846cf4e968e4871c0bf2d90ac"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Equiv.lean",
      "start_line": 102,
      "start_column": 2,
      "end_line": 102,
      "end_column": 7
    },
    "debug_info": {
      "goal": "f : (i : \u2115) \u2192 unifSpec.domain i \u2192 Fin (i + 1)\n\u22a2 (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun x => (fun a => (0, \u2191a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun y => (fun a => (0, \u2191y)) <$> lift (query 0 ())",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Equiv.lean#L102"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "5fa42a9c1ab7498e7fc20edbeb3eee3b6ca7f23d06c1b906f69606ccff87cb7c"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/OracleInterface.lean",
      "start_line": 312,
      "start_column": 2,
      "end_line": 312,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : R[X \u03c3]\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : R[X \u03c3]\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/OracleInterface.lean#L312"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "466ceb2e8a9afb46f22708412c1b38c4d73ff7939f912f485a81ab77ca9b4871"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/OracleInterface.lean",
      "start_line": 351,
      "start_column": 2,
      "end_line": 351,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : R[X]\n\u22a2 \u2203 x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          (statelessOracle spec [fun x => R[X]]\u2092 fun i q => oracle p q).impl) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/OracleInterface.lean#L351"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "87e932ac9c431c5a841c8f23f707b86e2603cef6c3ba446def1e676209a21ce7"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Transform/FiatShamir.lean",
      "start_line": 130,
      "start_column": 66,
      "end_line": 130,
      "end_column": 71
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u2074 : VCVCompatible StmtIn\ninst\u271d\u00b3 : (i : Fin n) \u2192 VCVCompatible (pSpec i).2\ninst\u271d\u00b2 : DecidableEq \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\ncompletenessError : \u211d\u22650\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 Reduction.completeness relIn relOut R completenessError \u2192\n    Reduction.completeness relIn relOut R.fiatShamir completenessError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Transform/FiatShamir.lean#L130"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-06T23:33:56-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "be469d7e55aea58ba3ae87928d7217273f7ebdcf64b482edbabdf03ecfc51ed2"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 100,
      "start_column": 2,
      "end_line": 100,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).1.natDegree \u2264 p.natDegree / 2",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L100"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "2c5c59d0a0d95590e3f09c94073c3204f524bdb56c398f439802847ab3a2449e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 104,
      "start_column": 2,
      "end_line": 104,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).2.natDegree \u2264 p.natDegree / 2",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L104"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "e147048be72f759311af06deb9b0abe77cef8ecb09fb43af7bd5363022418fe4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 116,
      "start_column": 11,
      "end_line": 116,
      "end_column": 16
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pEven \u2208 R\u2983< n\u2984[X]",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L116"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "abd32a2462082659bc6718289b097b3e6e39175fd7f9c823b94292b02da7388d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 116,
      "start_column": 26,
      "end_line": 116,
      "end_column": 31
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pOdd \u2208 R\u2983< n\u2984[X]",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L116"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "07bdac06e3f99ca0f4f31961ed90ff433cb15866257ea17547733ef66bae571d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
      "start_line": 219,
      "start_column": 6,
      "end_line": 219,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := generateProof \u03b1 i cache\n          verifyProof \u03b1 i leaves[i] (getRoot \u03b1 cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run \u2218 fun cache =>\n                verifyProof \u03b1 i (leaves.get i) (getRoot \u03b1 cache) (generateProof \u03b1 i cache))).mapM\n          fun {\u03b1_1} q =>\n          match \u03b1_1, q with\n          | .((spec \u03b1).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
    },
    "metadata": {
      "blame_email_hash": "ab200eba5736",
      "blame_date": "2025-04-16T13:24:09-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "d12410bcb99b6142a6622c964a0336184ee8966c679e85fa74b28674f0ee094c"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/AGM/Basic.lean",
      "start_line": 160,
      "start_column": 2,
      "end_line": 160,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d\u00b2 : Fact (Nat.Prime p)\nG\u2081 : Type u_2\ninst\u271d\u00b9 : CommGroup G\u2081\ninst\u271d : IsPrimeOrderWith G\u2081 p\nn : \u2115\ng : G\u2081\na : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1))\n\u22a2 g ^ \u2211 i, a.val ^ \u2191i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (\u2211 x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ \u2191x).val",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/AGM/Basic.lean#L160"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-15T12:13:54+05:30",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "3bce7a2bfc31b2c514ed165e702cb2c63d260d7267af7bf882376f27cfa6080a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/AGM/Basic.lean",
      "start_line": 171,
      "start_column": 6,
      "end_line": 171,
      "end_column": 11
    },
    "debug_info": {
      "goal": "G : Type u_1\ninst\u271d\u2078 : CommGroup G\np : \u2115\ninst\u271d\u2077 : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG\u2081 : Type u_2\ninst\u271d\u2076 : CommGroup G\u2081\ninst\u271d\u2075 : IsPrimeOrderWith G\u2081 p\ng\u2081 : G\u2081\nG\u2082 : Type u_3\ninst\u271d\u2074 : CommGroup G\u2082\ninst\u271d\u00b3 : IsPrimeOrderWith G\u2082 p\ng\u2082 : G\u2082\nG\u209c : Type u_4\ninst\u271d\u00b2 : CommGroup G\u209c\ninst\u271d\u00b9 : IsPrimeOrderWith G\u209c p\npairing : Additive G\u2081 \u2192\u2097[\u2124] Additive G\u2082 \u2192\u2097[\u2124] Additive G\u209c\nn : \u2115\ninst\u271d : Fact (Nat.Prime p)\nsrs : Vector G\u2081 (n + 1)\ncoeffs : Fin (n + 1) \u2192 ZMod p\nz : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n\u22a2 ((\u2191poly - C (eval z \u2191poly)) / (X - C z)).degree < \u2191(n + 1)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/AGM/Basic.lean#L171"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-03-15T21:13:06-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "fd50eb520f249e187c4cc17da4b90f04d44f1cc638f8fedce8eb19be7b7e8ee8"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 186,
      "start_column": 33,
      "end_line": 186,
      "end_column": 38
    },
    "debug_info": {
      "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 \u2016C\u2016\u2080' \u2260 \u22a4",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L186"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "3009d57d0e90edd1050f2535b78f9e4f60cfd039f8ccbfbcd16a52cd702b891d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 187,
      "start_column": 4,
      "end_line": 187,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : \u2016C\u2016\u2080' \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => \u0394\u2080(\u2191x.1, \u2191x.2)) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d}",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L187"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "5eb12568cfc88f855ce8e1aa5eb37e600543cc30a15d7683127ada27583d4463"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 231,
      "start_column": 4,
      "end_line": 231,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : \u0394\u2080(u, v) \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 \u2016u\u2016\u2080 \u2264 d",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L231"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "6827f6e2af2e914c7b8e3d932d9fa3520d9cf00c1bf6f10b54d7bb2ce2ea1ebb"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 234,
      "start_column": 4,
      "end_line": 234,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : \u2016u\u2016\u2080 \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L234"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "26d6446692aed7438cf4ca9710a4b11e615d0a4de6c914dc4cccf5a9cb898451"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 395,
      "start_column": 65,
      "end_line": 395,
      "end_column": 70
    },
    "debug_info": {
      "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - \u2016C.carrier\u2016\u2080 + 1",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L395"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-26T22:44:38-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "ebbcf02281803aa3f1ad085205ffae9455bf0080876cac3ddf59c6b00037b095"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 34,
      "start_column": 14,
      "end_line": 34,
      "end_column": 19
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse ofSpec toSpec",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L34"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "55d356c561bd0ef9c2c2a5faee2211f6e5804bd0cb7c371c52cbd652a198bea4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 35,
      "start_column": 15,
      "end_line": 35,
      "end_column": 20
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse ofSpec toSpec",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L35"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "733709b0b3eb61737241c7d253801f7b75b63c187dd6cddfd2025a376fa75cd4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 43,
      "start_column": 2,
      "end_line": 43,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 (p + q).toSpec = p.toSpec + q.toSpec",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L43"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "dcd0b4dbe6b1ed9578696200172010514927605fccbb9579ca901fdb47a1fe75"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 47,
      "start_column": 2,
      "end_line": 47,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191p.toSpec",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L47"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "e6da4863dd6a091b176d7d5e3e364886431d4e3fa96abd1856f5e90ad00278f0"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 45,
      "start_column": 2,
      "end_line": 45,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Basic.lean#L45"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-14T11:09:39-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "8bce7eb9b8f4bb8203a804eeda46369f1866afe3330ef78cd2ed0787b8c0c2b0"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 81,
      "start_column": 2,
      "end_line": 81,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 (cons a b).get \u2b1d\u1d65 (cons c d).get = a * c + b.get \u2b1d\u1d65 d.get",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L81"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-14T11:09:39-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "8451e357d7c05083e9d922a97c7dd9f04b3ddf282eeb79223682bb59b43b4bac"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 138,
      "start_column": 20,
      "end_line": 138,
      "end_column": 25
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b c : MlPoly R n), a + b + c = a + (b + c)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L138"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "8c8b0ec8a96778394f7a99ce84f781374e31d1d000fb791f81eecd6cc0e110aa"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 141,
      "start_column": 19,
      "end_line": 141,
      "end_column": 24
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), 0 + a = a",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L141"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "10f21bccf93bda0f6ac9ed3034c4c7b5577881ba3dcc2e0ebffb57492de10fd3"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 142,
      "start_column": 19,
      "end_line": 142,
      "end_column": 24
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), a + 0 = a",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L142"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "d26fddddac39506548395e2ff1a06aa68bca512166c25274e0572eea85d2572a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 144,
      "start_column": 21,
      "end_line": 144,
      "end_column": 26
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (x : MlPoly R n), nsmul 0 x = 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L144"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "5f3f7be8e2f427c7689f43fb1d21a72a01141e166f652943090465f67bc7cc44"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 145,
      "start_column": 21,
      "end_line": 145,
      "end_column": 26
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (n_1 : \u2115) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L145"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "15146d0ea41040b73992e26171f22283cf3638e4a72dedf94668231296528b7e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 139,
      "start_column": 19,
      "end_line": 139,
      "end_column": 24
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b : MlPoly R n), a + b = b + a",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L139"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "868ab7a0efed5031b7e04f4d3b923346a42a39ff6ae28d596c7ba442c267909d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 151,
      "start_column": 17,
      "end_line": 151,
      "end_column": 22
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (b : MlPoly R n), 1 \u2022 b = b",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L151"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "3ad86c7f3f1e3d2be1812433b8cc0eab51171e5e61ea4928992cb723d37d96c6"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 156,
      "start_column": 18,
      "end_line": 156,
      "end_column": 23
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (x : MlPoly R n), 0 \u2022 x = 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L156"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "09cec9f7ac47cd375b8365ff39899f9cc3d7b705d6c730af3e224b0a139b1f5a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 155,
      "start_column": 2,
      "end_line": 155,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n \u2294 l.length = n' \u2294 l'.length\n\u22a2 l ++ replicate (n - l.length + (m - n' \u2294 l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' \u2294 l'.length)) unit",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L155"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "23597376809ed0dd1820b5788a632d56392b0458b608e84f3e7f9a01b2e54e35"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 209,
      "start_column": 5,
      "end_line": 209,
      "end_column": 10
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l\u2081.matchSize l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L209"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-14T17:35:17-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "bdc1ceac3ccfafecaec8c45a71ad75e64a4346ea31d0d51338b3fff59aadcb6d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 248,
      "start_column": 2,
      "end_line": 248,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\na : Array \u03b1\nn : \u2115\nunit : \u03b1\ni : \u2115\nh\u271d : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n\u22a2 { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L248"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "7c4f5594d20fbb4e6b3562a3cd309570a674e66f513cba8b35ddc9bad546ef10"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 391,
      "start_column": 75,
      "end_line": 391,
      "end_column": 80
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp ((popWhile p as).getLast h) = true",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L391"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-14T17:35:17-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "80b4e920ce514d601f468a11fbffb8057a08720c1ab1e5b35c22c742b79c19d5"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 469,
      "start_column": 4,
      "end_line": 469,
      "end_column": 9
    },
    "debug_info": {
      "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, (a :: l').findSum j = some n",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L469"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "cd143a88ad9e31e826b00c24f4dd3dc3f8985d99e39765a4385c377b7da471ee"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 481,
      "start_column": 80,
      "end_line": 481,
      "end_column": 85
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 l.findSumIdx \u2191j < l.length",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L481"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "6f78c462297f0e4cd5c48a684c88b578a4359d608848fa8d7f35892be2685179"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
      "start_line": 75,
      "start_column": 2,
      "end_line": 75,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : R[X \u03c3]\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-16T12:52:41-06:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "3464a6856e1d089e7ce351210c1c0c0fce92da8ae1d61547f7b44e97fd899105"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
      "start_line": 112,
      "start_column": 2,
      "end_line": 112,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : R[X Fin n]\n\u22a2 ((sumExceptFirst' n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-09-13T15:50:48-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "7d5e20caac6893c3674c953bec16cb092f20fdceb57956d888049701943245c9"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
      "start_line": 69,
      "start_column": 58,
      "end_line": 69,
      "end_column": 63
    },
    "debug_info": {
      "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : R[X \u03c3]\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191(#({x \u2208 p.vars.pi S | (eval (extendDomain x)) p = 0})) / \u220f i \u2208 p.vars, \u2191(#(S i)) \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(#(S i))",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-30T15:40:43-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "1af9daf427587928cdf589f4d82b368bfc21a0a34848ba23a328f93988c922d1"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
      "start_line": 171,
      "start_column": 76,
      "end_line": 171,
      "end_column": 81
    },
    "debug_info": {
      "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : R[X \u03c3]\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < #(S i)\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-30T15:40:43-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "f9c5c4078caaeb5ea9a096da386729d8e7d2602bb881943905c6f04cc44e287f"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Fin/Basic.lean",
      "start_line": 422,
      "start_column": 43,
      "end_line": 422,
      "end_column": 48
    },
    "debug_info": {
      "goal": "n : \u2115\n\u03b1 : Fin n \u2192 Sort u\nl : List \u2115\nn' : \u2115\nl' : List \u2115\nmotive : Fin (n' :: l').sum \u2192 Sort u_1\ncases : (n : \u2115) \u2192 (h : n \u2208 n' :: l') \u2192 (i : Fin n) \u2192 motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : \u00ac\u2191i < n'\n\u22a2 \u2191i - n' < l'.sum",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L422"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "411d4e93182014c105091b33e53b3b6d5d799cb23da0f2ec94196ed042240822"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/Fin/Basic.lean",
      "start_line": 450,
      "start_column": 16,
      "end_line": 450,
      "end_column": 21
    },
    "debug_info": {
      "goal": "case ind\nn\u271d n : \u2115\nIH : \u2200 m < n, \u2200 {a : Fin m \u2192 \u2115}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n \u2192 \u2115\n\u22a2 (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L450"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "c27e3b013cb8a561d94ba9842b1473e1fc573152e13a028548254969bf650b2a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 571,
      "start_column": 2,
      "end_line": 571,
      "end_column": 7
    },
    "debug_info": {
      "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : UniPoly Q\ni : \u2115\nhi : i < Array.size (p.add_raw q)\n\u22a2 (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L571"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "0ac3987f91918316115bcbd5a5190f334718b43eef6d6a44d86861af2e6a0e98"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 899,
      "start_column": 4,
      "end_line": 899,
      "end_column": 9
    },
    "debug_info": {
      "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n\u22a2 p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L899"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "7feadb1d1938b120c33ecd0497379e7edda0d34dd6a460c54ce4c81cbe63f302"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 975,
      "start_column": 6,
      "end_line": 975,
      "end_column": 11
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : Ring R\ninst\u271d : BEq R\np : UniPoly R\n\u22a2 (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) \u2208 TropicallyBoundPoly R",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L975"
    },
    "metadata": {
      "blame_email_hash": "ab200eba5736",
      "blame_date": "2025-03-12T19:59:09-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "b9dd5c0fe5236091ea8855dc3155bd98bb0faa5dd1e6a63db924678e498d338e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 1005,
      "start_column": 22,
      "end_line": 1005,
      "end_column": 27
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1005"
    },
    "metadata": {
      "blame_email_hash": "94b4cc0e139f",
      "blame_date": "2024-05-31T16:31:08-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "21251d59309e749d53a0e3786bd81a88574eeca70048432b2247a03423b05129"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 1006,
      "start_column": 21,
      "end_line": 1006,
      "end_column": 26
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1006"
    },
    "metadata": {
      "blame_email_hash": "94b4cc0e139f",
      "blame_date": "2024-05-31T16:31:08-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "01133ba8828bec9ecd45b93bb9f3585cbd6dcf7ba219d843d0a8517c8bbfa34e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 1007,
      "start_column": 21,
      "end_line": 1007,
      "end_column": 26
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1007"
    },
    "metadata": {
      "blame_email_hash": "94b4cc0e139f",
      "blame_date": "2024-05-31T16:31:08-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "e9400b844e33b3d7a18d8cd41ed92f1807e43589f763603212d3a8e31e94310f"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 151,
      "start_column": 2,
      "end_line": 151,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "896bb0b36b0139fe1ea5349fb71c1901c89cf9e690bbbc785a2cb5fa62768eab"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 164,
      "start_column": 2,
      "end_line": 164,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "33227c9041bfb79809b37c45d9782948363814999aa7b5b1b56115b4ab529a0c"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 177,
      "start_column": 2,
      "end_line": 177,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190 Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "1037dbfd13e7075f7f2df9ff6acc04c06f4f8eadc10bdcfe1c10621d0293caac"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 201,
      "start_column": 2,
      "end_line": 201,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : \u211d\u22650\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d : x\u271d \u2208 (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x\u271d",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-22T09:32:10-04:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "b7e7785ddd0e7960be7923733551337f7ec78b3cec30de41c822cf0c03ad97e0"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 215,
      "start_column": 2,
      "end_line": 215,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : \u211d\u22650\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n    \u2191soundnessError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "afc81d98ed41f5f375579541273fc760226c833fd3841423ee3bf424d1fac91e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 229,
      "start_column": 2,
      "end_line": 234,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : \u211d\u22650\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n        \u2191soundnessError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "33d5b993990508a7aa631aa5108a54a42173506d8d6c9e672e3c2f582ae39edc"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 278,
      "start_column": 4,
      "end_line": 278,
      "end_column": 9
    },
    "debug_info": {
      "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : \u2124[X]\nt : \u2124\nf : \u2124[X]\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "b86f06e3609ce072183a451094d605a9386986f26397b83d153721c340f42524"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 390,
      "start_column": 2,
      "end_line": 390,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : \u211d\u22650\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L390"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "770f12482cdc9debff51d443ef514dd48ce83a009069228b67fc5e321558fa48"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 410,
      "start_column": 75,
      "end_line": 410,
      "end_column": 80
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn StmtOut : Type\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrSoundnessError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrSoundness langIn langOut verifier rbrSoundnessError \u2192 soundness langIn langOut verifier (\u2211 i, rbrSoundnessError i)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L410"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-28T13:43:25-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "86a6c29152a515529a53df345ef9924a23cc8bbe29734cbbc53ec7c45ce1de11"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 420,
      "start_column": 2,
      "end_line": 420,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError \u2192\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier rbrKnowledgeError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L420"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-28T13:43:25-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "e7b53eaa74b194b826fd0dadd533183d29bce9f0eb460d261efe4b0d69ddcbe5"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 429,
      "start_column": 82,
      "end_line": 429,
      "end_column": 87
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError \u2192\n    knowledgeSoundness relIn relOut verifier (\u2211 i, rbrKnowledgeError i)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L429"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-28T13:43:25-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "9403abb6223ce075cfcc6cab81eb0a1b10e8e621d5db2ebc1016d6facae1fdef"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
      "start_line": 429,
      "start_column": 2,
      "end_line": 429,
      "end_column": 7
    },
    "debug_info": {
      "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIdx) \u2192 OracleInterface (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIdx) \u2192 OracleInterface (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (P\u2081.append P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    match __discr with\n      | (stmt\u2082, wit\u2082, transcript\u2081) => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        match __discr with\n          | (stmt\u2083, wit\u2083, transcript\u2082) => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L429"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-12-28T16:03:02+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "ff389583a3a14493ea88d311f5bd7f386e2094d95b6749f378cd71e1a0b95d48"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
      "start_line": 459,
      "start_column": 89,
      "end_line": 459,
      "end_column": 94
    },
    "debug_info": {
      "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : \u211d\u22650\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (R\u2081.append R\u2082) (completenessError\u2081 + completenessError\u2082)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L459"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-12-01T17:09:18-07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "6981c0322199ff97ae32e02f728534c69de6b0a529caba6749265f2f4a372c1d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
      "start_line": 489,
      "start_column": 27,
      "end_line": 489,
      "end_column": 32
    },
    "debug_info": {
      "goal": "case h.e'_6.h.h.h.h.e'_2.h.h.e\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nn : Fin (0 + 1) \u2192 \u2115\npSpec : (i : Fin (0 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (0 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (0 + 2) \u2192 Type\nrel : (i : Fin (0 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (0 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (0 + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin 1), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\ne_1\u271d\u00b9 : \u2211 i, n i = n 0\nhe\u271d : ProtocolSpec.compose 0 n pSpec = pSpec 0\nx\u271d : { i // (ProtocolSpec.compose 0 n pSpec i).1 = Direction.V_to_P }\ne_1\u271d : (ProtocolSpec.compose 0 n pSpec \u2191x\u271d).2 = (pSpec 0 \u2191x\u271d).2\n\u22a2 instSampleableChallengeCompose = inst\u271d 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L489"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "46190574d912f3b276b8956b56e28a4bde53f2ec71fd292107be42e3d80131d8"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
      "start_line": 491,
      "start_column": 4,
      "end_line": 491,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case succ\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nm : \u2115\nih :\n  \u2200 {n : Fin (m + 1) \u2192 \u2115} {pSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)}\n    [inst : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)]\n    {Stmt Wit : Fin (m + 2) \u2192 Type} {rel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop}\n    (R : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ))\n    (completenessError : Fin (m + 1) \u2192 \u211d\u22650),\n    (\u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)) \u2192\n      completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (\u2211 i, completenessError i)\nn : Fin (m + 1 + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (m + 1 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 1 + 2) \u2192 Type\nrel : (i : Fin (m + 1 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (m + 1 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1 + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin (m + 1 + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1 + 1))) (compose (m + 1) n pSpec Stmt Wit R) (\u2211 i, completenessError i)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L491"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "ae62a720f32f451490cdd962d1e3e6708b6e82e162cee3ef8e6ed17411e9e945"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 495,
      "start_column": 2,
      "end_line": 495,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5R\u2983\u2264 \u2191deg\u2984[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : \u2191(transcript 0) \u2208 R\u2983\u2264 \u2191deg\u2984[X]\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) \u2191(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = stmt.1.target then pure () else failure",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L495"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-18T19:07:20+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "b811112245ecb5dca87a20a0fd136ace45bc965f2f942d4af4cba61eb86bd5ce"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 513,
      "start_column": 57,
      "end_line": 513,
      "end_column": 62
    },
    "debug_info": {
      "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 (do\n      let x \u2190\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                \u27e80, \u22ef\u27e9\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn\u271d)).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)\n      let a \u2190 liftM (query (Sum.inr \u27e81, \u22ef\u27e9) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  \u27e81, \u22ef\u27e9 x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)).neverFails",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L513"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "3ac088511b47029a26d9c4c323340dc5ebdf616a1f950c9b6a9299018b5b40d8"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 522,
      "start_column": 2,
      "end_line": 522,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case right\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) \u2208\n        (run ({ target := target, challenges := challenge }, oStmt) witIn\u271d\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support \u2192\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | \u27e8poly, property\u27e9 =>\n            \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x \u2218 Fin.cast \u22ef)) poly =\n              target) \u2227\n        (a, b) = (a_1, b_2)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L522"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-18T19:07:20+07:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "a7f2757e01506bedc5df9fa6f778328519644a12cfefe1cf14d7d1406ec143f0"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 571,
      "start_column": 4,
      "end_line": 571,
      "end_column": 9
    },
    "debug_info": {
      "goal": "R\u271d : Type\ninst\u271d\u2075 : CommSemiring R\u271d\nn\u271d deg\u271d m\u271d : \u2115\nD\u271d : Fin m\u271d \u21aa R\u271d\n\u03b9\u271d : Type\noSpec\u271d : OracleSpec \u03b9\u271d\ninst\u271d\u2074 : VCVCompatible R\u271d\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni\u271d : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  \u00acrelation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i),\n    (a, b) \u2208 (Verifier.run stmt tr (verifier R n deg D oSpec i)).support \u2192\n      \u2200 (x : Unit), \u00acrelation R n deg D i.succ (a, b) x",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L571"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "7eb57337a4a53afb95245e7e428de73d21423347faef6a472bf1ca807546d58b"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "BoltonBailey/sumcheck-blueprint-graph",
      "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
      "lean_version": "v4.18.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 646,
      "start_column": 42,
      "end_line": 646,
      "end_column": 47
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L646"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
    },
    "id": "155192ee144b7a2eca0dac294e33382594c03befc133f75acbedddc961502efa"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 62,
      "start_column": 9,
      "end_line": 62,
      "end_column": 14
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => ProtocolSpec.Message (SendWitness.pSpec WitEquiv) j",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L62"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "cbadd1efb6922cc61c8cd595e9e1ca56e1073e4705d3613e65072aa35d872166"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 80,
      "start_column": 2,
      "end_line": 80,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (SendWitness.toRelOut Statement Witness \u03b9\u209b\u1d62 OStatement WitEquiv equiv relIn)\n    (SendWitness.oracleReduction \u03b9 oSpec Statement Witness \u03b9\u209b\u1d62 OStatement inst\u271d\u00b2 WitEquiv inst\u271d\u00b9 equiv)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L80"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "11404036b0daecc063481b3bcbb45fdb4022d402f17acce76a8bee7c64fddeec"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 141,
      "start_column": 9,
      "end_line": 141,
      "end_column": 14
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => ProtocolSpec.Message (SameOracle.pSpec \u03b9\u209b\u1d62 inst\u271d OStatement) j",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L141"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "a09a1299953a459e4e2a396d74f021f96f695e6d00453df92ed801f4cabafa59"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 167,
      "start_column": 2,
      "end_line": 167,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (SameOracle.relOut \u03b9\u209b\u1d62 inst\u271d\u00b9 OStatement)\n    (SameOracle.oracleReduction \u03b9 oSpec Statement \u03b9\u209b\u1d62 inst\u271d\u00b9 OStatement inst relComp)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L167"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "adc1dd3c85436e4c1d8d1deb38df7c5f99c89c4904f24d1682e2bc61c77020e2"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Components.lean",
      "start_line": 259,
      "start_column": 2,
      "end_line": 259,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b9 : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (RandomQuery.relIn OStatement) (RandomQuery.relOut OStatement inst\u271d\u00b9)\n    (RandomQuery.oracleReduction \u03b9 oSpec OStatement inst\u271d\u00b9)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L259"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "13e3d31e590ed08cd2e9d6d8a0c3984f3bee6aab9b8f81bb036245165b89764f"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Execution.lean",
      "start_line": 185,
      "start_column": 2,
      "end_line": 185,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190\n        (simulateQ loggingOracle\n              (Prover.runToRound n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut inst\u271d (Fin.last n) stmt wit\n                reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut inst\u271d stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Execution.lean#L185"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "dbb37ce96e8b45ba1c4de57596afa2f136191af2577e71da2a066d4d2cb86957"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Execution.lean",
      "start_line": 278,
      "start_column": 2,
      "end_line": 278,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Execution.lean#L278"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "611cc3d53d37d32c8030ee1bb798ee821e7a999487bba59682d7905618680811"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/OracleInterface.lean",
      "start_line": 312,
      "start_column": 2,
      "end_line": 312,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : MvPolynomial \u03c3 R\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : MvPolynomial \u03c3 R\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/OracleInterface.lean#L312"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "58be387d31ad7e5878fb5dd2adf931fe69ff472c74b71411c21b80ebfa274c1e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/OracleInterface.lean",
      "start_line": 351,
      "start_column": 2,
      "end_line": 351,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : Polynomial R\n\u22a2 \u2203 x,\n    ((OptionT.run (List.mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          QueryImpl.impl\n            (@SimOracle.statelessOracle Unit \u03b9 spec\n              (OracleInterface.toOracleSpec Unit (fun x => Polynomial R) fun i => instOracleInterfacePolynomial R inst\u271d)\n              fun i q => OracleInterface.oracle (Polynomial R) (instOracleInterfacePolynomial R inst\u271d) p q)) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/OracleInterface.lean#L351"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "b83a17ad93335c101fe2c0c7f6c03836aed01263c833edff7946dc72ca2c749c"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Transform/FiatShamir.lean",
      "start_line": 130,
      "start_column": 66,
      "end_line": 130,
      "end_column": 71
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u2074 : VCVCompatible StmtIn\ninst\u271d\u00b3 : (i : Fin n) \u2192 VCVCompatible (pSpec i).2\ninst\u271d\u00b2 : DecidableEq \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\ncompletenessError : NNReal\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 Reduction.completeness relIn relOut R completenessError \u2192\n    Reduction.completeness relIn relOut (Reduction.fiatShamir n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut R)\n      completenessError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Transform/FiatShamir.lean#L130"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-06T23:33:56-04:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "434b22a5d0473f47719df823adf49cc3f10e5fced20057cf4e25302438db4106"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 103,
      "start_column": 2,
      "end_line": 103,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : Polynomial R\n\u22a2 (FRI.splitEvenOdd R inst\u271d\u00b9 p).1.natDegree \u2264 p.natDegree / 2",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/Fold.lean#L103"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "32f7f5d9d3224aa7ea08d2e4164eb5bc060333162f32ddcceafa1721bdf50f22"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 107,
      "start_column": 2,
      "end_line": 107,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : Polynomial R\n\u22a2 (FRI.splitEvenOdd R inst\u271d\u00b9 p).2.natDegree \u2264 p.natDegree / 2",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/Fold.lean#L107"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "35c545d6f5ed13d6f9a02a100c11158c6f4bf52916e2a3892a1d5d277b743b74"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 119,
      "start_column": 11,
      "end_line": 119,
      "end_column": 16
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5(Polynomial.degreeLT R (2 * n))\npEven pOdd : Polynomial R\n\u22a2 pEven \u2208 Polynomial.degreeLT R n",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/Fold.lean#L119"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "77961a14454516e42c816c34d347ecfd77a97bad80fc61d6daff2eb126f5307a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/Fold.lean",
      "start_line": 119,
      "start_column": 26,
      "end_line": 119,
      "end_column": 31
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5(Polynomial.degreeLT R (2 * n))\npEven pOdd : Polynomial R\n\u22a2 pOdd \u2208 Polynomial.degreeLT R n",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/Fold.lean#L119"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-11-26T16:07:07-07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "dea1451306526feb00609134c32a080c9b4c7b33738c0eb680496c92ca4a5ef9"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
      "start_line": 219,
      "start_column": 6,
      "end_line": 219,
      "end_column": 11
    },
    "debug_info": {
      "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (@MerkleTree.implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 MerkleTree.buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := MerkleTree.generateProof \u03b1 n i cache\n          MerkleTree.verifyProof \u03b1 inst\u271d\u00b2 n i leaves[i] (MerkleTree.getRoot \u03b1 n cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (MerkleTree.buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (@Function.comp (MerkleTree.Cache \u03b1 (n + 1))\n                (OptionT (FreeMonad (OracleQuery (MerkleTree.spec \u03b1))) PUnit.{1})\n                (FreeMonad (OracleQuery (MerkleTree.spec \u03b1)) (Option PUnit.{1})) OptionT.run fun cache =>\n                MerkleTree.verifyProof \u03b1 inst\u271d\u00b2 (n + 1) i (leaves.get i) (MerkleTree.getRoot \u03b1 (n + 1) cache)\n                  (MerkleTree.generateProof \u03b1 (n + 1) i cache))).mapM\n          fun {\u03b1_1} q =>\n          @MerkleTree.implement_with_function.match_1 \u03b1 (fun \u03b1_2 q => StateT Unit (OracleComp []\u2092) \u03b1_2) \u03b1_1 q\n            fun i left right => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
    },
    "metadata": {
      "blame_email_hash": "ab200eba5736",
      "blame_date": "2025-04-16T13:24:09-07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "7280d8717b9fd011575f4f4132de767bb32b8850bf9dfef467d8da0bbeb21059"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/AGM/Basic.lean",
      "start_line": 160,
      "start_column": 2,
      "end_line": 160,
      "end_column": 7
    },
    "debug_info": {
      "goal": "p : \u2115\ninst\u271d\u00b2 : Fact (Nat.Prime p)\nG\u2081 : Type u_2\ninst\u271d\u00b9 : CommGroup G\u2081\ninst\u271d : @IsPrimeOrderWith G\u2081 CommGroup.toGroup p inst\u271d\u00b2\nn : \u2115\ng : G\u2081\na : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1))\n\u22a2 g ^ \u2211 i, a.val ^ \u2191i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (\u2211 x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ \u2191x).val",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/AGM/Basic.lean#L160"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-15T12:13:54+05:30",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "0fa0fe31b389ab02a4c98a271e364889dc43b1d8dd99a55447d42ca28aed2291"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/AGM/Basic.lean",
      "start_line": 171,
      "start_column": 6,
      "end_line": 171,
      "end_column": 11
    },
    "debug_info": {
      "goal": "G : Type u_1\ninst\u271d\u2078 : CommGroup G\np : \u2115\ninst\u271d\u2077 : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG\u2081 : Type u_2\ninst\u271d\u2076 : CommGroup G\u2081\ninst\u271d\u2075 : @IsPrimeOrderWith G\u2081 CommGroup.toGroup p inst\u271d\u2077\ng\u2081 : G\u2081\nG\u2082 : Type u_3\ninst\u271d\u2074 : CommGroup G\u2082\ninst\u271d\u00b3 : @IsPrimeOrderWith G\u2082 CommGroup.toGroup p inst\u271d\u2077\ng\u2082 : G\u2082\nG\u209c : Type u_4\ninst\u271d\u00b2 : CommGroup G\u209c\ninst\u271d\u00b9 : @IsPrimeOrderWith G\u209c CommGroup.toGroup p inst\u271d\u2077\npairing : Additive G\u2081 \u2192\u2097[\u2124] Additive G\u2082 \u2192\u2097[\u2124] Additive G\u209c\nn : \u2115\ninst\u271d : Fact (Nat.Prime p)\nsrs : Vector G\u2081 (n + 1)\ncoeffs : Fin (n + 1) \u2192 ZMod p\nz : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n\u22a2 ((\u2191poly - C (eval z \u2191poly)) / (X - C z)).degree < \u2191(n + 1)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/AGM/Basic.lean#L171"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-03-15T21:13:06-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "e5b9855eec0276df28d7b567898061d30e8a48805e5ce64fe3fc9248733007a3"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 186,
      "start_column": 33,
      "end_line": 186,
      "end_column": 38
    },
    "debug_info": {
      "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 @codeDist' n inst\u271d\u00b2 R inst\u271d\u00b9 C inst\u271d \u2260 \u22a4",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L186"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "bfd535c8c2e55884cdb936d37f2ea4058db383b92b53458b6ef8749f8ad50909"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 187,
      "start_column": 4,
      "end_line": 187,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : @codeDist' n inst\u271d\u00b2 R inst\u271d\u00b9 C inst\u271d \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => hammingDist \u2191x.1 \u2191x.2) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 hammingDist u v \u2264 d}",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L187"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "de7f5974859483276febb329ea48336ac48eaa0e9c066ac0349daae578398014"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 231,
      "start_column": 4,
      "end_line": 231,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : hammingDist u v \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 hammingNorm u \u2264 d",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L231"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "3b21e1b2f81f5ab141de7473287e04ba5c42969018f0f360c226745f6f657f6a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 234,
      "start_column": 4,
      "end_line": 234,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : hammingNorm u \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 hammingDist u v \u2264 d",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L234"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "4007037a91780d35e5b0817a01a0e5d02a9c2b05a23c0031f22f966195e64fe4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/CodingTheory/Basic.lean",
      "start_line": 395,
      "start_column": 65,
      "end_line": 395,
      "end_column": 70
    },
    "debug_info": {
      "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - @codeDist n inst\u271d\u00b3 R inst\u271d\u00b2 C.carrier + 1",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L395"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-26T22:44:38-04:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "27dbd89d5c5438cab8cbaafd88641efdb1095da173cc5cb0aec96f925a705bd8"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 34,
      "start_column": 14,
      "end_line": 34,
      "end_column": 19
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse (@MlPoly.ofSpec R inst\u271d n) (@MlPoly.toSpec R inst\u271d n)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Equiv.lean#L34"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "cff9e34b10cd90e5b4e76167bfec2a898b0a4121ae4eb7f343c715ef814e3aae"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 35,
      "start_column": 15,
      "end_line": 35,
      "end_column": 20
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse (@MlPoly.ofSpec R inst\u271d n) (@MlPoly.toSpec R inst\u271d n)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Equiv.lean#L35"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "b7bf77a33d064a8f207fa5e6bc26ce20b585a629999cdbf360851e95ad668915"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 43,
      "start_column": 2,
      "end_line": 43,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 @MlPoly.toSpec R inst\u271d n (p + q) = @MlPoly.toSpec R inst\u271d n p + @MlPoly.toSpec R inst\u271d n q",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Equiv.lean#L43"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "0aca7bc60d6d216b86bdcc46bd0b036fd13608c6a5131c810835912a2a7bd2ba"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Equiv.lean",
      "start_line": 47,
      "start_column": 2,
      "end_line": 47,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191(@MlPoly.toSpec R inst\u271d\u00b9 n p)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Equiv.lean#L47"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "b534aa5f65c8d5444d5239dab6758f3a95ef80492bb951983ca8ba519e720bfc"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 49,
      "start_column": 2,
      "end_line": 49,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 get (@Vector.cons R n a b) \u2b1d\u1d65 get (@Vector.cons R n c d) = a * c + b.get \u2b1d\u1d65 d.get",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Basic.lean#L49"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-14T11:09:39-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "af11e56f6d73b726daaccaae76790ac20388a9bd1d4f47e70b8083f0f0d0db13"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MlPoly/Basic.lean",
      "start_line": 121,
      "start_column": 18,
      "end_line": 121,
      "end_column": 23
    },
    "debug_info": {
      "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (a : R), @HSMul.hSMul R (@MlPoly R n) (@MlPoly R n) instHSMul a 0 = 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Basic.lean#L121"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-28T11:45:54-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "d4844da37b7d9f12506aac7a80dfcf12aad9c4a9f5bb6c54c8c4ea7ac83aefb4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 149,
      "start_column": 2,
      "end_line": 149,
      "end_column": 7
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : max n l.length = max n' l'.length\n\u22a2 l ++ replicate (n - l.length + (m - max n' l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - max n' l'.length)) unit",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L149"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-13T15:41:38-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "d9d5abbc8d3595d807bd92a16d38e619a038196c735c39897779843c7a926827"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 203,
      "start_column": 5,
      "end_line": 203,
      "end_column": 10
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (@fun x => @List.matchSize_eq_iff_forall_eq.match_1 \u03b1 (fun x => Prop) x fun x y => x = y)\n      (@List.matchSize \u03b1 l\u2081 l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L203"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-14T17:35:17-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "7f091372fe158e3d80d9c23ec890c5997c2eaa7879089a33477babe8af51b1c4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 382,
      "start_column": 75,
      "end_line": 382,
      "end_column": 80
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp (@Array.getLast \u03b1 (popWhile p as) h) = true",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L382"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-14T17:35:17-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "62783b7ca13d6fcc0279b996c31a3e7a44cbb6e3bf6f6ded6fcad77df1018f8c"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 460,
      "start_column": 4,
      "end_line": 460,
      "end_column": 9
    },
    "debug_info": {
      "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, @List.findSum \u2115 Nat.instAddMonoid Nat.instPreorder Nat.decLt (a :: l') j = some n",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L460"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "93784d2459c7460301b8dbba482c39994b7d76741684ceebd39588128202c7ed"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/Math/Basic.lean",
      "start_line": 472,
      "start_column": 80,
      "end_line": 472,
      "end_column": 85
    },
    "debug_info": {
      "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 @List.findSumIdx \u2115 Nat.instAddMonoid Nat.instPreorder Nat.decLt l \u2191j < l.length",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L472"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "ecaa087f27b1cf595e2fe0a992043c6a3f785c1685fa56e1df1f36cf473ca004"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
      "start_line": 75,
      "start_column": 2,
      "end_line": 75,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : MvPolynomial \u03c3 R\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-16T12:52:41-06:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "c3f6cf9248fdb96a4f8dc1eb82fe278301f1cb99f9c22928089266ed4c6c9ee1"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
      "start_line": 112,
      "start_column": 2,
      "end_line": 112,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : MvPolynomial (Fin n) R\n\u22a2 ((@MvPolynomial.sumExceptFirst' R inst\u271d n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-09-13T15:50:48-04:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "ff8b358fd34bb0c0779bd08152c8fb12c4666ab25882cf7beaa735a45c925489"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
      "start_line": 69,
      "start_column": 58,
      "end_line": 69,
      "end_column": 63
    },
    "debug_info": {
      "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : MvPolynomial \u03c3 R\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191{x \u2208 p.vars.pi S | (eval (@MvPolynomial.Function.extendDomain \u03c3 R inst\u271d\u2074 MulZeroClass.toZero p.vars x)) p = 0}.card /\n      \u220f i \u2208 p.vars, \u2191(S i).card \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(S i).card",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-30T15:40:43-04:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "e809d62de3d515de6853d403a1a049883dfe807b18f19309b741b50d1cc49165"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
      "start_line": 171,
      "start_column": 76,
      "end_line": 171,
      "end_column": 81
    },
    "debug_info": {
      "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : MvPolynomial \u03c3 R\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < (S i).card\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-10-30T15:40:43-04:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "ccb154ac93d3abaf9564b202cacdc23801b02283bffd96e7bdddde7de66490b3"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 571,
      "start_column": 2,
      "end_line": 571,
      "end_column": 7
    },
    "debug_info": {
      "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : @UniPoly Q\ni : \u2115\nhi : i < Array.size (@UniPoly.add_raw Q inst\u271d p q)\n\u22a2 (p ++ Array.replicate (Array.size q - Array.size p) 0)[i] +\n      (q ++ Array.replicate (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/UniPoly/Basic.lean#L571"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "b7719a8612295a5a241a9fd448ad8c7ab787e846158c07e28a08021f7bfd8b31"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/Data/UniPoly/Basic.lean",
      "start_line": 899,
      "start_column": 4,
      "end_line": 899,
      "end_column": 9
    },
    "debug_info": {
      "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : @UniPoly Q\nhpq : p ++ Array.replicate (Array.size q - Array.size p) 0 = q ++ Array.replicate (Array.size p - Array.size q) 0\nhqr : q ++ Array.replicate (Array.size r - Array.size q) 0 = r ++ Array.replicate (Array.size q - Array.size r) 0\n\u22a2 p ++ Array.replicate (Array.size r - Array.size p) 0 = r ++ Array.replicate (Array.size p - Array.size r) 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/UniPoly/Basic.lean#L899"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "6c34b21706e8632baf36da88909d57091bd8ce528f4c6d9465ee721a2194413d"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 151,
      "start_column": 2,
      "end_line": 151,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (a.2.2.1, (P.toProverOut.1 a.2.1).1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction\n        (pure\n          (default,\n            P.input\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                witIn),\n            stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a =>\n        (TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (stmtIn, (P.toProverOut.1 a.2).1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (witIn, (P.toProverOut.1 a.2).2),\n          a.1)) <$>\n      Fin.induction\n        (pure\n          (default,\n            P.input\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "6c8f44f6aef384494dfe93e782d4043c48211c816351461e817bd542c6aa8914"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 164,
      "start_column": 2,
      "end_line": 164,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190\n        Prover.run\n            (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              stmtIn)\n            (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n              (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n            R.prover\n      (fun a_1 =>\n            ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                  (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                  (stmtIn, a.1),\n                TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                  (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                  (witIn, a.2.1)),\n              a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a =>\n                        TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                            WitOut' data)\n                          (stmtIn, a)) <$>\n                      R.verifier.verify\n                        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                            WitOut' data)\n                          stmtIn)\n                        transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190\n      Prover.run\n          (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            stmtIn)\n          (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n          R.prover\n    (fun a_1 =>\n          ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (stmtIn, a.1),\n              TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (witIn, a.2.1)),\n            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              (stmtIn, a_1),\n            a.2.2)) <$>\n        (Verifier.run\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              a.2.2 R.verifier).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "7f4fe5f6d1eb85138c619e665fde9b5cfdc20430a0cb11c34e6303ca4164d907"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 177,
      "start_column": 2,
      "end_line": 177,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190\n        Prover.runWithLog stmtIn witIn\n            (Prover.transport n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a =>\n                            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                                WitOut' data)\n                              (stmtIn, a)) <$>\n                          R.verifier.verify\n                            (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                                WitOut' data)\n                              stmtIn)\n                            transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190\n      Prover.runWithLog\n          (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            stmtIn)\n          (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n          R.prover\n    (fun a_1 =>\n          ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (stmtIn, a.1),\n              TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (witIn, a.2.1)),\n            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              (stmtIn, a_1.1),\n            a.2.2.1, a.2.2.2, a_1.2)) <$>\n        (simulateQ loggingOracle\n                (Verifier.run\n                  (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                    (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n                      data)\n                    stmtIn)\n                  a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "0927d71f561c1481e4292e32a4d42b999c5f5b315a17ba81ccb7782a7075690e"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 201,
      "start_column": 2,
      "end_line": 201,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : NNReal\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227\n          prvStmtOut =\n            stmtOut|run\n        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          stmtIn)\n        (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n          (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          witIn)\n        R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d :\n  x\u271d \u2208\n    (run\n        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          stmtIn)\n        (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n          (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          witIn)\n        R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n              (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n                relIn' relOut relOut' data))\n            (stmtIn, a.1.1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n              (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n                relIn' relOut relOut' data))\n            (witIn, a.1.2)),\n        TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          (stmtIn, a.2.1),\n        a.2.2))\n    x\u271d",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-04-22T09:32:10-04:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "49820e392fc2e8f30aac1f5ae1a72a87b966dec1fd88e72db9471fae1bdccbde"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 215,
      "start_column": 2,
      "end_line": 215,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : NNReal\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn\n        { prover := WitOut,\n          verifier :=\n            Verifier.transport n pSpec \u03b9 oSpec StmtIn StmtOut StmtIn' StmtOut'\n              (TransportDataSound.toTransportStatement StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\n                data)\n              V }] \u2264\n    \u2191soundnessError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "1a88221f2ceac6b52fe0892bbc5fafa60bca1b4aa8db3b5a1bf82cd0c37d0cd7"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 229,
      "start_column": 2,
      "end_line": 234,
      "end_column": 7
    },
    "debug_info": {
      "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : NNReal\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover,\n              verifier :=\n                Verifier.transport n pSpec \u03b9 oSpec StmtIn StmtOut StmtIn' StmtOut'\n                  (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n                    (TransportDataKnowledgeSound.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                      WitOut' relIn relIn' relOut relOut' data))\n                  V }] \u2264\n        \u2191soundnessError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "ec45bf99a591767607d46c539ceee8e72fecdf0cc2df2c76d9c7edc0556af57a"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
      "start_line": 278,
      "start_column": 4,
      "end_line": 278,
      "end_column": 9
    },
    "debug_info": {
      "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : Polynomial \u2124\nt : \u2124\nf : Polynomial \u2124\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:31:31-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "88bfefb97888853231b23e4a374d0b36deb25c9234d19d3160d15d4ce5062429"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Security/Basic.lean",
      "start_line": 390,
      "start_column": 2,
      "end_line": 390,
      "end_column": 7
    },
    "debug_info": {
      "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : NNReal\nhLt : knowledgeError < 1\nextractor :\n  @Reduction.StraightlineExtractor n pSpec (\u03b9 \u2295 { i // (pSpec i).1 = Direction.V_to_P }) (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    StmtIn WitIn StmtOut WitOut\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (@extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Security/Basic.lean#L390"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-06T20:02:30-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "e63251c407b30eea7004d73940794926a2dcbd16e77ac26c91aa5b0366c15ff6"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
      "start_line": 404,
      "start_column": 2,
      "end_line": 404,
      "end_column": 7
    },
    "debug_info": {
      "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIdx) \u2192 OracleInterface (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIdx) \u2192 OracleInterface (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (Prover.append m n pSpec\u2081 pSpec\u2082 \u03b9 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 P\u2081 P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    @Prover.append_run.match_1 m pSpec\u2081 Stmt\u2082 Wit\u2082\n        (fun __discr =>\n          OracleComp (oSpec ++\u2092 [(pSpec\u2081 ++\u209a pSpec\u2082).Challenge]\u2092) (Stmt\u2083 \u00d7 Wit\u2083 \u00d7 (pSpec\u2081 ++\u209a pSpec\u2082).FullTranscript))\n        __discr fun stmt\u2082 wit\u2082 transcript\u2081 => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        @Prover.append_run.match_1 n pSpec\u2082 Stmt\u2083 Wit\u2083\n            (fun __discr =>\n              OracleComp (oSpec ++\u2092 [(pSpec\u2081 ++\u209a pSpec\u2082).Challenge]\u2092)\n                (Stmt\u2083 \u00d7 Wit\u2083 \u00d7 (pSpec\u2081 ++\u209a pSpec\u2082).FullTranscript))\n            __discr fun stmt\u2083 wit\u2083 transcript\u2082 => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L404"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-12-28T16:03:02+07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "e33f7d15cd327a0df09e0de2355e1a040a4b682eca9fc9c96821ce25fdb807ac"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
      "start_line": 434,
      "start_column": 89,
      "end_line": 434,
      "end_column": 94
    },
    "debug_info": {
      "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : NNReal\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (Reduction.append m n pSpec\u2081 pSpec\u2082 \u03b9 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 R\u2081 R\u2082)\n    (completenessError\u2081 + completenessError\u2082)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L434"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2024-12-01T17:09:18-07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "ae5d515980e27e20f0e45ed505bae676d69a4abc21bc8105720958931f2a830f"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
      "start_line": 464,
      "start_column": 27,
      "end_line": 464,
      "end_column": 32
    },
    "debug_info": {
      "goal": "case h.e'_6.h.h.h.h.e'_2.h.h.e\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nn : Fin (0 + 1) \u2192 \u2115\npSpec : (i : Fin (0 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (0 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (0 + 2) \u2192 Type\nrel : (i : Fin (0 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (0 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (0 + 1) \u2192 NNReal\nh : \u2200 (i : Fin 1), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\ne_1\u271d\u00b9 : \u2211 i, n i = n 0\nhe\u271d : compose 0 n pSpec = pSpec 0\nx\u271d : { i // (compose 0 n pSpec i).1 = Direction.V_to_P }\ne_1\u271d : (compose 0 n pSpec \u2191x\u271d).2 = (pSpec 0 \u2191x\u271d).2\n\u22a2 instSampleableChallengeCompose 0 n pSpec inst\u271d = inst\u271d 0",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L464"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "21bd4f096f5afddafd90ea65bbdf9b9ba51fb2f824d8dde33cc8361909a4c8c1"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
      "start_line": 466,
      "start_column": 4,
      "end_line": 466,
      "end_column": 9
    },
    "debug_info": {
      "goal": "case succ\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nm : \u2115\nih :\n  \u2200 {n : Fin (m + 1) \u2192 \u2115} {pSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)}\n    [inst : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)]\n    {Stmt Wit : Fin (m + 2) \u2192 Type} {rel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop}\n    (R : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ))\n    (completenessError : Fin (m + 1) \u2192 NNReal),\n    (\u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)) \u2192\n      completeness (rel 0) (rel (Fin.last (m + 1))) (Reduction.compose \u03b9 oSpec m n pSpec Stmt Wit R)\n        (\u2211 i, completenessError i)\nn : Fin (m + 1 + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (m + 1 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 1 + 2) \u2192 Type\nrel : (i : Fin (m + 1 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (m + 1 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1 + 1) \u2192 NNReal\nh : \u2200 (i : Fin (m + 1 + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1 + 1))) (Reduction.compose \u03b9 oSpec (m + 1) n pSpec Stmt Wit R)\n    (\u2211 i, completenessError i)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L466"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-23T10:22:30+07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "463d6197bd684c5904e6b8a0ba2fc8aaea69712ccfaecb62e69fe8ca83b17e90"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/OracleReduction/Composition/Sequential/ProtocolSpec.lean",
      "start_line": 354,
      "start_column": 2,
      "end_line": 354,
      "end_column": 7
    },
    "debug_info": {
      "goal": "m : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\nT : (i : Fin (m + 1)) \u2192 (pSpec i).FullTranscript\ni : Fin m\n\u22a2 @Fin.dfoldl (\u2191i + 1)\n      (fun i_1 =>\n        FullTranscript\n          (ProtocolSpec.compose (\u2191i_1)\n            (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef n))\n            (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef pSpec))))\n      (fun i_1 acc =>\n        @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n          (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)) +\n            n (Fin.castLE \u22ef i_1.succ))\n          (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1) i_2)))\n          (ProtocolSpec.append\n            (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)))\n            (n (Fin.castLE \u22ef i_1.succ))\n            (ProtocolSpec.compose (\u2191i_1)\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef n))\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n            (pSpec (Fin.castLE \u22ef i_1.succ)))\n          (ProtocolSpec.compose (\u2191i_1 + 1)\n            (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef n))\n            (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n          (ProtocolSpec.FullTranscript.compose._proof_41 (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n) i_1)\n          (ProtocolSpec.FullTranscript.compose._proof_44 (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n)\n            (Fin.take (\u2191i + 1 + 1) \u22ef pSpec) i_1)\n          (ProtocolSpec.FullTranscript.append\n            (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)))\n            (n (Fin.castLE \u22ef i_1.succ))\n            (ProtocolSpec.compose (\u2191i_1)\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef n))\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n            (pSpec (Fin.castLE \u22ef i_1.succ)) acc (T (Fin.castLE \u22ef i_1.succ))))\n      (T (Fin.castLE \u22ef 0)) =\n    @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n      (\u2211 i_1, n (Fin.castLE \u22ef i_1) + n i.succ) (\u2211 i_1, n (Fin.castLE \u22ef i_1))\n      (ProtocolSpec.append (\u2211 i_1, n (Fin.castLE \u22ef i_1)) (n i.succ)\n        (ProtocolSpec.compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)) (pSpec i.succ))\n      (ProtocolSpec.compose (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n) (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)) \u22ef \u22ef\n      (ProtocolSpec.FullTranscript.append (\u2211 i_1, n (Fin.castLE \u22ef i_1)) (n i.succ)\n        (ProtocolSpec.compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)) (pSpec i.succ)\n        (@Fin.dfoldl (\u2191i)\n          (fun i_1 =>\n            FullTranscript\n              (ProtocolSpec.compose (\u2191i_1)\n                (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef pSpec))))\n          (fun i_1 acc =>\n            @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n              (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)) +\n                n (Fin.castLE \u22ef i_1.succ))\n              (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1) i_2)))\n              (ProtocolSpec.append\n                (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)))\n                (n (Fin.castLE \u22ef i_1.succ))\n                (ProtocolSpec.compose (\u2191i_1)\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1)\n                    (Fin.take (\u2191i + 1) \u22ef pSpec)))\n                (pSpec (Fin.castLE \u22ef i_1.succ)))\n              (ProtocolSpec.compose (\u2191i_1 + 1)\n                (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef n))\n                (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef pSpec)))\n              (ProtocolSpec.FullTranscript.compose._proof_41 (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) i_1)\n              (ProtocolSpec.FullTranscript.compose._proof_44 (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)\n                i_1)\n              (ProtocolSpec.FullTranscript.append\n                (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)))\n                (n (Fin.castLE \u22ef i_1.succ))\n                (ProtocolSpec.compose (\u2191i_1)\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1)\n                    (Fin.take (\u2191i + 1) \u22ef pSpec)))\n                (pSpec (Fin.castLE \u22ef i_1.succ)) acc (T (Fin.castLE \u22ef i_1.succ))))\n          (T (Fin.castLE \u22ef 0)))\n        (T i.succ))",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/ProtocolSpec.lean#L354"
    },
    "metadata": {
      "blame_email_hash": "d0850777cf0b",
      "blame_date": "2025-05-25T11:02:32+07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "b8d96f5baaa1e60b8ffe347bc2537f7eb05aa5e4cb84b44d25cd98b94b013a43"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 492,
      "start_column": 2,
      "end_line": 492,
      "end_column": 7
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Sumcheck.Spec.Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b9 n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5(degreeLE R \u2191deg)), (Direction.V_to_P, R)]\nx : getType (Sumcheck.Spec.pSpec R inst\u271d\u00b9 deg) 0\nhp_i : \u2191(transcript 0) \u2208 degreeLE R \u2191deg\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (List.mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = Sumcheck.Spec.Statement.target R n i.castSucc stmt.1 then pure () else failure\n                    (fun a =>\n                          Sumcheck.Spec.Statement.mk R n i.succ a\n                            (Fin.snoc (Sumcheck.Spec.Statement.challenges R n i.castSucc stmt.1) (transcript 1))) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a =>\n            (a, fun i_1 =>\n              @Prod.snd (Sumcheck.Spec.Statement R n i.castSucc)\n                ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b9 n deg i) stmt i_1)) <$>\n          a.getM) =\n    (fun a =>\n        (Sumcheck.Spec.Statement.mk R n i.succ (Polynomial.eval (transcript 1) \u2191(transcript 0))\n            (Fin.snoc (Sumcheck.Spec.Statement.challenges R n i.castSucc stmt.1) (transcript 1)),\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = Sumcheck.Spec.Statement.target R n i.castSucc stmt.1 then pure ()\n      else failure",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Sumcheck/Basic.lean#L492"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-01-18T19:07:20+07:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "69c2d3a1610bfbd423bbce92118f995a7741ec117b6a93f0e46b37fe001f47b4"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 510,
      "start_column": 57,
      "end_line": 510,
      "end_column": 62
    },
    "debug_info": {
      "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast (Sumcheck.Spec.relation._proof_12 n i.castSucc)))\n        \u2191(@oStmt 0) =\n    target\n\u22a2 ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                verifier :=\n                  Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.sendMessage\n        \u27e80, \u22ef\u27e9\n        ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                        i }.toReduction.prover.toProverIn.input\n          (Sumcheck.Spec.Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i)) Unit\n          ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.PrvState\n            0)\n          (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt) witIn\u271d)).neverFails \u2227\n    \u2200 (a : Polynomial R) (b : a \u2208 degreeLE R \u2191deg)\n      (b_1 :\n        { prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                  verifier :=\n                    Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.PrvState\n          1),\n      (\u27e8a, b\u27e9, b_1) \u2208\n          ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                      verifier :=\n                        Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                          i }.toReduction.prover.sendMessage\n              \u27e80, \u22ef\u27e9\n              ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                          verifier :=\n                            Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                              i }.toReduction.prover.toProverIn.input\n                (Sumcheck.Spec.Statement R n i.castSucc \u00d7\n                  ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i))\n                Unit\n                ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                          verifier :=\n                            Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                              i }.toReduction.prover.PrvState\n                  0)\n                (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt) witIn\u271d)).support \u2192\n        \u2200 (x : R),\n          (Verifier.run (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt)\n              (Transcript.snoc 2 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg) 1 x\n                (Transcript.snoc 2 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg) 0 \u27e8a, b\u27e9\n                  (@default (Transcript 0 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg)) Unique.instInhabited)))\n              { prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                        i }.toReduction.verifier).neverFails",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Sumcheck/Basic.lean#L510"
    },
    "metadata": {
      "blame_email_hash": "0c5d39c5ece3",
      "blame_date": "2025-03-09T23:22:53-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "bd27c335d58009434fe23c618d52cc452d2675184e479d5ccd45fbb29c2fb20c"
  },
  {
    "repo": {
      "remote": "https://github.com/Verified-zkEVM/ArkLib",
      "branch": "main",
      "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
      "lean_version": "v4.19.0"
    },
    "location": {
      "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
      "start_line": 643,
      "start_column": 42,
      "end_line": 643,
      "end_column": 47
    },
    "debug_info": {
      "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (Sumcheck.Spec.Combined.relIn R inst\u271d\u00b9 n deg m D)\n    (Sumcheck.Spec.Combined.relOut R inst\u271d\u00b9 n deg) (Sumcheck.Spec.Combined.reduction R inst\u271d\u00b9 n deg)",
      "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Sumcheck/Basic.lean#L643"
    },
    "metadata": {
      "blame_email_hash": "f335a4ba1b88",
      "blame_date": "2025-02-24T11:52:07-05:00",
      "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
    },
    "id": "22c0ee49ff6df8cae6b641795737c14a708010a775d00e0f3adf591684793ce9"
  }
]