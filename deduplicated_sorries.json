{
  "documentation": "deduplicated list of sorries, for each unique goal string the most recent inclusion date is chosen",
  "sorries": [
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/EasyDirection.lean",
        "start_line": 24,
        "start_column": 20,
        "end_line": 24,
        "end_column": 25
      },
      "debug_info": {
        "goal": "case cographic\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nM M\u271d : Matroid \u03b1\nhM : M\u271d.IsCographic\n\u22a2 M\u271d.IsRegular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/EasyDirection.lean#L24"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-17T15:49:08+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "fa5709be521c1844ea91a393882a2ea75ee8ac156a0605e60703442d225b744a"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/HardDirection.lean",
        "start_line": 8,
        "start_column": 2,
        "end_line": 8,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nM : Matroid \u03b1\nhM : M.IsRegular\n\u22a2 M.IsGood",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/HardDirection.lean#L8"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-13T12:19:44+01:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "7962749fd54bb9f3d3ad82d13034dadd7c9d8cece562043fce9a5570983ed175"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 60,
        "start_column": 6,
        "end_line": 60,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.mp\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set \u03b1\nhI : I \u2286 (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  I \u2286 (standardRepr1sumComposition hXY hYX).1.X \u222a (standardRepr1sumComposition hXY hYX).1.Y \u2227\n    LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb (standardRepr1sumComposition hXY hYX).1.B) x \u2218 Subtype.toSum)\n      (Subtype.val \u207b\u00b9' I)\n\u22a2 (True \u2227\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u2097.B) x \u2218 Subtype.toSum) (Subtype.val \u207b\u00b9' (I \u2229 (S\u2097.X \u222a S\u2097.Y)))) \u2227\n    (True \u2227\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u1d63.B) x \u2218 Subtype.toSum)\n          (Subtype.val \u207b\u00b9' (I \u2229 (S\u1d63.X \u222a S\u1d63.Y)))) \u2227\n      I \u2286 S\u2097.X \u222a S\u2097.Y \u222a (S\u1d63.X \u222a S\u1d63.Y)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum1.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "159086c51a1f9be9682ba1216e04c5f1b0356c517b54827d3f81be90a67dda1d"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 62,
        "start_column": 6,
        "end_line": 62,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case right\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set \u03b1\nhI : I \u2286 (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  (True \u2227\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u2097.B) x \u2218 Subtype.toSum) (Subtype.val \u207b\u00b9' (I \u2229 (S\u2097.X \u222a S\u2097.Y)))) \u2227\n    (True \u2227\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb S\u1d63.B) x \u2218 Subtype.toSum)\n          (Subtype.val \u207b\u00b9' (I \u2229 (S\u1d63.X \u222a S\u1d63.Y)))) \u2227\n      I \u2286 S\u2097.X \u222a S\u2097.Y \u222a (S\u1d63.X \u222a S\u1d63.Y)\n\u22a2 LinearIndepOn Z2 (Matrix.transpose fun x => (1 \u25eb (standardRepr1sumComposition hXY hYX).1.B) x \u2218 Subtype.toSum)\n    (Subtype.val \u207b\u00b9' I)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum1.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "da540676b28d3c24ac6c281099548e298f84b59c57ba64e5a309e9d09ab5fbfe"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 446,
        "start_column": 2,
        "end_line": 446,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nX Y : Set \u03b1\nQ : Matrix \u2191X \u2191Y \u211a\nx' y\u2080 y\u2081 : \u03b1\nhQ : Q.IsTotallyUnimodular\nhx' : x' \u2208 X\nhy\u2080 : y\u2080 \u2208 Y\nhy\u2081 : y\u2081 \u2208 Y\nhyy : y\u2080 \u2260 y\u2081\nhQy\u2080 : Q \u27e8x', hx'\u27e9 \u27e8y\u2080, hy\u2080\u27e9 = 1\nhQy\u2081 : Q \u27e8x', hx'\u27e9 \u27e8y\u2081, hy\u2081\u27e9 = 1\nhQy : \u2200 (y : \u2191Y), \u2191y \u2260 y\u2080 \u2227 \u2191y \u2260 y\u2081 \u2192 Q \u27e8x', hx'\u27e9 y = 0\n\u22a2 let c\u2080 := fun j => Q (\u22ef.elem j) \u27e8y\u2080, hy\u2080\u27e9;\n  let c\u2081 := fun j => Q (\u22ef.elem j) \u27e8y\u2081, hy\u2081\u27e9;\n  let Q' := Q.submatrix \u22ef.elem \u22ef.elem;\n  (Q' \u25eb \u25aec\u2080 \u25eb \u25aec\u2081 \u25eb \u25ae(c\u2080 - c\u2081)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L446"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "429799f4e3b1e04f23af2a35557b3f848631a0652a62d962dd8d31502554ff90"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 640,
        "start_column": 2,
        "end_line": 640,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  D =\n    (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n      (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L640"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "690c78822fa6e7ef8386935e976ac323da917650b794d0aaa94461617fa2700f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 729,
        "start_column": 2,
        "end_line": 729,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  \u2200 (i : \u2191(X\u1d63 \\ {x'})), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L729"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "cb2584c0dd84e62d560f3a126bd33b3129dd4ff1f51f0382dc5b61f970b87067"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 818,
        "start_column": 2,
        "end_line": 818,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  \u2200 (j : \u2191(Y\u2097 \\ {y'})),\n    (fun x => D x j) = c\u2080 \u2228\n      (fun x => D x j) = -c\u2080 \u2228\n        (fun x => D x j) = c\u2081 \u2228\n          (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L818"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "e3f51d8945dabb8fbd0a5e82a7aae928c7ddf8c1c547392dc82a6c40bd9cad23"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 907,
        "start_column": 2,
        "end_line": 907,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  (A\u1d63 \u25eb D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L907"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "1f0883d9f106b8938e9f6e43961f0a7249dce894331d4961a6c8c4ea3c9864a5"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}))\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}))\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhB\u2097' :\n  (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (Matrix.submatrix3x3mems B\u1d63' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x'\u2097 := \u27e8x', \u22ef\u27e9;\n  let x'\u1d63 := \u27e8x', \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y'\u2097 := \u27e8y', \u22ef\u27e9;\n  let y'\u1d63 := \u27e8y', \u22ef\u27e9;\n  let B\u2097 := Matrix.toCanonicalSigning B\u2097' x\u2080\u2097 x\u2081\u2097 x'\u2097 y\u2080\u2097 y\u2081\u2097 y'\u2097;\n  let B\u1d63 := Matrix.toCanonicalSigning B\u1d63' x\u2080\u1d63 x\u2081\u1d63 x'\u1d63 y\u2080\u1d63 y\u2081\u1d63 y'\u1d63;\n  let A\u2097 := B\u2097.submatrix \u22ef.elem \u22ef.elem;\n  let A\u1d63 := B\u1d63.submatrix \u22ef.elem \u22ef.elem;\n  let D\u2080\u2097 := !![B\u2097 x\u2080\u2097 y\u2080\u2097, B\u2097 x\u2080\u2097 y\u2081\u2097; B\u2097 x\u2081\u2097 y\u2080\u2097, B\u2097 x\u2081\u2097 y\u2081\u2097];\n  let D\u2080\u1d63 := !![B\u1d63 x\u2080\u1d63 y\u2080\u1d63, B\u1d63 x\u2080\u1d63 y\u2081\u1d63; B\u1d63 x\u2081\u1d63 y\u2080\u1d63, B\u1d63 x\u2081\u1d63 y\u2081\u1d63];\n  let D\u2097 := ![B\u2097 x\u2080\u2097 \u2218 \u22ef.elem, B\u2097 x\u2081\u2097 \u2218 \u22ef.elem];\n  let D\u1d63 := Matrix.of fun i => ![B\u1d63 (\u22ef.elem i) y\u2080\u1d63, B\u1d63 (\u22ef.elem i) y\u2081\u1d63];\n  let D\u2097\u1d63 := D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097;\n  let D' := \u229e D\u2097 D\u2080\u2097 D\u2097\u1d63 D\u1d63;\n  let f\u1d63 := fun i =>\n    if hi\u2080 : \u2191i = x\u2080 then \u25e90\n    else if hi\u2081 : \u2191i = x\u2081 then \u25e91 else if hi : \u2191i \u2208 X\u1d63 \\ (x\u2080 \u1543 x\u2081 \u1543 {x'}) then \u25ea\u27e8\u2191i, hi\u27e9 else \u22ef.elim;\n  let f\u2097 := fun j =>\n    if hj\u2080 : \u2191j = y\u2080 then \u25ea0\n    else if hj\u2081 : \u2191j = y\u2081 then \u25ea1 else if hj : \u2191j \u2208 Y\u2097 \\ (y\u2080 \u1543 y\u2081 \u1543 {y'}) then \u25e9\u27e8\u2191j, hj\u27e9 else \u22ef.elim;\n  let D := D'.submatrix f\u1d63 f\u2097;\n  let c\u2080 := fun j => B\u1d63 (\u22ef.elem j) y\u2080\u1d63;\n  let c\u2081 := fun j => B\u1d63 (\u22ef.elem j) y\u2081\u1d63;\n  let d\u2080 := fun i => B\u2097 x\u2080\u2097 (\u22ef.elem i);\n  let d\u2081 := fun i => B\u2097 x\u2081\u2097 (\u22ef.elem i);\n  let D\u2080' := (Matrix.submatrix3x3mems B\u2097' \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs;\n  let r\u2080 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 - d\u2081 else \u22ef.elim;\n  let r\u2081 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then -d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2081 else \u22ef.elim;\n  let r\u2082 := if hD\u2080\u2080 : D\u2080' = matrix3x3unsigned\u2080 then d\u2080 - d\u2081 else if hD\u2080\u2081 : D\u2080' = matrix3x3unsigned\u2081 then d\u2080 else \u22ef.elim;\n  (A\u2097 \u229f D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "116de01ff2b0257b395c9b107da9c556ee9ecd3a8428f071b5672fbdfa04e823"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1060,
        "start_column": 2,
        "end_line": 1060,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro\n\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x' y\u2080 y\u2081 y' : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x'}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y'}\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\nB\u2097 : Matrix \u2191S\u2097.X \u2191S\u2097.Y \u211a\nhB\u2097 : B\u2097.IsTotallyUnimodular\nhBB\u2097 : B\u2097.IsSigningOf S\u2097.B\nB\u1d63 : Matrix \u2191S\u1d63.X \u2191S\u1d63.Y \u211a\nhB\u1d63 : B\u1d63.IsTotallyUnimodular\nhBB\u1d63 : B\u1d63.IsSigningOf S\u1d63.B\n\u22a2 (standardRepr3sumComposition_standard hXX hYY hXY hYX).1.B.HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L1060"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T17:54:51+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "bcc918ff93ca21eafc49ff7367831aa26042190cd694b3309b259ba5c3c3cd44"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 341,
        "start_column": 2,
        "end_line": 341,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\no : Ord \u03b1\nd : DecidableEq \u03b1\nx y : \u03b1\nneq : x \u2260 y\n\u22a2 x < y \u2228 x > y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L341"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-19T15:53:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "f5aa64966ef657cc819e5e3a94eaf73206e25eac52c6211b69539007e9af7d6b"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 389,
        "start_column": 2,
        "end_line": 389,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : Regex.notOr y\n\u22a2 OrIsSmart (insertOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L389"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-19T15:53:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "556213af6d62a5dc3a2c50222b82a8c4361c5452f114946c826a99a30d7e2e83"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 394,
        "start_column": 2,
        "end_line": 394,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : OrIsSmart y\n\u22a2 OrIsSmart (mergeOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L394"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-15T15:28:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "d03824fe8e5542a27c2ef5fdcce8ffaca864d633f564122920b4432eaa85c82b"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 399,
        "start_column": 2,
        "end_line": 399,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : OrIsSmart x\nhy : OrIsSmart y\n\u22a2 OrIsSmart (smartOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L399"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-15T15:28:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "38e3014f89189364f6ecdfc2980c13019738ee80663f7bf782b6d46b6cb19937"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 433,
        "start_column": 2,
        "end_line": 433,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst\u271d \u03c7 he)\n\u22a2 |[=true|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).exec do\n              let b \u2190\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).lift_probComp\n                    ($\u1d57Bool)\n              let __discr \u2190 keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal -\n        [=false|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).exec\n              do\n              let b \u2190\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))).lift_probComp\n                    ($\u1d57Bool)\n              let __discr \u2190 keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr fun m\u2081 m\u2082 st =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2082\n                    __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr fun m\u2081 m\u2082 st =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) (A, u) m\u2082\n                    __do_jp y].toReal| +\n      |[=true|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr\n                            fun m\u2081 m\u2082 st =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst\u271d \u03c7 he adv (fun __discr => ProbComp Bool) __discr\n                            fun m\u2081 m\u2082 st =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))) Au\n                                    m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp p \u03c7 (relax_p_bound p \u03c7 m inst\u271d he))\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/Regev.lean#L433"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "a3d9b9fc63e5df8f25f6184a954b7f7e98cd79abfef5ea2a3c99a592b825e41a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 494,
        "start_column": 2,
        "end_line": 494,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst\u271d \u03c7 he)\n\u22a2 |(2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal -\n        (2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal| +\n      |[=true|do\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let r2 \u2190 $\u1d57Vector (Fin 2) m\n              let b \u2190 $\u1d57Bool\n              let A_1 \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u_1 \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A_1, u_1)\n              (fun a => decide (b = a)) <$>\n                  adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) r2).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) r2).get)].toReal -\n          [=true|do\n              let x \u2190 $\u1d57Vector (Fin p) n\n              let y \u2190 $\u1d57Fin p\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (x, y)].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/Regev.lean#L494"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "7fb6148eb77fb362f26e997b6a469d0f2eadd51711e31d2c2721ec12e29e3cd0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "f093f8a93ae49d10b200cbb1c8b930de4fac96ccf3c9bee6598a4d6a5483e809"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n            else {none},\n          OracleComp.neverFails\n              (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                (fun _ => pure none) fun verified_msg =>\n                pure\n                  (some\n                    (SimulationData.mk verified_msg\n                      (MessagePackage.mk\n                        (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                        (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                        (ReportingTag.mk\n                          (mock_hmac_sha256 (123456789#256)\n                            (string_to_bitvec\n                              (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                (bitvec_to_string 1730230302#256)))))\n                        (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                      123456789#256))) \u2227\n            \u2200\n              x_2 \u2208\n                OracleComp.support\n                  (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))),\n              OracleComp.neverFails\n                (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag (MessagePackage.reporting_tag (SimulationData.message_package data)))))) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                          x))\n                  else pure none\n              let maybeData \u2190\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content a).1, a)).1\n                          a))\n                  else pure none\n              let maybeData \u2190\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content a).1))\n                            (FrankingTag.mk (mock_hmac_sha256 a (serialize_message_data message_content a).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) a)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "07c3476472570c596f4740d5e99a8221c811e99ac59896f2c9f64b19c064e547"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n          else {none},\n        OracleComp.neverFails\n            (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n              (fun _ => pure none) fun verified_msg =>\n              pure\n                (some\n                  (SimulationData.mk verified_msg\n                    (MessagePackage.mk (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                      (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                      (ReportingTag.mk\n                        (mock_hmac_sha256 (123456789#256)\n                          (string_to_bitvec\n                            (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                              (bitvec_to_string 1730230302#256)))))\n                      (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                    123456789#256))) \u2227\n          \u2200\n            x_2 \u2208\n              OracleComp.support\n                (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                  (fun _ => pure none) fun verified_msg =>\n                  pure\n                    (some\n                      (SimulationData.mk verified_msg\n                        (MessagePackage.mk\n                          (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                          (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                          (ReportingTag.mk\n                            (mock_hmac_sha256 (123456789#256)\n                              (string_to_bitvec\n                                (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                  (bitvec_to_string 1730230302#256)))))\n                          (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                        123456789#256))),\n            OracleComp.neverFails\n              (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                (fun _ => pure true) fun val => pure false)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "b3c2e457b418bd497e54a74e8806279e3282275d96e3845f07808939f1c9d1eb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "f4c97a8f42be208e0539093499867c97deb0c2fbcd5b2dbd1704b6958b5f6bff"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\ninst\u271d : spec.FiniteRange\n\u03b1 \u03b2 \u03b3 \u03b4 \u03b5 : Type\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\noc : OracleComp spec \u03b3\nod : OracleComp spec \u03b4\noe : \u03b1 \u2192 \u03b2 \u2192 \u03b3 \u2192 \u03b4 \u2192 OracleComp spec \u03b5\nz : \u03b5\n\u22a2 [=z|do\n      let a \u2190 oa\n      let b \u2190 ob\n      let c \u2190 oc\n      let d \u2190 od\n      oe a b c d] =\n    [=z|do\n      let d \u2190 od\n      let a \u2190 oa\n      let b \u2190 ob\n      let c \u2190 oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "0cb5caf5c1f4a0d338c225db5c3ce78805601fa565cc9f3060580cf126158088"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\noa : Bool \u2192 ProbComp \u03b1\nx : \u03b1\n\u22a2 [=x|$\u1d57Bool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "8cf765fafc9759619dffa7f09d3d30ffc36ec9f86e95a7dd22049b800f0c79a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst\u271d\u2076 inst\u271d\u2075 AddCommGroup.toAddGroup inst\u271d\u00b3 inst\u271d\u00b2)\nx : P\ng\u2081 : G\n\u22a2 [=()|do\n      let a \u2190\n        (simulateQ\n                (idOracle ++\u209b\u2092\n                  {\n                      impl := fun {\u03b1} x_1 =>\n                        match \u03b1, x_1 with\n                        | .((P \u00d7 P \u2192\u2092 P \u00d7 P).range ()), query PUnit.unit (m\u2081, m\u2082) =>\n                          (fun a => (a +\u1d65 x, m\u2081 * (a +\u1d65 g\u2081 +\u1d65 x))) <$> ($\u1d57G) }.withCaching)\n                (adversary (x, g\u2081 +\u1d65 x))).run\n            \u2205\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let b' \u2190\n        simulateQ\n            (idOracle ++\u209b\u2092\n              {\n                impl := fun {\u03b1} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun \u03b1 x => ProbComp \u03b1) \u03b1 x_1\n                    fun m\u2081 _m\u2082 => pure (c +\u1d65 x, m\u2081 * (c +\u1d65 g\u2081 +\u1d65 x)) })\n            (adversary (x, g\u2081 +\u1d65 x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "f02c3a93a7d876723b6be8a7fb2a7a514b531affbc59f716d89bcab4d2aabd63"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst\u271d\u2076 inst\u271d\u2075 AddCommGroup.toAddGroup inst\u271d\u00b3 inst\u271d\u00b2)\nx : P\ng\u2081 : G\n\u22a2 [=()|do\n      let a \u2190\n        (simulateQ\n                (idOracle ++\u209b\u2092\n                  {\n                      impl := fun {\u03b1} x_1 =>\n                        match \u03b1, x_1 with\n                        | .((P \u00d7 P \u2192\u2092 P \u00d7 P).range ()), query PUnit.unit (m\u2081, m\u2082) =>\n                          (fun a => (a +\u1d65 x, m\u2082 * (a +\u1d65 g\u2081 +\u1d65 x))) <$> ($\u1d57G) }.withCaching)\n                (adversary (x, g\u2081 +\u1d65 x))).run\n            \u2205\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let y \u2190 $\u1d57P\n      let b' \u2190\n        simulateQ\n            (idOracle ++\u209b\u2092\n              {\n                impl := fun {\u03b1} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun \u03b1 x => ProbComp \u03b1) \u03b1 x_1\n                    fun m\u2081 _m\u2082 => pure (c +\u1d65 x, m\u2081 * y) })\n            (adversary (x, g\u2081 +\u1d65 x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "d6d3aed6d1ddbb75cc9addc5345b096683ef5b6558caf95ac35489f5962186e4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        ((x : \u03b1) \u2192\n          (x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs) \u2192\n            @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x))\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          ((x_1 : \u03b1) \u2192\n            x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x) \u2192\n              @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1))) \u2194\n    (Q (query i t) \u2227\n        ((x : spec.range i) \u2192\n          x \u2208 possible_outputs (query i t) \u2192\n            @OracleComp.allWhen \u03b9 spec \u03b1 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x))) \u2227\n      ((x : \u03b1) \u2192\n        (x_1 : spec.range i) \u2192\n          x_1 \u2208 possible_outputs (query i t) \u2192\n            x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n              @OracleComp.allWhen \u03b9 spec \u03b2 (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x))",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "f57fbcc1bef48081e1466b533159eec831cfa6e69b98f802bd83b2a51337e471"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "c248c1eb1d64b56506d73639afed1074f8ce18f7d52898618486588938b935bd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "9a08da7b1c6016de6119c4444737579b8d89bb566e01c6f55496dd318eb4c15f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nx : \u03b1\ny : \u03b2\n\u22a2 [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "310f055ab8c3b983f26874c250f48f33681e6fdb48bf4a63520d373266c7bc15"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "ce4a6ee3e1d34ccad8277e6ab1ef0bcc0499d4cb0a417496990ea6fac8f60ae1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "1e078acab667ac761fa155cdd66154e88a37058189a945c81ec4c72d8ed8f6dd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "3e8563b36038c9849a0454b347d9e3a28d2c6f0181700b910a7fc33dd7cf9269"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "bf9dcd464a94f97f3feb0a770a66698946a4827611791b7bbbc0373f994de766"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "9f92855cdf5195567822a64267684d8d8f3ea247404d873b6470757544a60262"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ny : \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "963c09cc4c9faa5d597f5d389c600baf6cadd2141cb74976e89fca46d7a5b2fd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nx : \u03b1\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "d9fe09cb050cb647b10926b6c3073404d9e7ef1cbd178bc3f15e5c6bea42f9cd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b3\ny : \u03b2\nz : \u03b3 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "8441ae303fa46505e4a97796b74cf3a5a28dcc1bc29003b4146d7fb65f437171"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nf : \u03b2 \u2192 \u03b3\nx : \u03b1\nz : \u03b1 \u00d7 \u03b3\n\u22a2 [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "5ddd0643097247e8aa4d40465162f1183d9d814ac2a6a3ae15b54a4aff09f195"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf).support =\n    (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "5aeffebca9dc816928744012125e37aca0b2ed0d09e97d07c54c290ab6af78d8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf).finSupport =\n    Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "6dcfe381376d425a4f364725b8754755bf70671c787a60be6b2e228b2e12368c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 support (OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf)\n\u22a2 cf x\u2081 = cf x\u2082",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "6f09ef505ff91f3914dfd84035b2bcb313527e9a3a4bc70a50af64493b2d5844"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(none, s)|Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "d69b71917fdd3a5c7b618ba321bd550bd441930996c3dc5bc79299a19d7a64f1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(s, none)|Prod.map cf cf <$> OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "2addfc19ca1eb1ba5687d4b82f6fa7587ab60944a1ea0a3ed2f32990d690bf49"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 support (OracleComp.fork \u03b9 inst\u271d\u2074 spec inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 main qb js i cf)\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "ee20317d8cb6003f0e629e3a82bcca205935f9fb54d0ef377efeae470eb8f32a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] =\n    [=(some s, some s)|do\n      let shared_seed \u2190 liftM (generateSeed spec (update qb i \u2191s) js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n      let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "94be2c225ace2d9b43bfeb6e4dceddb0fd9aba7e5b1d58be0de94931eb68ae6f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed \u2208 (liftM (generateSeed spec qb js)).support\n\u22a2 \u2191(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "3a59cb98531b323e1e4596a2838873769407b5347d2ef3be15e2f407d2c966b2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 \u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h \u2264\n    \u2211 s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "45fa0326a4019e1b5cac38e20c80a7afc6a3d6f210dfac080c7bb7d7e3edbec4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h) =\n    1 - \u2211 s, [=some s|cf <$> main] ^ 2 + \u2211 s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "65e8a23402ce802b44d1a3d568a0a1f487c699e96f95f5bd6a0a2170dbf95e56"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : ENNReal := \u2211 s, [=some s|cf <$> main]\nh : ENNReal := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 acc * h\u207b\u00b9 + (1 - acc ^ 2 * (\u2191q)\u207b\u00b9) = 1 - (acc ^ 2 * (\u2191q)\u207b\u00b9 - acc * h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "f50a4601c0177ff85e47ff3ca7a718a9082e1cfc678c9ab7b700b140b6d23577"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : @SymmEncAlg m M K C\ninst\u271d : @SymmEncAlg.Complete m M K C inst\u271d\u2075 encAlg\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 @SymmEncAlg.perfectSecrecy m M K C inst\u271d\u2075 encAlg \u2194\n    (\u2200 (k : K),\n        [=k|ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg) (@SymmEncAlg.keygen m M K C encAlg)] =\n          (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C),\n        \u2203! k,\n          k \u2208\n              support\n                (ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg)\n                  (@SymmEncAlg.keygen m M K C encAlg)) \u2227\n            @SymmEncAlg.encrypt m M K C encAlg k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "763e459b2d6bcb4685a9d0089c2dd88682e9c85e991b7f6e92ecfda3a3e64cff"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p inst\u271d\u2075 inst\u271d\u2074\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (let so := idOracle ++\u209b\u2092 randomOracle;\n    (simulateQ so (monadLift c)).run' \u2205) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "ed0e8981b27e351fc5d56461470f96c72b7b5fc3590acc753f261d9635241927"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean",
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\ninst\u271d : NeZero p\nerrSamp : ProbComp (Fin p)\nadv : LWE_Adversary n m p\n\u22a2 |[=true|do\n              let y \u2190 LWE_Distr n m p inst\u271d errSamp\n              @adv y].toReal +\n          [=true|do\n              let y \u2190 LWE_Uniform_Distr n m p inst\u271d\n              (fun a => !a) <$> @adv y].toReal -\n        ([=true|do\n              let a \u2190 LWE_Distr n m p inst\u271d errSamp\n              not <$> @adv a].toReal +\n          [=true|do\n              let a \u2190 LWE_Uniform_Distr n m p inst\u271d\n              @adv a].toReal)| =\n    |[=true|do\n            let y \u2190 LWE_Distr n m p inst\u271d errSamp\n            @adv y].toReal -\n        [=true|do\n            let a \u2190 LWE_Uniform_Distr n m p inst\u271d\n            @adv a].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "d8d38da2870de956ed9dc99abaf7c341bd3e5f2aa9613b4910689b71dfdc60db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/ProgramLogic/Unary/DijkstraMonad.lean",
        "start_line": 138,
        "start_column": 45,
        "end_line": 138,
        "end_column": 50
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\nn : Type u \u2192 Type w\nw : Type u_1 \u2192 Type u_2\nd : {\u03b1 : Type u_1} \u2192 w \u03b1 \u2192 Type u_3\ninst\u271d\u00b2 : Monad w\ninst\u271d\u00b9 : @DijkstraMonad w d inst\u271d\u00b2\nh : LawfulMonad w\ninst\u271d : @LawfulDijkstraMonad w (fun {\u03b1} => d) inst\u271d\u00b2 h inst\u271d\u00b9\n\u03b1 : Type u_1\nx : w \u03b1\ny : d x\n\u22a2 HEq\n    (@DijkstraMonad.dBind w d inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 \u03b1 x (fun a => pure a) y fun a =>\n      @DijkstraMonad.dPure w d inst\u271d\u00b2 inst\u271d\u00b9 \u03b1 a)\n    y",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/ProgramLogic/Unary/DijkstraMonad.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T11:21:13+07:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "d2d39bfb091cf58a71b63fcf9a0925a5b19e653aac2ae1197e3227762d5ad7a9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "d68d8d280f85bf97a462177dcad43332652e00ca6fafb6054b6ada320f3a96cd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "f06a64efb9892fa6bada0e2699b6afb16d5912d69da60f62a05b88fff218566a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      let x \u2190 (simulateQ (@seededOracle \u03b9 spec inst\u271d\u00b3) oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "22fff09a1190338e2dae2003b22df41fd74c6b0a2bebe94bcb61fdc0eb3a7bc5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ (@seededOracle \u03b9 spec inst\u271d\u00b3) oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "2a6b3f401db73c723ef479e4cdb4263623ad503c94a72fa8f236e022f7ba6247"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (QueryImpl.impl (@countingOracle \u03b9 inst\u271d spec) q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "7ae952bad9b7344bdf82cefd07807aca0f28b7f4c33f7998bb448b422d0aa77c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (QueryImpl.impl (@loggingOracle \u03b9 spec) q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "2b6584d1a6a66a5cf34c0fcb7c42559da3c91b626f06392911714b7d9b30ae2c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\n\u22a2 neverFails (OracleComp.uniformOfFintype \u03b1 h\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "2d317a07e7c4930506c6e91e37fa98aa9ab7d0d985252405847ac8dde1d0a8d9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nx y : Matrix (Fin 0) (Fin m) \u03b1\n\u22a2 (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "bfc73f4932f257d645483de2caca05c4ac270165eea780128bea128f4370684e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nm : \u2115\nih :\n  \u2200 (x y : Matrix (Fin m) (Fin m\u271d) \u03b1),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m\u271d) \u03b1\n\u22a2 [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "a7a30d022eb29fc005b86fc61f628a4a076639f7f4ca3bfba99fbdd99f706d88"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : OracleComp.SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : OracleComp.SelectableType \u03b1\nm : \u2115\nih :\n  [\u22a5|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n\u22a2 Vector \u03b1 m\u271d \u2192\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 OracleComp.uniformOfFintype (Vector \u03b1 m\u271d) (OracleComp.instSelectableTypeVector \u03b1 m\u271d inst\u271d)\n          Fin.cons top.get <$> ihn)\n        m)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "4c5eb276deeccf96f08690313aaba6b739b382eca66b89437bd42bbec0c15413"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "c3c3ef874d0596d676491cbf9a8613fe9de3a64b35454e3572b628e2f9ec8d5a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b9 spec inst\u271d qc js) =\n    {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "29b6d116d3f38593403dd178058721f8dfa182a70fe5e4f8b36fd86659864bec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d : DecidableEq spec.QuerySeed\n\u22a2 finSupport (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc js) \u2260 \u2205",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "f2ccb0c76488a21beaa6153da4429b0bfd730c8123c84ee37c60fa1c44692d91"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc j),\n    [=seed|OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc j] =\n      1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b2 spec inst\u271d\u00b9 qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        List.foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "0bd407ee131e64af1084c220d80c7d95e522171913bffca5a6e7620254c1c5c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed \u2208 support (OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js)\n\u22a2 [=seed|OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js] =\n    (\u2191(finSupport (OracleComp.generateSeed \u03b9 inst\u271d\u00b3 spec inst\u271d\u00b2 qc js)).card)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "cd37efff9defd757c2fe47d218502607611c8c840a5c93e08ebf1451a76f2676"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "23f5fc3f3af040ba7a8c4e0b6c83534b69e750dc7ddcbb38b8d221fda074f00a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "9816cb49d62bb4921fafe15045b0a914d92bbaf0a5c9a573a4e018477586e707"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "4ca06542f089420eb25c487a679482f5a039c572f41be5169b6c9bb00c5cf9a0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 (x : \u03b1), [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "8ac95d08ca8d751bba6d98aa6af8e4ec4928854e631fbe99bfa49cb0915e9a2e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\ny : \u03b2\nz : \u03b3\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z|oc x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "e3a34123bc4330225a529544e6f88fbb73c3ef239299ec728e57729f79e2417f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nr : ENNReal\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x] / r\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "30d725e11839bfb2e05e4eaae20606c795e7c755723de083ec9d6d726a5236b2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "fc63fa75d283a0fc305295d2b14d11bd9dfb82c0bfc7edec1a446ce825f2056a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "db979b6b2d1e7205bf0a77dcc91a959d8ca30e8225f2458ddab449ceaa5ea8ba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "4850f5cb295758a22196fe41a695a59cfda18e53eb28c70a4f01eb3f563e8d3a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "90553f837beb09655d15082b1043ba1a3c853e08154291ca82d297c891946578"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : ENNReal\nh' : @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "80c0344530415915239e99ac586bd2de189a2ab073cda05711b4f96b1d364f1c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : ENNReal\nh' : @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "93b8e7076e6dfbc444d8702b13dd551dc4811c0765a14bbb8d515780b5db9684"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : ENNReal\nhr : \u2200 x \u2208 oa.support, @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x) \u2264 r\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "cee1bf09a62eb79cff697eae283e5bc3766d1c3f06840651a1db41c0e7ab8810"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (oa >>= ob) =\n    \u2211' (x : \u03b1), @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d oa x * @OracleComp.probFailure \u03b9 spec \u03b2 inst\u271d (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "d46e988cb0db62cc9dcc813f1c062e49474bec74fa00e554f21e18b2dce05006"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "25141a27184147b46481937908ad43d6563d47e7c2a0c0447da5bce803c83426"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < @OracleComp.probFailure \u03b9 spec \u03b1 inst\u271d oa \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "1c02a6f276de4cde044bbb72675e6a77b043ef2704c32f2a8daed443f491d232"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 972,
        "start_column": 2,
        "end_line": 972,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\n\u03b1 : Type\noa : OracleComp spec \u03b1\nh : oa.neverFails\np : \u03b1 \u2192 Prop\ninst\u271d : DecidablePred p\n\u22a2 (\u2211' (x : \u03b1), if p x then @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d\u00b9 oa x else 0) =\n    1 - \u2211' (x : \u03b1), if p x then 0 else @OracleComp.probOutput \u03b9 spec \u03b1 inst\u271d\u00b9 oa x",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/EvalDist.lean#L972"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "a9c83756387d8dcdf89127c32e03e53f2c95d3d95a91df114e23d87419f4f2fd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "7026e5c7ce45adc753c3192bcb19650d40be0ce93604f929b54ff0af4fe2cf1a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "69aab344ab25f225fd4ea9c0f694841c54d18dbe83268c0422b8121aeba8c9b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "6e20018f2c91a45c6b07de41082bc9be5948354383b4dd87f2caa44602738170"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 180,
        "start_column": 8,
        "end_line": 180,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/List.lean#L180"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "93c98f13402eeca742082259b20d6314c2b80977a6d7314975d8c724298fe613"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 315,
        "start_column": 4,
        "end_line": 315,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/List.lean#L315"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "6ad25c2134848e878ecb530de78e0b604db3fadc66a035600de1510cf96bb6dd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 327,
        "start_column": 4,
        "end_line": 327,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case v_insert\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nn : \u2115\nf : \u03b1 \u2192 OracleComp spec \u03b2\nn\u271d : \u2115\nhd : \u03b1\ntl : Vector \u03b1 n\u271d\nih : \u2200 {x : Vector \u03b2 n\u271d}, x \u2208 (Vector.mapM f tl).support \u2194 \u2200 (i : Fin n\u271d), x[i] \u2208 (f tl[i]).support\nx : Vector \u03b2 (n\u271d + 1)\n\u22a2 x \u2208 (Vector.mapM f { toArray := #[hd] ++ tl.toArray, size_toArray := \u22ef }).support \u2194\n    \u2200 (i : Fin (n\u271d + 1)), x[\u2191i] \u2208 (f (#[hd] ++ tl.toArray)[\u2191i]).support",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/DistSemantics/List.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "d15f7a25dd1b3bfc9d7671a63aa5465a8f86af74cf47114e68765e3b012c2177"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "7f297e4d7f08c04fc0bfc0e9606968f8df572870a136d3bdfbce5c51bbf1cbf5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "98f130de4e5b9d08d87c737a19e11b29e920db5b5b26a791973b5f6290e3ef0b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u\np : PMF \u03b1\nx : \u03b1\n\u22a2 (PMF.map some p) (some x) = p x",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-24T05:43:31-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "127e81914a740f15ef6f77f9d7945bcaf6f70ab2e20000a814c5cacafcd24443"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 69,
        "start_column": 2,
        "end_line": 69,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u\np : PMF \u03b1\nx : \u03b1\n\u22a2 (some <$> p) (some x) = p x",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-24T05:43:31-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "f158a31c7401a06f0e6790b66aae80f3c1cfbd41b0a94d309bf10184c58a3468"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh1 : @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst c = some <$> PMF.pure a\nh2 : @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b2 Prod.snd c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (@Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst c) x = (some <$> PMF.pure a) x\n\u22a2 c = @pure SPMF Applicative.toPure (\u03b1 \u00d7 \u03b2) (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "9236b5957d9a3e2073e90c69b6e3f17bcb5126dd8371ec0ff5462ec5f027e6d9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : @SPMF.IsCoupling \u03b1 \u03b2 c OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "cfb5f32701e58bb899c0f6aa8948264d216645b4440403157e9eec40736b29f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b1 Prod.fst OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "4e10f53a21444f0eb1fffdd26293c0ede8fdefc52e5593b452301bcff63ecb6d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : @SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b1 \u00d7 \u03b2) \u03b2 Prod.snd OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "06ecbf3f529f6fbcc1727d2181b4dae864f2ecfe1e46889c47e894485b1ce615"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : @SPMF \u03b1\u2081\nq : @SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 @SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 @SPMF \u03b2\u2082\nc : @SPMF.Coupling \u03b1\u2081 \u03b1\u2082 p q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 @SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : (a\u2081 : \u03b1\u2081) \u2192 (a\u2082 : \u03b1\u2082) \u2192 \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\nhc\u2081 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2081 Prod.fst \u2191c = p\nhc\u2082 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2082 Prod.snd \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\n\u22a2 @Functor.map SPMF Applicative.toFunctor (\u03b2\u2081 \u00d7 \u03b2\u2082) \u03b2\u2081 Prod.fst (@d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2) = @f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "40e5a3494ae6369829b33ef6dadfccfef18adb30d57ab70fa80e0bad3287971b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : @SPMF \u03b1\u2081\nq : @SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 @SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 @SPMF \u03b2\u2082\nc : @SPMF.Coupling \u03b1\u2081 \u03b1\u2082 p q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 @SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : (a\u2081 : \u03b1\u2081) \u2192 (a\u2082 : \u03b1\u2082) \u2192 \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 @SPMF.IsCoupling \u03b2\u2081 \u03b2\u2082 (@d a\u2081 a\u2082) (@f a\u2081) (@g a\u2082)\nhc\u2081 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2081 Prod.fst \u2191c = p\nhc\u2082 : @Functor.map SPMF Applicative.toFunctor (\u03b1\u2081 \u00d7 \u03b1\u2082) \u03b1\u2082 Prod.snd \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      @Functor.map SPMF Applicative.toFunctor (\u03b2\u2081 \u00d7 \u03b2\u2082) \u03b2\u2082 Prod.snd (@d a.1 a.2)) =\n    do\n    let a \u2190 \u2191c\n    @g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "e3238ce9651a05530e72d5329846883874e39604171ae4ff12b664dc30cd9f3c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "vscode",
        "commit": "3e8c5e7585148d28f73e2212bc1f03b99e9738d1",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/3e8c5e7585148d28f73e2212bc1f03b99e9738d1/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:14:45.412853+00:00"
      },
      "id": "32556c54d494d269be4f5c5f97b06d49ebc81eac7f3d00611ecf0efb07f5a110"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 794,
        "start_column": 2,
        "end_line": 794,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nX Y : Set \u03b1\nQ : Matrix \u2191X \u2191Y \u211a\nx\u2082 y\u2080 y\u2081 : \u03b1\nhQ : Q.IsTotallyUnimodular\nhx\u2082 : x\u2082 \u2208 X\nhy\u2080 : y\u2080 \u2208 Y\nhy\u2081 : y\u2081 \u2208 Y\nhyy : y\u2080 \u2260 y\u2081\nhQy\u2080 : Q \u27e8x\u2082, hx\u2082\u27e9 \u27e8y\u2080, hy\u2080\u27e9 = 1\nhQy\u2081 : Q \u27e8x\u2082, hx\u2082\u27e9 \u27e8y\u2081, hy\u2081\u27e9 = 1\nhQy : \u2200 (y : \u2191Y), \u2191y \u2260 y\u2080 \u2227 \u2191y \u2260 y\u2081 \u2192 Q \u27e8x\u2082, hx\u2082\u27e9 y = 0\n\u22a2 let c\u2080 := Q._col \u27e8y\u2080, hy\u2080\u27e9;\n  let c\u2081 := Q._col \u27e8y\u2081, hy\u2081\u27e9;\n  let Q' := Q.drop1row2cols x\u2082 y\u2080 y\u2081;\n  (Q' \u25eb \u25aec\u2080 \u25eb \u25aec\u2081 \u25eb \u25ae(c\u2080 - c\u2081)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L794"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "c833c00894ea246d3aa7016afc87c00ea738c29cda662f021fc46681769f46f2"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 896,
        "start_column": 2,
        "end_line": 896,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n  | (r\u2080, r\u2081, snd) =>\n    (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY =\n      (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n        (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L896"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "511d2ccc1ef5704e69ed15ff82098947f851c8e36ab9ccc25c8d4de4dcbee03e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 934,
        "start_column": 2,
        "end_line": 934,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n  | (r\u2080, r\u2081, r\u2082) => \u2200 (i : \u2191(X\u1d63 \\ {x\u2082})), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L934"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "8b1edfd9257dbae318f31e8ecdf61f3d5504d09d9f3a020f8714a493fa9681a7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 973,
        "start_column": 2,
        "end_line": 973,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n  let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  \u2200 (j : \u2191(Y\u2097 \\ {y\u2082})),\n    (fun x => D x j) = c\u2080 \u2228\n      (fun x => D x j) = -c\u2080 \u2228\n        (fun x => D x j) = c\u2081 \u2228\n          (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L973"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "9b7db6ed1cc4680de38ea8a85abb6a768fdd27ab2b32c3bb539d116e88d7a315"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080\u1d63 := B\u1d63.submatrix2x2 x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n      let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u1d63.drop1row2cols x\u2082 y\u2080 y\u2081 \u25eb (\u229e D\u2097 D\u2080\u1d63(D\u1d63 * D\u2080\u1d63\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "f8b063eeb98107caa45a1b9de0f4ddb9895beac709d01be58e3bde0111d3f93c"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1019,
        "start_column": 2,
        "end_line": 1019,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097'\u271d : B\u2097'.IsTotallyUnimodular\nhB\u1d63'\u271d : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhB\u2097' :\n  (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u2097'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\nhB\u1d63' :\n  (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2080 \u2228\n    (B\u1d63'.submatrix3x3mems \u22ef \u22ef \u22ef \u22ef \u22ef \u22ef).abs = matrix3x3unsigned\u2081\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080\u2097 := B\u2097.submatrix2x2 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n      let D\u2097 := B\u2097.submatrix2x7 x\u2080\u2097 x\u2081\u2097 y\u2080 y\u2081 y\u2082;\n      let D\u1d63 := B\u1d63.submatrix7x2 x\u2080 x\u2081 x\u2082 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097.drop2rows1col x\u2080 x\u2081 y\u2082 \u229f (\u229e D\u2097 D\u2080\u2097(D\u1d63 * D\u2080\u2097\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1019"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "cf5fbb6cc193d50f37fc3a5bc56c5e28de3fbf58cfd479a5940587f14ef250aa"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1101,
        "start_column": 4,
        "end_line": 1101,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.left\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\n\u22a2 (matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1101"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "ca7e0efa923f051cd9cdee3b5c6bc9ab24bd1d131d8cbd85443f873b10949137"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1144,
        "start_column": 10,
        "end_line": 1144,
        "end_column": 15
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u2097 : \u2191(X\u2097 \\ (x\u2080 \u1543 {x\u2081}))\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\nhx\u2082 : \u2191i\u2097 = x\u2082\nhy\u2082 : \u00ac\u2191j\u1d63 = y\u2082\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25e9i\u2097 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25e9i\u2097 \u25eaj\u1d63))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1144"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "08bcd4ff94909e5b2acdfa86dc69816ccf3c1f3536bddc3998ccb76fd4b8862e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1146,
        "start_column": 8,
        "end_line": 1146,
        "end_column": 13
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u2097 : \u2191(X\u2097 \\ (x\u2080 \u1543 {x\u2081}))\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\nhx\u2082 : \u00ac\u2191i\u2097 = x\u2082\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25e9i\u2097 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25e9i\u2097 \u25eaj\u1d63))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1146"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "cf0c4cb5fcfe0c6b4b354738e6a11c86da06509f0ea04247bc71d3ed820383a2"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1147,
        "start_column": 6,
        "end_line": 1147,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.right.inr.inl\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u1d63 : \u2191(X\u1d63 \\ {x\u2082})\nj\u2097 : \u2191(Y\u2097 \\ {y\u2082})\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25eai\u1d63 \u25e9j\u2097| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25eai\u1d63 \u25e9j\u2097))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1147"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "b2ccfca0a6268e1db0180f2955d0a7fb3ac63dbf8dfbdfa97f04122b610db907"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1148,
        "start_column": 6,
        "end_line": 1148,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.right.inr.inr\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nhSS : (matrix3sumComposition B\u2097 B\u1d63 hXX hYY).2\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\nhxx\u2082 : x\u2081 \u2260 x\u2080\nhxx\u2081 : x\u2082 \u2260 x\u2080\nhxx\u2080 : x\u2082 \u2260 x\u2081\nhyy\u2082 : y\u2081 \u2260 y\u2080\nhyy\u2081 : y\u2082 \u2260 y\u2080\nhyy\u2080 : y\u2082 \u2260 y\u2081\ni\u1d63 : \u2191(X\u1d63 \\ {x\u2082})\nj\u1d63 : \u2191(Y\u1d63 \\ (y\u2080 \u1543 {y\u2081}))\n\u22a2 |matrix3sumCompositionCanonicalSigning A\u2097 A\u1d63 hXX hYY \u25eai\u1d63 \u25eaj\u1d63| =\n    \u2191(ZMod.val ((matrix3sumComposition B\u2097 B\u1d63 hXX hYY).1 \u25eai\u1d63 \u25eaj\u1d63))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1148"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:54:27+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "ccfcd1ea3895e781fa5b563b54e46140cf4063ea289b028a08be04543373fcc9"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3RefactorTest.lean",
        "start_line": 359,
        "start_column": 2,
        "end_line": 359,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let _x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let _y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let A\u2097 := Matrix.A\u2097_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let A\u2097' := Matrix.A\u2097'_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := Matrix.D\u2097_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u2080 := Matrix.D\u2080_alt2 S\u2097.B x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u1d63 := Matrix.D\u1d63_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let A\u1d63' := Matrix.A\u1d63'_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let A\u1d63 := Matrix.A\u1d63_alt2 S\u1d63.B x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let S := matrix3sumComposition_alt2 A\u2097 A\u2097' D\u2097 D\u2080 D\u1d63 A\u1d63' A\u1d63;\n  matrix3sumComposition_alt2_mapped' S = matrix3sumComposition_curr S\u2097.B S\u1d63.B hXX hYY",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3RefactorTest.lean#L359"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-23T19:21:41+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "fecfcd460fee795d31706f5cd1dec7b77e0bd6a3246c9a96ed56dc99f13c407b"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3RefactorTest.lean",
        "start_line": 391,
        "start_column": 2,
        "end_line": 391,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nS\u2097 S\u1d63 : StandardRepr \u03b1 Z2\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\nhXX : S\u2097.X \u2229 S\u1d63.X = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : S\u2097.Y \u2229 S\u1d63.Y = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : S\u2097.X \u2ad7 S\u1d63.Y\nhYX : S\u2097.Y \u2ad7 S\u1d63.X\n\u22a2 standardRepr3sumComposition_alt2 hXX hYY hXY hYX = standardRepr3sumComposition_curr hXX hYY hXY hYX",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3RefactorTest.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-23T19:21:41+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "2c9443fcb82e64add418da5fdec62c3bbde4e4b86ba0a50cf643afab5f58f5b3"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 163,
        "start_column": 6,
        "end_line": 163,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh : z1 = y\n\u22a2 OrIsSmart (z1.or z2)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L163"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "0795b5a855a8a96f21ff3d57526a36dafa6372c1ec93b975cfd2550366f28e73"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 166,
        "start_column": 6,
        "end_line": 166,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh\u271d : \u00acz1 = y\nh : z1 < y\n\u22a2 OrIsSmart (z1.or (insertOr y z2))",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "0e418e6715bdb1ade9ed6b376531fc245b37660de998a287a08d9883f9fe3919"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 168,
        "start_column": 6,
        "end_line": 168,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y z1 z2 : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y \u2260 Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh\u271d : \u00acz1 = y\nh : \u00acz1 < y\n\u22a2 OrIsSmart (x.or (consOr y (z1.or z2)))",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L168"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "e384f72ddd3bb1e2ebc724ca8fa1a3a2835cb01b2bd239f51c3f55d3f24771c4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a b : Formula\u2984, a \u2248 b \u2192 (~a) \u2248 (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "906b4d67c485339b729ca3787d0ebec790521cfd33105e3353410e7403a25051"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a\u2081 a\u2082 : Formula\u2984, a\u2081 \u2248 a\u2082 \u2192 \u2200 \u2983b\u2081 b\u2082 : Formula\u2984, b\u2081 \u2248 b\u2082 \u2192 a\u2081\u22c0b\u2081 \u2248 a\u2082\u22c0b\u2082",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "ac7bfc7940612647c22f6da1175b9ba472b4cf845e77ffc99098abcba16b3143"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 798,
        "start_column": 10,
        "end_line": 798,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 sorry \u2208 endNodesOf (next (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u22ef)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L798"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "e03fb2f9bd0b66cea553a1b1f59f61e989458c1d41755083f9b15e2c6c339859"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 799,
        "start_column": 10,
        "end_line": 799,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 (M, v)\u22a8sorry \u2227\n    (sorry.isFree = true \u2228\n      \u2203 F \u03b3,\n        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side sorry \u2227\n          relateSeq M \u03b3 v w \u2227\n            (\u2200 f \u2208 F, evaluate M v f) \u2227\n              (F, \u03b3) \u2208 H \u03b1 \u2227 (sorry.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L799"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "f038a27ec8c9c2a7d847fce62087dafd4ced7374f75d5c2d75cce2505335aece"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 802,
        "start_column": 8,
        "end_line": 802,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203 Y,\n    (\u2203 l, (\u2203 a, \u2203 (h : a \u2208 B), endNodesOf (next a \u22ef) = l) \u2227 Y \u2208 l) \u2227\n      (M, v)\u22a8Y \u2227\n        (Y.isFree = true \u2228\n          \u2203 F \u03b3,\n            (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n              relateSeq M \u03b3 v w \u2227\n                (\u2200 f \u2208 F, evaluate M v f) \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L802"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "f9ea62d5eca41a7d045a8e1b41674837ac69c05db4a748d8af5ef4981607aaa2"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 806,
        "start_column": 6,
        "end_line": 806,
        "end_column": 11
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227 (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L806"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "da1647c1527ededb7a6874f589e906057f2e9ce2efd493370191a17c4d376dc8"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 844,
        "start_column": 2,
        "end_line": 844,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      satisfiable (nodeAt s) \u2227\n        (\u00accEquiv X tab s t \u2228\n          (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L844"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "18dfb1953a0d28f5ea92372abefe2584b42b9e49ddbd8918137bd8537deb4a7f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1021,
        "start_column": 16,
        "end_line": 1021,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : \u2115\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u00b7a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : M.Rel a\u271d v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u00b7a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : \u03b4[\u2191k] = \u00b7a\u271d\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1021"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "a8d9aaca55b8fa15a40801a99fdb558f4114123502b455396067280acb923214"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1025,
        "start_column": 16,
        "end_line": 1025,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : Relation.ReflTransGen (relate M a\u271d) v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram \u03b4[\u2191k] \u2264 1 + lengthOfProgram a\u271d\n\u22a2 lengthOfProgram \u03b4[\u2191k] < 1 + lengthOfProgram a\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1025"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "fd08048676cc54ddaa64757d999b54fe3bc589fcf320148ac31b41f3a5fa234e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1362,
        "start_column": 6,
        "end_line": 1362,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\nIH :\n  t = s \u2192\n    \u2203 s_1,\n      Relation.TransGen (cEdge X tab) s s_1 \u2227\n        (satisfiable (nodeAt s_1) \u2227 \u00accEquiv X tab s_1 s \u2228\n          (~''\u03be).in_side side (nodeAt s_1) \u2227 (M, w)\u22a8nodeAt s_1 \u2227 ((nodeAt s_1).without (~''\u03be)).isFree = true)\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.lrep lpr\u27e9\u27e9\n\u22a2 (tabAt t).snd.snd = Tableau.lrep (\u22ef \u25b8 lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1362"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "96f22d4d42ae5622d1adb4559d423d44894e1a2307c895995a5ff91ce4254210"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (p next : Sequent \u2295 Sequent \u00d7 Formula \u00d7 Rule), next \u2208 sorry p \u2192 sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "77945df5996c6717bbde6b4b88805d73f84fe1f1543e86658e100e2924d2cf6e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.A\nh : winning (Sum.inl X) s\n\u22a2 Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "ac23061ebae9af762c1c4a1e54b40e810715926b345f3a91e37c2c5c75fec0bb"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.B\nh : winning (Sum.inl X) s\n\u22a2 \u2203 WS mg, X.toFinset \u2208 WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "4fde081a91386e56b956aee8b2b947acde8834030da558385fd41f3a7ffe2062"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\n\u03c4 : Formula\n\u03c4_in : \u03c4 \u2208 testsOfProgram \u03b1\n\u03c8_in : (~\u03c4) \u2208 L\nx_in_voc_\u03c8 : x \u2208 \u03c4.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "507a129f43dec0c0868aba4043fe7df015af177e7604987e500429ac82ca69f2"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\na : \u2115\n\u03b4 : List Program\n\u03c8_in : (\u2308\u00b7a\u2309\u2308\u2308\u03b4\u2309\u2309\u03c6) \u2208 L\nright\u271d : \u00b7a \u2208 subprograms \u03b1 \u2227 \u2200 a \u2208 \u03b4, a \u2208 subprograms \u03b1\nx_in_voc_\u03c8 : x = Sum.inr a \u2228 x \u2208 \u03b4.pvoc \u222a \u03c6.voc\n\u22a2 x \u2208 \u03b1.voc \u2228 x \u2208 \u03c6.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "5b229a2ef4330522aa4129ee5d2acd6e7a9c36ea5126dcb1cb9c28172ad4a1d1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nFs : List Formula\n\u03b4 : List Program\nin_H : (Fs, \u03b4) \u2208 H \u03b1\nthis : \u2200 (\u03b1 : Program) {Fs : List Formula} {\u03b4 : List Program}, (Fs, \u03b4) \u2208 H \u03b1 \u2192 \u03b4 = [] \u2228 \u2203 a \u03b4', \u03b4 = \u00b7a :: \u03b4'\n\u03b1' : Program\n\u03b1'_in : \u03b1' \u2208 \u03b4\nx_in : x \u2208 \u03b1'.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "2e3ec0986e7a1665f58eebc5ff0d6771ac61b0036c42713fd33ebab3413ec427"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : \u2115 \u2295 \u2115\nress : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7 : LoadFormula\nlrule : LoadRule (~'\u03c7) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) \u2208 ress\n\u03c6 : Formula\n\u03c6_in_L : \u03c6 \u2208 L\nbla : x \u2208 \u03c6.voc\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "55b02f66a4c9298f34c1d6e823013d6ca82b71133355fe9d1dd458cbcc24962f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.1.fvoc \u2286 Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "61effb946681f5128ea06c945252dc14a922d18affe575e952b8760d80632e3c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.2.voc \u2286 Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "93cd7a35e5be480cc1697f77b6f6f6f8d5df8872830bbd8c9bf87d23cdbffdb4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L \u2227 Rcond.Subperm R \u2227 Ocond \u2286 O\ncL cR : List Formula\ncO : Olf\nx : \u2115 \u2295 \u2115\nx_in_voc_C :\n  (x \u2208 Vocab.fromList (List.map Formula.voc cL) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc (Olf.toForms cO))) \u2227\n    (x \u2208 Vocab.fromList (List.map Formula.voc cR) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc (Olf.toForms cO)))\nthis : \u2200 res \u2208 ress, res.1.fvoc \u2286 Lcond.fvoc\nC_in : (cL, cR, cO) \u2208 applyLocalRule lrule (L, R, O)\n\u22a2 x \u2208 jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "05412dc347c3d0644e297453565256d4fc66d1462cb4302e5ad4c729e4c8947f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nL_and_n\u03b8_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "4b590527932270d4edbdcf8c90b400c277e2aaabd24665c2a769826a6bdb39cd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nR_and_\u03b8_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "1ed50d428b10a76ffda05f0fa502b536a122e8e92b8f22a2f222381246c76ffb"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nL_and_n\u03b8_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "454fb03514c4a75808bace5a6e47ed47727ece85c948bd2ab9879f8f44986d27"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => \u2191(@sub\u03b8s c cinC)) C.attach\nR_and_\u03b8_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "7bc64b7a500e6bc9e7525930d3aff29f6bc89ebcfa331f55293aaefe6f1fe23b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308\u2217a\u2309~\u2308a\u2309p)\u22c0(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "1e1ec8f2d2398fdbe8b742b929c4e81bb12705a1ee1327bf001b1e7aaf978849"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308a\u2309\u2308\u2217a\u2309p)\u22c0(~\u2308a\u2309\u2308\u2217a\u2309q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "7f795c4c76e8baed30609dcd550aa9271f8c5c7b7a167ac8762f98e9efeee673"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 55,
        "start_column": 42,
        "end_line": 55,
        "end_column": 47
      },
      "debug_info": {
        "goal": "\u22a2 4 \u2208 []",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "55e039dceaf38cd7bd6d9d36dbb45dfb9ec08e2b6ee0f20208e5f7acb9bb01ea"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 56,
        "start_column": 42,
        "end_line": 56,
        "end_column": 47
      },
      "debug_info": {
        "goal": "\u22a2 4 \u2208 [3]",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "22094f424094537b74e865919e69a1324813dd22595a417236d62b2a0e94fbdd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 68,
        "start_column": 2,
        "end_line": 68,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a\u271d : List \u2115\nt : NiceTree a\u271d\nk : \u2115\nk_in_N : k \u2208 a\u271d\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "301dcad279a7caffacbbcfa4bc12d469823e41a6b7329dfd7e8d9316d37c3116"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 227,
        "start_column": 4,
        "end_line": 227,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : \u2115\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\nthis : k < List.length Hp\n\u22a2 k \u2264 PathIn.length [] n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L227"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "58eb0d7be213787df5dc2590bc5d84325387fba5dbfe76f91fe141653f58fd64"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 222,
        "start_column": 28,
        "end_line": 222,
        "end_column": 33
      },
      "debug_info": {
        "goal": "n : \u2115\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\n\u22a2 k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L222"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "6ec10652a90bfed995aaa11384d41711bb7f9ae504318d9bac03642692eeb6b1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 248,
        "start_column": 4,
        "end_line": 248,
        "end_column": 9
      },
      "debug_info": {
        "goal": "H : History\nn : \u2115\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\nthis : k < List.length Hp\n\u22a2 k \u2264 PathIn.length H n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-09T19:21:30+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "788999299f6995b49f39f2ca0c22e695d18480dd37abaea875c8378e2d9ed18f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 243,
        "start_column": 28,
        "end_line": 243,
        "end_column": 33
      },
      "debug_info": {
        "goal": "H : History\nn : \u2115\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : \u2115\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\n\u22a2 k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "4af6af216b14a173816e4890c95f97a1e38dc6465cb3da6f588574fc9aa40adf"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 289,
        "start_column": 2,
        "end_line": 289,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : \u2115\na\u271d\u00b9 : List \u2115\nm_in_ms : m \u2208 a\u271d\u00b9\na\u271d : \u2115\nst : Step a\u271d a\u271d\u00b9\ntail\u271d : List \u2115\nnext : {m : \u2115} \u2192 m \u2208 a\u271d\u00b9 \u2192 HisTree (a\u271d :: tail\u271d) m\nrest rest' : PathIn (a\u271d :: tail\u271d) m (@next m m_in_ms)\nhyp :\n  Sigma.fst (treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest) =\n    Sigma.fst (treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest')\n\u22a2 (treeAtP._proof_27 tail\u271d a\u271d a\u271d\u00b9 m m_in_ms next rest \u25b8 treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest).fst =\n    (treeAtP._proof_27 tail\u271d a\u271d a\u271d\u00b9 m m_in_ms (fun {m} => @next m) rest' \u25b8\n        treeAtP (a\u271d :: tail\u271d) m (@next m m_in_ms) rest').fst",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L289"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "32960cc172cfb0b12f133b5f0112012e2058bed1612eaa38393e64bc15a4c290"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 311,
        "start_column": 4,
        "end_line": 311,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : \u2115\nms : List \u2115\nm : \u2115\nm_in_ms : m \u2208 ms\nst : Step n ms\nnext : {m : \u2115} \u2192 m \u2208 ms \u2192 HisTree [n] m\nrest : PathIn [n] m (@next m m_in_ms)\np_is_rep : isRep (treeAt [] n (HisTree.step n [] ms st next) (PathIn.cons [] ms n m m_in_ms st next rest))\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L311"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "2c79e2aea606952067ebc92617f3b9ab9c94fea2b8bafdabad312f6d8f2d07da"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 350,
        "start_column": 8,
        "end_line": 350,
        "end_column": 13
      },
      "debug_info": {
        "goal": "n st : \u2115\nH : List \u2115\nk\u271d : \u2115\n_in_empty : some k\u271d = List.idxOf? n (st :: H)\np_is_rep : True\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L350"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "4fbf684acc460ee4389d59d8c97cd645a899dd0e6760b53f2e53080e7ab4d020"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 370,
        "start_column": 4,
        "end_line": 370,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl\nn\u271d : \u2115\nms\u271d : List \u2115\nm\u271d : \u2115\nm_in\u271d : m\u271d \u2208 ms\u271d\ns\u271d : Step n\u271d ms\u271d\nnext\u271d : {m : \u2115} \u2192 m \u2208 ms\u271d \u2192 HisTree [n\u271d] m\nrest\u271d : PathIn [n\u271d] m\u271d (@next\u271d m\u271d m_in\u271d)\np_is_rep\u271d\u00b2 : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) (PathIn.cons [] ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\nn : (n : \u2115) \u00d7' (ht : HisTree [] n) \u00d7' (p : PathIn [] n ht) \u00d7' isRep (treeAt [] n ht p)\na\u271d\u00b3 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht\u271d : (ht : HisTree [] n\u271d) \u00d7' (p : PathIn [] n\u271d ht) \u00d7' isRep (treeAt [] n\u271d ht p)\na\u271d\u00b2 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree [] n\u271d\np\u271d\u00b9 : (p : PathIn [] n\u271d ht) \u00d7' isRep (treeAt [] n\u271d ht p)\na\u271d\u00b9 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np\u271d : PathIn [] n\u271d ht\np_is_rep\u271d\u00b9 : isRep (treeAt [] n\u271d ht p\u271d)\na\u271d : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\n\u03b2\u271d : Type\np : PathIn [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d)\np_is_rep\u271d : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) p)\n\u03b2 : Type\np_is_rep : isRep (treeAt [] n\u271d (HisTree.step n\u271d [] ms\u271d s\u271d next\u271d) (PathIn.cons [] ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\n\u22a2 1 + PathIn.length [n\u271d] m\u271d (@next\u271d m\u271d m_in\u271d) rest\u271d < [].length + PathIn.length [] n\u271d ht p\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L370"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "73165e99de027552cab9526bf0fe31d1ab47737043a1d306c29f25e9d0b10fed"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 373,
        "start_column": 4,
        "end_line": 373,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl.refl\nn\u271d head\u271d : \u2115\ntail\u271d ms\u271d : List \u2115\nm\u271d : \u2115\nm_in\u271d : m\u271d \u2208 ms\u271d\ns\u271d : Step n\u271d ms\u271d\nnext\u271d : {m : \u2115} \u2192 m \u2208 ms\u271d \u2192 HisTree (n\u271d :: head\u271d :: tail\u271d) m\nrest\u271d : PathIn (n\u271d :: head\u271d :: tail\u271d) m\u271d (@next\u271d m\u271d m_in\u271d)\np_is_rep\u271d\u00b2 :\n  isRep\n    (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\n      (PathIn.cons (head\u271d :: tail\u271d) ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\nn :\n  (n : \u2115) \u00d7'\n    (ht : HisTree (head\u271d :: tail\u271d) n) \u00d7' (p : PathIn (head\u271d :: tail\u271d) n ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n ht p)\na\u271d\u00b3 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht\u271d :\n  (ht : HisTree (head\u271d :: tail\u271d) n\u271d) \u00d7' (p : PathIn (head\u271d :: tail\u271d) n\u271d ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p)\na\u271d\u00b2 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree (head\u271d :: tail\u271d) n\u271d\np\u271d\u00b9 : (p : PathIn (head\u271d :: tail\u271d) n\u271d ht) \u00d7' isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p)\na\u271d\u00b9 : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np\u271d : PathIn (head\u271d :: tail\u271d) n\u271d ht\np_is_rep\u271d\u00b9 : isRep (treeAt (head\u271d :: tail\u271d) n\u271d ht p\u271d)\na\u271d : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\n\u03b2\u271d : Type\np : PathIn (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\np_is_rep\u271d : isRep (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d) p)\n\u03b2 : Type\np_is_rep :\n  isRep\n    (treeAt (head\u271d :: tail\u271d) n\u271d (HisTree.step n\u271d (head\u271d :: tail\u271d) ms\u271d s\u271d next\u271d)\n      (PathIn.cons (head\u271d :: tail\u271d) ms\u271d n\u271d m\u271d m_in\u271d s\u271d next\u271d rest\u271d))\n\u22a2 tail\u271d.length + 1 + 1 + PathIn.length (n\u271d :: head\u271d :: tail\u271d) m\u271d (@next\u271d m\u271d m_in\u271d) rest\u271d <\n    (head\u271d :: tail\u271d).length + PathIn.length (head\u271d :: tail\u271d) n\u271d ht p\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L373"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "8d1b448fe3733dbade5b39abe03d200b2cb65f2c8776e835e53a782a3f8747f9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 397,
        "start_column": 6,
        "end_line": 397,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : \u2115\nH' : History\nn' : \u2115\nH\u271d : History\nm\u271d k\u271d : \u2115\n_in_H : some k\u271d = List.idxOf? m\u271d H\u271d\np_is_rep :\n  @isRep.match_1 (fun x => Prop) \u27e8H\u271d, \u27e8m\u271d, HisTree.rep H\u271d m\u271d k\u271d _in_H\u27e9\u27e9 (fun fst fst_1 k a => True) fun x => False\nms : List \u2115\nm : \u2115\nm_in : m \u2208 ms\ns : Step n ms\nnext : {m : \u2115} \u2192 m \u2208 ms \u2192 HisTree [n] m\nrest : PathIn [n] m (@next m m_in)\np_ht_def :\n  \u27e8H\u271d, \u27e8m\u271d, HisTree.rep H\u271d m\u271d k\u271d _in_H\u27e9\u27e9 =\n    treeAt [] n (HisTree.step n [] ms s next) (PathIn.cons [] ms n m m_in s next rest)\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Unused/Repeat.lean#L397"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "0ec34fa4c0bd45b3dd13f779becce61e7dd7d4ed7dac31429a903b44c47f6826"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1014,
        "start_column": 112,
        "end_line": 1014,
        "end_column": 117
      },
      "debug_info": {
        "goal": "\u03c7 : LoadFormula\n\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\n\u03b1_natom : \u00ac\u03b1.isAtomic\n\u22a2 \u2203 s,\n    t \u22d6_ s \u2227\n      \u2200 F\u03b4 \u2208 H \u03b1,\n        if side = Side.LL then\n          if \u03be = AnyFormula.loaded \u03c7 then\n            nodeAt s = ((nodeAt s).1 ++ F\u03b4.1, (nodeAt s).2.1, some (Sum.inl (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n          else nodeAt s = ((nodeAt s).1 ++ F\u03b4.1, (nodeAt s).2.1, some (Sum.inl (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n        else\n          if \u03be = AnyFormula.loaded \u03c7 then\n            nodeAt s = ((nodeAt s).1, (nodeAt s).2.1 ++ F\u03b4.1, some (Sum.inr (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))\n          else nodeAt s = ((nodeAt s).1, (nodeAt s).2.1 ++ F\u03b4.1, some (Sum.inr (~'\u230a\u230aF\u03b4.2\u230b\u230b\u03c7)))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L1014"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "3f2eb8de55a908de8373768e620a3c11988221a849c12b51e0f31e5e2a32e398"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1614,
        "start_column": 16,
        "end_line": 1614,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case inr.intro.intro.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\n\u03b2 : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF\u271d : List Formula\n\u03b4\u271d : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4\u271d v w\nv_F : (M, v)\u22a8F\u271d\nF\u03b4_in_H : (F\u271d, \u03b4\u271d) \u2208 H (\u2217\u03b2)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be))).isFree = true\n\u03b4_ne\u271d : \u00ac\u03b4\u271d = []\nv_\u03b1_w : Relation.ReflTransGen (relate M \u03b2) v w\nn : \u2115\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : \u2200 (i : Fin n), relate M \u03b2 (ws.get i.castSucc) (ws.get i.succ)\nk : Fin n\nih :\n  \u2203 sk,\n    Relation.TransGen (cEdge X tab) t sk \u2227\n      (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n        \u2203 \u03b3,\n          (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n            (M, ws[k.castSucc])\u22a8nodeAt sk \u2227\n              ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)\nne : \u00acws[k.castSucc] = ws[k.succ]\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n\u03b3 : List Program\ninside_con : (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk)\nwk_sk : (M, ws[k.castSucc])\u22a8nodeAt sk\nloaded_con : ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true\nprincipal_con : True\nF : List Formula\n\u03b4 : List Program\nF\u03b4_in : (F, \u03b4) \u2208 H \u03b2\nwk_F : (M, ws[k.castSucc])\u22a8(F, \u03b4).1\nwk_\u03b4_wk1 : relateSeq M (F, \u03b4).2 ws[k.castSucc] ws[k.succ]\n\u03b4_ne : \u03b4 \u2260 []\nH\u03b2star_prop : (F, \u03b4 ++ [\u2217\u03b2]) \u2208 H (\u2217\u03b2)\n\u22a2 \u2203 sk,\n    Relation.TransGen (cEdge X tab) t sk \u2227\n      (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n        \u2203 \u03b3,\n          (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n            (M, ws[k.succ])\u22a8nodeAt sk \u2227\n              ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L1614"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "2d2f14c751e415cd35f93d48c940f4f860f742a72da0c56f05e9c9068ec1a0c2"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "2ec6b8bfd6b02531d459869014799c186fff7c65",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1845,
        "start_column": 10,
        "end_line": 1845,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case inr.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\n\u03b2 : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : (M, v)\u22a8F\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217\u03b2)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\n\u03b4_ne : \u00ac\u03b4 = []\nv_\u03b1_w : Relation.ReflTransGen (relate M \u03b2) v w\nn : \u2115\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : \u2200 (i : Fin n), relate M \u03b2 (ws.get i.castSucc) (ws.get i.succ)\nclaim :\n  \u2200 (k : Fin n.succ),\n    \u2203 sk,\n      Relation.TransGen (cEdge X tab) t sk \u2227\n        (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n          \u2203 \u03b3,\n            (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n              (M, ws[k])\u22a8nodeAt sk \u2227 ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)\nh : w = w\nsn : PathIn tab\nt_sn : Relation.TransGen (cEdge X tab) t sn\nloaded_con : List Program\nw_sn : (~''(AnyFormula.loaded (\u230a\u230aloaded_con\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sn)\nwithout_con :\n  (M, w)\u22a8nodeAt sn \u2227 ((nodeAt sn).without (~''(AnyFormula.loaded (\u230a\u230aloaded_con\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True\n\u03b1_natom : \u00ac(\u2217\u03b2).isAtomic\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n        (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/2ec6b8bfd6b02531d459869014799c186fff7c65/Pdl/Soundness.lean#L1845"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-27T05:39:39.837606+00:00"
      },
      "id": "e898cab901f50f16450ec7c8423626b0da2740819d159e91f95ed3697f74bf0b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 203,
        "start_column": 2,
        "end_line": 203,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 2 \u2264 1",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/Scratch/Fiddle4.lean#L203"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-04-30T15:46:18+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "31095e0307401e7b6a1892fffe0725003596a7409ca6f83efec143f807a00aa7"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 234,
        "start_column": 18,
        "end_line": 234,
        "end_column": 23
      },
      "debug_info": {
        "goal": "P Q : Prop\n\u22a2 Q",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/Scratch/Fiddle4.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "d1db9a1a8e09db6a25914829cf0e568900139f4af1f7cf93260c5e2b9bfa1b48"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 235,
        "start_column": 22,
        "end_line": 235,
        "end_column": 27
      },
      "debug_info": {
        "goal": "P Q : Prop\nass : Q\n\u22a2 Q \u2192 P",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/Scratch/Fiddle4.lean#L235"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "dc0d086f36bab52c28e43ccbaf3c45fd711b4b0e8a8aea3006f7e9715dfd9666"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 239,
        "start_column": 25,
        "end_line": 239,
        "end_column": 30
      },
      "debug_info": {
        "goal": "P : \u2115 \u2192 Prop\nf : \u2115 \u2192 \u2115\n\u22a2 \u2200 (n : \u2115), P n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/Scratch/Fiddle4.lean#L239"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "584ec59e5051576c62a9a5f2b18dcd4e21b075925bfcca9543378af3f3486596"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 243,
        "start_column": 28,
        "end_line": 243,
        "end_column": 33
      },
      "debug_info": {
        "goal": "p\u2081 p\u2082 p\u2083 q : Prop\n\u22a2 p\u2081 \u2228 p\u2082 \u2228 p\u2083",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/Scratch/Fiddle4.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-08-02T10:30:50+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "39282418b68704b61da17773d88e445cef304c1444a46cde05af69cfb0644f94"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 250,
        "start_column": 43,
        "end_line": 250,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : \u2115\nq : Prop\n\u22a2 n = 1 \u2228 n = 2 \u2228 n = 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/Scratch/Fiddle4.lean#L250"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-08-02T10:30:50+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "ab05632f1fc5e973aae7090e07e2de3fedbd1e451474eb89f78f54c730b0e0d7"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 319,
        "start_column": 2,
        "end_line": 323,
        "end_column": 15
      },
      "debug_info": {
        "goal": "\u22a2 True",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/Scratch/Fiddle4.lean#L319"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-12-26T19:58:00+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "2ae012a3fc166d29307c2dff16340b1a5bd544d16dbd0a71d4066f28f44c2557"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 86,
        "start_column": 78,
        "end_line": 86,
        "end_column": 83
      },
      "debug_info": {
        "goal": "n : \u2115\nh\u271d : Even n\ncalculation_104313057753019104 : \u2203 k, \u2191n = 2 * k \u2192 \u2191n * (\u2191n + 1) = 2 * k * (2 * k + 1)\n\u22a2 \u2203 k, \u2191n = 2 * k",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/CodeGen/from_statement_17638710709303199183.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "4ec94dbcc27c7ee16caebebf1709bfbb725ecaae04a4702dc218d7f020d584d5"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 93,
        "start_column": 49,
        "end_line": 93,
        "end_column": 54
      },
      "debug_info": {
        "goal": "n : \u2115\nh\u271d : \u00acEven n\n\u22a2 Odd n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/CodeGen/from_statement_17638710709303199183.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "b2493cc055e847f6aa9dbe7b4981057efdfe615b5915e9853c5aa54e8c7cb76d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 100,
        "start_column": 6,
        "end_line": 100,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : \u2115\nh\u271d : \u00acEven n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : \u2203 k, \u2191n = 2 * k + 1 \u2192 True\n\u22a2 \u2203 k, \u2191n = 2 * k + 1 \u2192 2 * k + 1 = (2 * k + 1) * (2 * k + 2)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/CodeGen/from_statement_17638710709303199183.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "2967fb8efef410f3ea1407ca84dba6b32fa95d053e3483e89a85891f161a3f50"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 104,
        "start_column": 6,
        "end_line": 104,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : \u2115\nh\u271d : \u00acEven n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : \u2203 k, \u2191n = 2 * k + 1 \u2192 True\ncalculation_2616508765904695607 : \u2203 k, \u2191n = 2 * k + 1 \u2192 2 * k + 1 = (2 * k + 1) * (2 * k + 2)\n\u22a2 \u2203 k, \u2191n = 2 * (2 * k + 1) * (k + 1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/CodeGen/from_statement_17638710709303199183.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "c805c9b2be027246ab14acdfcb5e928e60d9b85156dbfbfc967f0b0e0a88d341"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ThmInfo.lean",
        "start_line": 36,
        "start_column": 51,
        "end_line": 36,
        "end_column": 56
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (n : Nat), n + 2 = 2 + n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/DataGenAide/ThmInfo.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-08-16T17:16:08+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "5ad4ab43d11ede2f0264ebf1314296bd9247a917ce519e470ffeff98fe7c3f0e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ThmInfo.lean",
        "start_line": 39,
        "start_column": 50,
        "end_line": 39,
        "end_column": 55
      },
      "debug_info": {
        "goal": "a b c : Nat\n\u22a2 a ^ 3 + b ^ 3 = c ^ 3 \u2192 a * b * c = 0",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/DataGenAide/ThmInfo.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-08-16T17:16:08+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "16f4d4581dab16fcef91accc64ee53e6c14f909a8683c9dceecd62768b5ed0ce"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ConstDeps.lean",
        "start_line": 114,
        "start_column": 17,
        "end_line": 114,
        "end_column": 22
      },
      "debug_info": {
        "goal": "case succ\nm n : Nat\nih : n + m = m + n\n\u22a2 n + 1 + m = m + (n + 1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/DataGenAide/ConstDeps.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-05-05T19:52:08+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "3f98449edd7253a7ddee4eda30bb23bc5d8d2636598cb657b591cab1de9fdeff"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 41,
        "start_column": 26,
        "end_line": 41,
        "end_column": 41
      },
      "debug_info": {
        "goal": "\u22a2 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanAide/CheckedSorry.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "284db598f94d716abbc92279d020f69ad87c3edf7e57e787513eb94b93af56a0"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 46,
        "start_column": 44,
        "end_line": 46,
        "end_column": 59
      },
      "debug_info": {
        "goal": "n : Nat\n\u22a2 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanAide/CheckedSorry.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "13c0120e9b9c44800e69ad853990059beaf70eee7ed2a23018045a9b43e687e0"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case left\n\u22a2 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanAide/CheckedSorry.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "9edaf25ac3a348104a70cab66537b00468a987460e5dbca23730be39dfb95800"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 101,
        "start_column": 2,
        "end_line": 101,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case right.left\n\u22a2 2 + 2 = 4",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanAide/CheckedSorry.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "2b4f413888fccb658d108d023d8e98e7bf9920a97095acfdc12b9315e3d1d074"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case right.right\n\u22a2 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanAide/CheckedSorry.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "1df7ec17a5f1ba4532fcafd6f7f425cf06d2f0219b967c7b61c0a75702f5fac1"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 19,
        "start_column": 104,
        "end_line": 19,
        "end_column": 109
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {a b : \u2124},\n      \u2203 x y z w,\n        a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2227\n          \u2203 x y z w, b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2192 \u2203 x y z w, a * b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2) \u2192\n    let is_sum_of_four_squares := fun n => \u2203 a b c d, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2;\n    \u2200 (x y : \u2115), is_sum_of_four_squares x \u2192 is_sum_of_four_squares y \u2192 is_sum_of_four_squares (x * y)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L19"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "7877fa48386153a28c69652e6f1762801f10f3b56ae3a452f05d88c86b43b699"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 21,
        "start_column": 267,
        "end_line": 21,
        "end_column": 272
      },
      "debug_info": {
        "goal": "\u22a2 (let is_sum_of_four_squares := fun n => \u2203 a b c d, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2;\n    \u2200 (x y : \u2115), is_sum_of_four_squares x \u2192 is_sum_of_four_squares y \u2192 is_sum_of_four_squares (x * y)) \u2192\n    \u2200 {a b : \u2124},\n      \u2203 x y z w,\n        a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2227 b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 \u2192\n          \u2203 x y z w, a * b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "d66915892b9475f45f047481ac40b4fba90999ff0071b203542f4bf1c61d8335"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 30,
        "start_column": 2,
        "end_line": 30,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case a\nh : {R : Type u} \u2192 [inst : CommRing R] \u2192 (\u2200 (x : R), x * x = x) \u2192 CommRing R\nR : Type u\nRRing : Ring R\nhyp : \u2200 (x : R), x * x = x\nthis : CommRing R\nx : R\n\u22a2 x * x = x",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L30"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-12T12:43:25+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "6f7dca2d5cc33cda660dfbd1ebfedd407c4e1f78e2e239e84397d4c4122fa69b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 40,
        "start_column": 2,
        "end_line": 40,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h.left\nh : \u2200 (n : \u2115), \u2203 p\u2081 p\u2082, Nat.Prime p\u2081 \u2227 Nat.Prime p\u2082 \u2227 p\u2081 + 2 = p\u2082 \u2227 2 + n < p\u2082\nn p\u2081 p\u2082 : \u2115\nPrime_p\u2081 : Nat.Prime p\u2081\nPrime_p\u2082 : Nat.Prime p\u2082\nhyp\u2081 : p\u2081 + 2 = p\u2082\nhyp\u2082 : 2 + n < p\u2082\n\u22a2 p\u2081 > n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-12T12:43:25+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "1c18f7098d808953387b6071479bd956882a8b6feb38cb08534c1ee0c603114c"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 51,
        "start_column": 28,
        "end_line": 51,
        "end_column": 33
      },
      "debug_info": {
        "goal": "h : \u2200 (n : \u2115), \u2203 p > n, Nat.Prime p \u2227 Nat.Prime (p + 2)\nn p : \u2115\nhpn : p > n\nPrime_p : Nat.Prime p\nPrime_pp2 : Nat.Prime (p + 2)\n\u22a2 2 + n < p + 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L51"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-14T19:44:46+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "c667f7aacdf2d73f8c8c8758b3d82a97cce4e646c0c8efa9b13d4aec5e1f62b5"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 58,
        "start_column": 350,
        "end_line": 58,
        "end_column": 355
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {r : \u03b1 \u2192 \u03b1 \u2192 Prop} [inst : Preorder \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain r c \u2192 \u2203 ub, \u2200 a \u2208 c, r a ub) \u2192 \u2200 [inst : Nonempty \u03b1], \u2203 m, \u2200 (a : \u03b1), r m a \u2192 r a m) \u2192\n    \u2200 {\u03b1 : Type u} [inst : PartialOrder \u03b1] [inst_1 : Nonempty \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain LE.le c \u2192 \u2203 b, \u2200 a \u2208 c, a \u2264 b) \u2192 \u2203 m, \u2200 (a : \u03b1), m \u2264 a \u2192 a = m",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "cd42b65fac536bf7a7dc5a75433762a52e87f3438cdb7bb854cda02f4f23ae2e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 59,
        "start_column": 350,
        "end_line": 59,
        "end_column": 355
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : PartialOrder \u03b1] [inst_1 : Nonempty \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain LE.le c \u2192 \u2203 b, \u2200 a \u2208 c, a \u2264 b) \u2192 \u2203 m, \u2200 (a : \u03b1), m \u2264 a \u2192 a = m) \u2192\n    \u2200 {\u03b1 : Type u_1} {r : \u03b1 \u2192 \u03b1 \u2192 Prop} [inst : Preorder \u03b1],\n      (\u2200 (c : Set \u03b1), IsChain r c \u2192 \u2203 ub, \u2200 a \u2208 c, r a ub) \u2192 \u2200 [inst : Nonempty \u03b1], \u2203 m, \u2200 (a : \u03b1), r m a \u2192 r a m",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L59"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "a5cfe6763b8587ff8de8012e6407d912b27afa305aa73974280cb39497a10240"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 62,
        "start_column": 420,
        "end_line": 62,
        "end_column": 425
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} {\u03b3 : Type u_3} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2]\n      [inst_2 : UniformSpace \u03b3] {f : \u03b1 \u2192 \u03b2} {g : \u03b2 \u2192 \u03b3},\n      UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)) \u2192\n    \u2200 {\u03b1 \u03b2 \u03b3 : Type u} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2] [inst_2 : UniformSpace \u03b3] (f : \u03b1 \u2192 \u03b2)\n      (g : \u03b2 \u2192 \u03b3), UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "d5c5120a9b4138c4a7d7cbc93cd8767b2ffa6056df3f52fefe8286babe9f756d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 63,
        "start_column": 420,
        "end_line": 63,
        "end_column": 425
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 \u03b2 \u03b3 : Type u} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2] [inst_2 : UniformSpace \u03b3] (f : \u03b1 \u2192 \u03b2)\n      (g : \u03b2 \u2192 \u03b3), UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)) \u2192\n    \u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} {\u03b3 : Type u_3} [inst : UniformSpace \u03b1] [inst_1 : UniformSpace \u03b2]\n      [inst_2 : UniformSpace \u03b3] {f : \u03b1 \u2192 \u03b2} {g : \u03b2 \u2192 \u03b3},\n      UniformContinuous f \u2192 UniformContinuous g \u2192 UniformContinuous (g \u2218 f)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L63"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "94c8661a9a04e3a5a4ccf140d3d4aa27543909187f327cc8a94029bfcd307c6c"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 67,
        "start_column": 488,
        "end_line": 67,
        "end_column": 493
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {C : Type u\u2081} [inst : CategoryTheory.Category.{u_3, u\u2081} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\n      {T T' : C} (t : CategoryTheory.Limits.IsTerminal T),\n      CategoryTheory.Limits.IsTerminal T' \u2192 CategoryTheory.IsIso (t.from T')) \u2192\n    \u2200 {C : Type u_4} [inst : CategoryTheory.Category.{u_5, u_4} C] (T\u2081 T\u2082 : C),\n      CategoryTheory.Limits.IsTerminal T\u2081 \u2192 CategoryTheory.Limits.IsTerminal T\u2082 \u2192 \u2203 \u03b9, \u2200 (\u03b9' : T\u2081 \u2245 T\u2082), \u03b9 = \u03b9'",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "5c9a34ecc00eb53a8a34f3fdf6a6d940b08d0ca3976931478643cb32b5949edd"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 68,
        "start_column": 488,
        "end_line": 68,
        "end_column": 493
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {C : Type u_3} [inst : CategoryTheory.Category.{u_4, u_3} C] (T\u2081 T\u2082 : C),\n      CategoryTheory.Limits.IsTerminal T\u2081 \u2192 CategoryTheory.Limits.IsTerminal T\u2082 \u2192 \u2203 \u03b9, \u2200 (\u03b9' : T\u2081 \u2245 T\u2082), \u03b9 = \u03b9') \u2192\n    \u2200 {C : Type u\u2081} [inst : CategoryTheory.Category.{u_5, u\u2081} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\n      {T T' : C} (t : CategoryTheory.Limits.IsTerminal T),\n      CategoryTheory.Limits.IsTerminal T' \u2192 CategoryTheory.IsIso (t.from T')",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "570ef0697bcb595fe7d0eb45d1a23528fec5e35631445b7a6c847bdfa892ede5"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 71,
        "start_column": 104,
        "end_line": 71,
        "end_column": 109
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (a b c : \u2124), a ^ 3 + b ^ 3 \u2260 c ^ 3) \u2192 \u2200 (a b c : \u2115), a > 0 \u2192 b > 0 \u2192 \u00aca ^ 3 + b ^ 3 = c ^ 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "a08af318af7f53937a2b1b418a4ad5064643e8a598af0b26f3078ebf9a4408c6"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 72,
        "start_column": 104,
        "end_line": 72,
        "end_column": 109
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (a b c : \u2115), a > 0 \u2192 b > 0 \u2192 \u00aca ^ 3 + b ^ 3 = c ^ 3) \u2192 \u2200 (a b c : \u2124), a ^ 3 + b ^ 3 \u2260 c ^ 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "be28c4a44122e85291e2a9f086477b3abc1c21a73140532ed6095e3e67a403e3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 75,
        "start_column": 183,
        "end_line": 75,
        "end_column": 188
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {G : Type u_1} [inst : Group G], (\u2200 (x : G), x ^ 2 = 1) \u2192 \u2200 {x y : G}, Commute x y) \u2192\n    \u2200 {G : Type u} [inst : Group G], (\u2200 (x : G), G \u2192 x * x = 1) \u2192 \u2200 (x y : G), Commute x y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "54c17f8f014ea330ecdd58e768e6e789c93c0062e6f1c8901421e45eb003afb2"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 76,
        "start_column": 183,
        "end_line": 76,
        "end_column": 188
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {G : Type u} [inst : Group G], (\u2200 (x : G), G \u2192 x * x = 1) \u2192 \u2200 (x y : G), Commute x y) \u2192\n    \u2200 {G : Type u_1} [inst : Group G], (\u2200 (x : G), x ^ 2 = 1) \u2192 \u2200 {x y : G}, Commute x y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "c72c8a7d1f24bf2619b243f3d51716d2d80257f5bd1c3a1ffccd22ebefda893a"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 79,
        "start_column": 89,
        "end_line": 79,
        "end_column": 94
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {p q : \u2115}, p = q + 1 \u2192 Even (p * q)) \u2192 \u2200 (n : \u2115), Even (n * (n + 1))",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "f01ff28f64bca960bfbf94b1740279fd7cd18485052c6906b981099215d66d34"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 80,
        "start_column": 89,
        "end_line": 80,
        "end_column": 94
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (n : \u2115), Even (n * (n + 1))) \u2192 \u2200 {p q : \u2115}, p = q + 1 \u2192 Even (p * q)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "57851acc7a51d467ab794f63700ab66716cc8026372d8d4e077265ea97022269"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 83,
        "start_column": 120,
        "end_line": 83,
        "end_column": 125
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (\u03b1 : Type u), Monoid.IsTorsionFree (FreeGroup \u03b1)) \u2192 \u2200 {\u03b1 : Type u}, Monoid.IsTorsionFree (FreeGroup \u03b1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "f0655f77da8daa2f9e936433cf297d6c498a51a84be79fb1cc244e2126fe34a6"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 84,
        "start_column": 120,
        "end_line": 84,
        "end_column": 125
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u}, Monoid.IsTorsionFree (FreeGroup \u03b1)) \u2192 \u2200 (\u03b1 : Type u), Monoid.IsTorsionFree (FreeGroup \u03b1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "ae253fd228f8f55aa2f3cdb2a03e77535a6756ad9e7032d82c021c9ca14884ad"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 88,
        "start_column": 58,
        "end_line": 88,
        "end_column": 63
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {n : \u2115}, 1 < n \u2192 \u2203 p, Nat.Prime p \u2227 p \u2223 n) \u2192 \u2200 n > 1, \u2203 p, Nat.Prime p \u2227 \u2203 d, p * d = n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "cc1c9d4dd3e44f9cb8bd64f55bf05fc57886ef0b5460356627f45b283eb24c0e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 89,
        "start_column": 124,
        "end_line": 89,
        "end_column": 129
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 n > 1, \u2203 p, Nat.Prime p \u2227 \u2203 d, p * d = n) \u2192 \u2200 {n : \u2115}, 1 < n \u2192 \u2203 p, Nat.Prime p \u2227 p \u2223 n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "1bf1cb1379762a73f5b0e85849cbf59689794d283b98156f8062488d732ac0b2"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 98,
        "start_column": 310,
        "end_line": 98,
        "end_column": 315
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} [inst : Group \u03b1] [inst_1 : Group \u03b2] [inst_2 : Fintype \u03b1] [inst_3 : Fintype \u03b2]\n      {f : \u03b1 \u2192 \u03b2}, IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f) \u2192\n    \u2200 {\u03b1 : Type u} [inst : Finite \u03b1] (f : FreeGroup \u03b1 \u2192 FreeGroup \u03b1),\n      IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "882e20edfabd064b68cbc55ea50d0c59fb7178230e150a97529e9a4c530720ff"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 99,
        "start_column": 310,
        "end_line": 99,
        "end_column": 315
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : Finite \u03b1] (f : FreeGroup \u03b1 \u2192 FreeGroup \u03b1),\n      IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f) \u2192\n    \u2200 {\u03b1 : Type u_1} {\u03b2 : Type u_2} [inst : Group \u03b1] [inst_1 : Group \u03b2] [inst_2 : Fintype \u03b1] [inst_3 : Fintype \u03b2]\n      {f : \u03b1 \u2192 \u03b2}, IsGroupHom f \u2192 Function.Surjective f \u2192 Function.Injective f",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "136fce0612ce825c43737e74c7f4e09110b37a47c62bd4707419dab41d366ca9"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 102,
        "start_column": 167,
        "end_line": 102,
        "end_column": 172
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {n : \u2115}, 0 < n \u2192 Even n \u2192 \u2203 p q, Nat.Prime p \u2227 Nat.Prime q \u2227 p + q = n) \u2192\n    \u2200 n > 0, Even n \u2192 \u2203 p q, Nat.Prime p \u2192 Nat.Prime q \u2192 n = p + q",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "f5b7f216d8ca9abfbdaaac0fdf05612847c06d56c2be4f5b8089e7ddbd6198fe"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 103,
        "start_column": 167,
        "end_line": 103,
        "end_column": 172
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 n > 0, Even n \u2192 \u2203 p q, Nat.Prime p \u2192 Nat.Prime q \u2192 n = p + q) \u2192\n    \u2200 {n : \u2115}, 0 < n \u2192 Even n \u2192 \u2203 p q, Nat.Prime p \u2227 Nat.Prime q \u2227 p + q = n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "6ed5058cd64f402091e987d69a878e92f51ced1dc74d8fe160ab2c18bec7dd13"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 108,
        "start_column": 139,
        "end_line": 108,
        "end_column": 144
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {M : Type u} [inst : Semiring M] [inst_1 : DecidableEq M] (a : M), Even (a * a) \u2192 Even a) \u2192\n    \u2200 (n : \u2115), Even (n ^ 2) \u2192 Even n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "4c515e50f5136a022575f6116b5cbfd907c8d870ad4da064d200259d0749b072"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 109,
        "start_column": 139,
        "end_line": 109,
        "end_column": 144
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (n : \u2115), Even (n ^ 2) \u2192 Even n) \u2192\n    \u2200 {M : Type u} [inst : Semiring M] [inst_1 : DecidableEq M] (a : M), Even (a * a) \u2192 Even a",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "49725e05f7b26132c934a1230b1aec0a0a1b4f7fdb3ea869892665a44ee77a09"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 113,
        "start_column": 228,
        "end_line": 113,
        "end_column": 233
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : TopologicalSpace \u03b1] {s : Set \u03b1}, (\u2200 x \u2208 s, \u2203 t, IsOpen t \u2227 x \u2208 t) \u2192 IsOpen s) \u2192\n    \u2200 {X : Type u} [inst : TopologicalSpace X] (S : Set X), (\u2200 x \u2208 S, \u2203 U, IsOpen U) \u2192 IsOpen S",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "4c6712ce29c4a4857e8cd3e59d090e117b16075a5c8bd9e44777c4ccf21d452b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 114,
        "start_column": 228,
        "end_line": 114,
        "end_column": 233
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {X : Type u} [inst : TopologicalSpace X] (S : Set X), (\u2200 x \u2208 S, \u2203 U, IsOpen U) \u2192 IsOpen S) \u2192\n    \u2200 {\u03b1 : Type u} [inst : TopologicalSpace \u03b1] {s : Set \u03b1}, (\u2200 x \u2208 s, \u2203 t, IsOpen t \u2227 x \u2208 t) \u2192 IsOpen s",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "be92a57b56b57e8d120f28453e3de161c7d658fedf5257aab19fdf677f6b88ab"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 117,
        "start_column": 176,
        "end_line": 117,
        "end_column": 181
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {\u03b1 : Type u} [inst : DecidableEq \u03b1] {x : FreeGroup \u03b1}, x \u2260 1 \u2192 \u00acIsOfFinOrder x) \u2192\n    \u2200 {G : Type u} [inst : Group G], FreeGroup G \u2192 \u2200 (g : G), g \u2260 1 \u2192 orderOf g = 0",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "a86ec17de07de4c462e986daf066edd7ba0397c924be821cfd15b0cda1f902d3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 118,
        "start_column": 176,
        "end_line": 118,
        "end_column": 181
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {G : Type u} [inst : Group G], FreeGroup G \u2192 \u2200 (g : G), g \u2260 1 \u2192 orderOf g = 0) \u2192\n    \u2200 {\u03b1 : Type u} [inst : DecidableEq \u03b1] {x : FreeGroup \u03b1}, x \u2260 1 \u2192 \u00acIsOfFinOrder x",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "90d40609a44d36ccd484de8b914636fd88f23c02350656fd6a8ef2195007d36b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 121,
        "start_column": 220,
        "end_line": 121,
        "end_column": 225
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 {m n : \u2115}, 0 < m \u2192 0 < n \u2192 m.gcd n = 1 \u2192 \u2200 N > m * n, \u2203 x y, N = m * x + n * y) \u2192\n    \u2200 (a b : \u2115), a > 0 \u2192 b > 0 \u2192 a.Coprime b \u2192 \u2203 m, \u2200 N > m, \u2203 x y, N = a * x + b * y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-02-07T16:00:51+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "589050d1cf705239e9b8e7261c84accb3864e82f1f38d9ec95ecc8862bbbf0d3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 122,
        "start_column": 220,
        "end_line": 122,
        "end_column": 225
      },
      "debug_info": {
        "goal": "\u22a2 (\u2200 (a b : \u2115), a > 0 \u2192 b > 0 \u2192 a.Coprime b \u2192 \u2203 m, \u2200 N > m, \u2203 x y, N = a * x + b * y) \u2192\n    \u2200 {m n : \u2115}, 0 < m \u2192 0 < n \u2192 m.gcd n = 1 \u2192 \u2200 N > m * n, \u2203 x y, N = m * x + n * y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L122"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-02-07T16:00:51+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "cfffc5dc0cb015a27c803d581d688bb20513a25bfd344544ca5d8ce871e3e546"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "d3458ec0e7f89957c2bd0cb52c86dd5f060b8932",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 133,
        "start_column": 189,
        "end_line": 133,
        "end_column": 194
      },
      "debug_info": {
        "goal": "\u22a2 Unit \u2192\n    \u2200 {\u03b7 : Type u_1} (G : Type u_2) [inst : Group G] {\u0393 : Type u_3} [inst_1 : Group \u0393],\n      Monoid.IsTorsionFree (G \u00d7 \u0393) \u2192 Monoid.IsTorsionFree G \u2227 Monoid.IsTorsionFree \u0393",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/d3458ec0e7f89957c2bd0cb52c86dd5f060b8932/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L133"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-27T05:59:15.741004+00:00"
      },
      "id": "4b46e2340b280d82184b696d16bd6d46ebbb9e083e5cfe510a4407b6640b9729"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "5b052ecbbe4fee21e9eec612282bc31bec494ed6",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : \u2115\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n\u22a2 (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) \u2227\n    (True \u2192 env.get (i0 + 1) = 0 \u2228 env.get (i0 + 1) = 1) \u2227\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 \u2227\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n          (True \u2192 env.get (i0 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1) = 1) \u2227\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 \u2227\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                (True \u2192 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 \u2227\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                      (True \u2192\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/5b052ecbbe4fee21e9eec612282bc31bec494ed6/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-05-28T06:45:30.839285+00:00"
      },
      "id": "66e70ee81d469b062179ad521f01958a34b7cdc715efeecb3ae445a6afef7765"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 95,
        "start_column": 2,
        "end_line": 95,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 = FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef \u2227\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\nh0 : env.get i0 = FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\n\u22a2 (ZMod.val (FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef) < 2 ^ \u2191offset.castSucc \u2227\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)) < 2 ^ \u2191(8 - offset.castSucc)) \u2227\n    FieldUtils.mod (Expression.eval env x_var) \u27e82 ^ \u2191offset, \u22ef\u27e9 \u22ef +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset) * 2 ^ \u2191offset +\n        -x =\n      0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-15T17:59:45+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "74b0c0d504d68ffe06c9e81635cd8db56a92bf63319a791d180d9b1b3b676f41"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 195,
        "start_column": 2,
        "end_line": 195,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case mk.mk\np : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx0_var x1_var x2_var x3_var x4_var x5_var x6_var x7_var : Expression (F p)\nhenv :\n  env.uses_local_witnesses_completeness\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)\nx0 x1 x2 x3 x4 x5 x6 x7 : F p\nh_eval :\n  eval env\n      { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n        x7 := x7_var } =\n    { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }\nas : { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }.is_normalized\n\u22a2 Circuit.constraints_hold.completeness env\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L195"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-24T23:40:51+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "91119ad1c10b20b97a288fee66405cf4b5059794a48e3272feaecc7a3df7fe96"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\nx0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 x0_l x1_l x2_l x3_l x4_l x5_l x6_l x7_l x0_h x1_h x2_h x3_h x4_h x5_h x6_h x7_h :\n  F p\nh_x0_l : ZMod.val x0_l = ZMod.val x0 % 2 ^ \u2191offset\nh_x0_h : ZMod.val x0_h = ZMod.val x0 / 2 ^ \u2191offset\nh_x1_l : ZMod.val x1_l = ZMod.val x1 % 2 ^ \u2191offset\nh_x1_h : ZMod.val x1_h = ZMod.val x1 / 2 ^ \u2191offset\nh_x2_l : ZMod.val x2_l = ZMod.val x2 % 2 ^ \u2191offset\nh_x2_h : ZMod.val x2_h = ZMod.val x2 / 2 ^ \u2191offset\nh_x3_l : ZMod.val x3_l = ZMod.val x3 % 2 ^ \u2191offset\nh_x3_h : ZMod.val x3_h = ZMod.val x3 / 2 ^ \u2191offset\nh_x4_l : ZMod.val x4_l = ZMod.val x4 % 2 ^ \u2191offset\nh_x4_h : ZMod.val x4_h = ZMod.val x4 / 2 ^ \u2191offset\nh_x5_l : ZMod.val x5_l = ZMod.val x5 % 2 ^ \u2191offset\nh_x5_h : ZMod.val x5_h = ZMod.val x5 / 2 ^ \u2191offset\nh_x6_l : ZMod.val x6_l = ZMod.val x6 % 2 ^ \u2191offset\nh_x6_h : ZMod.val x6_h = ZMod.val x6 / 2 ^ \u2191offset\nh_x7_l : ZMod.val x7_l = ZMod.val x7 % 2 ^ \u2191offset\nh_x7_h : ZMod.val x7_h = ZMod.val x7 / 2 ^ \u2191offset\neq0 : x1_l * 2 ^ \u2191offset + x0_h + -y0 = 0\neq1 : x2_l * 2 ^ \u2191offset + x1_h + -y1 = 0\neq2 : x3_l * 2 ^ \u2191offset + x2_h + -y2 = 0\neq3 : x4_l * 2 ^ \u2191offset + x3_h + -y3 = 0\neq4 : x5_l * 2 ^ \u2191offset + x4_h + -y4 = 0\neq5 : x6_l * 2 ^ \u2191offset + x5_h + -y5 = 0\neq6 : x7_l * 2 ^ \u2191offset + x6_h + -y6 = 0\neq7 : x0_l * 2 ^ \u2191offset + x7_h + -y7 = 0\n\u22a2 let x_val :=\n    ZMod.val x0 + ZMod.val x1 * 256 + ZMod.val x2 * 256 ^ 2 + ZMod.val x3 * 256 ^ 3 + ZMod.val x4 * 256 ^ 4 +\n          ZMod.val x5 * 256 ^ 5 +\n        ZMod.val x6 * 256 ^ 6 +\n      ZMod.val x7 * 256 ^ 7;\n  let y_val :=\n    ZMod.val y0 + ZMod.val y1 * 256 + ZMod.val y2 * 256 ^ 2 + ZMod.val y3 * 256 ^ 3 + ZMod.val y4 * 256 ^ 4 +\n          ZMod.val y5 * 256 ^ 5 +\n        ZMod.val y6 * 256 ^ 6 +\n      ZMod.val y7 * 256 ^ 7;\n  y_val = x_val % 2 ^ (\u2191offset % 64) * 2 ^ (64 - \u2191offset % 64) + x_val / 2 ^ (\u2191offset % 64)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:54:41+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "835f9fabc3076a9af096a339df335bac862807ab0eb5794023163a15838e8ffd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 144,
        "start_column": 2,
        "end_line": 144,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n\u22a2 Completeness (F p) (elaborated offset) assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T11:26:47+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "73640cd7f201a98d030dbe244c200522848e43f9a7ee96fa6af9dea3d47ffe50"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 22,
        "start_column": 2,
        "end_line": 22,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\nx : \u2115\nh : x < 2 ^ 64\noffset : \u2115\n\u22a2 rot_right64 x offset = (x.toUInt64.toBitVec.rotateRight offset).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/Rotation64/Theorems.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "d5e8c77d6d712337688562fabd83dd10126334aefc4e253a6a22179d1f499de6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 41,
        "start_column": 35,
        "end_line": 41,
        "end_column": 40
      },
      "debug_info": {
        "goal": "x n m : \u2115\nh : x < 2 ^ 64\n\u22a2 (x.toUInt64.toBitVec.rotateRight n).toNat < 2 ^ 64",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/Rotation64/Theorems.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "2a678a4d5656f0707b8e91d71c9e8f0dea34d185768e620f8fc4ddae9d0f13c7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "x n m : \u2115\nh : x < 2 ^ 64\n\u22a2 ((x.toUInt64.toBitVec.rotateRight n).toNat.toUInt64.toBitVec.rotateRight m).toNat =\n    (x.toUInt64.toBitVec.rotateRight (n + m)).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/Rotation64/Theorems.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T16:41:17+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "827f475946d21593de297584e11eaf5bdcbd48ee321aaaa90248f8b40c59bdcc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 93,
        "start_column": 2,
        "end_line": 93,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[4]).is_normalized \u2227\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[3])) \u2227\n            (eval env state_var[1]).is_normalized \u2227\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[4])) \u2227\n        (eval env state_var[2]).is_normalized \u2227\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[3]).is_normalized \u2227\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Keccak/ThetaD.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "c97b72c6c746ca6a5cf69a3d0da4c36e62d4fb22f473375a9f93a0b3fcb8ef12"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 95,
        "start_column": 2,
        "end_line": 95,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 =\n      FieldUtils.mod (Expression.eval env x_var)\n        \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n        (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) \u2227\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\nh0 :\n  env.get i0 =\n    FieldUtils.mod (Expression.eval env x_var)\n      \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n      (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)\n\u22a2 (ZMod.val\n          (FieldUtils.mod (Expression.eval env x_var)\n            \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)) <\n        2 ^ \u2191offset.castSucc \u2227\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset)) < 2 ^ \u2191(8 - offset.castSucc)) \u2227\n    FieldUtils.mod (Expression.eval env x_var)\n            \u27e82 ^ \u2191offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset\u27e9\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ \u2191offset) * 2 ^ \u2191offset +\n        -x =\n      0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-15T17:59:45+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "40023d6df321c08bf4254ded9c76d946c033fd8e9e5fa90146a6fca1299a3401"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 144,
        "start_column": 2,
        "end_line": 144,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n\u22a2 Completeness (F p) (Gadgets.Rotation64Bits.elaborated p inst\u271d p_large_enough offset)\n    (Gadgets.Rotation64Bits.assumptions p)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T11:26:47+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "bf60579e57d0eb2741bc0cb27e839684d39c1dedaeb8f220e934bb4e5c3def5f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 93,
        "start_column": 2,
        "end_line": 93,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : Gadgets.Keccak256.ThetaD.assumptions p state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[4]).is_normalized \u2227\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[3])) \u2227\n            (eval env state_var[1]).is_normalized \u2227\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[4])) \u2227\n        (eval env state_var[2]).is_normalized \u2227\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[3]).is_normalized \u2227\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/Keccak/ThetaD.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "7cf2e08a8c76230ecb137a85954d206972fcc00e5bdf098e7b875614befc8092"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 57,
        "start_column": 4,
        "end_line": 57,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\nn k : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : field (F p)\nh_input : Expression.eval env x_var = x\nh_assumptions : ZMod.val x < 2 ^ n\nh_holds :\n  match\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset,\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength,\n    (Equality.circuit id).to_subcircuit\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n      (x_var, Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0) with\n  | m, Operations.empty .(m), s =>\n    Expression.eval env x_var =\n      Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n  | x, x_1, s =>\n    Circuit.constraints_hold.soundness env\n        (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n              (fun bit =>\n                StateT.modifyGet fun s =>\n                  (PUnit.unit,\n                    { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                      withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n              (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                (Gadgets.ToBits.main._proof_3 p prime))\n              { offset := k + n,\n                withLength :=\n                  (Operations.empty k).witness n fun eval =>\n                    Vector.ofFn fun i =>\n                      if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n      Expression.eval env x_var =\n        Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n\u22a2 \u2200 i < n, env.get (k + i) = if (ZMod.val x).testBit i = true then 1 else 0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Bits.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-23T17:56:13+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "b0c6b16f96678fba0d31f695cf18f4aef9fca34891abab9e89999a8e1020e98a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 62,
        "start_column": 4,
        "end_line": 62,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\nn k : \u2115\nenv : Environment (F p)\nx_var : Var field (F p)\nx : field (F p)\nh_input : Expression.eval env x_var = x\nh_assumptions : ZMod.val x < 2 ^ n\nh_env :\n  env.uses_local_witnesses_completeness\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n    ((Equality.circuit id).to_subcircuit\n          (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n                (fun bit =>\n                  StateT.modifyGet fun s =>\n                    (PUnit.unit,\n                      { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                        withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n                (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                  (Gadgets.ToBits.main._proof_3 p prime))\n                { offset := k + n,\n                  withLength :=\n                    (Operations.empty k).witness n fun eval =>\n                      Vector.ofFn fun i =>\n                        if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n          (x_var,\n            Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x))\n              0)).uses_local_witnesses\n      env\n\u22a2 match\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset,\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength,\n    (Equality.circuit id).to_subcircuit\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.offset\n      (x_var, Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0) with\n  | m, Operations.empty .(m), s =>\n    Expression.eval env x_var =\n      Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)\n  | x, x_1, s =>\n    Circuit.constraints_hold.completeness env\n        (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n              (fun bit =>\n                StateT.modifyGet fun s =>\n                  (PUnit.unit,\n                    { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                      withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n              (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                (Gadgets.ToBits.main._proof_3 p prime))\n              { offset := k + n,\n                withLength :=\n                  (Operations.empty k).witness n fun eval =>\n                    Vector.ofFn fun i =>\n                      if (ZMod.val (Expression.eval eval x_var)).testBit \u2191i = true then 1 else 0 }).2.withLength \u2227\n      Expression.eval env x_var =\n        Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + \u2191x } * Expression.const (2 ^ \u2191x)) 0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Bits.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-23T17:56:13+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "7d551fb92a802b27274735eb877a266592b6e82182d7e6a094ec0794db89aabe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 171,
        "start_column": 2,
        "end_line": 171,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case pred\nx n m : \u2115\nh : x < 2 ^ 64\nx' : BitVec 64 := BitVec.ofNat 64 x\ni : \u2115\nhi : i < 64\n\u22a2 (bif decide (i < 64 - m % 64) then (x'.rotateRight n).getLsbD (m % 64 + i)\n    else decide (i < 64) && (x'.rotateRight n).getLsbD (i - (64 - m % 64))) =\n    (x'.rotateRight (n + m)).getLsbD i",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Rotation64/Theorems.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T16:41:17+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "92720eb8e709c6b9c2a459d883b49596c566037fee15e7d4bd4ccd504dc98fe6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 62,
        "start_column": 9,
        "end_line": 62,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "97aa16f9a8af4f414c4128b572e9e6a19fbd44cd675108fc3610e421ab8bd6bc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 80,
        "start_column": 2,
        "end_line": 80,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "dbcc645bb6f878d24f46fc861fa646b55f514e691bb48d6d2a6e90ce49e71266"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 141,
        "start_column": 9,
        "end_line": 141,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "773e371970a6e26ff0c722aaf561c13030bb4f6324f2a983ba22dcedf407e40d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 167,
        "start_column": 2,
        "end_line": 167,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L167"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "191e218863e97da77bda846402aeee2b1610bccf7e0c5c43a204eca965d0a659"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 259,
        "start_column": 2,
        "end_line": 259,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b9 : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1d32f3467a459ffcceaf7a9ece9c7d1d4634a1b70f860a47fbf74f80ea9fe8df"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190 (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "568e916ecdea4ca421599b43c67580d82ecd96d04cbfddd9964b37d6e7c74af6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | \u27e80, isLt\u27e9 => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "0b7d3ffdef348d6460dbe6ea9c5c933d52ed63bc57ad329cc074b4b047402918"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 (do\n      let _ \u2190 liftM (query 0 ())\n      (fun a => (0, \u2191a)) <$> liftM (query 1 ())) =\n    do\n    let y \u2190 liftM (query 1 ())\n    (fun a => (0, \u2191y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "91f5452404049aa65ef884288f87d662e49c015015ef9dfc3c306ee8466816b3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n\u22a2 (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a)))) none =\n    \u2211' (a : Fin 2), 2\u207b\u00b9 * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a_1 => (0, \u2191a)))) none",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "22b8d5d212a3265702e2e74c3f6acc699ea009e1aa90c17ac4e13a63d7f48dbc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : \u2115\n\u22a2 (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a => (0, \u2191y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "4debec4e5aba1be73a0add878f2778f14f8ac168a90f7cb5ede4b06b4337ab2a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : \u2115) \u2192 unifSpec.domain i \u2192 Fin (i + 1)\n\u22a2 (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun x => (fun a => (0, \u2191a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun y => (fun a => (0, \u2191y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "cd0d58986b581018db5c4189d760776858b48fbd5ba3989d258828bc5455f164"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 312,
        "start_column": 2,
        "end_line": 312,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : R[X \u03c3]\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : R[X \u03c3]\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/OracleInterface.lean#L312"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "466ceb2e8a9afb46f22708412c1b38c4d73ff7939f912f485a81ab77ca9b4871"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 351,
        "start_column": 2,
        "end_line": 351,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : R[X]\n\u22a2 \u2203 x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          (statelessOracle spec [fun x => R[X]]\u2092 fun i q => oracle p q).impl) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/OracleInterface.lean#L351"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "87e932ac9c431c5a841c8f23f707b86e2603cef6c3ba446def1e676209a21ce7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Transform/FiatShamir.lean",
        "start_line": 130,
        "start_column": 66,
        "end_line": 130,
        "end_column": 71
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u2074 : VCVCompatible StmtIn\ninst\u271d\u00b3 : (i : Fin n) \u2192 VCVCompatible (pSpec i).2\ninst\u271d\u00b2 : DecidableEq \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\ncompletenessError : \u211d\u22650\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 Reduction.completeness relIn relOut R completenessError \u2192\n    Reduction.completeness relIn relOut R.fiatShamir completenessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Transform/FiatShamir.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-06T23:33:56-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "be469d7e55aea58ba3ae87928d7217273f7ebdcf64b482edbabdf03ecfc51ed2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).1.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "2c5c59d0a0d95590e3f09c94073c3204f524bdb56c398f439802847ab3a2449e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).2.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e147048be72f759311af06deb9b0abe77cef8ecb09fb43af7bd5363022418fe4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pEven \u2208 R\u2983< n\u2984[X]",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "abd32a2462082659bc6718289b097b3e6e39175fd7f9c823b94292b02da7388d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pOdd \u2208 R\u2983< n\u2984[X]",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "07bdac06e3f99ca0f4f31961ed90ff433cb15866257ea17547733ef66bae571d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := generateProof \u03b1 i cache\n          verifyProof \u03b1 i leaves[i] (getRoot \u03b1 cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run \u2218 fun cache =>\n                verifyProof \u03b1 i (leaves.get i) (getRoot \u03b1 cache) (generateProof \u03b1 i cache))).mapM\n          fun {\u03b1_1} q =>\n          match \u03b1_1, q with\n          | .((spec \u03b1).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "d12410bcb99b6142a6622c964a0336184ee8966c679e85fa74b28674f0ee094c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 160,
        "start_column": 2,
        "end_line": 160,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b2 : Fact (Nat.Prime p)\nG\u2081 : Type u_2\ninst\u271d\u00b9 : CommGroup G\u2081\ninst\u271d : IsPrimeOrderWith G\u2081 p\nn : \u2115\ng : G\u2081\na : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1))\n\u22a2 g ^ \u2211 i, a.val ^ \u2191i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (\u2211 x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ \u2191x).val",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/AGM/Basic.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-15T12:13:54+05:30",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3bce7a2bfc31b2c514ed165e702cb2c63d260d7267af7bf882376f27cfa6080a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 171,
        "start_column": 6,
        "end_line": 171,
        "end_column": 11
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u2078 : CommGroup G\np : \u2115\ninst\u271d\u2077 : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG\u2081 : Type u_2\ninst\u271d\u2076 : CommGroup G\u2081\ninst\u271d\u2075 : IsPrimeOrderWith G\u2081 p\ng\u2081 : G\u2081\nG\u2082 : Type u_3\ninst\u271d\u2074 : CommGroup G\u2082\ninst\u271d\u00b3 : IsPrimeOrderWith G\u2082 p\ng\u2082 : G\u2082\nG\u209c : Type u_4\ninst\u271d\u00b2 : CommGroup G\u209c\ninst\u271d\u00b9 : IsPrimeOrderWith G\u209c p\npairing : Additive G\u2081 \u2192\u2097[\u2124] Additive G\u2082 \u2192\u2097[\u2124] Additive G\u209c\nn : \u2115\ninst\u271d : Fact (Nat.Prime p)\nsrs : Vector G\u2081 (n + 1)\ncoeffs : Fin (n + 1) \u2192 ZMod p\nz : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n\u22a2 ((\u2191poly - C (eval z \u2191poly)) / (X - C z)).degree < \u2191(n + 1)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/AGM/Basic.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-15T21:13:06-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "fd50eb520f249e187c4cc17da4b90f04d44f1cc638f8fedce8eb19be7b7e8ee8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 \u2016C\u2016\u2080' \u2260 \u22a4",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3009d57d0e90edd1050f2535b78f9e4f60cfd039f8ccbfbcd16a52cd702b891d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : \u2016C\u2016\u2080' \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => \u0394\u2080(\u2191x.1, \u2191x.2)) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d}",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "5eb12568cfc88f855ce8e1aa5eb37e600543cc30a15d7683127ada27583d4463"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : \u0394\u2080(u, v) \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 \u2016u\u2016\u2080 \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6827f6e2af2e914c7b8e3d932d9fa3520d9cf00c1bf6f10b54d7bb2ce2ea1ebb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : \u2016u\u2016\u2080 \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "26d6446692aed7438cf4ca9710a4b11e615d0a4de6c914dc4cccf5a9cb898451"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 395,
        "start_column": 65,
        "end_line": 395,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - \u2016C.carrier\u2016\u2080 + 1",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L395"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ebbcf02281803aa3f1ad085205ffae9455bf0080876cac3ddf59c6b00037b095"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "55d356c561bd0ef9c2c2a5faee2211f6e5804bd0cb7c371c52cbd652a198bea4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "733709b0b3eb61737241c7d253801f7b75b63c187dd6cddfd2025a376fa75cd4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "dcd0b4dbe6b1ed9578696200172010514927605fccbb9579ca901fdb47a1fe75"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e6da4863dd6a091b176d7d5e3e364886431d4e3fa96abd1856f5e90ad00278f0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 45,
        "start_column": 2,
        "end_line": 45,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MlPoly/Basic.lean#L45"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "c1d55f69fab2850b8456a7cb47cd5c3de4163ed228b7b9251ac5a214be7ef0ad"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 (cons a b).get \u2b1d\u1d65 (cons c d).get = a * c + b.get \u2b1d\u1d65 d.get",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "8451e357d7c05083e9d922a97c7dd9f04b3ddf282eeb79223682bb59b43b4bac"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "8c8b0ec8a96778394f7a99ce84f781374e31d1d000fb791f81eecd6cc0e110aa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "10f21bccf93bda0f6ac9ed3034c4c7b5577881ba3dcc2e0ebffb57492de10fd3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "d26fddddac39506548395e2ff1a06aa68bca512166c25274e0572eea85d2572a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "5f3f7be8e2f427c7689f43fb1d21a72a01141e166f652943090465f67bc7cc44"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (n_1 : \u2115) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "15146d0ea41040b73992e26171f22283cf3638e4a72dedf94668231296528b7e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "868ab7a0efed5031b7e04f4d3b923346a42a39ff6ae28d596c7ba442c267909d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (b : MlPoly R n), 1 \u2022 b = b",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3ad86c7f3f1e3d2be1812433b8cc0eab51171e5e61ea4928992cb723d37d96c6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (x : MlPoly R n), 0 \u2022 x = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "09cec9f7ac47cd375b8365ff39899f9cc3d7b705d6c730af3e224b0a139b1f5a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n \u2294 l.length = n' \u2294 l'.length\n\u22a2 l ++ replicate (n - l.length + (m - n' \u2294 l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' \u2294 l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "23597376809ed0dd1820b5788a632d56392b0458b608e84f3e7f9a01b2e54e35"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l\u2081.matchSize l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "bdc1ceac3ccfafecaec8c45a71ad75e64a4346ea31d0d51338b3fff59aadcb6d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 248,
        "start_column": 2,
        "end_line": 248,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\na : Array \u03b1\nn : \u2115\nunit : \u03b1\ni : \u2115\nh\u271d : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n\u22a2 { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/Math/Basic.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "96cdb460a475bdfa1fcf29021e6aeb34be8e106d7851b9534882914a84bb461b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "80b4e920ce514d601f468a11fbffb8057a08720c1ab1e5b35c22c742b79c19d5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 469,
        "start_column": 4,
        "end_line": 469,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L469"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "cd143a88ad9e31e826b00c24f4dd3dc3f8985d99e39765a4385c377b7da471ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 481,
        "start_column": 80,
        "end_line": 481,
        "end_column": 85
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 l.findSumIdx \u2191j < l.length",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L481"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6f78c462297f0e4cd5c48a684c88b578a4359d608848fa8d7f35892be2685179"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : R[X \u03c3]\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3464a6856e1d089e7ce351210c1c0c0fce92da8ae1d61547f7b44e97fd899105"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : R[X Fin n]\n\u22a2 ((sumExceptFirst' n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7d5e20caac6893c3674c953bec16cb092f20fdceb57956d888049701943245c9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : R[X \u03c3]\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191(#({x \u2208 p.vars.pi S | (eval (extendDomain x)) p = 0})) / \u220f i \u2208 p.vars, \u2191(#(S i)) \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1af9daf427587928cdf589f4d82b368bfc21a0a34848ba23a328f93988c922d1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : R[X \u03c3]\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < #(S i)\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "f9c5c4078caaeb5ea9a096da386729d8e7d2602bb881943905c6f04cc44e287f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 422,
        "start_column": 43,
        "end_line": 422,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b1 : Fin n \u2192 Sort u\nl : List \u2115\nn' : \u2115\nl' : List \u2115\nmotive : Fin (n' :: l').sum \u2192 Sort u_1\ncases : (n : \u2115) \u2192 (h : n \u2208 n' :: l') \u2192 (i : Fin n) \u2192 motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : \u00ac\u2191i < n'\n\u22a2 \u2191i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L422"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "411d4e93182014c105091b33e53b3b6d5d799cb23da0f2ec94196ed042240822"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 450,
        "start_column": 16,
        "end_line": 450,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case ind\nn\u271d n : \u2115\nIH : \u2200 m < n, \u2200 {a : Fin m \u2192 \u2115}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n \u2192 \u2115\n\u22a2 (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L450"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "c27e3b013cb8a561d94ba9842b1473e1fc573152e13a028548254969bf650b2a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : UniPoly Q\ni : \u2115\nhi : i < Array.size (p.add_raw q)\n\u22a2 (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "0ac3987f91918316115bcbd5a5190f334718b43eef6d6a44d86861af2e6a0e98"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n\u22a2 p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7feadb1d1938b120c33ecd0497379e7edda0d34dd6a460c54ce4c81cbe63f302"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : Ring R\ninst\u271d : BEq R\np : UniPoly R\n\u22a2 (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) \u2208 TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b9dd5c0fe5236091ea8855dc3155bd98bb0faa5dd1e6a63db924678e498d338e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "21251d59309e749d53a0e3786bd81a88574eeca70048432b2247a03423b05129"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "01133ba8828bec9ecd45b93bb9f3585cbd6dcf7ba219d843d0a8517c8bbfa34e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e9400b844e33b3d7a18d8cd41ed92f1807e43589f763603212d3a8e31e94310f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "896bb0b36b0139fe1ea5349fb71c1901c89cf9e690bbbc785a2cb5fa62768eab"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "33227c9041bfb79809b37c45d9782948363814999aa7b5b1b56115b4ab529a0c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190 Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1037dbfd13e7075f7f2df9ff6acc04c06f4f8eadc10bdcfe1c10621d0293caac"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : \u211d\u22650\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d : x\u271d \u2208 (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x\u271d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b7e7785ddd0e7960be7923733551337f7ec78b3cec30de41c822cf0c03ad97e0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : \u211d\u22650\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n    \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "afc81d98ed41f5f375579541273fc760226c833fd3841423ee3bf424d1fac91e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : \u211d\u22650\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n        \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "33d5b993990508a7aa631aa5108a54a42173506d8d6c9e672e3c2f582ae39edc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : \u2124[X]\nt : \u2124\nf : \u2124[X]\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b86f06e3609ce072183a451094d605a9386986f26397b83d153721c340f42524"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 390,
        "start_column": 2,
        "end_line": 390,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : \u211d\u22650\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L390"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "770f12482cdc9debff51d443ef514dd48ce83a009069228b67fc5e321558fa48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 410,
        "start_column": 75,
        "end_line": 410,
        "end_column": 80
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn StmtOut : Type\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrSoundnessError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrSoundness langIn langOut verifier rbrSoundnessError \u2192 soundness langIn langOut verifier (\u2211 i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L410"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "86a6c29152a515529a53df345ef9924a23cc8bbe29734cbbc53ec7c45ce1de11"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 420,
        "start_column": 2,
        "end_line": 420,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError \u2192\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L420"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e7b53eaa74b194b826fd0dadd533183d29bce9f0eb460d261efe4b0d69ddcbe5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 429,
        "start_column": 82,
        "end_line": 429,
        "end_column": 87
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError \u2192\n    knowledgeSoundness relIn relOut verifier (\u2211 i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L429"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "9403abb6223ce075cfcc6cab81eb0a1b10e8e621d5db2ebc1016d6facae1fdef"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 429,
        "start_column": 2,
        "end_line": 429,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIdx) \u2192 OracleInterface (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIdx) \u2192 OracleInterface (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (P\u2081.append P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    match __discr with\n      | (stmt\u2082, wit\u2082, transcript\u2081) => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        match __discr with\n          | (stmt\u2083, wit\u2083, transcript\u2082) => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L429"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ff389583a3a14493ea88d311f5bd7f386e2094d95b6749f378cd71e1a0b95d48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 459,
        "start_column": 89,
        "end_line": 459,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : \u211d\u22650\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (R\u2081.append R\u2082) (completenessError\u2081 + completenessError\u2082)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L459"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6981c0322199ff97ae32e02f728534c69de6b0a529caba6749265f2f4a372c1d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 489,
        "start_column": 27,
        "end_line": 489,
        "end_column": 32
      },
      "debug_info": {
        "goal": "case h.e'_6.h.h.h.h.e'_2.h.h.e\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nn : Fin (0 + 1) \u2192 \u2115\npSpec : (i : Fin (0 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (0 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (0 + 2) \u2192 Type\nrel : (i : Fin (0 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (0 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (0 + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin 1), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\ne_1\u271d\u00b9 : \u2211 i, n i = n 0\nhe\u271d : ProtocolSpec.compose 0 n pSpec = pSpec 0\nx\u271d : { i // (ProtocolSpec.compose 0 n pSpec i).1 = Direction.V_to_P }\ne_1\u271d : (ProtocolSpec.compose 0 n pSpec \u2191x\u271d).2 = (pSpec 0 \u2191x\u271d).2\n\u22a2 instSampleableChallengeCompose = inst\u271d 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L489"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "46190574d912f3b276b8956b56e28a4bde53f2ec71fd292107be42e3d80131d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 491,
        "start_column": 4,
        "end_line": 491,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nm : \u2115\nih :\n  \u2200 {n : Fin (m + 1) \u2192 \u2115} {pSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)}\n    [inst : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)]\n    {Stmt Wit : Fin (m + 2) \u2192 Type} {rel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop}\n    (R : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ))\n    (completenessError : Fin (m + 1) \u2192 \u211d\u22650),\n    (\u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)) \u2192\n      completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (\u2211 i, completenessError i)\nn : Fin (m + 1 + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (m + 1 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 1 + 2) \u2192 Type\nrel : (i : Fin (m + 1 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (m + 1 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1 + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin (m + 1 + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1 + 1))) (compose (m + 1) n pSpec Stmt Wit R) (\u2211 i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L491"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ae62a720f32f451490cdd962d1e3e6708b6e82e162cee3ef8e6ed17411e9e945"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 495,
        "start_column": 2,
        "end_line": 495,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5R\u2983\u2264 \u2191deg\u2984[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : \u2191(transcript 0) \u2208 R\u2983\u2264 \u2191deg\u2984[X]\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) \u2191(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L495"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b811112245ecb5dca87a20a0fd136ace45bc965f2f942d4af4cba61eb86bd5ce"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 513,
        "start_column": 57,
        "end_line": 513,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 (do\n      let x \u2190\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                \u27e80, \u22ef\u27e9\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn\u271d)).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)\n      let a \u2190 liftM (query (Sum.inr \u27e81, \u22ef\u27e9) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  \u27e81, \u22ef\u27e9 x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L513"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3ac088511b47029a26d9c4c323340dc5ebdf616a1f950c9b6a9299018b5b40d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 522,
        "start_column": 2,
        "end_line": 522,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) \u2208\n        (run ({ target := target, challenges := challenge }, oStmt) witIn\u271d\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support \u2192\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | \u27e8poly, property\u27e9 =>\n            \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x \u2218 Fin.cast \u22ef)) poly =\n              target) \u2227\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L522"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "a7f2757e01506bedc5df9fa6f778328519644a12cfefe1cf14d7d1406ec143f0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 571,
        "start_column": 4,
        "end_line": 571,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R\u271d : Type\ninst\u271d\u2075 : CommSemiring R\u271d\nn\u271d deg\u271d m\u271d : \u2115\nD\u271d : Fin m\u271d \u21aa R\u271d\n\u03b9\u271d : Type\noSpec\u271d : OracleSpec \u03b9\u271d\ninst\u271d\u2074 : VCVCompatible R\u271d\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni\u271d : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  \u00acrelation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i),\n    (a, b) \u2208 (Verifier.run stmt tr (verifier R n deg D oSpec i)).support \u2192\n      \u2200 (x : Unit), \u00acrelation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7eb57337a4a53afb95245e7e428de73d21423347faef6a472bf1ca807546d58b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 646,
        "start_column": 42,
        "end_line": 646,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L646"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "155192ee144b7a2eca0dac294e33382594c03befc133f75acbedddc961502efa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 62,
        "start_column": 9,
        "end_line": 62,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => ProtocolSpec.Message (SendWitness.pSpec WitEquiv) j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/ProofSystem/Components.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "f81755cd87761bb9776294af2123effb453ab34ef12b18e5d052b625ec133702"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 80,
        "start_column": 2,
        "end_line": 80,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : OracleInterface WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (SendWitness.toRelOut Statement Witness \u03b9\u209b\u1d62 OStatement WitEquiv equiv relIn)\n    (SendWitness.oracleReduction \u03b9 oSpec Statement Witness \u03b9\u209b\u1d62 OStatement inst\u271d\u00b2 WitEquiv inst\u271d\u00b9 equiv)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/ProofSystem/Components.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "66d83aaa74ed9ac16dea3c28f6a2665e92302e9d6ab7b3565941317725281a98"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 141,
        "start_column": 9,
        "end_line": 141,
        "end_column": 14
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => ProtocolSpec.Message (SameOracle.pSpec \u03b9\u209b\u1d62 inst\u271d OStatement) j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/ProofSystem/Components.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "6fa12752345e2cdbd54277329dd94924b11728b35253c3ea81f53b9943fc8186"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 167,
        "start_column": 2,
        "end_line": 167,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst : (i : \u03b9\u209b\u1d62) \u2192 OracleInterface (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (SameOracle.relOut \u03b9\u209b\u1d62 inst\u271d\u00b9 OStatement)\n    (SameOracle.oracleReduction \u03b9 oSpec Statement \u03b9\u209b\u1d62 inst\u271d\u00b9 OStatement inst relComp)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/ProofSystem/Components.lean#L167"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "e08513f0aad0ca1c9f2d15d341a99b02ee6409408f6008579840b8de1e43ad82"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 259,
        "start_column": 2,
        "end_line": 259,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b9 : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (RandomQuery.relIn OStatement) (RandomQuery.relOut OStatement inst\u271d\u00b9)\n    (RandomQuery.oracleReduction \u03b9 oSpec OStatement inst\u271d\u00b9)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/ProofSystem/Components.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "f0a12504e2a9df8f20b346a1c7ff47c59bbeda7921f4ca9e7853c79462941e29"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190\n        (simulateQ loggingOracle\n              (Prover.runToRound n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut inst\u271d (Fin.last n) stmt wit\n                reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut inst\u271d stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "e49085dd802f89bb26e5e372b228178df6c50d6ce37b21f0c1416ac7c5a83674"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "49ca18936e0751c358bb0faccc2ae64aa43a161959bd980794ae55f9e923a6e1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 312,
        "start_column": 2,
        "end_line": 312,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : MvPolynomial \u03c3 R\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : MvPolynomial \u03c3 R\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/OracleInterface.lean#L312"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "48546514baeda02ed5f048cd654d1c40360b0a2d55f340b3c346e6d51575d794"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 351,
        "start_column": 2,
        "end_line": 351,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : Polynomial R\n\u22a2 \u2203 x,\n    ((OptionT.run (List.mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          QueryImpl.impl\n            (@SimOracle.statelessOracle Unit \u03b9 spec\n              (OracleInterface.toOracleSpec Unit (fun x => Polynomial R) fun i => instOracleInterfacePolynomial R inst\u271d)\n              fun i q => OracleInterface.oracle (Polynomial R) (instOracleInterfacePolynomial R inst\u271d) p q)) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/OracleInterface.lean#L351"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "3be9c8aaa43c15265538f3279e7af160a1e69df1c7aa602b75370d8269ffb904"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Transform/FiatShamir.lean",
        "start_line": 130,
        "start_column": 66,
        "end_line": 130,
        "end_column": 71
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u2074 : VCVCompatible StmtIn\ninst\u271d\u00b3 : (i : Fin n) \u2192 VCVCompatible (pSpec i).2\ninst\u271d\u00b2 : DecidableEq \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\ncompletenessError : NNReal\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 Reduction.completeness relIn relOut R completenessError \u2192\n    Reduction.completeness relIn relOut (Reduction.fiatShamir n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut R)\n      completenessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Transform/FiatShamir.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-06T23:33:56-04:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "c04e18616a259e6e6f2a46c01283dad24dc21f7975287256539f29c6f33a7fa1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 103,
        "start_column": 2,
        "end_line": 103,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : Polynomial R\n\u22a2 (FRI.splitEvenOdd R inst\u271d\u00b9 p).1.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/CommitmentScheme/Fold.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "0964b3d156c86131362154aa8078364cdf29f70a851deebe4eda6c35a987c388"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 107,
        "start_column": 2,
        "end_line": 107,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : Polynomial R\n\u22a2 (FRI.splitEvenOdd R inst\u271d\u00b9 p).2.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/CommitmentScheme/Fold.lean#L107"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "76269159239a0f829ed8cec4f090d481c5b1a465e861f4439641f7e5f09c6084"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 119,
        "start_column": 11,
        "end_line": 119,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5(Polynomial.degreeLT R (2 * n))\npEven pOdd : Polynomial R\n\u22a2 pEven \u2208 Polynomial.degreeLT R n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/CommitmentScheme/Fold.lean#L119"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "508610c8c671f85bf5ceb8f5997d8c3f763dda42348211a1b9f4db96fba231b1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 119,
        "start_column": 26,
        "end_line": 119,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5(Polynomial.degreeLT R (2 * n))\npEven pOdd : Polynomial R\n\u22a2 pOdd \u2208 Polynomial.degreeLT R n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/CommitmentScheme/Fold.lean#L119"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "6cffe83e2c53fe590ab8c488fa53dd8148142abde1b30e9551aac4267edc2b7a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (@MerkleTree.implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 MerkleTree.buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := MerkleTree.generateProof \u03b1 n i cache\n          MerkleTree.verifyProof \u03b1 inst\u271d\u00b2 n i leaves[i] (MerkleTree.getRoot \u03b1 n cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (MerkleTree.buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (@Function.comp (MerkleTree.Cache \u03b1 (n + 1))\n                (OptionT (FreeMonad (OracleQuery (MerkleTree.spec \u03b1))) PUnit.{1})\n                (FreeMonad (OracleQuery (MerkleTree.spec \u03b1)) (Option PUnit.{1})) OptionT.run fun cache =>\n                MerkleTree.verifyProof \u03b1 inst\u271d\u00b2 (n + 1) i (leaves.get i) (MerkleTree.getRoot \u03b1 (n + 1) cache)\n                  (MerkleTree.generateProof \u03b1 (n + 1) i cache))).mapM\n          fun {\u03b1_1} q =>\n          @MerkleTree.implement_with_function.match_1 \u03b1 (fun \u03b1_2 q => StateT Unit (OracleComp []\u2092) \u03b1_2) \u03b1_1 q\n            fun i left right => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "9f2cc1de747f38890b9fb41c4fea8ca9de580b22e6cb3bee57352c2704bb2663"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 160,
        "start_column": 2,
        "end_line": 160,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b2 : Fact (Nat.Prime p)\nG\u2081 : Type u_2\ninst\u271d\u00b9 : CommGroup G\u2081\ninst\u271d : @IsPrimeOrderWith G\u2081 CommGroup.toGroup p inst\u271d\u00b2\nn : \u2115\ng : G\u2081\na : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1))\n\u22a2 g ^ \u2211 i, a.val ^ \u2191i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (\u2211 x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ \u2191x).val",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/AGM/Basic.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-15T12:13:54+05:30",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "2131f99b305364f22b08906093573c19aaabce900d01f28b0d1f284da9d61827"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 171,
        "start_column": 6,
        "end_line": 171,
        "end_column": 11
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u2078 : CommGroup G\np : \u2115\ninst\u271d\u2077 : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG\u2081 : Type u_2\ninst\u271d\u2076 : CommGroup G\u2081\ninst\u271d\u2075 : @IsPrimeOrderWith G\u2081 CommGroup.toGroup p inst\u271d\u2077\ng\u2081 : G\u2081\nG\u2082 : Type u_3\ninst\u271d\u2074 : CommGroup G\u2082\ninst\u271d\u00b3 : @IsPrimeOrderWith G\u2082 CommGroup.toGroup p inst\u271d\u2077\ng\u2082 : G\u2082\nG\u209c : Type u_4\ninst\u271d\u00b2 : CommGroup G\u209c\ninst\u271d\u00b9 : @IsPrimeOrderWith G\u209c CommGroup.toGroup p inst\u271d\u2077\npairing : Additive G\u2081 \u2192\u2097[\u2124] Additive G\u2082 \u2192\u2097[\u2124] Additive G\u209c\nn : \u2115\ninst\u271d : Fact (Nat.Prime p)\nsrs : Vector G\u2081 (n + 1)\ncoeffs : Fin (n + 1) \u2192 ZMod p\nz : ZMod p\npoly : \u21a5(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n\u22a2 ((\u2191poly - C (eval z \u2191poly)) / (X - C z)).degree < \u2191(n + 1)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/AGM/Basic.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-15T21:13:06-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "4c142e64dc5e4106e8121a63da8cec642c07aeb2b548b1720c0da9ea87e28c49"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 @codeDist' n inst\u271d\u00b2 R inst\u271d\u00b9 C inst\u271d \u2260 \u22a4",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "04685a42c056c907c82559b059b825f5854b57ba987e64b3de32d6989417a4ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : @codeDist' n inst\u271d\u00b2 R inst\u271d\u00b9 C inst\u271d \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => hammingDist \u2191x.1 \u2191x.2) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 hammingDist u v \u2264 d}",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "5c457815d2b9839701dad9c4b48d8353733f52c80de74cadf3584f697637dc99"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : hammingDist u v \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 hammingNorm u \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "1845fde69d17f769aa475c2a6b4b2e0f9fd88fdc11d9cfca296cbf0859f7ea87"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : hammingNorm u \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 hammingDist u v \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "0bbeba9cd6d2b901bd3958eb993e40fddb604ac4641c51c830a4e10b992f1343"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 395,
        "start_column": 65,
        "end_line": 395,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - @codeDist n inst\u271d\u00b3 R inst\u271d\u00b2 C.carrier + 1",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/CodingTheory/Basic.lean#L395"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "2a04b97d4627fdf0283d6633839607734166f479c8481435802b4f7a6a4f8fa0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse (@MlPoly.ofSpec R inst\u271d n) (@MlPoly.toSpec R inst\u271d n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "c8d97055585496b476baf07865cf15bdcd9b3c46b8080b37ccc593a68622fa12"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse (@MlPoly.ofSpec R inst\u271d n) (@MlPoly.toSpec R inst\u271d n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "8d1327787763f1594f624d5627158739bcfd070c24d97af0daee334b57e6463d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 @MlPoly.toSpec R inst\u271d n (p + q) = @MlPoly.toSpec R inst\u271d n p + @MlPoly.toSpec R inst\u271d n q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "9a8e31e58bbaa12227601c5710a5aebf049e08f783a6644906392648d7131e0e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191(@MlPoly.toSpec R inst\u271d\u00b9 n p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "729ae5517201b18a9db81781d55f6c87d2f38bb785959d2140bcd673ba3e719e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 get (@Vector.cons R n a b) \u2b1d\u1d65 get (@Vector.cons R n c d) = a * c + b.get \u2b1d\u1d65 d.get",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MlPoly/Basic.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "0b130441f5f701e5a66c7ea21017b90a9a056179c61123930a2fc76dd65a0c4a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 121,
        "start_column": 18,
        "end_line": 121,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (a : R), @HSMul.hSMul R (@MlPoly R n) (@MlPoly R n) instHSMul a 0 = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MlPoly/Basic.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "ad9d22e40e0f0a2ecdb98bdf25b98d5fa558dccc28789bcd50001cb13173b5d7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : max n l.length = max n' l'.length\n\u22a2 l ++ replicate (n - l.length + (m - max n' l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - max n' l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/Math/Basic.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "80ac5a733074574b66de47898d5c5e78bfd47db80b0d9da8777e956647db3be7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 203,
        "start_column": 5,
        "end_line": 203,
        "end_column": 10
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (@fun x => @List.matchSize_eq_iff_forall_eq.match_1 \u03b1 (fun x => Prop) x fun x y => x = y)\n      (@List.matchSize \u03b1 l\u2081 l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/Math/Basic.lean#L203"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "7cfac3f0f2671f305aff7bed6be5361738ceac16654d93581eb8ee27ba26a3ab"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp (@Array.getLast \u03b1 (popWhile p as) h) = true",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/Math/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "55dcf363a3330cf8a99e5717850762af2cc880e0ee4bbb4aec1e4423d340f459"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 460,
        "start_column": 4,
        "end_line": 460,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, @List.findSum \u2115 Nat.instAddMonoid Nat.instPreorder Nat.decLt (a :: l') j = some n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/Math/Basic.lean#L460"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "bd31d53ea2bb870751099f0c720d2d3939338b3700f47f0baf7f09a36d8ee456"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 472,
        "start_column": 80,
        "end_line": 472,
        "end_column": 85
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 @List.findSumIdx \u2115 Nat.instAddMonoid Nat.instPreorder Nat.decLt l \u2191j < l.length",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/Math/Basic.lean#L472"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "32179d0605ef13afe2d765bb782911371935af96197d8f8db5f1e3501d07df25"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : MvPolynomial \u03c3 R\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "67993f8de149c1908fa3a2fb00d9282023762a0aa0fb8989e5b292193c0a32a7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : MvPolynomial (Fin n) R\n\u22a2 ((@MvPolynomial.sumExceptFirst' R inst\u271d n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "9416ca16b9a72d135b7abe4c866e5d6d3254effe5520f21e21e1716c1805a627"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : MvPolynomial \u03c3 R\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191{x \u2208 p.vars.pi S | (eval (@MvPolynomial.Function.extendDomain \u03c3 R inst\u271d\u2074 MulZeroClass.toZero p.vars x)) p = 0}.card /\n      \u220f i \u2208 p.vars, \u2191(S i).card \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(S i).card",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "db991dd48abf282bc1a34c20bc47db4c9ce8a20cfec3d66f66e8a00e1ab15726"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : MvPolynomial \u03c3 R\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < (S i).card\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "bffcac673226eb55bd95762d8b99329b7713cc3ff09ee8d62a8e0319322416cb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : @UniPoly Q\ni : \u2115\nhi : i < Array.size (@UniPoly.add_raw Q inst\u271d p q)\n\u22a2 (p ++ Array.replicate (Array.size q - Array.size p) 0)[i] +\n      (q ++ Array.replicate (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "826d969e0de0c6988740821cd7d7e0ce77d64075b0d695cde088c7bf904cbbbe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : @UniPoly Q\nhpq : p ++ Array.replicate (Array.size q - Array.size p) 0 = q ++ Array.replicate (Array.size p - Array.size q) 0\nhqr : q ++ Array.replicate (Array.size r - Array.size q) 0 = r ++ Array.replicate (Array.size q - Array.size r) 0\n\u22a2 p ++ Array.replicate (Array.size r - Array.size p) 0 = r ++ Array.replicate (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "4dc82dd464839367010a3f97e8fa48ab7ade7fffbb8aa62d61db366ffe2013ab"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (a.2.2.1, (P.toProverOut.1 a.2.1).1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction\n        (pure\n          (default,\n            P.input\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                witIn),\n            stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a =>\n        (TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (stmtIn, (P.toProverOut.1 a.2).1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (witIn, (P.toProverOut.1 a.2).2),\n          a.1)) <$>\n      Fin.induction\n        (pure\n          (default,\n            P.input\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "6130caf75422b2af177ebb4c4aa51f8d91de66e3a212ddb007b0b6ed40445c81"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190\n        Prover.run\n            (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              stmtIn)\n            (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n              (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n            R.prover\n      (fun a_1 =>\n            ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                  (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                  (stmtIn, a.1),\n                TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                  (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                  (witIn, a.2.1)),\n              a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a =>\n                        TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                            WitOut' data)\n                          (stmtIn, a)) <$>\n                      R.verifier.verify\n                        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                            WitOut' data)\n                          stmtIn)\n                        transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190\n      Prover.run\n          (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            stmtIn)\n          (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n          R.prover\n    (fun a_1 =>\n          ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (stmtIn, a.1),\n              TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (witIn, a.2.1)),\n            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              (stmtIn, a_1),\n            a.2.2)) <$>\n        (Verifier.run\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              a.2.2 R.verifier).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "b5ccb4cfbfac947c982b7cda8373121f52829714f73bd0000abe7b1c1e5f37b4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190\n        Prover.runWithLog stmtIn witIn\n            (Prover.transport n pSpec \u03b9 oSpec StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a =>\n                            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                                WitOut' data)\n                              (stmtIn, a)) <$>\n                          R.verifier.verify\n                            (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                                WitOut' data)\n                              stmtIn)\n                            transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190\n      Prover.runWithLog\n          (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            stmtIn)\n          (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n          R.prover\n    (fun a_1 =>\n          ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (stmtIn, a.1),\n              TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (witIn, a.2.1)),\n            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              (stmtIn, a_1.1),\n            a.2.2.1, a.2.2.2, a_1.2)) <$>\n        (simulateQ loggingOracle\n                (Verifier.run\n                  (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                    (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n                      data)\n                    stmtIn)\n                  a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "951b50df55918e9c9c1d2cac54e0a53752cbf1eadd4cb826d9fc300b9588a373"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : NNReal\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227\n          prvStmtOut =\n            stmtOut|run\n        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          stmtIn)\n        (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n          (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          witIn)\n        R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d :\n  x\u271d \u2208\n    (run\n        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          stmtIn)\n        (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n          (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          witIn)\n        R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n              (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n                relIn' relOut relOut' data))\n            (stmtIn, a.1.1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n              (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n                relIn' relOut relOut' data))\n            (witIn, a.1.2)),\n        TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          (stmtIn, a.2.1),\n        a.2.2))\n    x\u271d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "51cb2b78b7186e0fa5509ffb46f9ffdca278cdca30a5c596b8bc558a696edee6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : NNReal\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn\n        { prover := WitOut,\n          verifier :=\n            Verifier.transport n pSpec \u03b9 oSpec StmtIn StmtOut StmtIn' StmtOut'\n              (TransportDataSound.toTransportStatement StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\n                data)\n              V }] \u2264\n    \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "723d7b604f5d20067d0e731398c416be5dd48e2c15363facb1c3975413cfc6fb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : NNReal\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover,\n              verifier :=\n                Verifier.transport n pSpec \u03b9 oSpec StmtIn StmtOut StmtIn' StmtOut'\n                  (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n                    (TransportDataKnowledgeSound.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                      WitOut' relIn relIn' relOut relOut' data))\n                  V }] \u2264\n        \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "50d3fde481c405b0867b930e257d866ef99ce45ee0067aa837de746a420c326f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : Polynomial \u2124\nt : \u2124\nf : Polynomial \u2124\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "86176986f2d305f19e07ebab522de5fe4b9ea4325f42cad45bda127755ad4da3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 390,
        "start_column": 2,
        "end_line": 390,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ninst\u271d\u00b9 : oSpec.FiniteRange\ninst\u271d : (i : pSpec.ChallengeIdx) \u2192 VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : NNReal\nhLt : knowledgeError < 1\nextractor :\n  @Reduction.StraightlineExtractor n pSpec (\u03b9 \u2295 { i // (pSpec i).1 = Direction.V_to_P }) (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    StmtIn WitIn StmtOut WitOut\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (@extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Security/Basic.lean#L390"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "b51af0267150754d3ac6a26f332ad6c45ab3a39f7f2058235b6074c76dfc6564"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 404,
        "start_column": 2,
        "end_line": 404,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIdx) \u2192 OracleInterface (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIdx) \u2192 OracleInterface (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (Prover.append m n pSpec\u2081 pSpec\u2082 \u03b9 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 P\u2081 P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    @Prover.append_run.match_1 m pSpec\u2081 Stmt\u2082 Wit\u2082\n        (fun __discr =>\n          OracleComp (oSpec ++\u2092 [(pSpec\u2081 ++\u209a pSpec\u2082).Challenge]\u2092) (Stmt\u2083 \u00d7 Wit\u2083 \u00d7 (pSpec\u2081 ++\u209a pSpec\u2082).FullTranscript))\n        __discr fun stmt\u2082 wit\u2082 transcript\u2081 => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        @Prover.append_run.match_1 n pSpec\u2082 Stmt\u2083 Wit\u2083\n            (fun __discr =>\n              OracleComp (oSpec ++\u2092 [(pSpec\u2081 ++\u209a pSpec\u2082).Challenge]\u2092)\n                (Stmt\u2083 \u00d7 Wit\u2083 \u00d7 (pSpec\u2081 ++\u209a pSpec\u2082).FullTranscript))\n            __discr fun stmt\u2083 wit\u2083 transcript\u2082 => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "290351317b20a59c93205eaa9d7604fb2a844c6a7b2371954e0ded1cc4f34824"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 434,
        "start_column": 89,
        "end_line": 434,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIdx) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIdx) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : NNReal\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (Reduction.append m n pSpec\u2081 pSpec\u2082 \u03b9 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 R\u2081 R\u2082)\n    (completenessError\u2081 + completenessError\u2082)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L434"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "11cae8414efbea9f06dba5a2a0378b479ea808658d4b398dc61a8d79e88c3939"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 464,
        "start_column": 27,
        "end_line": 464,
        "end_column": 32
      },
      "debug_info": {
        "goal": "case h.e'_6.h.h.h.h.e'_2.h.h.e\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nn : Fin (0 + 1) \u2192 \u2115\npSpec : (i : Fin (0 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (0 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (0 + 2) \u2192 Type\nrel : (i : Fin (0 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (0 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (0 + 1) \u2192 NNReal\nh : \u2200 (i : Fin 1), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\ne_1\u271d\u00b9 : \u2211 i, n i = n 0\nhe\u271d : compose 0 n pSpec = pSpec 0\nx\u271d : { i // (compose 0 n pSpec i).1 = Direction.V_to_P }\ne_1\u271d : (compose 0 n pSpec \u2191x\u271d).2 = (pSpec 0 \u2191x\u271d).2\n\u22a2 instSampleableChallengeCompose 0 n pSpec inst\u271d = inst\u271d 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "7922b41868df51909abce9b0cbd0e27df32cb8a5bcf86520856648e2cdac33f9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 466,
        "start_column": 4,
        "end_line": 466,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\ninst\u271d\u00b2 : oSpec.DecidableEq\ninst\u271d\u00b9 : oSpec.FiniteRange\nm : \u2115\nih :\n  \u2200 {n : Fin (m + 1) \u2192 \u2115} {pSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)}\n    [inst : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)]\n    {Stmt Wit : Fin (m + 2) \u2192 Type} {rel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop}\n    (R : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ))\n    (completenessError : Fin (m + 1) \u2192 NNReal),\n    (\u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)) \u2192\n      completeness (rel 0) (rel (Fin.last (m + 1))) (Reduction.compose \u03b9 oSpec m n pSpec Stmt Wit R)\n        (\u2211 i, completenessError i)\nn : Fin (m + 1 + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1 + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d : (i : Fin (m + 1 + 1)) \u2192 (j : (pSpec i).ChallengeIdx) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 1 + 2) \u2192 Type\nrel : (i : Fin (m + 1 + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\nR : (i : Fin (m + 1 + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1 + 1) \u2192 NNReal\nh : \u2200 (i : Fin (m + 1 + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1 + 1))) (Reduction.compose \u03b9 oSpec (m + 1) n pSpec Stmt Wit R)\n    (\u2211 i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L466"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "430c9cd54bcbfae8297a59863091035849eb5e7f8c55009143d7a3b03859a977"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/ProtocolSpec.lean",
        "start_line": 354,
        "start_column": 2,
        "end_line": 354,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\nT : (i : Fin (m + 1)) \u2192 (pSpec i).FullTranscript\ni : Fin m\n\u22a2 @Fin.dfoldl (\u2191i + 1)\n      (fun i_1 =>\n        FullTranscript\n          (ProtocolSpec.compose (\u2191i_1)\n            (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef n))\n            (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef pSpec))))\n      (fun i_1 acc =>\n        @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n          (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)) +\n            n (Fin.castLE \u22ef i_1.succ))\n          (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1) i_2)))\n          (ProtocolSpec.append\n            (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)))\n            (n (Fin.castLE \u22ef i_1.succ))\n            (ProtocolSpec.compose (\u2191i_1)\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef n))\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n            (pSpec (Fin.castLE \u22ef i_1.succ)))\n          (ProtocolSpec.compose (\u2191i_1 + 1)\n            (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef n))\n            (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i + 1) i_1)\n              (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n          (ProtocolSpec.FullTranscript.compose._proof_41 (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n) i_1)\n          (ProtocolSpec.FullTranscript.compose._proof_44 (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n)\n            (Fin.take (\u2191i + 1 + 1) \u22ef pSpec) i_1)\n          (ProtocolSpec.FullTranscript.append\n            (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1) i_2)))\n            (n (Fin.castLE \u22ef i_1.succ))\n            (ProtocolSpec.compose (\u2191i_1)\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef n))\n              (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i + 1) i_1)\n                (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)))\n            (pSpec (Fin.castLE \u22ef i_1.succ)) acc (T (Fin.castLE \u22ef i_1.succ))))\n      (T (Fin.castLE \u22ef 0)) =\n    @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n      (\u2211 i_1, n (Fin.castLE \u22ef i_1) + n i.succ) (\u2211 i_1, n (Fin.castLE \u22ef i_1))\n      (ProtocolSpec.append (\u2211 i_1, n (Fin.castLE \u22ef i_1)) (n i.succ)\n        (ProtocolSpec.compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)) (pSpec i.succ))\n      (ProtocolSpec.compose (\u2191i + 1) (Fin.take (\u2191i + 1 + 1) \u22ef n) (Fin.take (\u2191i + 1 + 1) \u22ef pSpec)) \u22ef \u22ef\n      (ProtocolSpec.FullTranscript.append (\u2211 i_1, n (Fin.castLE \u22ef i_1)) (n i.succ)\n        (ProtocolSpec.compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)) (pSpec i.succ)\n        (@Fin.dfoldl (\u2191i)\n          (fun i_1 =>\n            FullTranscript\n              (ProtocolSpec.compose (\u2191i_1)\n                (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef pSpec))))\n          (fun i_1 acc =>\n            @dcast\u2082 \u2115 ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast\u2082\n              (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)) +\n                n (Fin.castLE \u22ef i_1.succ))\n              (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1) i_2)))\n              (ProtocolSpec.append\n                (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)))\n                (n (Fin.castLE \u22ef i_1.succ))\n                (ProtocolSpec.compose (\u2191i_1)\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1)\n                    (Fin.take (\u2191i + 1) \u22ef pSpec)))\n                (pSpec (Fin.castLE \u22ef i_1.succ)))\n              (ProtocolSpec.compose (\u2191i_1 + 1)\n                (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef n))\n                (Fin.take (\u2191i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (\u2191i) i_1)\n                  (Fin.take (\u2191i + 1) \u22ef pSpec)))\n              (ProtocolSpec.FullTranscript.compose._proof_41 (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) i_1)\n              (ProtocolSpec.FullTranscript.compose._proof_44 (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec)\n                i_1)\n              (ProtocolSpec.FullTranscript.append\n                (\u2211 i_2, n (Fin.castLE \u22ef (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) i_2)))\n                (n (Fin.castLE \u22ef i_1.succ))\n                (ProtocolSpec.compose (\u2191i_1)\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1) (Fin.take (\u2191i + 1) \u22ef n))\n                  (Fin.take (\u2191i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (\u2191i) i_1)\n                    (Fin.take (\u2191i + 1) \u22ef pSpec)))\n                (pSpec (Fin.castLE \u22ef i_1.succ)) acc (T (Fin.castLE \u22ef i_1.succ))))\n          (T (Fin.castLE \u22ef 0)))\n        (T i.succ))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/OracleReduction/Composition/Sequential/ProtocolSpec.lean#L354"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-25T11:02:32+07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "304a3c56d3bf3bc3d6b26c98dabd3cb1aaf6064c2010a439913fae2b1ef99cfb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 492,
        "start_column": 2,
        "end_line": 492,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Sumcheck.Spec.Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b9 n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5(degreeLE R \u2191deg)), (Direction.V_to_P, R)]\nx : getType (Sumcheck.Spec.pSpec R inst\u271d\u00b9 deg) 0\nhp_i : \u2191(transcript 0) \u2208 degreeLE R \u2191deg\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (List.mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = Sumcheck.Spec.Statement.target R n i.castSucc stmt.1 then pure () else failure\n                    (fun a =>\n                          Sumcheck.Spec.Statement.mk R n i.succ a\n                            (Fin.snoc (Sumcheck.Spec.Statement.challenges R n i.castSucc stmt.1) (transcript 1))) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a =>\n            (a, fun i_1 =>\n              @Prod.snd (Sumcheck.Spec.Statement R n i.castSucc)\n                ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b9 n deg i) stmt i_1)) <$>\n          a.getM) =\n    (fun a =>\n        (Sumcheck.Spec.Statement.mk R n i.succ (Polynomial.eval (transcript 1) \u2191(transcript 0))\n            (Fin.snoc (Sumcheck.Spec.Statement.challenges R n i.castSucc stmt.1) (transcript 1)),\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = Sumcheck.Spec.Statement.target R n i.castSucc stmt.1 then pure ()\n      else failure",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/ProofSystem/Sumcheck/Basic.lean#L492"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "c24e149cf25b60efee9d926decfaecf19d669c10fd4ac889c55412f9affa64a8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 510,
        "start_column": 57,
        "end_line": 510,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast (Sumcheck.Spec.relation._proof_12 n i.castSucc)))\n        \u2191(@oStmt 0) =\n    target\n\u22a2 ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                verifier :=\n                  Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.sendMessage\n        \u27e80, \u22ef\u27e9\n        ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                        i }.toReduction.prover.toProverIn.input\n          (Sumcheck.Spec.Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i)) Unit\n          ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.PrvState\n            0)\n          (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt) witIn\u271d)).neverFails \u2227\n    \u2200 (a : Polynomial R) (b : a \u2208 degreeLE R \u2191deg)\n      (b_1 :\n        { prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                  verifier :=\n                    Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2 i }.toReduction.prover.PrvState\n          1),\n      (\u27e8a, b\u27e9, b_1) \u2208\n          ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                      verifier :=\n                        Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                          i }.toReduction.prover.sendMessage\n              \u27e80, \u22ef\u27e9\n              ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                          verifier :=\n                            Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                              i }.toReduction.prover.toProverIn.input\n                (Sumcheck.Spec.Statement R n i.castSucc \u00d7\n                  ((i : Fin 1) \u2192 Sumcheck.Spec.OracleStatement R inst\u271d\u00b3 n deg i))\n                Unit\n                ({ prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                          verifier :=\n                            Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                              i }.toReduction.prover.PrvState\n                  0)\n                (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt) witIn\u271d)).support \u2192\n        \u2200 (x : R),\n          (Verifier.run (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt)\n              (Transcript.snoc 2 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg) 1 x\n                (Transcript.snoc 2 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg) 0 \u27e8a, b\u27e9\n                  (@default (Transcript 0 (Sumcheck.Spec.pSpec R inst\u271d\u00b3 deg)) Unique.instInhabited)))\n              { prover := Sumcheck.Spec.prover R inst\u271d\u00b3 n deg m D \u03b9 oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst\u271d\u00b3 n deg m D \u03b9 oSpec inst\u271d\u00b2\n                        i }.toReduction.verifier).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/ProofSystem/Sumcheck/Basic.lean#L510"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "6793ac308d8cf16f2d6c0da0b6ec748563071d8eb0731eea86125927729f264f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "fea727e5e53481e05fb04eeb7f1a2e4e1238802f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 643,
        "start_column": 42,
        "end_line": 643,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (Sumcheck.Spec.Combined.relIn R inst\u271d\u00b9 n deg m D)\n    (Sumcheck.Spec.Combined.relOut R inst\u271d\u00b9 n deg) (Sumcheck.Spec.Combined.reduction R inst\u271d\u00b9 n deg)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/fea727e5e53481e05fb04eeb7f1a2e4e1238802f/ArkLib/ProofSystem/Sumcheck/Basic.lean#L643"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-27T07:05:55.638621+00:00"
      },
      "id": "ef30e06ce18f031d62ce934f1024e51a81f1911d8f2a9644d6f58a473b9381ac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/OneTimePad.lean",
        "start_line": 36,
        "start_column": 2,
        "end_line": 36,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : \u2115\nthis : \u2200 (m \u03c3 : BitVec n), {x | \u03c3 = x ^^^ m} = {\u03c3 ^^^ m}\n\u22a2 (oneTimePad n).OneTimeUniformCiphers",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/OneTimePad.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-06T08:17:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "40141c69b50bcaf588ae726e748bcf5d439218d2929fc57d821fd2cfda75bcb8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/OneTimePad.lean",
        "start_line": 35,
        "start_column": 73,
        "end_line": 35,
        "end_column": 78
      },
      "debug_info": {
        "goal": "n : \u2115\n\u22a2 \u2200 (m \u03c3 : BitVec n), {x | \u03c3 = x ^^^ m} = {\u03c3 ^^^ m}",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/OneTimePad.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "b0064ce11301249cb79e5a96498176ea5c8f5550f72812106d3f08f90b505f39"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 432,
        "start_column": 2,
        "end_line": 432,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : (uniformRegevAsymmEnc n m p \u03c7 he).IND_CPA_Adv\n\u22a2 |[=true|(regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).exec do\n              let b \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).lift_probComp ($\u1d57Bool)\n              let __discr \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).keygen\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal -\n        [=false|(regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).exec do\n              let b \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).lift_probComp ($\u1d57Bool)\n              let __discr \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).keygen\n              match __discr with\n                | (pk, snd) => do\n                  let __discr \u2190 adv.chooseMessages pk\n                  match __discr with\n                    | (m\u2081, m\u2082, state) =>\n                      let m_1 := if b = true then m\u2081 else m\u2082;\n                      do\n                      let c \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt pk m_1\n                      let b' \u2190 adv.distinguish state c\n                      pure (decide (b = b'))].toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              match __discr with\n                | (m\u2081, m\u2082, st) =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt (A, u) m\u2082\n                    __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              match __discr with\n                | (m\u2081, m\u2082, st) =>\n                  let __do_jp := fun c => do\n                    let b' \u2190 adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt (A, u) m\u2081\n                    __do_jp y\n                  else do\n                    let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt (A, u) m\u2082\n                    __do_jp y].toReal| +\n      |[=true|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        match __discr with\n                          | (m\u2081, m\u2082, st) =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt Au m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt Au m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp \u03c7 \u22ef)\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) \u00d7 Vector (Fin p) m \u2192 ProbComp Bool := fun distr => do\n                let b' \u2190\n                  (fun Au => do\n                        let b \u2190 $\u1d57Bool\n                        let __discr \u2190 adv.chooseMessages Au\n                        match __discr with\n                          | (m\u2081, m\u2082, st) =>\n                            let __do_jp := fun c => do\n                              let b' \u2190 adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt Au m\u2081\n                              __do_jp y\n                            else do\n                              let y \u2190 (regevAsymmEnc n m p (uniformErrSamp \u03c7 \u22ef)).encrypt Au m\u2082\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y \u2190 LWE_Distr n m p (uniformErrSamp \u03c7 \u22ef)\n                  __do_jp y\n                else do\n                  let y \u2190 LWE_Uniform_Distr n m p\n                  __do_jp y].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/Regev.lean#L432"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "cb6bb8cef7c557c8e1b9df6d3ccfab038ddabdc36f482c13b3b45290c88f69b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 493,
        "start_column": 2,
        "end_line": 493,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\nhp2 : p.AtLeastTwo\ninst\u271d : NeZero m\n\u03c7 : \u2115\nhe : p > 4 * (\u03c7 * m + 1)\nadv : (uniformRegevAsymmEnc n m p \u03c7 he).IND_CPA_Adv\n\u22a2 |(2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=true|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal -\n        (2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get + if __discr.1 = true then 0 else \u2191(p / 2))] +\n            2\u207b\u00b9 *\n              [=false|do\n                let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n                let u \u2190 $\u1d57Vector (Fin p) m\n                let __discr \u2190 adv.chooseMessages (A, u)\n                let a \u2190 $\u1d57Vector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) a).get),\n                        u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) a).get +\n                          if __discr.2.1 = true then 0 else \u2191(p / 2))]).toReal| \u2264\n    |[=true|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal -\n          [=false|do\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              let c\u2081 \u2190 $\u1d57Vector (Fin p) n\n              let c\u2082 \u2190 $\u1d57Fin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c\u2081, c\u2082)].toReal| +\n      |[=true|do\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let r2 \u2190 $\u1d57Vector (Fin 2) m\n              let b \u2190 $\u1d57Bool\n              let A_1 \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u_1 \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A_1, u_1)\n              (fun a => decide (b = a)) <$>\n                  adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE \u22ef) r2).get),\n                      u.get \u2b1d\u1d65 (Vector.map (Fin.castLE \u22ef) r2).get)].toReal -\n          [=true|do\n              let x \u2190 $\u1d57Vector (Fin p) n\n              let y \u2190 $\u1d57Fin p\n              let b \u2190 $\u1d57Bool\n              let A \u2190 $\u1d57Matrix (Fin n) (Fin m) (Fin p)\n              let u \u2190 $\u1d57Vector (Fin p) m\n              let __discr \u2190 adv.chooseMessages (A, u)\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (x, y)].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/Regev.lean#L493"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "c367405be8e308e25b07e8d918d7db5f991bd7b531c948e41879df5213381735"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6ba3c20d2e53e2012f378e7ad10453532f041ccb08be37c98021fc8d77f70b29"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "7016aca2232422e6303fba2cd4fdf1c18182245bec17b4e3aaee1ba20bc8a3a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6c0ad4855367097a6ecd0242388d05073605f4230745e68f05ed87bd82bae9e8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 90,
        "start_column": 4,
        "end_line": 90,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng\u2081 : G\n\u22a2 [fun x =>\n      x.1 =\n        true|(simulateQ ((elgamalAsymmEnc G P).IND_CPA_queryImpl' (x, g\u2081 +\u1d65 x) true) (adversary (x, g\u2081 +\u1d65 x))).run \u2205] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let b' \u2190\n        simulateQ (idOracle unifSpec ++\u209b\u2092 QueryImpl.ofFn fun x_1 => pure (c +\u1d65 x, x_1.1 * (c +\u1d65 g\u2081 +\u1d65 x)))\n            (adversary (x, g\u2081 +\u1d65 x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/HHS_Elgamal.lean#L90"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "5207334ea127e72fbba9493656cbaab04217c144d5a28aaca33cfedeed83f508"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst\u271d\u2076 : SelectableType G\ninst\u271d\u2075 : SelectableType P\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Group P\ninst\u271d\u00b2 : AddTorsor G P\ninst\u271d\u00b9 : DecidableEq G\ninst\u271d : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng\u2081 : G\n\u22a2 [fun x =>\n      x.1 = false|(simulateQ\n            ({ impl := fun {\u03b1} q => liftM (liftM q) } ++\u209b\u2092\n              {\n                  impl := fun {\u03b1} x_1 =>\n                    match \u03b1, x_1 with\n                    | .((P \u00d7 P \u2192\u2092 P \u00d7 P).range ()), query PUnit.unit (m\u2081, m\u2082) =>\n                      (fun a => (a +\u1d65 x, m\u2082 * (a +\u1d65 g\u2081 +\u1d65 x))) <$> ($\u1d57G) }.withCaching)\n            (adversary (x, g\u2081 +\u1d65 x))).run\n        \u2205] =\n    [=()|do\n      let c \u2190 $\u1d57G\n      let y \u2190 $\u1d57P\n      let b' \u2190\n        simulateQ (idOracle unifSpec ++\u209b\u2092 QueryImpl.ofFn fun x_1 => pure (c +\u1d65 x, x_1.1 * y)) (adversary (x, g\u2081 +\u1d65 x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "e54ae9cef69ace4b7c561d5025fb371aae8a33f8a6b55eccad246b6db54cf0e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "df009a51ea4c60974fd041477513bf8237c51113d870816a9ab066fcc97d3619"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "bfbd462400ae827743451fe17e54d12d4e5f520f9c4c35d235dbe31ee0594584"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "038744c370b04caf7058d6e0f202fdba361c83925993127b2163e041065f9996"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "7a509562660d66531f047d039839f6787adcc1d8ba450a82cf1eab5f35dbf66e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork qb js i cf).support\n\u22a2 cf x\u2081 = cf x\u2082",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "2464950c7bb1454f6f8880b62204f5fef6cf19689abca7e02a7181486ac8feef"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "ec73e6f45939a9e30ada77a354d35fd4bcf065b146abf8f938fb6e9a74610b76"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "fc3476cdf27d888e95cd9eeda1acc879fab712974e7ffc8b8259c1aa76d1222f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "429425517f880599b21c84117b838644e71a7dfad1c3dc7debb7b4e04be52b76"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] =\n    [=(some s, some s)|do\n      let shared_seed \u2190 liftM (generateSeed spec (update qb i \u2191s) js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n      let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "4e244fc84869d0e35434be5d3c28eb09a77578bd6f51fd05f5cab1219b7192b0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed \u2208 (liftM (generateSeed spec qb js)).support\n\u22a2 \u2191(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "7d8349c80c833a53270ba8a0c0c7756f678327f8230cceaed54f0589541cf828"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 \u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h \u2264\n    \u2211 s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "009535090ecdb1a1938879ecdd03b26d4593c2e631da1219af4ec6b798ccce00"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h) =\n    1 - \u2211 s, [=some s|cf <$> main] ^ 2 + \u2211 s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "b443b9f1921f990818cd4d5679908ab6b5277725be06793a0e3373c4681931a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 acc * h\u207b\u00b9 + (1 - acc ^ 2 * (\u2191q)\u207b\u00b9) = 1 - (acc ^ 2 * (\u2191q)\u207b\u00b9 - acc * h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "556e116e7fb6debda8ae0daa74212c17d27af2eb090e7674cfcaf17063b5914c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 84,
        "start_column": 2,
        "end_line": 84,
        "end_column": 7
      },
      "debug_info": {
        "goal": "M K C : Type\ninst\u271d\u00b2 : SelectableType C\ninst\u271d\u00b9 : Fintype C\ninst\u271d : Inhabited C\nencAlg : SymmEncAlg ProbComp M K C\nh :\n  (QueryImpl.ofFn fun m => do\n      let __do_lift \u2190 encAlg.keygen\n      encAlg.encrypt __do_lift m) \u2243\u209b\u2092\n    QueryImpl.ofFn fun x => $\u1d57C\n\u22a2 (QueryImpl.ofFn fun ms => do\n      let __do_lift \u2190 encAlg.keygen\n      encAlg.encrypt __do_lift ms.1) \u2243\u209b\u2092\n    QueryImpl.ofFn fun ms => do\n      let __do_lift \u2190 encAlg.keygen\n      encAlg.encrypt __do_lift ms.2",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/SymmEncAlg.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "b3b250e7bf9385c105bf26376b038d15fc28a5473b7d070ebedcf12e00479d35"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 115,
        "start_column": 2,
        "end_line": 115,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Correct\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/SymmEncAlg.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "4ba34cc5bc4b644f86ba59d7751c299ebcd45a4eed6284801f1e8588771a750a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := { impl := fun {\u03b1} q => liftM ((idOracle unifSpec).impl q) } ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "1d2d5d0835ede201d9442761d9905fbecce90bd492cdee336f46a1e8a0d34b3c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean",
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : \u2115\ninst\u271d : NeZero p\nerrSamp : ProbComp (Fin p)\nadv : LWE_Adversary n m p\n\u22a2 |[=true|do\n              let y \u2190 LWE_Distr n m p errSamp\n              adv y].toReal +\n          [=true|do\n              let y \u2190 LWE_Uniform_Distr n m p\n              (fun a => !a) <$> adv y].toReal -\n        ([=true|do\n              let a \u2190 LWE_Distr n m p errSamp\n              not <$> adv a].toReal +\n          [=true|do\n              let a \u2190 LWE_Uniform_Distr n m p\n              adv a].toReal)| =\n    |[=true|do\n            let y \u2190 LWE_Distr n m p errSamp\n            adv y].toReal -\n        [=true|do\n            let a \u2190 LWE_Uniform_Distr n m p\n            adv a].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "0d2623954da1769d8be00ef06c7d7550d6bc4c3f707c8b27f9f2d484a89a1610"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Asymptotics/PolyTimeOC.lean",
        "start_line": 124,
        "start_column": 2,
        "end_line": 124,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03b1 : Type\n\u22a2 IsComputableInPolyTime id",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/CryptoFoundations/Asymptotics/PolyTimeOC.lean#L124"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "619602315f11ebd1056a7130d668bf889d243f944c72c2ee4119c28cbb3d78a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      let x \u2190 (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "1c1d6254145b149c697f216cb95b6e29815e33cd7efb61cbafef187addd8d99e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "1eed6a9f7b1391fd6c2bf7160d633cdc534f5b109ad683cd2802529366c764e4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "03c08959af5935d899a235846f9186181c5bec7c059f25067f83ed2080df8c6a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "827253760606e8a8b6a6723e954614f5bd3f6c0a89bd2ab8578a3b0bde8569c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6ceff0f784cc29485189a0ace8b41d69577e984c328dd41a5b7b23108324e9f7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 410,
        "start_column": 4,
        "end_line": 410,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm : \u2115\ninst\u271d : SelectableType \u03b1\nx y : Matrix (Fin 0) (Fin m) \u03b1\n\u22a2 (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/UniformSelect.lean#L410"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "b3e561ed5d666cb4b9887dca774aad2c4ad9d585cf7d7dae527664efdef9bcce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  \u2200 (x y : Matrix (Fin m) (Fin m\u271d) \u03b1),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m\u271d) \u03b1\n\u22a2 [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "146b7107419cef61607514115a8700c342fbe461710912b2dbc572ebe9c7af32"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 417,
        "start_column": 4,
        "end_line": 417,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  [\u22a5|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n\u22a2 Vector \u03b1 m\u271d \u2192\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          Fin.cons top.get <$> ihn)\n        m)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/UniformSelect.lean#L417"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "41db34b3d9b2b821b234570efc31dac7a838c6239c2a07a33d585efdef6a8192"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "8a99bd81780b12b71e6ba2ecfe0d2417dc6290136afa68a96d8e50400713ce0c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d : DecidableEq spec.QuerySeed\n\u22a2 finSupport (generateSeed spec qc js) \u2260 \u2205",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "30f38f18d205a6359aa954cd6541ea7ef7a830a358dfedb5923bf50a9ec9abeb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "84ae24acbfe5d8e5df8bcc29621c8d4954f3bf7f0a0ce962ab1021997e61a013"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed \u2208 support (generateSeed spec qc js)\n\u22a2 [=seed|generateSeed spec qc js] = (\u2191(finSupport (generateSeed spec qc js)).card)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "cba45e89f3bdce2ab191c056fc36ce509342e3bfd92daa900d300e0d704dfa09"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nr : \u211d\u22650\u221e\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x] / r\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "66dce363f6607205651ad23df0c59b888e55d34f8bec58775232aa7924d458a0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 83,
        "end_line": 727,
        "end_column": 88
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "3df933b2a6c4b159afdd7c33b092341a9dacea9bc4b3801a5cc2a43fd05a268e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 733,
        "start_column": 73,
        "end_line": 733,
        "end_column": 78
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L733"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "bbcd9bee655439588389ef1dac8f541c6fbe4c2f2668100803c942d09458c9fb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 738,
        "start_column": 69,
        "end_line": 738,
        "end_column": 74
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L738"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "2fcc43049f60e18f342c03245dbea097f68877242e70361badbc016856683cd3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 742,
        "start_column": 59,
        "end_line": 742,
        "end_column": 64
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L742"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "092f02da75be70b38a5f82f4eed32a082f04b090813c4bfc69301fc256d12939"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 938,
        "start_column": 2,
        "end_line": 938,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L938"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "c23e45f48f15c8193c4ce8e586ced416ae2f8d8059c738b383968fd8b6920df0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 946,
        "start_column": 2,
        "end_line": 946,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L946"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "945b3d96f4bda8b81ea3c2626393ce39c8aacecdd3ae9a72d39126731193ddb6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 978,
        "start_column": 2,
        "end_line": 978,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\n\u03b1 : Type\noa : OracleComp spec \u03b1\nh : oa.neverFails\np : \u03b1 \u2192 Prop\ninst\u271d : DecidablePred p\n\u22a2 (\u2211' (x : \u03b1), if p x then [=x|oa] else 0) = 1 - \u2211' (x : \u03b1), if p x then 0 else [=x|oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L978"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "5ff371b939ddc711855c86898f82c85a2b0893ed2b3c41bf69432fffc3105a08"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Append.lean",
        "start_line": 113,
        "start_column": 2,
        "end_line": 113,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9\u2081 : Type u_1\n\u03b9\u2082 : Type u_2\n\u03b9\u2083 : Type u_3\nspec\u2081 : OracleSpec \u03b9\u2081\nspec\u2082 : OracleSpec \u03b9\u2082\nspec\u2083 : OracleSpec \u03b9\u2083\n\u03b1 : Type u\nm : Type u \u2192 Type u_4\ninst\u271d : AlternativeMonad m\nso : QueryImpl spec\u2081 m\nso' : QueryImpl spec\u2082 m\nso'' : QueryImpl spec\u2083 m\noa : OracleComp (spec\u2081 ++\u2092 spec\u2082) \u03b1\n\u22a2 simulateQ (so ++\u209b\u2092 (so' ++\u209b\u2092 so'')) (oa.liftComp (spec\u2081 ++\u2092 (spec\u2082 ++\u2092 spec\u2083))) = simulateQ (so ++\u209b\u2092 so') oa",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Append.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-11T18:03:03-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "d24577ae55b81f6fcbdf1f01bb6df6f076c8b5c835f53543667182e5c9a19ce1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 87,
        "start_column": 2,
        "end_line": 87,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\n\u22a2 impl\u2081 \u2243\u209b\u2092 impl\u2082 \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=false|simulateR impl\u2081 adv] = [=false|simulateR impl\u2082 adv] \u2227 [\u22a5|simulateR impl\u2081 adv] = [\u22a5|simulateR impl\u2082 adv]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L87"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "e86e95d4acebb5537e62ad2460eff69e275feb8710274556b2987346f9df1718"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\n\u22a2 impl\u2081 \u2243\u209b\u2092 impl\u2082 \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=true|simulateR impl\u2081 adv] = [=true|simulateR impl\u2082 adv] \u2227\n        [=false|simulateR impl\u2081 adv] = [=false|simulateR impl\u2082 adv] \u2227 [\u22a5|simulateR impl\u2081 adv] = [\u22a5|simulateR impl\u2082 adv]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T13:19:21-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "cbfa4c8b697ae9d5aa303deae358ba22981234680dba2ffa94266ad5186e9443"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\n\u22a2 impl\u2081 \u2243\u209b\u2092 impl\u2082 \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=true = true|do\n          let b \u2190 $\u1d57Bool\n          let b' \u2190 simulateR (if b = true then impl\u2081 else impl\u2082) adv\n          pure (b = b')] =\n        2\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "585a8cb36f0d05638a899dcdbbf07fc9291333d5ffb33ce7b06bd16bc31c7564"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 110,
        "start_column": 2,
        "end_line": 110,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\n\u22a2 impl\u2081 \u2243\u209b\u2092 impl\u2082 \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=false = true|do\n          let b \u2190 $\u1d57Bool\n          let b' \u2190 simulateR (if b = true then impl\u2081 else impl\u2082) adv\n          pure (b = b')] =\n        2\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L110"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-04T12:41:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "973b4cb3d427c05ef16102dd5f5e0e7cd61d9ce64ee34984d76afac6446e9a44"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 136,
        "start_column": 2,
        "end_line": 136,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec), neverFails adv \u2192 DistinguisherAdvantage impl\u2081 impl\u2082 adv \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "c1eb6cd140f17dbd2e2e81f17df0971d7ecfbaa5da80286af6761dac33a02553"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 160,
        "start_column": 6,
        "end_line": 160,
        "end_column": 11
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv].toReal -\n      [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv].toReal \u2264\n    (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n        (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] -\n          [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv])).toReal",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "c24625618f1a1a2e5ff5504de9deacdcc378fc2fd52e76471b436dcafbf59930"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 162,
        "start_column": 6,
        "end_line": 162,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case hba\n\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] \u2264 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6097e9ba77c5f1542291ee6072a67292a6a4cd283b1c38fd7e87899114389f0d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 164,
        "start_column": 4,
        "end_line": 164,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case ha\n\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] \u2260 \u22a4",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "ca438264a6803c294e3e6873d78482e4a63dfa4e1eca104a7a5a513b33807dc2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 166,
        "start_column": 4,
        "end_line": 166,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case ha\n\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] \u2260 \u22a4",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "6208083e48d2db1c38d638dd6288dd1caa13d28eaa426ec83eb28308e71b1d7e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 168,
        "start_column": 4,
        "end_line": 168,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case hb\n\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\nadv : Distinguisher spec\nh :\n  1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2264\n    b\n\u22a2 1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2081) adv] -\n      (1 - [=true|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv] - [\u22a5|simulateQ (idOracle unifSpec ++\u209b\u2092 impl\u2082) adv]) \u2260\n    \u22a4",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L168"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "4d30da99ad2d3b9fb32b89b45241924c471075314a394c87bb35e8dbc4bfd9ea"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 148,
        "start_column": 27,
        "end_line": 148,
        "end_column": 32
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2082 impl\u2081 b \u2192 DistinguisherBound impl\u2081 impl\u2082 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L148"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "212d2e542f15ca1f0c94bbb235b66c3a8435c40beb2c9d270d6dc41c34da7baf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 174,
        "start_column": 2,
        "end_line": 174,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 impl\u2083 : QueryImpl spec ProbComp\nb b' : \u211d\u22650\u221e\nh : DistinguisherBound impl\u2081 impl\u2082 b\nh' : DistinguisherBound impl\u2082 impl\u2083 b'\n\u22a2 DistinguisherBound impl\u2081 impl\u2083 (b + b')",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L174"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "051e650cd77e31f2f0a6ccc2f9497b2a67d85389d8b6e6c20395705ce41ea292"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 187,
        "start_column": 2,
        "end_line": 187,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec), [=true|simulateR impl\u2082 adv] - [=true|simulateR impl\u2081 adv] \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "657c849587bb0a8af0cffe049277193d71162901b314fcd09c3ad9f8911521f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 193,
        "start_column": 2,
        "end_line": 193,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec), [=false|simulateR impl\u2081 adv] - [=false|simulateR impl\u2082 adv] \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L193"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "13d3f63b1fed913114e9b95b88fba7fcd18a1bd59a5d16ca54ffdfd3d0952b9a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 198,
        "start_column": 2,
        "end_line": 198,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec), [=false|simulateR impl\u2082 adv] - [=false|simulateR impl\u2081 adv] \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-25T21:32:28-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "602db1321bec0635d4d2a92f19ccfd0291255aa54ba868e69c3b7d7487e5cd9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 212,
        "start_column": 2,
        "end_line": 212,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_2\nspec : OracleSpec \u03b9\n\u03b9' : Type u_1\nrspec : OracleSpec \u03b9'\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nred_impl\u2081 red_impl\u2082 : QueryImpl rspec ProbComp\nb r : \u211d\u22650\u221e\nhr : DistinguisherBound red_impl\u2081 red_impl\u2082 r\nreduction : Distinguisher spec \u2192 Distinguisher rspec\nh :\n  \u2200 (adv : Distinguisher spec),\n    DistinguisherAdvantage impl\u2081 impl\u2082 adv > b \u2192 DistinguisherAdvantage red_impl\u2081 red_impl\u2082 (reduction adv) > r\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L212"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-06T22:11:43-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "e5b0ad84e88b5aaceb5cedadac1d7d77140d4e80c9dddd6b83b74bb49ffe5e9a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/Distinguisher.lean",
        "start_line": 266,
        "start_column": 2,
        "end_line": 266,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\nimpl\u2081 impl\u2082 : QueryImpl spec ProbComp\nb : \u211d\u22650\u221e\n\u22a2 DistinguisherBound impl\u2081 impl\u2082 b \u2194\n    \u2200 (adv : Distinguisher spec),\n      [=true|simulateR impl\u2081 adv] - [=true|simulateR impl\u2082 adv] \u2264 b \u2227\n        [=false|simulateR impl\u2081 adv] - [=false|simulateR impl\u2082 adv] \u2264 b \u2227\n          [=true|simulateR impl\u2082 adv] - [=true|simulateR impl\u2081 adv] \u2264 b \u2227\n            [=false|simulateR impl\u2082 adv] - [=false|simulateR impl\u2081 adv] \u2264 b",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/VCVio/OracleComp/SimSemantics/Distinguisher.lean#L266"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-06T08:17:02-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "a9c015f9189962305bce4c226dff47be2f1dbf19b5f0c7af841b6da4e4581758"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "7bd1fe3630025fd3885ea115a1fa19ca51e1e6cdfe32b3ac5b405c6284b4c988"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "f8626bba402e37f9b4c21deef87820b89204060f83c44241ea0b9640604a31b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "164f63a020f185188fe230ea38c555689a5b3445c4f7f76e7d050334353b6b4e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "f261a16bf477f735d7e37cf81894388102209231e4499744ac85a894c2e4b32f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "011a720194ff65c70101116805c2519980f35075457362ceea7971a505d72595"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "joy-of-crypto",
        "commit": "2910279805aa6fe34c92a48cb96265cf0910d7f0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/2910279805aa6fe34c92a48cb96265cf0910d7f0/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-27T05:01:00.635043+00:00"
      },
      "id": "f309304b3c164c344ebe35225f0fdd246afa9831187bfbf41b6ca91be7d6e5f7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/Matroid3sum.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro\n\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097 : Matrix (\u2191X\u2097) (\u2191Y\u2097) Z2\nB\u1d63 : Matrix (\u2191X\u1d63) (\u2191Y\u1d63) Z2\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\nhXY : X\u2097 \u2ad7 Y\u1d63\nhYX : Y\u2097 \u2ad7 X\u1d63\nA\u2097 : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nhA\u2097 : A\u2097.IsTotallyUnimodular\nhAB\u2097 : A\u2097.IsSigningOf B\u2097\nA\u1d63 : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhA\u1d63 : A\u1d63.IsTotallyUnimodular\nhAB\u1d63 : A\u1d63.IsSigningOf B\u1d63\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let A\u2097 := B\u2097.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097;\n      let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n      let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      let A\u1d63 := B\u1d63.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      (matrix3sumComposition x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 A\u2097 D\u2097 D\u2080 D\u1d63 A\u1d63).HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/Matroid3sum.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "ba1ccb2fd741f6e24f32c761e524c5a8aeafd4e83fde552f3d08e05c737cf005"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 332,
        "start_column": 2,
        "end_line": 332,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d : DecidableEq \u03b1\nX Y : Set \u03b1\nQ : Matrix \u2191X \u2191Y \u211a\nhQ : Q.IsTotallyUnimodular\nx\u2082 : \u2191X\ny\u2080 y\u2081 : \u2191Y\nhyy : y\u2080 \u2260 y\u2081\nhQy\u2080 : Q x\u2082 y\u2080 = 1\nhQy\u2081 : Q x\u2082 y\u2081 = 1\nhQy : \u2200 (y : \u2191Y), \u2191y \u2260 \u2191y\u2080 \u2227 \u2191y \u2260 \u2191y\u2081 \u2192 Q x\u2082 y = 0\n\u22a2 let c\u2080 := Q._col y\u2080;\n  let c\u2081 := Q._col y\u2081;\n  let Q' := Q.A\u1d63 x\u2082 y\u2080 y\u2081;\n  (Q' \u25eb \u25aec\u2080 \u25eb \u25aec\u2081 \u25eb \u25ae(c\u2080 - c\u2081)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L332"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "7fe6257eabde4470c34cbb5fe0feb6fd24363d3773cebf4a7ed70f74c1333cfe"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 431,
        "start_column": 2,
        "end_line": 431,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  \u2200\n    (hB\u2097' :\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081),\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n      | (r\u2080, r\u2081, snd) =>\n        (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY =\n          (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2080 r\u2080 +\n            (fun {X Y \u03b1} [Mul \u03b1] c r => Matrix.of fun i j => c i * r j) c\u2081 r\u2081",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L431"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "68ca41ef70f7e4c6e7d3eba89e65af9687b838d9afa9bdfb9e4b3189723c8ef8"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 470,
        "start_column": 2,
        "end_line": 470,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  \u2200\n    (hB\u2097' :\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081),\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      match B\u2097'._rrr x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097 hB\u2097' with\n      | (r\u2080, r\u2081, r\u2082) =>\n        \u2200 (i : \u2191(X\u1d63.drop1 x\u2082\u1d63)), D i = r\u2080 \u2228 D i = -r\u2080 \u2228 D i = r\u2081 \u2228 D i = -r\u2081 \u2228 D i = r\u2082 \u2228 D i = -r\u2082 \u2228 D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L470"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "2ea7a6a93633e3e1b17aea862e8934072ac40c04822bcc33574127d05cd6d03f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 510,
        "start_column": 2,
        "end_line": 510,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 let x\u2080\u2097 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2080\u1d63 := \u27e8x\u2080, \u22ef\u27e9;\n  let x\u2081\u2097 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2081\u1d63 := \u27e8x\u2081, \u22ef\u27e9;\n  let x\u2082\u2097 := \u27e8x\u2082, \u22ef\u27e9;\n  let x\u2082\u1d63 := \u27e8x\u2082, \u22ef\u27e9;\n  let y\u2080\u2097 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2080\u1d63 := \u27e8y\u2080, \u22ef\u27e9;\n  let y\u2081\u2097 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2081\u1d63 := \u27e8y\u2081, \u22ef\u27e9;\n  let y\u2082\u2097 := \u27e8y\u2082, \u22ef\u27e9;\n  let y\u2082\u1d63 := \u27e8y\u2082, \u22ef\u27e9;\n  let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n  let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n  let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n  let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n  let D := (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY;\n  let c\u2080 := B\u1d63._col y\u2080\u1d63;\n  let c\u2081 := B\u1d63._col y\u2081\u1d63;\n  (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n    (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n      \u2200 (j : \u2191(Y\u2097.drop1 y\u2082\u2097)),\n        (fun x => D x j) = c\u2080 \u2228\n          (fun x => D x j) = -c\u2080 \u2228\n            (fun x => D x j) = c\u2081 \u2228\n              (fun x => D x j) = -c\u2081 \u2228 (fun x => D x j) = c\u2080 - c\u2081 \u2228 (fun x => D x j) = c\u2081 - c\u2080 \u2228 (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L510"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "b9293258d8fc1b8f230be9c9d835ca73016976233c8f8499f220905fdc49e418"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 537,
        "start_column": 2,
        "end_line": 537,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080 := B\u1d63.D\u2080 x\u2080\u1d63 x\u2081\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n          (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n            (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n          (B\u1d63.A\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 \u25eb (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L537"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "4a01b1a342313e82599d16c52f0f6bee7c3204dc014997daf54af54cb321bb80"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean",
        "start_line": 561,
        "start_column": 2,
        "end_line": 561,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u2074 : DecidableEq \u03b1\nX\u2097 Y\u2097 X\u1d63 Y\u1d63 : Set \u03b1\nx\u2080 x\u2081 x\u2082 y\u2080 y\u2081 y\u2082 : \u03b1\ninst\u271d\u00b3 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u2097)\ninst\u271d\u00b2 : (x : \u03b1) \u2192 Decidable (x \u2208 X\u1d63)\ninst\u271d\u00b9 : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u2097)\ninst\u271d : (y : \u03b1) \u2192 Decidable (y \u2208 Y\u1d63)\nB\u2097' : Matrix \u2191X\u2097 \u2191Y\u2097 \u211a\nB\u1d63' : Matrix \u2191X\u1d63 \u2191Y\u1d63 \u211a\nhB\u2097' : B\u2097'.IsTotallyUnimodular\nhB\u1d63' : B\u1d63'.IsTotallyUnimodular\nhXX : X\u2097 \u2229 X\u1d63 = x\u2080 \u1543 x\u2081 \u1543 {x\u2082}\nhYY : Y\u2097 \u2229 Y\u1d63 = y\u2080 \u1543 y\u2081 \u1543 {y\u2082}\n\u22a2 match hXX.inter3all with\n  | ((x\u2080\u2097, x\u2081\u2097, x\u2082\u2097), x\u2080\u1d63, x\u2081\u1d63, x\u2082\u1d63) =>\n    match hYY.inter3all with\n    | ((y\u2080\u2097, y\u2081\u2097, y\u2082\u2097), y\u2080\u1d63, y\u2081\u1d63, y\u2082\u1d63) =>\n      let B\u2097 := B\u2097'.toCanonicalSigning x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let B\u1d63 := B\u1d63'.toCanonicalSigning x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63;\n      let D\u2080 := B\u2097.D\u2080 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097;\n      let D\u2097 := B\u2097.D\u2097 x\u2080\u2097 x\u2081\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097;\n      let D\u1d63 := B\u1d63.D\u1d63 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63;\n      (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2080 \u2228\n          (B\u2097'.submatrix3x3 x\u2080\u2097 x\u2081\u2097 x\u2082\u2097 y\u2080\u2097 y\u2081\u2097 y\u2082\u2097).abs = matrix3x3unsigned\u2081 \u2192\n        (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2080 \u2228\n            (B\u1d63'.submatrix3x3 x\u2080\u1d63 x\u2081\u1d63 x\u2082\u1d63 y\u2080\u1d63 y\u2081\u1d63 y\u2082\u1d63).abs = matrix3x3unsigned\u2081 \u2192\n          (B\u2097.A\u2097 x\u2080\u2097 x\u2081\u2097 y\u2082\u2097 \u229f (\u229e D\u2097 D\u2080(D\u1d63 * D\u2080\u207b\u00b9 * D\u2097)D\u1d63).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/1ed6e4e1fa37beaa8248f4882a2109daf07cb9c6/Seymour/Matroid/Operations/Sum3/CanonicalSigning.lean#L561"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-26T16:45:43+02:00",
        "inclusion_date": "2025-05-28T05:15:38.612257+00:00"
      },
      "id": "7ae831725ef2ca4fa1752d527538520a273887edbf18b2c1397ee2b47ba55f4d"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/LeanSearchClient",
        "branch": "main",
        "commit": "6c62474116f525d2814f0157bb468bf3a4f9f120",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "LeanSearchClientTest/MoogleExamples.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 3 \u2264 5",
        "url": "https://github.com/leanprover-community/LeanSearchClient/blob/6c62474116f525d2814f0157bb468bf3a4f9f120/LeanSearchClientTest/MoogleExamples.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-03-20T02:55:26+05:30",
        "inclusion_date": "2025-05-27T05:38:27.112195+00:00"
      },
      "id": "ade6d9ef1ae9dee820f87671aedea2a336556bc7019dadab49a6836d11bd7d7a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "2ec6b8bfd6b02531d459869014799c186fff7c65",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 884,
        "start_column": 10,
        "end_line": 884,
        "end_column": 15
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\n\u03c6 : Formula\nside : Side\n\u03b1s : List Program\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6)\n\u03b1 : Program\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side (L, R, O)\nno_other_loading : (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true\nu : W\nv_\u03b1_u : relate M \u03b1 v u\nu_\u03b1s_w : relateSeq M \u03b1s u w\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : (M, v)\u22a8(F, \u03b4).1\nv_\u03b4_w : relateSeq M (F, \u03b4).2 v u\n\u03c7' : LoadFormula\n\u03c7_def : AnyFormula.loaded \u03c7' = AnyFormula.loadBoxes \u03b1s (AnyFormula.normal \u03c6)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule\n          (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')))\n            (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227\n              (M, v)\u22a8F \u2227\n                (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/2ec6b8bfd6b02531d459869014799c186fff7c65/Pdl/Soundness.lean#L884"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-26T23:22:48+02:00",
        "inclusion_date": "2025-05-27T05:39:39.837606+00:00"
      },
      "id": "b0785a912095fff90e8b39304388829e4d94ca5992964bd5b878ebbb4d79c742"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "2ec6b8bfd6b02531d459869014799c186fff7c65",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 887,
        "start_column": 10,
        "end_line": 887,
        "end_column": 15
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\n\u03c6\u271d : Formula\nside : Side\n\u03b1s : List Program\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6\u271d)\n\u03b1 : Program\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6\u271d))).in_side side (L, R, O)\nno_other_loading :\n  (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6\u271d)))).isFree = true\nu : W\nv_\u03b1_u : relate M \u03b1 v u\nu_\u03b1s_w : relateSeq M \u03b1s u w\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : (M, v)\u22a8(F, \u03b4).1\nv_\u03b4_w : relateSeq M (F, \u03b4).2 v u\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule\n          (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)))\n            (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6\u271d))).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227\n              (M, v)\u22a8F \u2227\n                (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6\u271d)))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/2ec6b8bfd6b02531d459869014799c186fff7c65/Pdl/Soundness.lean#L887"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-26T23:22:48+02:00",
        "inclusion_date": "2025-05-27T05:39:39.837606+00:00"
      },
      "id": "a4629f81ae48c050c93df114ef46ee098130927c8d763e9282102dea67b738bd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "2ec6b8bfd6b02531d459869014799c186fff7c65",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 891,
        "start_column": 8,
        "end_line": 891,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\n\u03c6 : Formula\nside : Side\n\u03b1s : List Program\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) {v w : W},\n    (M, v)\u22a8Y \u2192\n      (M, w)\u22a8~''(AnyFormula.normal \u03c6) \u2192\n        \u2200 (\u03b1 : Program),\n          relateSeq M (\u03b1 :: \u03b1s) v w \u2192\n            (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side Y \u2192\n              (Y.without (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true \u2192\n                \u2203 Y_1 \u2208 endNodesOf (next Y a),\n                  (M, v)\u22a8Y_1 \u2227\n                    (Y_1.isFree = true \u2228\n                      \u2203 F \u03b3,\n                        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y_1 \u2227\n                          relateSeq M \u03b3 v w \u2227\n                            (M, v)\u22a8F \u2227\n                              (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227\n                                (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)\nv w : W\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.normal \u03c6)\n\u03b1 : Program\nv_\u03b1s_w : relateSeq M (\u03b1 :: \u03b1s) v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6))).in_side side (L, R, O)\nno_other_loading : (Sequent.without (L, R, O) (~''(AnyFormula.loadBoxes (\u03b1 :: \u03b1s) (AnyFormula.normal \u03c6)))).isFree = true\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6))).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227\n              (M, v)\u22a8F \u2227\n                (F, \u03b3) \u2208 Hl (\u03b1 :: \u03b1s) \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.normal \u03c6)))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/2ec6b8bfd6b02531d459869014799c186fff7c65/Pdl/Soundness.lean#L891"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-05-26T23:22:48+02:00",
        "inclusion_date": "2025-05-27T05:39:39.837606+00:00"
      },
      "id": "9d5da9bbc1796e3bf148d59134993bbcd8db40404c574d984c8850fa50144167"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "localLoadedDiamondList",
        "commit": "2ec6b8bfd6b02531d459869014799c186fff7c65",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1023,
        "start_column": 8,
        "end_line": 1023,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203 Y,\n    (\u2203 Z, \u2203 (Z_in : Z \u2208 B), Y \u2208 endNodesOf (next Z \u22ef)) \u2227\n      (M, v)\u22a8Y \u2227\n        (Y.isFree = true \u2228\n          \u2203 F \u03b3,\n            (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n              relateSeq M \u03b3 v w \u2227\n                (\u2200 f \u2208 F, evaluate M v f) \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/2ec6b8bfd6b02531d459869014799c186fff7c65/Pdl/Soundness.lean#L1023"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-27T05:39:39.837606+00:00"
      },
      "id": "35a7f24c3b16f879dfd6c452a022d3cde8718f77d4a05fa8092df678f5e40119"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 50,
        "start_column": 77,
        "end_line": 50,
        "end_column": 82
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 I[\u2211 i, \u2211 j, \u2191\u2191i \u2022 Y (i, j) : \u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j)|\u2211 i, \u2211 j, Y (i, j)] \u2264 4 * \u2191p.m ^ 2 * p.\u03b7 * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2024-09-30T22:19:50+00:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "1c4ecb0803952a4abf36fd7fd96c1200d1b0cbd8ca8e5c846de701c5cbe7678a"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 52,
        "start_column": 77,
        "end_line": 52,
        "end_column": 82
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 I[\u2211 i, \u2211 j, \u2191\u2191i \u2022 Y (i, j) : \u2211 i, \u2211 j, (-\u2191\u2191i - \u2191\u2191j) \u2022 Y (i, j)|\u2211 i, \u2211 j, Y (i, j)] \u2264\n    4 * \u2191p.m ^ 2 * p.\u03b7 * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2024-09-30T22:19:50+00:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "9f83153b7111511b5f594cc083c33f3faba31cdb6d567940dcccfa8fdca98aa9"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 54,
        "start_column": 77,
        "end_line": 54,
        "end_column": 82
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 I[\u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j) : \u2211 i, \u2211 j, (-\u2191\u2191i - \u2191\u2191j) \u2022 Y (i, j)|\u2211 i, \u2211 j, Y (i, j)] \u2264\n    4 * \u2191p.m ^ 2 * p.\u03b7 * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L54"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2024-09-30T22:19:50+00:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "77b1deaff5205dba3633804a2b24651858fbfdab667ed709b0f892163a650139"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 58,
        "start_column": 74,
        "end_line": 58,
        "end_column": 79
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\nm : \u211d\n\u22a2 H[\u2211 i, \u2211 j, Y (i, j)] \u2264 (2 * \u2191p.m - 1) * multiTau p \u03a9 h\u03a9 X + m\u207b\u00b9 * \u2211 i, H[X i]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T08:58:11-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "65f845cdb0e5f27203c4a7267a70e4ac96bdd036bc6aedae51534ba361c8e5cb"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 61,
        "start_column": 94,
        "end_line": 61,
        "end_column": 99
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\nm : \u211d\n\u22a2 H[\u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j)] \u2264 (8 * \u2191p.m ^ 2 - 16 * \u2191p.m + 1) * multiTau p \u03a9 h\u03a9 X + m\u207b\u00b9 * \u2211 i, H[X i]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T08:58:11-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "a017fbaf631e3377060f38a70dd74e83221740f47c318d11f4b3024902c30089"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 64,
        "start_column": 60,
        "end_line": 64,
        "end_column": 65
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 I[\u2211 i, \u2211 j, Y (i, j) : \u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j)] \u2264 2 * (\u2191p.m - 1) * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L64"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T08:58:11-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "fc3e23d630f878c2903801a5f094cdd2e0e04cf20ee0c837a24c921d2e28de65"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 67,
        "start_column": 88,
        "end_line": 67,
        "end_column": 93
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u03a9' : Type u\nY : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh\u03a9' : MeasureSpace \u03a9'\ninst\u271d : IsFiniteMeasure volume\n\u22a2 \u2211 i, d[X i # \u2211 i, \u2211 j, \u2191\u2191j \u2022 Y (i, j) | \u2211 i, \u2211 j, Y (i, j)] \u2264 8 * (\u2191p.m ^ 3 - \u2191p.m ^ 2) * multiTau p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T08:58:11-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "e7de6df23233b2cba0c3fccd5fc8ca9677808b76caff05bad4116b046d08acac"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 79,
        "start_column": 398,
        "end_line": 79,
        "end_column": 403
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b9 : MeasureableFinGroup G\n\u03a9 : Type u_2\ninst\u271d : MeasureSpace \u03a9\nT\u2081 T\u2082 T\u2083 : \u03a9 \u2192 G\nhsum : T\u2081 + T\u2082 + T\u2083 = 0\nn : \u2115\n\u03a9' : Fin n \u2192 Type u_3\nh\u03a9' : (i : Fin n) \u2192 MeasureSpace (\u03a9' i)\nY : (i : Fin n) \u2192 \u03a9' i \u2192 G\n\u03b1 : \u211d\nh\u03b1 : \u03b1 > 0\n\u22a2 \u2203 \u03a9'' h\u03a9'' U,\n    d[U # U] + \u03b1 * \u2211 i, d[Y i # U] \u2264 (2 + \u03b1 * \u2191n / 2) * (I[T\u2081 : T\u2082] + I[T\u2081 : T\u2083] + I[T\u2082 : T\u2083]) + \u03b1 * \u2211 i, d[Y i # T\u2082]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-17T21:11:56+01:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "9ba52357bc7c4cea2d946b5080619d670c0b814ab856aed521449e6448dc2ad0"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 82,
        "start_column": 27,
        "end_line": 82,
        "end_column": 32
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b9 : MeasureableFinGroup G\ninst\u271d : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Fin p.m \u2192 Type u\nh\u03a9 : (i : Fin p.m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin p.m) \u2192 \u03a9 i \u2192 G\n\u22a2 multiTau p \u03a9 h\u03a9 X = 0",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-28T21:28:18-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "414bb2b0fa894e2c3dde0f82930a4f67400eb02fa24d7028abef298ad314c0a3"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 89,
        "start_column": 54,
        "end_line": 89,
        "end_column": 59
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u2074 : AddCommGroup G\ninst\u271d\u00b3 : Fintype G\ninst\u271d\u00b2 : MeasurableSpace G\ninst\u271d\u00b9 : MeasurableSingletonClass G\nm : \u2115\nhm : m \u2265 2\nhtorsion : \u2200 (x : G), m \u2022 x = 0\n\u03a9 : Type u_2\ninst\u271d : MeasureSpace \u03a9\nX : \u03a9 \u2192 G\n\u22a2 \u2203 H \u03a9' m\u03a9 U, IsUniform (\u2191H) U volume \u2227 d[X # U] \u2264 64 * \u2191m ^ 3 * d[X # X]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-28T21:28:18-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "9777eefba224c257a5a78477d5404aa209afcc53e871e9ccc84e1cb812e4b9fc"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/TorsionEndgame.lean",
        "start_line": 102,
        "start_column": 64,
        "end_line": 102,
        "end_column": 69
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\nm : \u2115\nhm : m \u2265 2\nhtorsion : \u2200 (x : G), m \u2022 x = 0\nA : Set G\ninst\u271d : Finite \u2191A\nK : \u211d\nh\u2080A : A.Nonempty\nhA : \u2191(Nat.card \u2191(A + A)) \u2264 K * \u2191(Nat.card \u2191A)\n\u22a2 \u2203 H c,\n    \u2191(Nat.card \u2191c) \u2264 K ^ (64 * \u2191m ^ 3 + 2) * \u2191(Nat.card \u2191A) ^ (1 / 2) * \u2191(Nat.card \u21a5H) ^ (-1 / 2) \u2227\n      \u2191(Nat.card \u21a5H) \u2264 K ^ (64 * \u2191m ^ 3) * \u2191(Nat.card \u2191A) \u2227\n        \u2191(Nat.card \u2191A) \u2264 K ^ (64 * \u2191m ^ 3) * \u2191(Nat.card \u21a5H) \u2227 A \u2286 c + \u2191H",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/TorsionEndgame.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "7d87c0724495",
        "blame_date": "2024-08-18T18:37:52+02:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "5647f928a11892349b183b51484417a244b7b2dfda1807f5609d84f352a0884a"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/BoundingMutual.lean",
        "start_line": 36,
        "start_column": 79,
        "end_line": 36,
        "end_column": 84
      },
      "debug_info": {
        "goal": "G \u03a9\u2092 : Type u\ninst\u271d\u00b2 : MeasureableFinGroup G\ninst\u271d\u00b9 : MeasureSpace \u03a9\u2092\np : multiRefPackage G \u03a9\u2092\n\u03a9 : Type u\nh\u03a9 : MeasureSpace \u03a9\nX : Fin p.m \u2192 \u03a9 \u2192 G\nh_indep : iIndepFun X volume\nh_min : multiTauMinimizes p (fun x => \u03a9) (fun x => h\u03a9) X\n\u03a9' : Type u_1\ninst\u271d : MeasureSpace \u03a9'\nX' : Fin p.m \u00d7 Fin p.m \u2192 \u03a9' \u2192 G\nh_indep' : iIndepFun X' volume\nhperm : \u2200 (j : Fin p.m), \u2203 e, IdentDistrib (fun \u03c9 i => X' (i, j) \u03c9) (fun \u03c9 i => X (e i) \u03c9) volume volume\n\u22a2 I[fun \u03c9 j => \u2211 i, X' (i, j) \u03c9 : fun \u03c9 i => \u2211 j, X' (i, j) \u03c9|fun \u03c9 => \u2211 i, \u2211 j, X' (i, j) \u03c9] \u2264\n    4 * \u2191p.m ^ 2 * p.\u03b7 * D[X ; fun x => h\u03a9]",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/BoundingMutual.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "7d87c0724495",
        "blame_date": "2025-03-07T08:53:46+01:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "fb8f9b58da1e38476f53aed60e935ebb5e8ef6754d7604028ff14980c19432a7"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 181,
        "start_column": 65,
        "end_line": 181,
        "end_column": 70
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\n\u22a2 Nat.card (G \u2192+ ZMod 2) = Nat.card G",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/ApproxHomPFR.lean#L181"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "6d92889d82e70bd00cde336c7f26b9535bda77a8b123bf3ba65cded072b2e01e"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 183,
        "start_column": 114,
        "end_line": 183,
        "end_column": 119
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\nx : G\nhx : x \u2260 0\n\u22a2 Nat.card \u2191{\u03c6 | \u03c6 x = 1} = Nat.card G / 2",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/ApproxHomPFR.lean#L183"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "96904bda247719de5adc8d3666f3118073b47a388cea267d59e8241c9649f26f"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 185,
        "start_column": 114,
        "end_line": 185,
        "end_column": 119
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\nA : Set G\n\u22a2 \u2203 \u03c6, Nat.card \u2191{x | x \u2208 A \u2227 \u03c6 x = 1} \u2265 (Nat.card \u2191A - 1) / 2",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/ApproxHomPFR.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "d2d5ce16fb205bbd08ba72eca6fc3d6519e236878b223d085403e57f1b1343b3"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 189,
        "start_column": 99,
        "end_line": 189,
        "end_column": 104
      },
      "debug_info": {
        "goal": "G : Type u_1\nG' : Type u_2\ninst\u271d\u2075 : AddCommGroup G\ninst\u271d\u2074 : Fintype G\ninst\u271d\u00b3 : AddCommGroup G'\ninst\u271d\u00b2 : Fintype G'\ninst\u271d\u00b9 : Module (ZMod 2) G\ninst\u271d : Module (ZMod 2) G'\nf : G \u2192 G'\nK : \u211d\nhK : K > 0\nhf : \u2191(Nat.card G) ^ 2 / K \u2264 \u2191(Nat.card \u2191{x | f (x.1 + x.2) = f x.1 + f x.2})\n\u22a2 \u2203 \u03c6'', \u2191(Nat.card \u2191{x | f x = \u03c6'' x}) \u2265 (\u2191(Nat.card G) / (2 ^ 144 * K ^ 122) - 1) / 2",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/ApproxHomPFR.lean#L189"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "00472b8f9b9d856f24f83c6aad601cc6bf6f5274b4875740befe6eb17e33c7d0"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 527,
        "start_column": 2,
        "end_line": 527,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03a9 : Type u_1\nG : Type u_5\nm\u03a9 : MeasurableSpace \u03a9\n\u03bc : Measure \u03a9\nhG : MeasurableSpace G\ninst\u271d\u00b3 : MeasurableSingletonClass G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Countable G\ninst\u271d : IsProbabilityMeasure \u03bc\nI : Type u_8\ns t : Finset I\nhdisj : Disjoint s t\nhs : s.Nonempty\nht : t.Nonempty\nX : I \u2192 \u03a9 \u2192 G\nhX : \u2200 (i : I), Measurable (X i)\nhX' : \u2200 (i : I), FiniteRange (X i)\nh_indep : iIndepFun X \u03bc\nf : I \u2192 I\nhf : Finset.image f t \u2286 s\n\u22a2 H[\u2211 i \u2208 t, X i ; \u03bc] \u2264 H[\u2211 i \u2208 s, X i ; \u03bc] + \u2211 i \u2208 t, (H[X i - X (f i) ; \u03bc] - H[X (f i) ; \u03bc])",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MoreRuzsaDist.lean#L527"
      },
      "metadata": {
        "blame_email_hash": "6e8091041644",
        "blame_date": "2024-05-31T19:35:50+01:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "a8d0995203fd353b7408d89399a3b42b648011db67b373d4badef838ea4bc1d3"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 760,
        "start_column": 62,
        "end_line": 760,
        "end_column": 67
      },
      "debug_info": {
        "goal": "G : Type u_8\nhG : MeasurableSpace G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : MeasurableSingletonClass G\ninst\u271d : Countable G\nm : \u2115\n\u03a9 : Type u_9\nh\u03a9 : MeasureSpace \u03a9\nX : Fin m \u2192 \u03a9 \u2192 G\nh_indep : iIndepFun X volume\n\u22a2 @multiDist G hG inst\u271d\u00b2 m (fun x => \u03a9) (fun x => h\u03a9) X = H[\u2211 i, X i] - (\u2211 i, H[X i]) / \u2191m",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MoreRuzsaDist.lean#L760"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-22T09:31:46-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "75b78076d30a6ec2513e7c2b2c42502b7d32a9f71263ce8b8bbdc2a2f119cac7"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "018c619cf93d489a688e485cafd43f5545ddd99e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 1165,
        "start_column": 82,
        "end_line": 1165,
        "end_column": 87
      },
      "debug_info": {
        "goal": "G : Type u_8\nhG : MeasurableSpace G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : MeasurableSingletonClass G\ninst\u271d : Countable G\nm : \u2115\nhm : m \u2265 2\n\u03a9 : Type u_9\nh\u03a9 : MeasureSpace \u03a9\nX : Fin m \u2192 \u03a9 \u2192 G\nh_indep : iIndepFun X volume\n\u22a2 d[\u2211 i, X i # \u2211 i, X i] \u2264 2 * @multiDist G hG inst\u271d\u00b2 m (fun x => \u03a9) (fun x => h\u03a9) X",
        "url": "https://github.com/teorth/pfr/blob/018c619cf93d489a688e485cafd43f5545ddd99e/PFR/MoreRuzsaDist.lean#L1165"
      },
      "metadata": {
        "blame_email_hash": "7d87c0724495",
        "blame_date": "2025-03-07T08:53:46+01:00",
        "inclusion_date": "2025-05-27T06:36:49.192108+00:00"
      },
      "id": "b1d15c92fcf249647ae1963a74809dd64695bde853bfdc48ac27a037a74f2fac"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 2070,
        "start_column": 54,
        "end_line": 2070,
        "end_column": 59
      },
      "debug_info": {
        "goal": "G : Type u_5\nhG : MeasurableSpace G\ninst\u271d\u00b3 : MeasurableSingletonClass G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Countable G\ninst\u271d : Fintype G\nm : \u2115\nhm : m \u2265 1\n\u03a9 : Type u_8\nh\u03a9 : MeasureSpace \u03a9\nX : Fin (m + 1) \u00d7 Fin (m + 1) \u2192 \u03a9 \u2192 G\nh_indep : iIndepFun X volume\n\u22a2 I[fun \u03c9 j => \u2211 i, X (i, j) \u03c9 : fun \u03c9 i => \u2211 j, X (i, j) \u03c9|\u2211 p, X p] \u2264\n    (\u2211 j,\n          ((@multiDist G hG inst\u271d\u00b2 (m + 1) (fun x => \u03a9) (fun x => h\u03a9) fun i => X (i, j)) -\n            @condMultiDist G hG inst\u271d\u00b2 (m + 1) (fun x => \u03a9) (fun x => h\u03a9) G inst\u271d (fun i => X (i, j)) fun i =>\n              \u2211 k \u2208 Finset.Ici j, X (i, k)) +\n        @multiDist G hG inst\u271d\u00b2 (m + 1) (fun x => \u03a9) (fun x => h\u03a9) fun i => X (i, \u2191m)) -\n      @multiDist G hG inst\u271d\u00b2 (m + 1) (fun x => \u03a9) (fun x => h\u03a9) fun i => \u2211 j, X (i, j)",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MoreRuzsaDist.lean#L2070"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2024-10-17T18:26:36+00:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "8051869cf09a7c8719bb5bc7d924a557111ab098831451883feba67b30437f11"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MultiTauFunctional.lean",
        "start_line": 54,
        "start_column": 111,
        "end_line": 54,
        "end_column": 116
      },
      "debug_info": {
        "goal": "G \u03a9\u2080 : Type u\ninst\u271d\u2074 : @MeasureableFinGroup G\ninst\u271d\u00b3 : TopologicalSpace G\ninst\u271d\u00b2 : DiscreteTopology G\ninst\u271d\u00b9 : BorelSpace G\ninst\u271d : MeasureSpace \u03a9\u2080\np : @multiRefPackage G \u03a9\u2080 inst\u271d\u2074 inst\u271d\n\u22a2 Continuous fun \u03bc =>\n    @multiTau G \u03a9\u2080 inst\u271d\u2074 inst\u271d p (fun x => G)\n      (fun i =>\n        { toMeasurableSpace := @MeasureableFinGroup.toMeasurableSpace ((fun x => G) i) inst\u271d\u2074, volume := \u2191(\u03bc i) })\n      fun x => id",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MultiTauFunctional.lean#L54"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-06-29T09:57:28-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "23fa339cbb8cb837b1bc01537af61a54667eba2338035c2c1392ae0156a4a7c4"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "0d9c5da9388d34d3b4c591f28f4e206e678817b3",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MultiTauFunctional.lean",
        "start_line": 57,
        "start_column": 222,
        "end_line": 57,
        "end_column": 227
      },
      "debug_info": {
        "goal": "G \u03a9\u2080 : Type u\ninst\u271d\u00b9 : @MeasureableFinGroup G\ninst\u271d : MeasureSpace \u03a9\u2080\np : @multiRefPackage G \u03a9\u2080 inst\u271d\u00b9 inst\u271d\n\u22a2 \u2203 \u03a9 h\u03a9 X, @multiTauMinimizes G \u03a9\u2080 inst\u271d\u00b9 inst\u271d p \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/0d9c5da9388d34d3b4c591f28f4e206e678817b3/PFR/MultiTauFunctional.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-08-18T19:14:43-07:00",
        "inclusion_date": "2025-05-28T06:33:25.060324+00:00"
      },
      "id": "ed37a34384b8761ee634e86987d7a117075aade18fb4c7526f31922d77402bb1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/merkletree-neverfails",
        "commit": "0500c1804c8457a25a494d246df91e37e021667f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 193,
        "start_column": 2,
        "end_line": 193,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst : DecidableEq \u03b1\ninst_1 : SelectableType \u03b1\npreexisting_cache : QueryCache (MerkleTree.spec \u03b1)\nn : \u2115\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\n\u22a2 ((simulateQ randomOracle\n          (Vector.mmap (fun x => liftM (query () x))\n            (List.Vector.ofFn fun i =>\n              (leaves.get \u27e82 * \u2191i, MerkleTree.buildLayer._proof_4 n i\u27e9,\n                leaves.get \u27e82 * \u2191i + 1, MerkleTree.buildLayer._proof_5 n i\u27e9)))).run\n      preexisting_cache).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/0500c1804c8457a25a494d246df91e37e021667f/ArkLib/CommitmentScheme/MerkleTree.lean#L193"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-05-26T13:38:13-04:00",
        "inclusion_date": "2025-05-27T07:01:21.354194+00:00"
      },
      "id": "69862bd3ce5c4a5def9b8521162018c4e1db0dcde5e7fd02a272d40c2eb0a4f5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/merkletree-neverfails",
        "commit": "0500c1804c8457a25a494d246df91e37e021667f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 238,
        "start_column": 4,
        "end_line": 238,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case right\n\u03b1 : Type\ninst\u271d\u00b3 : DecidableEq \u03b1\ninst\u271d\u00b2 : Inhabited \u03b1\ninst\u271d\u00b9 : Fintype \u03b1\ninst\u271d : SelectableType \u03b1\nn : \u2115\nleaves : List.Vector \u03b1 (2 ^ n)\ni : Fin (2 ^ n)\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\npreexisting_cache : QueryCache (MerkleTree.spec \u03b1)\nmerkle_tree_cache : MerkleTree.Cache \u03b1 n\nquery_cache : QueryCache (MerkleTree.spec \u03b1)\nh_mem_support :\n  (merkle_tree_cache, query_cache) \u2208\n    ((simulateQ randomOracle (MerkleTree.buildMerkleTree \u03b1 n leaves)).run preexisting_cache).support\n\u22a2 ((simulateQ randomOracle\n          (MerkleTree.verifyProof \u03b1 inst\u271d\u00b3 n i (leaves.get i) (MerkleTree.getRoot \u03b1 n merkle_tree_cache)\n            (MerkleTree.generateProof \u03b1 n i merkle_tree_cache))).run\n      query_cache).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/0500c1804c8457a25a494d246df91e37e021667f/ArkLib/CommitmentScheme/MerkleTree.lean#L238"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-05-26T13:38:13-04:00",
        "inclusion_date": "2025-05-27T07:01:21.354194+00:00"
      },
      "id": "ea7c3abf710c257c4f036b72578c80d8666f4a754a9a77fe55d0aac74fa40717"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 52,
        "start_column": 10,
        "end_line": 52,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd Regex.emptystr\nhy_emptyset : Regex.emptystr \u2260 Regex.emptyset\nhy_starany : Regex.emptystr \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd Regex.emptystr \u22ef\nh' : \u00acx = Regex.emptystr\nh : \u00acRegex.emptystr < x\n\u22a2 x < Regex.emptystr",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "da3eebad8f77f4e3c19c571c149081dc2c1ed093436e0a87ce3953111883e3de"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 65,
        "start_column": 10,
        "end_line": 65,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd Regex.any\nhy_emptyset : Regex.any \u2260 Regex.emptyset\nhy_starany : Regex.any \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd Regex.any \u22ef\nh' : \u00acx = Regex.any\nh : \u00acRegex.any < x\n\u22a2 x < Regex.any",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "774f1ccad3263da8b2cc76b5a97edcca77d25791b9c7d5dfcbc8993f823f7fe4"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 78,
        "start_column": 10,
        "end_line": 78,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\np\u271d : Predicate.Pred \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd (Regex.pred p\u271d)\nhy_emptyset : Regex.pred p\u271d \u2260 Regex.emptyset\nhy_starany : Regex.pred p\u271d \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd (Regex.pred p\u271d) \u22ef\nh' : \u00acx = Regex.pred p\u271d\nh : \u00acRegex.pred p\u271d < x\n\u22a2 x < Regex.pred p\u271d",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "a8b5f633fdf0456535a223f93d682b22843a088659a49a427f32b955106f10f0"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 91,
        "start_column": 10,
        "end_line": 91,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nx1\u271d x2\u271d : Regex \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd (x1\u271d.concat x2\u271d)\nhy_emptyset : x1\u271d.concat x2\u271d \u2260 Regex.emptyset\nhy_starany : x1\u271d.concat x2\u271d \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd (x1\u271d.concat x2\u271d) \u22ef\nh' : \u00acx = x1\u271d.concat x2\u271d\nh : \u00acx1\u271d.concat x2\u271d < x\n\u22a2 x < x1\u271d.concat x2\u271d",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "a263b7c280e0c1b09f39e25825a5bf7906ba0334f768b9bc71a0090865827df7"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 101,
        "start_column": 8,
        "end_line": 101,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case a.x1nstar\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nx1\u271d : Regex \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd x1\u271d.star\nhy_emptyset : x1\u271d.star \u2260 Regex.emptyset\nhy_starany : x1\u271d.star \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd x1\u271d.star \u22ef\nh\u271d : \u00acx = x1\u271d.star\nh : x1\u271d.star < x\n\u22a2 x1\u271d \u2260 Regex.any",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "7aa3a5db91a8c16d432fc390e5d004d51a620f7df6f7d096242c0434cb11534e"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 105,
        "start_column": 10,
        "end_line": 105,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nx1\u271d : Regex \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd x1\u271d.star\nhy_emptyset : x1\u271d.star \u2260 Regex.emptyset\nhy_starany : x1\u271d.star \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd x1\u271d.star \u22ef\nh' : \u00acx = x1\u271d.star\nh : \u00acx1\u271d.star < x\n\u22a2 x < x1\u271d.star",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L105"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "c58ac89ce9d690014f523e9f2acdc1f8574b567f47999f76fb78a9c8b581fee7"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 107,
        "start_column": 10,
        "end_line": 107,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case a.x1nstar\n\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx y : Regex \u03b1\nhx : Regex.SmartOrElem x\nx1\u271d : Regex \u03b1\nhy\u271d : @OrIsSmart \u03b1 instLTRegexOfOrd x1\u271d.star\nhy_emptyset : x1\u271d.star \u2260 Regex.emptyset\nhy_starany : x1\u271d.star \u2260 Regex.any.star\nhy : hy\u271d = @OrIsSmart.singleton \u03b1 instLTRegexOfOrd x1\u271d.star \u22ef\nh\u271d : \u00acx = x1\u271d.star\nh : \u00acx1\u271d.star < x\n\u22a2 x1\u271d \u2260 Regex.any",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L107"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "95b1df9fef5241b9b56ed640a8056113aa2dee9482d18a9dacab8747f344b038"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 y : Regex \u03b1\n\u22a2 mergeOr (x1.or x2) y \u2260 Regex.emptyset",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "535b6f121d2c8bbd573ddbfa4470955d027f3611ab448b397ceedbf1954720ad"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 123,
        "start_column": 2,
        "end_line": 123,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 y : Regex \u03b1\n\u22a2 mergeOr (x1.or x2) y \u2260 Regex.any.star",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L123"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "1b2eeb1f336c2ff225e150a1e33db6b6e96d23ab34ddea5f47dfa2cd5e54121b"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 129,
        "start_column": 2,
        "end_line": 129,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 : Regex \u03b1\n\u22a2 x1.or x2 \u2260 Regex.emptyset",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "1024bdab7b634cc53c5ca906e8c051903611a1f2eb28e5ce1490b8f48fe6a352"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "007556e200dc1a08fde85d78aecb59a49df65a5d",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 135,
        "start_column": 2,
        "end_line": 135,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type\ninst\u271d\u00b9 : Ord \u03b1\ninst\u271d : DecidableEq \u03b1\nx1 x2 : Regex \u03b1\n\u22a2 x1.or x2 \u2260 Regex.any.star",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/007556e200dc1a08fde85d78aecb59a49df65a5d/Katydid/Regex/Smart/SmartOr.lean#L135"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-27T17:19:07+01:00",
        "inclusion_date": "2025-05-28T05:21:29.223029+00:00"
      },
      "id": "835c6582456bd8ba8631ebf5b9f577a0c5a5d1aeefd7251072ec0b83f8a14636"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "60a4762da27ce47c06ad3174d8fb9e8ad3311ac7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1626,
        "start_column": 10,
        "end_line": 1626,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case inr.intro.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nt0 : PathIn tab\ns_t0 : t0 \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\n\u03b2 : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4\u271d : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4\u271d v w\nv_F : (M, v)\u22a8F\nF\u03b4_in_H : (F, \u03b4\u271d) \u2208 H (\u2217\u03b2)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4\u271d \u03be))).isFree = true\n\u03b4_ne : \u00ac\u03b4\u271d = []\nv_\u03b1_w : Relation.ReflTransGen (relate M \u03b2) v w\nn : \u2115\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : \u2200 (i : Fin n), relate M \u03b2 (ws.get i.castSucc) (ws.get i.succ)\nclaim :\n  \u2200 (k : Fin n.succ),\n    \u2203 sk,\n      Relation.TransGen (cEdge X tab) t sk \u2227\n        (satisfiable (nodeAt sk) \u2227 \u00accEquiv X tab sk t \u2228\n          \u2203 \u03b3,\n            (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sk) \u2227\n              (M, ws[k])\u22a8nodeAt sk \u2227 ((nodeAt sk).without (~''(AnyFormula.loaded (\u230a\u230a\u03b3\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True)\nh : w = w\nsn : PathIn tab\nt_sn : Relation.TransGen (cEdge X tab) t sn\n\u03b4 : List Program\nloaded_con : (~''(AnyFormula.loaded (\u230a\u230a\u03b4\u230b\u230b\u230a\u2217\u03b2\u230b\u03be))).in_side side (nodeAt sn)\nw_sn : (M, w)\u22a8nodeAt sn\nwithout_con : ((nodeAt sn).without (~''(AnyFormula.loaded (\u230a\u230a\u03b4\u230b\u230b\u230a\u2217\u03b2\u230b\u03be)))).isFree = true \u2227 True\n\u03b1_natom : \u00ac(\u2217\u03b2).isAtomic\n\u22a2 \u2203 s,\n    Relation.TransGen (cEdge X tab) t s \u2227\n      (satisfiable (nodeAt s) \u2227 \u00accEquiv X tab s t \u2228\n        (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/60a4762da27ce47c06ad3174d8fb9e8ad3311ac7/Pdl/Soundness.lean#L1626"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-27T12:30:10+02:00",
        "inclusion_date": "2025-05-28T05:43:22.902231+00:00"
      },
      "id": "8b559b5d96f45c6fff68e9c4f2a50e80d60bbac5e9f191925e2bdd64e2393798"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 210,
        "start_column": 4,
        "end_line": 210,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2)\nn : \u2115\nhn : 2 ^ n < p\n\u22a2 \u2200 (offset : \u2115) (env : Environment (F p)) (b_var : Var field (F p)) (b : field (F p)),\n    eval env b_var = b \u2192\n      True \u2192\n        Circuit.constraints_hold.soundness env\n            ((do\n                  let __discr \u2190 Gadgets.ToBits.main p prime n b_var\n                  let x : Vector (Expression (F p)) n := __discr\n                  pure PUnit.unit).operations\n              offset) \u2192\n          ZMod.val b < 2 ^ n",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/Bits.lean#L210"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-27T15:56:45+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "a21c4ed622f88139b6ba1db19dbdedc95895f107b4c4ad00b4e70d69a657a1a7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 213,
        "start_column": 4,
        "end_line": 213,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : \u2115\nprime : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2)\nn : \u2115\nhn : 2 ^ n < p\n\u22a2 \u2200 (offset : \u2115) (env : Environment (F p)) (b_var : Var field (F p)),\n    env.uses_local_witnesses_completeness\n        ((do\n              let __discr \u2190 Gadgets.ToBits.main p prime n b_var\n              let x : Vector (Expression (F p)) n := __discr\n              pure PUnit.unit).operations\n          offset) \u2192\n      \u2200 (b : field (F p)),\n        eval env b_var = b \u2192\n          True \u2192\n            ZMod.val b < 2 ^ n \u2192\n              Circuit.constraints_hold.completeness env\n                ((do\n                      let __discr \u2190 Gadgets.ToBits.main p prime n b_var\n                      let x : Vector (Expression (F p)) n := __discr\n                      pure PUnit.unit).operations\n                  offset)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Gadgets/Bits.lean#L213"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-27T15:56:45+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "8a89d4308cf5b939ed67bb43807282fc76e136f19474c2fc668776854a3395b1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "5b052ecbbe4fee21e9eec612282bc31bec494ed6",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Circuit/Loops.lean",
        "start_line": 773,
        "start_column": 2,
        "end_line": 773,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case mk.intro.intro\nF : Type\ninst\u271d\u00b9 : Field F\n\u03b1 : Type\nm : \u2115\ninst\u271d : Inhabited \u03b1\nxs : Vector \u03b1 m\nbody : \u03b1 \u2192 Circuit F Unit\nlawful : ConstantLawfulCircuits body\nn : \u2115\nops : Operations F n\nh_empty :\n  ops ++ \u27e8operations (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) n, \u22ef\u27e9 =\n    Operations.empty (final_offset (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) n)\nleft\u271d : ops = Operations.empty n\nempty2 :\n  operations (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) n =\n    Operations.empty (final_offset (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) n)\nlawful_loop : ConstantLawfulCircuit (Circuit.forEach F inst\u271d\u00b9 \u03b1 m xs inst\u271d body lawful) :=\n  ConstantLawfulCircuit.from_forM_vector m F inst\u271d\u00b9 \u03b1 body xs lawful\nh_eq : ConstantLawfulCircuits.local_length body = 0 \u2228 m = 0\n\u22a2 m = 0 \u2228 \u2203 (x : m > 0), \u2203 ops, (body xs[m - 1] ops).2.withLength = Operations.empty (body xs[m - 1] ops).2.offset",
        "url": "https://github.com/Verified-zkEVM/clean/blob/5b052ecbbe4fee21e9eec612282bc31bec494ed6/Clean/Circuit/Loops.lean#L773"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-26T18:33:32+02:00",
        "inclusion_date": "2025-05-28T06:45:30.839285+00:00"
      },
      "id": "6a79cc93069fadb8ea9911c5db097491ea4c1d6a484a97fd98d5983f5daaa2e7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits2",
        "commit": "67fa635e073f32a150bc9f8df538127f968a03b7",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : \u2115\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n\u22a2 (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) \u2227\n    (env.get (i0 + 1) = 0 \u2228 env.get (i0 + 1) = 1) \u2227\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 \u2227\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n          (env.get (i0 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1) = 1) \u2227\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 \u2227\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                (env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 \u2227\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                      (env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/67fa635e073f32a150bc9f8df538127f968a03b7/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-05-28T06:52:06.255277+00:00"
      },
      "id": "2a63b34405b9b4bc2b47a9eefb2f9dd938b9f5a5a492dc47c539c7576025a1f9"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricIdeal.lean",
        "start_line": 79,
        "start_column": 4,
        "end_line": 79,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro\nM : Type u_1\nk : Type u_4\ninst\u271d\u00b2 : AddCommMonoid M\ninst\u271d\u00b9 : Field k\ninst\u271d : IsAlgClosed k\nI : Ideal (AddMonoidAlgebra k M)\nG : Type u_1 := AddLocalization \u22a4\nleft\u271d : I.IsPrime\ns : Set (M \u00d7 M)\nhsI :\n  Ideal.span\n      ((fun x =>\n          @AddMonoidAlgebra.isToricIdeal_iff_exists_span_single_sub_single.match_1 M (fun x => AddMonoidAlgebra k M) x\n            fun a b => single a 1 - single b 1) ''\n        s) =\n    I\nV : Scheme := Spec (CommRingCat.of (AddMonoidAlgebra k M \u29f8 I))\nx\u271d\u00b9 : V.Over (Spec (CommRingCat.of (AddMonoidAlgebra k M))) := sorry\nx\u271d : (Spec (CommRingCat.of (AddMonoidAlgebra k G))).Over (Spec (CommRingCat.of (AddMonoidAlgebra k M))) := sorry\nVinterT : Scheme :=\n  pullback (V \u2198 Spec (CommRingCat.of (AddMonoidAlgebra k M)))\n    (Spec (CommRingCat.of (AddMonoidAlgebra k G)) \u2198 Spec (CommRingCat.of (AddMonoidAlgebra k M)))\n\u22a2 \u2203 s,\n    @AddMonoidAlgebra.monoidIdeal M (AddLocalization \u22a4) k inst\u271d\u00b2 AddLocalization.instAddCommGroupTopAddSubmonoid_toric\n        (AddLocalization.addMonoidOf \u22a4) s.toAddSubmonoid EuclideanDomain.toCommRing =\n      I",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricIdeal.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-02-27T22:51:53+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "5b5c0e118db4e0f4f074f150a4e2a2e336c0faadb304ace9bcbf026c19ca1ccd"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 27,
        "start_column": 27,
        "end_line": 27,
        "end_column": 32
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 CategoryStruct.comp sorry ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S)))).hom =\n    (MonoidalCategoryStruct.tensorObj (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))\n        ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S))))).hom",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-04-26T12:44:28+01:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "f5ba25777ed3eab8eb314fe60e07fa89bde6e58d166328ca03a405431a408be2"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 31,
        "start_column": 14,
        "end_line": 31,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 CategoryStruct.comp\n      (MonoidalCategoryStruct.whiskerRight Mon_Class.one\n        ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S)))))\n      (Over.homMk sorry \u22ef) =\n    (MonoidalCategoryStruct.leftUnitor ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S))))).hom",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-04-26T12:44:28+01:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "e7e2fa6b685177f749e95a12cefc6f55a0773ff2aa0892b2864e0e33663acb20"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 32,
        "start_column": 14,
        "end_line": 32,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 CategoryStruct.comp\n      (MonoidalCategoryStruct.whiskerRight Mon_Class.mul\n        ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S)))))\n      (Over.homMk sorry \u22ef) =\n    CategoryStruct.comp\n      (MonoidalCategoryStruct.associator (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))\n          (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))\n          ((algSpec R).obj (Opposite.op (CommAlg.of (\u2191R) (AddMonoidAlgebra (\u2191R) S))))).hom\n      (CategoryStruct.comp\n        (MonoidalCategoryStruct.whiskerLeft (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))\n          (Over.homMk sorry \u22ef))\n        (Over.homMk sorry \u22ef))",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-04-26T12:44:28+01:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "4627e0f74ff94dc29552df8b679d5105379ff0f964eccf775e45f4191b08864e"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 47,
        "start_column": 4,
        "end_line": 54,
        "end_column": 73
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 IsOpenImmersion sorry.left",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-03T17:36:42+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "62a60e51a5b5d19c5f3d803347a83d4462dfa412f728cd2daa270c61f0704e8c"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 56,
        "start_column": 4,
        "end_line": 60,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 IsDominant sorry.left",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-03T17:36:42+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "399628a60278e110c28a13c77d598709c3a3fe34ed67fd3d1bac13bc9042616d"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/ToricVariety/FromMonoid.lean",
        "start_line": 62,
        "start_column": 4,
        "end_line": 64,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R : CommRingCat\ninst\u271d\u00b3 : IsDomain \u2191R\nS : Type u\ninst\u271d\u00b2 : AddCancelCommMonoid S\ninst\u271d\u00b9 : AddMonoid.FG S\ninst\u271d : IsAddTorsionFree S\n\u22a2 CategoryStruct.comp\n      (MonoidalCategoryStruct.tensorHom\n        (CategoryStruct.id (Over.mk ((Spec R).SplitTorus (ULift.{u, 0} (Fin (dim S))) \u2198 Spec R))) sorry)\n      Mod_Class.smul =\n    CategoryStruct.comp Mon_Class.mul sorry",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/ToricVariety/FromMonoid.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-03T17:36:42+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "dfdb7c42927e144468f1a3fc17529555376b00336e103d1e7803cd808492b213"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/Torus.lean",
        "start_line": 112,
        "start_column": 37,
        "end_line": 112,
        "end_column": 42
      },
      "debug_info": {
        "goal": "R : CommRingCat\n\u03c3 : Type u_1\n\u22a2 CategoryStruct.comp (Iso.hom (@AlgebraicGeometry.Scheme.splitTorusIsoSpec R \u03c3))\n      (Over.mk (Spec.map (CommRingCat.ofHom (algebraMap (\u2191R) (MvLaurentPolynomial \u03c3 \u2191R))))).hom =\n    (Over.mk (@AlgebraicGeometry.Scheme.SplitTorus (Spec R) \u03c3 \u2198 Spec R)).hom",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/Torus.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-04-26T12:44:28+01:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "fb07012aba9fc5bb12ba5e0dd3891ff8d326eb911e1603b533392302171e57cc"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX Y : C\ninst\u271d\u00b9 : Grp_Class X\ninst\u271d : Grp_Class Y\nZ : C\nf g : Z \u27f6 tensorObj X Y\nh\u2081 : CategoryStruct.comp f (fst X Y) = CategoryStruct.comp g (fst X Y)\nh\u2082 : CategoryStruct.comp f (snd X Y) = CategoryStruct.comp g (snd X Y)\n\u22a2 f = g",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-13T21:07:25+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "01232ac847c321dabd6b715df38edf9326730eabf9f4b58643b2088b66b333f5"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 89,
        "start_column": 44,
        "end_line": 89,
        "end_column": 49
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX Y : C\ninst\u271d\u00b9 : Grp_Class X\ninst\u271d : Grp_Class Y\n\u22a2 Grp_Class.inv = tensorHom Grp_Class.inv Grp_Class.inv",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-14T16:33:38+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "145a797ae9c662e6294ac3b2a9d940abb44708dd9d1da79c5a2b43932a281b25"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 99,
        "start_column": 12,
        "end_line": 99,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case mk.left.refine_1\nC : Type u_1\ninst\u271d\u00b3 : Category.{?u.108251, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 CategoryStruct.comp one (fst X.X Y.X) = X.one",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-14T16:33:38+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "aba7dc6c0aa5650fcd72209f3c5e9f6255e910816d1a3c3f2d83c4da2b28f574"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 101,
        "start_column": 10,
        "end_line": 101,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case mk.left.refine_2\nC : Type u_1\ninst\u271d\u00b3 : Category.{?u.108251, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 CategoryStruct.comp mul (fst X.X Y.X) = CategoryStruct.comp (tensorHom (fst X.X Y.X) (fst X.X Y.X)) X.mul",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-14T16:33:38+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "a403ec9981601a1ac4bff5e2734c6f5df997e7f107da02df719b7ff36116f2d3"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 103,
        "start_column": 20,
        "end_line": 103,
        "end_column": 25
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 \u2200 \u2983X_1 Y_1 : Discrete WalkingPair\u2984 (f : X_1 \u27f6 Y_1),\n    CategoryStruct.comp (((Functor.const (Discrete WalkingPair)).obj (Grp_.mk' (tensorObj X.X Y.X))).map f)\n        (Discrete.casesOn Y_1 fun as =>\n          WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry) =\n      CategoryStruct.comp\n        (Discrete.casesOn X_1 fun as => WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry)\n        ((pair X Y).map f)",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "14eb688933a3",
        "blame_date": "2025-03-13T21:07:25+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "2a488b325fe9c1abd68b80980d4bbf43de5a714090657aa3ada00e97f59db6f4"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 109,
        "start_column": 17,
        "end_line": 109,
        "end_column": 22
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\ns : Cone (pair X Y)\n\u22a2 CategoryStruct.comp s.pt.one (id sorry) =\n    { pt := Grp_.mk' (tensorObj X.X Y.X),\n          \u03c0 :=\n            {\n              app := fun X_1 =>\n                Discrete.casesOn X_1 fun as =>\n                  WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n              naturality := \u22ef } }.pt.one",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-13T12:13:41+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "77b0f9d53e4cbaf781c7e39e6da3f22f94c16aa73deae2ccbccad1daffaccbeb"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 110,
        "start_column": 17,
        "end_line": 110,
        "end_column": 22
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\ns : Cone (pair X Y)\n\u22a2 CategoryStruct.comp s.pt.mul (id sorry) =\n    CategoryStruct.comp (tensorHom (id sorry) (id sorry))\n      { pt := Grp_.mk' (tensorObj X.X Y.X),\n            \u03c0 :=\n              {\n                app := fun X_1 =>\n                  Discrete.casesOn X_1 fun as =>\n                    WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n                naturality := \u22ef } }.pt.mul",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L110"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-13T12:13:41+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "a8a44d222c50ba07a2e0b7827c92bb2c15fba79324be05abcee25f96f17d4d65"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 112,
        "start_column": 19,
        "end_line": 112,
        "end_column": 24
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 \u2200 (s : Cone (pair X Y)) (j : Discrete WalkingPair),\n    CategoryStruct.comp { hom := id sorry, one_hom := \u22ef, mul_hom := \u22ef }\n        ({ pt := Grp_.mk' (tensorObj X.X Y.X),\n                \u03c0 :=\n                  {\n                    app := fun X_1 =>\n                      Discrete.casesOn X_1 fun as =>\n                        WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n                    naturality := \u22ef } }.\u03c0.app\n          j) =\n      s.\u03c0.app j",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-13T12:13:41+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "a44f96183cb5d029a17854d2500dc294315624c5aaa24f9326ab445b65885f69"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/CFPGrp.lean",
        "start_line": 113,
        "start_column": 20,
        "end_line": 113,
        "end_column": 25
      },
      "debug_info": {
        "goal": "C : Type u_1\ninst\u271d\u00b3 : Category.{u_2, u_1} C\ninst\u271d\u00b2 : ChosenFiniteProducts C\nX\u271d Y\u271d : C\ninst\u271d\u00b9 : Grp_Class X\u271d\ninst\u271d : Grp_Class Y\u271d\nX Y : Grp_ C\n\u22a2 \u2200 (s : Cone (pair X Y))\n    (m :\n      s.pt \u27f6\n        { pt := Grp_.mk' (tensorObj X.X Y.X),\n            \u03c0 :=\n              {\n                app := fun X_1 =>\n                  Discrete.casesOn X_1 fun as =>\n                    WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n                naturality := \u22ef } }.pt),\n    (\u2200 (j : Discrete WalkingPair),\n        CategoryStruct.comp m\n            ({ pt := Grp_.mk' (tensorObj X.X Y.X),\n                    \u03c0 :=\n                      {\n                        app := fun X_1 =>\n                          Discrete.casesOn X_1 fun as =>\n                            WalkingPair.casesOn as { hom := fst X.X Y.X, one_hom := \u22ef, mul_hom := \u22ef } sorry,\n                        naturality := \u22ef } }.\u03c0.app\n              j) =\n          s.\u03c0.app j) \u2192\n      m = { hom := id sorry, one_hom := \u22ef, mul_hom := \u22ef }",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/CFPGrp.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-13T12:13:41+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "eabdc63896de67360cdf7f3a057626d9010aaee25fae8a6ec5f58d3f9a9bdb25"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/GroupScheme/Diagonalizable.lean",
        "start_line": 39,
        "start_column": 77,
        "end_line": 39,
        "end_column": 82
      },
      "debug_info": {
        "goal": "K : Type u_1\ninst\u271d\u00b9 : Field K\nG : Over (Spec (CommRingCat.of K))\ninst\u271d : Grp_Class G\n\u22a2 @AlgebraicGeometry.Scheme.IsDiagonalisable (CommRingCat.of K) G inst\u271d \u2194\n    IsAffine G.left \u2227 Submodule.span K {a | IsGroupLikeElem K a} = \u22a4",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/GroupScheme/Diagonalizable.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-15T21:00:56+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "9d14b9ba2cb4adde302699694fabbdfbded56326b667575c3147f88af5ed53b7"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/CoalgToAlg.lean",
        "start_line": 149,
        "start_column": 28,
        "end_line": 149,
        "end_column": 33
      },
      "debug_info": {
        "goal": "R A C : Type u\ninst\u271d\u2075 : CommRing R\ninst\u271d\u2074 : CommRing A\ninst\u271d\u00b3 : AddCommGroup C\ninst\u271d\u00b2 : Algebra R A\ninst\u271d\u00b9 : Module R C\ninst\u271d : Coalgebra R C\nf g : C \u2192\u2097[R] A\n\u22a2 mul' R A \u2218\u2097 TensorProduct.map f g \u2218\u2097 comul = mul' R A \u2218\u2097 TensorProduct.map g f \u2218\u2097 comul",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/CoalgToAlg.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "4362719e8620",
        "blame_date": "2025-04-12T17:46:36+02:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "0c7360f5b010a728f1ce9e34447093f78036754bfce4a513f12bcb8bc3fca6da"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/CoalgToAlg.lean",
        "start_line": 324,
        "start_column": 67,
        "end_line": 324,
        "end_column": 72
      },
      "debug_info": {
        "goal": "R A C : Type u\ninst\u271d\u2074 : CommRing R\ninst\u271d\u00b3 : CommRing A\ninst\u271d\u00b2 : CommRing C\ninst\u271d\u00b9 : HopfAlgebra R A\ninst\u271d : HopfAlgebra R C\nf : C \u2192\u2090c[R] A\n\u22a2 f\u207b\u00b9 * f = 1",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/CoalgToAlg.lean#L324"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-07T08:37:08+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "dd6d9bf7afe53596efb00f13dfdcac916c57203657e044443df23df6a43d8742"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/GroupLike.lean",
        "start_line": 113,
        "start_column": 67,
        "end_line": 113,
        "end_column": 72
      },
      "debug_info": {
        "goal": "K : Type u_2\nA : Type u_3\ninst\u271d\u00b3 : Field K\ninst\u271d\u00b2 : Ring A\ninst\u271d\u00b9 : Bialgebra K A\ninst\u271d : Nontrivial A\na : A\nha : @Bialgebra.IsGroupLikeElem K A Semifield.toCommSemiring Ring.toSemiring inst\u271d\u00b9 a\ns : Set A\nhsspan :\n  span K s = span K ({b | @Bialgebra.IsGroupLikeElem K A Semifield.toCommSemiring Ring.toSemiring inst\u271d\u00b9 b} \\ {a})\nhsindep : LinearIndependent K Subtype.val\nhs : \u2200 x \u2208 s, @Bialgebra.IsGroupLikeElem K A Semifield.toCommSemiring Ring.toSemiring inst\u271d\u00b9 x \u2227 \u00acx = a\nn : \u2115\nc : Fin n \u2192 K\ne : Fin n \u2192 \u2191s\nhcea : \u2211 i, c i \u2022 \u2191(e i) = a\n\u22a2 Injective e",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/GroupLike.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-09T02:11:46+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "ea0eda9fb2a5b17034ee5558c205578a7df0123fb0310d088ff5913b62ee877e"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/Cocomm.lean",
        "start_line": 89,
        "start_column": 17,
        "end_line": 89,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R C : Type u\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : Semiring C\ninst\u271d\u00b9 : HopfAlgebra R C\ninst\u271d : @Coalgebra.IsCocomm R C inst\u271d\u00b3 NonUnitalNonAssocSemiring.toAddCommMonoid Algebra.toModule Bialgebra.toCoalgebra\n\u22a2 counit \u2218\u2097 antipode = counit",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/Cocomm.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-09T15:09:11+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "cef7166c74d410db31d6926fc47d65bc57f9a2149276c6a965a74679488dc37c"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Hopf/Cocomm.lean",
        "start_line": 90,
        "start_column": 20,
        "end_line": 90,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R C : Type u\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : Semiring C\ninst\u271d\u00b9 : HopfAlgebra R C\ninst\u271d : @Coalgebra.IsCocomm R C inst\u271d\u00b3 NonUnitalNonAssocSemiring.toAddCommMonoid Algebra.toModule Bialgebra.toCoalgebra\n\u22a2 map antipode antipode \u2218\u2097 comul = comul \u2218\u2097 antipode",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Hopf/Cocomm.lean#L90"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-09T15:09:11+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "3d98babe068c17789d934702ad3e784057cb2441ea62aacd53ed5cb093092255"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean",
        "start_line": 324,
        "start_column": 10,
        "end_line": 324,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nC : Type u\u2081\ninst\u271d\u2076 : Category.{v\u2081, u\u2081} C\ninst\u271d\u2075 : ChosenFiniteProducts C\nD : Type u\u2082\ninst\u271d\u2074 : Category.{v\u2082, u\u2082} D\ninst\u271d\u00b3 : ChosenFiniteProducts D\nF : Functor C D\ninst\u271d\u00b2 : F.Monoidal\ninst\u271d\u00b9 : F.Full\ninst\u271d : F.Faithful\nG : Grp_ D\nhG : F.essImage G.X\nF' : C \u224c F.EssImageSubcategory := F.toEssImage.asEquivalence\nthis : F'.inverse.Monoidal\n\u22a2 CategoryStruct.comp\n      (CategoryStruct.comp\n        (\u03bc F (F'.inverse.obj { obj := G.X, property := hG }) (F'.inverse.obj { obj := G.X, property := hG }))\n        (CategoryStruct.comp (F.map (\u03bc F'.inverse { obj := G.X, property := hG } { obj := G.X, property := hG }))\n          (F'.counitIso.hom.app (tensorObj { obj := G.X, property := hG } { obj := G.X, property := hG }))))\n      (fst { obj := G.X, property := hG }.obj { obj := G.X, property := hG }.obj) =\n    CategoryStruct.comp\n      (fst ((F'.inverse.comp F'.functor).obj { obj := G.X, property := hG })\n        ((F'.inverse.comp F'.functor).obj { obj := G.X, property := hG }))\n      (F'.counitIso.hom.app { obj := G.X, property := hG })",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean#L324"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-31T10:54:10+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "92123487def7277959e6d0f7dd67a053e98f0ff1567afc6172beba1eb86abb96"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean",
        "start_line": 325,
        "start_column": 10,
        "end_line": 325,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nC : Type u\u2081\ninst\u271d\u2076 : Category.{v\u2081, u\u2081} C\ninst\u271d\u2075 : ChosenFiniteProducts C\nD : Type u\u2082\ninst\u271d\u2074 : Category.{v\u2082, u\u2082} D\ninst\u271d\u00b3 : ChosenFiniteProducts D\nF : Functor C D\ninst\u271d\u00b2 : F.Monoidal\ninst\u271d\u00b9 : F.Full\ninst\u271d : F.Faithful\nG : Grp_ D\nhG : F.essImage G.X\nF' : C \u224c F.EssImageSubcategory := F.toEssImage.asEquivalence\nthis : F'.inverse.Monoidal\n\u22a2 CategoryStruct.comp\n      (CategoryStruct.comp\n        (\u03bc F (F'.inverse.obj { obj := G.X, property := hG }) (F'.inverse.obj { obj := G.X, property := hG }))\n        (CategoryStruct.comp (F.map (\u03bc F'.inverse { obj := G.X, property := hG } { obj := G.X, property := hG }))\n          (F'.counitIso.hom.app (tensorObj { obj := G.X, property := hG } { obj := G.X, property := hG }))))\n      (snd { obj := G.X, property := hG }.obj { obj := G.X, property := hG }.obj) =\n    CategoryStruct.comp\n      (tensorHom (F'.counitIso.hom.app { obj := G.X, property := hG })\n        (F'.counitIso.hom.app { obj := G.X, property := hG }))\n      (snd { obj := G.X, property := hG }.obj { obj := G.X, property := hG }.obj)",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean#L325"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-31T10:54:10+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "87a5636f43b0e1ee5af2157eae16623773ae1aa37dd4ff8d27b147b60cbe9448"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean",
        "start_line": 327,
        "start_column": 6,
        "end_line": 327,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case refine_2\nC : Type u\u2081\ninst\u271d\u2076 : Category.{v\u2081, u\u2081} C\ninst\u271d\u2075 : ChosenFiniteProducts C\nD : Type u\u2082\ninst\u271d\u2074 : Category.{v\u2082, u\u2082} D\ninst\u271d\u00b3 : ChosenFiniteProducts D\nF : Functor C D\ninst\u271d\u00b2 : F.Monoidal\ninst\u271d\u00b9 : F.Full\ninst\u271d : F.Faithful\nG : Grp_ D\nhG : F.essImage G.X\nF' : C \u224c F.EssImageSubcategory := F.toEssImage.asEquivalence\nthis\u271d : F'.inverse.Monoidal\nthis :\n  CategoryStruct.comp\n      (CategoryStruct.comp\n        (\u03bc F (F'.inverse.obj { obj := G.X, property := hG }) (F'.inverse.obj { obj := G.X, property := hG }))\n        (CategoryStruct.comp (F.map (\u03bc F'.inverse { obj := G.X, property := hG } { obj := G.X, property := hG }))\n          (F'.counitIso.hom.app (tensorObj { obj := G.X, property := hG } { obj := G.X, property := hG }))))\n      G.mul =\n    CategoryStruct.comp\n      (tensorHom (F'.counitIso.hom.app { obj := G.X, property := hG })\n        (F'.counitIso.hom.app { obj := G.X, property := hG }))\n      G.mul\n\u22a2 CategoryStruct.comp\n      (\u03bc F (F'.inverse.obj { obj := G.X, property := hG }) (F'.inverse.obj { obj := G.X, property := hG }))\n      (CategoryStruct.comp (F.map (\u03bc F'.inverse { obj := G.X, property := hG } { obj := G.X, property := hG }))\n        (CategoryStruct.comp\n          (F'.counitIso.hom.app (tensorObj { obj := G.X, property := hG } { obj := G.X, property := hG }))\n          ((Functor.id F.EssImageSubcategory).map G.mul))) =\n    CategoryStruct.comp\n      (tensorHom (F'.counitIso.hom.app { obj := G.X, property := hG })\n        (F'.counitIso.hom.app { obj := G.X, property := hG }))\n      G.mul",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/CategoryTheory/Monoidal/Grp_.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-31T10:54:10+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "a0f97ccc0c42468080b73eea160ab2c97cdccf0f6fb065f0b97489c4c39c09c5"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/HopfAlgebra/Basic.lean",
        "start_line": 11,
        "start_column": 2,
        "end_line": 11,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : Semiring A\ninst\u271d : HopfAlgebra R A\na b : A\n\u22a2 antipode (a * b) = antipode b * antipode a",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/HopfAlgebra/Basic.lean#L11"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-25T16:11:16+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "1f8549a09e79320d39ce9ff6b5924f30199a353565f30208f133588d2318f0b9"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/Bialgebra/Hom.lean",
        "start_line": 46,
        "start_column": 82,
        "end_line": 46,
        "end_column": 87
      },
      "debug_info": {
        "goal": "case add.add\nR : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : CommSemiring A\ninst\u271d : Algebra R A\nx\u271d\u00b9 y\u271d\u00b9 x\u271d y\u271d : TensorProduct R A A\na\u271d\u00b3 :\n  (LinearMap.mul' R A) (x\u271d\u00b9 * x\u271d) = (LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) x\u271d \u2192\n    (LinearMap.mul' R A) (y\u271d\u00b9 * x\u271d) = (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) x\u271d \u2192\n      (LinearMap.mul' R A) ((x\u271d\u00b9 + y\u271d\u00b9) * x\u271d) = (LinearMap.mul' R A) (x\u271d\u00b9 + y\u271d\u00b9) * (LinearMap.mul' R A) x\u271d\na\u271d\u00b2 :\n  (LinearMap.mul' R A) (x\u271d\u00b9 * y\u271d) = (LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) y\u271d \u2192\n    (LinearMap.mul' R A) (y\u271d\u00b9 * y\u271d) = (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) y\u271d \u2192\n      (LinearMap.mul' R A) ((x\u271d\u00b9 + y\u271d\u00b9) * y\u271d) = (LinearMap.mul' R A) (x\u271d\u00b9 + y\u271d\u00b9) * (LinearMap.mul' R A) y\u271d\na\u271d\u00b9 : (LinearMap.mul' R A) (x\u271d\u00b9 * (x\u271d + y\u271d)) = (LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) (x\u271d + y\u271d)\na\u271d : (LinearMap.mul' R A) (y\u271d\u00b9 * (x\u271d + y\u271d)) = (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) (x\u271d + y\u271d)\n\u22a2 (LinearMap.mul' R A) (x\u271d\u00b9 * x\u271d) + (LinearMap.mul' R A) (y\u271d\u00b9 * x\u271d) +\n      ((LinearMap.mul' R A) (x\u271d\u00b9 * y\u271d) + (LinearMap.mul' R A) (y\u271d\u00b9 * y\u271d)) =\n    (LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) x\u271d + (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) x\u271d +\n      ((LinearMap.mul' R A) x\u271d\u00b9 * (LinearMap.mul' R A) y\u271d + (LinearMap.mul' R A) y\u271d\u00b9 * (LinearMap.mul' R A) y\u271d)",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/Bialgebra/Hom.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-06T08:41:35+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "0022394b1a37fa9e574c68393e1737a895b095ee085b7488bc3f8c2fcbf6b644"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/Bialgebra/Hom.lean",
        "start_line": 62,
        "start_column": 4,
        "end_line": 62,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case a.h.h\nR : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : CommSemiring A\ninst\u271d : Bialgebra R A\na b : A\n\u22a2 (map { toAddHom := (LinearMap.mul' R A).toAddHom, map_smul' := \u22ef }\n        { toAddHom := (LinearMap.mul' R A).toAddHom, map_smul' := \u22ef })\n      ((tensorTensorTensorComm R A A A A) (comul a \u2297\u209c[R] comul b)) =\n    comul a * comul b",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/Bialgebra/Hom.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-06T08:41:35+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "6797e9e4201ab91c92ffbbf5e615ab9695496875df6e3a583c0b02c30a342b1b"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/Bialgebra/Hom.lean",
        "start_line": 74,
        "start_column": 31,
        "end_line": 74,
        "end_column": 36
      },
      "debug_info": {
        "goal": "case h\nR : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : CommSemiring A\ninst\u271d : Bialgebra R A\nx\u271d : A\n\u22a2 (LinearMap.mul' R R) ((map counit counit) (comul x\u271d)) = counit x\u271d",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/Bialgebra/Hom.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-06T08:41:35+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "d59a238fb0a8adf9d85704e9bb79900913e4c49b3e08797a4417447b966e1ae8"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/Toric",
        "branch": "faces",
        "commit": "658380a50c5b69bb6089ee04c5d29b99f4eb2b85",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Toric/Mathlib/RingTheory/Bialgebra/Hom.lean",
        "start_line": 78,
        "start_column": 4,
        "end_line": 78,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h\nR : Type u_1\nA : Type u_2\ninst\u271d\u00b2 : CommSemiring R\ninst\u271d\u00b9 : CommSemiring A\ninst\u271d : Bialgebra R A\na : A\n\u22a2 (map { toFun := \u21d1(comulAlgHom R A), map_add' := \u22ef, map_smul' := \u22ef }\n        { toFun := \u21d1(comulAlgHom R A), map_add' := \u22ef, map_smul' := \u22ef })\n      (comul a) =\n    (tensorTensorTensorComm R A A A A) ((map comul comul) (comul a))",
        "url": "https://github.com/YaelDillies/Toric/blob/658380a50c5b69bb6089ee04c5d29b99f4eb2b85/Toric/Mathlib/RingTheory/Bialgebra/Hom.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-04-06T08:41:35+00:00",
        "inclusion_date": "2025-05-28T07:02:50.107069+00:00"
      },
      "id": "0a0dc2e4123d86c9592068c3ec3e8919278f0830df34d650a73dca5437c17a1c"
    }
  ]
}