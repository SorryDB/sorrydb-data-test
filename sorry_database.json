{
  "repos": [
    {
      "remote_url": "https://github.com/0art0/lean-slides",
      "last_time_visited": "2025-05-21T05:00:07.942028+00:00",
      "remote_heads_hash": "ea1fca1fe87f"
    },
    {
      "remote_url": "https://github.com/0art0/kimina",
      "last_time_visited": "2025-05-21T05:00:08.374753+00:00",
      "remote_heads_hash": "af1479ac66aa"
    },
    {
      "remote_url": "https://github.com/a2435191/lean-logic-formalization",
      "last_time_visited": "2025-05-25T05:00:01.723767+00:00",
      "remote_heads_hash": "88c390254510"
    },
    {
      "remote_url": "https://github.com/abdoo8080/lean-cvc5",
      "last_time_visited": "2025-05-25T05:00:03.082309+00:00",
      "remote_heads_hash": "06cac1a318c1"
    },
    {
      "remote_url": "https://github.com/acmepjz/md4lean",
      "last_time_visited": "2025-05-21T05:00:10.301861+00:00",
      "remote_heads_hash": "78f0fe311a3f"
    },
    {
      "remote_url": "https://github.com/acmepjz/lean-iwasawa",
      "last_time_visited": "2025-05-25T05:00:04.313539+00:00",
      "remote_heads_hash": "ea00810ac825"
    },
    {
      "remote_url": "https://github.com/adamtopaz/NodeGraph",
      "last_time_visited": "2025-05-21T05:00:11.777160+00:00",
      "remote_heads_hash": "97683baaf85f"
    },
    {
      "remote_url": "https://github.com/adamtopaz/lean_extras",
      "last_time_visited": "2025-05-21T05:00:13.509282+00:00",
      "remote_heads_hash": "6b9cfc280153"
    },
    {
      "remote_url": "https://github.com/adomani/MA4N1_Theorem_proving_with_Lean",
      "last_time_visited": "2025-05-21T05:00:13.940836+00:00",
      "remote_heads_hash": "f4ae976f7945"
    },
    {
      "remote_url": "https://github.com/adomani/advents",
      "last_time_visited": "2025-05-21T05:00:14.393319+00:00",
      "remote_heads_hash": "c4eb517ab2cb"
    },
    {
      "remote_url": "https://github.com/AdrienChampion/safeIdx",
      "last_time_visited": "2025-05-21T05:00:15.130447+00:00",
      "remote_heads_hash": "f362cca5ed0c"
    },
    {
      "remote_url": "https://github.com/AdrienChampion/loadTerms.lean",
      "last_time_visited": "2025-05-21T05:00:15.560252+00:00",
      "remote_heads_hash": "c29711dc5577"
    },
    {
      "remote_url": "https://github.com/AeneasVerif/icfp-tutorial",
      "last_time_visited": "2025-05-21T05:00:15.994305+00:00",
      "remote_heads_hash": "58429d1ce007"
    },
    {
      "remote_url": "https://github.com/ah1112/synthetic_euclid_4",
      "last_time_visited": "2025-05-21T05:00:16.371075+00:00",
      "remote_heads_hash": "ffe525d762dd"
    },
    {
      "remote_url": "https://github.com/ahhwuhu/zeta_3_irrational",
      "last_time_visited": "2025-05-21T05:00:16.807200+00:00",
      "remote_heads_hash": "418eb1fb8d8d"
    },
    {
      "remote_url": "https://github.com/AlexBrodbelt/metric-spaces-and-topology-game",
      "last_time_visited": "2025-05-21T05:00:17.271718+00:00",
      "remote_heads_hash": "ba81e57c685b"
    },
    {
      "remote_url": "https://github.com/alexf91/lean4-ctypes",
      "last_time_visited": "2025-05-21T05:00:17.664846+00:00",
      "remote_heads_hash": "4034301ddd2f"
    },
    {
      "remote_url": "https://github.com/alexjbest/leaff",
      "last_time_visited": "2025-05-21T05:00:18.091969+00:00",
      "remote_heads_hash": "4dc694ebc489"
    },
    {
      "remote_url": "https://github.com/alexkeizer/QpfTypes",
      "last_time_visited": "2025-05-21T05:00:18.558681+00:00",
      "remote_heads_hash": "e872072f74fd"
    },
    {
      "remote_url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "last_time_visited": "2025-05-25T05:00:09.202352+00:00",
      "remote_heads_hash": "bd0d44f4bc72"
    },
    {
      "remote_url": "https://github.com/AlexLoitzl/pumping_cfg",
      "last_time_visited": "2025-05-21T05:00:19.628198+00:00",
      "remote_heads_hash": "0ffc49dcab36"
    },
    {
      "remote_url": "https://github.com/algebraic-dev/parse",
      "last_time_visited": "2025-05-21T05:00:20.094709+00:00",
      "remote_heads_hash": "a27da8492d57"
    },
    {
      "remote_url": "https://github.com/algebraic-dev/colorized",
      "last_time_visited": "2025-05-21T05:00:20.536298+00:00",
      "remote_heads_hash": "9381918d3f5a"
    },
    {
      "remote_url": "https://github.com/alma-n/ConstructiveLogicCourseGame",
      "last_time_visited": "2025-05-21T05:00:20.981310+00:00",
      "remote_heads_hash": "d52b05d32410"
    },
    {
      "remote_url": "https://github.com/alok/LeanPlot",
      "last_time_visited": "2025-05-25T05:05:36.980616+00:00",
      "remote_heads_hash": "9d8a0750fded"
    },
    {
      "remote_url": "https://github.com/alok/lean-inf",
      "last_time_visited": "2025-05-21T05:00:21.877234+00:00",
      "remote_heads_hash": "590910f95db9"
    },
    {
      "remote_url": "https://github.com/alok/AsciiPlot",
      "last_time_visited": "2025-05-21T05:00:22.322172+00:00",
      "remote_heads_hash": "b3900aad52ab"
    },
    {
      "remote_url": "https://github.com/ammkrn/timelib",
      "last_time_visited": "2025-05-21T05:00:22.730225+00:00",
      "remote_heads_hash": "40bbd08a1411"
    },
    {
      "remote_url": "https://github.com/ammkrn/printiest",
      "last_time_visited": "2025-05-21T05:00:23.185095+00:00",
      "remote_heads_hash": "4a58b9aba192"
    },
    {
      "remote_url": "https://github.com/Anderssorby/SDL.lean",
      "last_time_visited": "2025-05-21T05:00:23.617342+00:00",
      "remote_heads_hash": "5037aa863bab"
    },
    {
      "remote_url": "https://github.com/andrejbauer/partial-combinatory-algebras",
      "last_time_visited": "2025-05-21T05:00:24.063188+00:00",
      "remote_heads_hash": "136c83911bf8"
    },
    {
      "remote_url": "https://github.com/andrejbauer/lean2sexp",
      "last_time_visited": "2025-05-21T05:00:24.514295+00:00",
      "remote_heads_hash": "b2411127cd9a"
    },
    {
      "remote_url": "https://github.com/anlucia/ChromaticPolynomial",
      "last_time_visited": "2025-05-21T05:00:24.926124+00:00",
      "remote_heads_hash": "ea3ff45e09d2"
    },
    {
      "remote_url": "https://github.com/anoma/juvix-lean",
      "last_time_visited": "2025-05-21T05:00:25.365141+00:00",
      "remote_heads_hash": "5bf378abd337"
    },
    {
      "remote_url": "https://github.com/anurudhp/aoc2022",
      "last_time_visited": "2025-05-21T05:00:25.787139+00:00",
      "remote_heads_hash": "0cd9f63a560c"
    },
    {
      "remote_url": "https://github.com/apnelson1/Matroid",
      "last_time_visited": "2025-05-22T05:01:51.756035+00:00",
      "remote_heads_hash": "7a06b709c2d5"
    },
    {
      "remote_url": "https://github.com/arademaker/delphin",
      "last_time_visited": "2025-05-21T05:00:28.209279+00:00",
      "remote_heads_hash": "9a189fa3cc01"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/ZKSnark.lean",
      "last_time_visited": "2025-05-21T05:00:28.611269+00:00",
      "remote_heads_hash": "6b431921091e"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/YatimaStdLib.lean",
      "last_time_visited": "2025-05-21T05:00:29.290275+00:00",
      "remote_heads_hash": "0aa447a08aa7"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/yatima",
      "last_time_visited": "2025-05-21T05:00:30.043150+00:00",
      "remote_heads_hash": "27bd4dd3b298"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Wasm.lean",
      "last_time_visited": "2025-05-21T05:00:30.707202+00:00",
      "remote_heads_hash": "9723673e436f"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/straume",
      "last_time_visited": "2025-05-21T05:00:31.224101+00:00",
      "remote_heads_hash": "191e1fe248b0"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Spark.lean",
      "last_time_visited": "2025-05-21T05:00:31.650923+00:00",
      "remote_heads_hash": "563b2adf8d2c"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/RustFFI.lean",
      "last_time_visited": "2025-05-21T05:00:32.394172+00:00",
      "remote_heads_hash": "1494787a26c1"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Poseidon.lean",
      "last_time_visited": "2025-05-21T05:00:33.443070+00:00",
      "remote_heads_hash": "ae3fa14bb0fa"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Nova.lean",
      "last_time_visited": "2025-05-21T05:00:33.903050+00:00",
      "remote_heads_hash": "cb0c48f3da0f"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Megaparsec.lean",
      "last_time_visited": "2025-05-21T05:00:34.324491+00:00",
      "remote_heads_hash": "b3fcd8401935"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Lurk.lean",
      "last_time_visited": "2025-05-21T05:00:35.134317+00:00",
      "remote_heads_hash": "902ac482e31a"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/LSpec",
      "last_time_visited": "2025-05-21T05:00:35.584033+00:00",
      "remote_heads_hash": "a32710bb1221"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Ipld.lean",
      "last_time_visited": "2025-05-21T05:00:35.990859+00:00",
      "remote_heads_hash": "e2515c1f6cdd"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Http.lean",
      "last_time_visited": "2025-05-21T05:00:36.412865+00:00",
      "remote_heads_hash": "1907669bb635"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/FFaCiL.lean",
      "last_time_visited": "2025-05-21T05:00:36.830764+00:00",
      "remote_heads_hash": "5e6700da2f40"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Blake3.lean",
      "last_time_visited": "2025-05-21T05:00:37.299426+00:00",
      "remote_heads_hash": "ffd636c03d76"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Bellanova.lean",
      "last_time_visited": "2025-05-21T05:00:37.705711+00:00",
      "remote_heads_hash": "01d9d2ce8e7b"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/viper",
      "last_time_visited": "2025-05-21T05:00:38.123165+00:00",
      "remote_heads_hash": "55f501c527d9"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/NumLean",
      "last_time_visited": "2025-05-21T05:00:38.580136+00:00",
      "remote_heads_hash": "c95d37ba3c8c"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/LeanREPL",
      "last_time_visited": "2025-05-21T05:00:38.942224+00:00",
      "remote_heads_hash": "de82b32f7d0f"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/LeanMySQL",
      "last_time_visited": "2025-05-21T05:00:39.370074+00:00",
      "remote_heads_hash": "a772a266d8b7"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/LeanMusic",
      "last_time_visited": "2025-05-21T05:00:39.819728+00:00",
      "remote_heads_hash": "6d83b907537a"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/FxyLang",
      "last_time_visited": "2025-05-21T05:00:40.224505+00:00",
      "remote_heads_hash": "41f67e05b658"
    },
    {
      "remote_url": "https://github.com/atlas-computing-org/CoqLeanTranslation",
      "last_time_visited": "2025-05-21T05:00:40.630531+00:00",
      "remote_heads_hash": "3324297d2d14"
    },
    {
      "remote_url": "https://github.com/ATOMSLab/LeanLJ",
      "last_time_visited": "2025-05-21T05:00:41.012609+00:00",
      "remote_heads_hash": "a40acb41e3c9"
    },
    {
      "remote_url": "https://github.com/atrieu/lean-cryptolib",
      "last_time_visited": "2025-05-21T05:00:41.438139+00:00",
      "remote_heads_hash": "af280c966902"
    },
    {
      "remote_url": "https://github.com/austinletson/use-lean-standard-action-with-bare-project",
      "last_time_visited": "2025-05-21T05:00:41.826178+00:00",
      "remote_heads_hash": "121be82fbaf8"
    },
    {
      "remote_url": "https://github.com/avigad/verification_demo",
      "last_time_visited": "2025-05-21T05:00:42.223477+00:00",
      "remote_heads_hash": "c4e63df96c9f"
    },
    {
      "remote_url": "https://github.com/avigad/LeanSudoku",
      "last_time_visited": "2025-05-21T05:00:42.580420+00:00",
      "remote_heads_hash": "cb5ac28c9e23"
    },
    {
      "remote_url": "https://github.com/awodey/joyal",
      "last_time_visited": "2025-05-21T05:00:43.067688+00:00",
      "remote_heads_hash": "a616ad08ef80"
    },
    {
      "remote_url": "https://github.com/axiomed/http",
      "last_time_visited": "2025-05-21T05:00:43.483321+00:00",
      "remote_heads_hash": "b9eedf58de6b"
    },
    {
      "remote_url": "https://github.com/bergmannjg/time",
      "last_time_visited": "2025-05-21T05:00:43.914047+00:00",
      "remote_heads_hash": "a188d26ad6bd"
    },
    {
      "remote_url": "https://github.com/bergmannjg/regex",
      "last_time_visited": "2025-05-21T05:00:44.397754+00:00",
      "remote_heads_hash": "b8c4594aa5df"
    },
    {
      "remote_url": "https://github.com/bergmannjg/leanCurl",
      "last_time_visited": "2025-05-21T05:00:45.027263+00:00",
      "remote_heads_hash": "ff0a6479d879"
    },
    {
      "remote_url": "https://github.com/Bergschaf/Localic-Caratheodory-Extensions",
      "last_time_visited": "2025-05-21T05:00:45.458200+00:00",
      "remote_heads_hash": "ac8eee60c8c4"
    },
    {
      "remote_url": "https://github.com/Bergschaf/lean-banach-tarski",
      "last_time_visited": "2025-05-21T05:00:46.778019+00:00",
      "remote_heads_hash": "f48bdebe8bf5"
    },
    {
      "remote_url": "https://github.com/Bergschaf/banach-tarski",
      "last_time_visited": "2025-05-21T05:00:47.253838+00:00",
      "remote_heads_hash": "16e9b5d0a40f"
    },
    {
      "remote_url": "https://github.com/BoltonBailey/formal-snarks-project",
      "last_time_visited": "2025-05-21T05:00:48.196570+00:00",
      "remote_heads_hash": "8c4e3059ad64"
    },
    {
      "remote_url": "https://github.com/bridgekat/filter-game",
      "last_time_visited": "2025-05-21T05:00:48.604477+00:00",
      "remote_heads_hash": "713f56888077"
    },
    {
      "remote_url": "https://github.com/BRonen/sqlite3-lean4",
      "last_time_visited": "2025-05-21T05:00:49.060004+00:00",
      "remote_heads_hash": "a37e6d54423a"
    },
    {
      "remote_url": "https://github.com/CAIMEOX/json-schema-lean",
      "last_time_visited": "2025-05-21T05:00:49.515867+00:00",
      "remote_heads_hash": "4bb2a5e3da3c"
    },
    {
      "remote_url": "https://github.com/chasenorman/CanonicalLean",
      "last_time_visited": "2025-05-21T05:00:49.971150+00:00",
      "remote_heads_hash": "a1e8b9e0c733"
    },
    {
      "remote_url": "https://github.com/chords-project/itc-course",
      "last_time_visited": "2025-05-21T05:00:50.517101+00:00",
      "remote_heads_hash": "0ca4765c5800"
    },
    {
      "remote_url": "https://github.com/chrisflav/bruhat-tits",
      "last_time_visited": "2025-05-21T05:00:50.977226+00:00",
      "remote_heads_hash": "f17750fd3e1b"
    },
    {
      "remote_url": "https://github.com/cmu-l3/llmlean",
      "last_time_visited": "2025-05-21T05:00:51.401947+00:00",
      "remote_heads_hash": "04624fcb53e2"
    },
    {
      "remote_url": "https://github.com/Command-Master/lean-bourgain",
      "last_time_visited": "2025-05-21T05:00:51.991199+00:00",
      "remote_heads_hash": "681a63650aef"
    },
    {
      "remote_url": "https://github.com/dagurtomas/LeanCondensed",
      "last_time_visited": "2025-05-21T05:00:52.492043+00:00",
      "remote_heads_hash": "9da29c05b7f3"
    },
    {
      "remote_url": "https://github.com/dannypsnl/violet-legacy",
      "last_time_visited": "2025-05-21T05:00:52.969330+00:00",
      "remote_heads_hash": "4bb551ca9c3b"
    },
    {
      "remote_url": "https://github.com/datokrat/lean-iterators",
      "last_time_visited": "2025-05-21T05:00:53.406790+00:00",
      "remote_heads_hash": "c5b994906786"
    },
    {
      "remote_url": "https://github.com/DavePearce/LeanEVM",
      "last_time_visited": "2025-05-21T05:00:53.856129+00:00",
      "remote_heads_hash": "6a877e26a357"
    },
    {
      "remote_url": "https://github.com/Deducteam/lean2dk",
      "last_time_visited": "2025-05-22T05:02:02.260941+00:00",
      "remote_heads_hash": "bba277b049d3"
    },
    {
      "remote_url": "https://github.com/djvelleman/HTPILeanPackage",
      "last_time_visited": "2025-05-21T05:00:54.761137+00:00",
      "remote_heads_hash": "1523056e6bad"
    },
    {
      "remote_url": "https://github.com/Dominique-Lawson/Directed-Topology-Lean-4",
      "last_time_visited": "2025-05-21T05:00:55.201943+00:00",
      "remote_heads_hash": "f5f4b92f8048"
    },
    {
      "remote_url": "https://github.com/draperlaboratory/ELFSage",
      "last_time_visited": "2025-05-21T05:00:55.657177+00:00",
      "remote_heads_hash": "56692d17d705"
    },
    {
      "remote_url": "https://github.com/dtumad/VCV-io",
      "last_time_visited": "2025-05-25T05:05:53.338530+00:00",
      "remote_heads_hash": "b1eb696cb50e"
    },
    {
      "remote_url": "https://github.com/dupuisf/BibtexQuery",
      "last_time_visited": "2025-05-21T05:00:56.714199+00:00",
      "remote_heads_hash": "ff993a7036b7"
    },
    {
      "remote_url": "https://github.com/dwrensha/tryAtEachStep",
      "last_time_visited": "2025-05-21T05:00:57.130190+00:00",
      "remote_heads_hash": "9adcd4318e79"
    },
    {
      "remote_url": "https://github.com/dwrensha/Rupert.lean",
      "last_time_visited": "2025-05-25T05:15:53.488086+00:00",
      "remote_heads_hash": "3e277b9f8752"
    },
    {
      "remote_url": "https://github.com/dwrensha/lean4-maze",
      "last_time_visited": "2025-05-21T05:00:58.581722+00:00",
      "remote_heads_hash": "da00a1ae7422"
    },
    {
      "remote_url": "https://github.com/dwrensha/compfiles",
      "last_time_visited": "2025-05-25T05:15:55.297022+00:00",
      "remote_heads_hash": "165eaa5da383"
    },
    {
      "remote_url": "https://github.com/dwrensha/Chess.lean",
      "last_time_visited": "2025-05-21T05:01:01.604326+00:00",
      "remote_heads_hash": "f046a40be392"
    },
    {
      "remote_url": "https://github.com/dwrensha/animate-lean-proofs",
      "last_time_visited": "2025-05-21T05:01:02.038125+00:00",
      "remote_heads_hash": "9d40bfc25a50"
    },
    {
      "remote_url": "https://github.com/ElifUskuplu/Stlc_deBruijn",
      "last_time_visited": "2025-05-21T05:01:02.688193+00:00",
      "remote_heads_hash": "b80b39af1eda"
    },
    {
      "remote_url": "https://github.com/emilyriehl/infinity-cosmos",
      "last_time_visited": "2025-05-25T05:15:57.442918+00:00",
      "remote_heads_hash": "0c7204348ea8"
    },
    {
      "remote_url": "https://github.com/eric-wieser/lean-matrix-cookbook",
      "last_time_visited": "2025-05-21T05:01:04.100237+00:00",
      "remote_heads_hash": "2373c07ddba6"
    },
    {
      "remote_url": "https://github.com/fgdorais/lean4-unicode-basic",
      "last_time_visited": "2025-05-25T05:16:00.030687+00:00",
      "remote_heads_hash": "b8028c3e8601"
    },
    {
      "remote_url": "https://github.com/fgdorais/lean4-parser",
      "last_time_visited": "2025-05-21T05:01:09.113315+00:00",
      "remote_heads_hash": "3e387d11c4c5"
    },
    {
      "remote_url": "https://github.com/fgdorais/extra4",
      "last_time_visited": "2025-05-21T05:01:10.818011+00:00",
      "remote_heads_hash": "cdf1d1637749"
    },
    {
      "remote_url": "https://github.com/fgdorais/algebra4",
      "last_time_visited": "2025-05-21T05:01:11.257020+00:00",
      "remote_heads_hash": "c43bc82d6d6a"
    },
    {
      "remote_url": "https://github.com/FLDutchmann/selberg-sieve4",
      "last_time_visited": "2025-05-21T05:01:11.630278+00:00",
      "remote_heads_hash": "ab1f718907fe"
    },
    {
      "remote_url": "https://github.com/forked-from-1kasper/ground_zero",
      "last_time_visited": "2025-05-21T05:01:12.096842+00:00",
      "remote_heads_hash": "f259deeaa740"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Incompleteness",
      "last_time_visited": "2025-05-21T05:01:12.648035+00:00",
      "remote_heads_hash": "aa43d4d432c4"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Foundation",
      "last_time_visited": "2025-05-25T05:16:06.655829+00:00",
      "remote_heads_hash": "1c569159d565"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Arithmetization",
      "last_time_visited": "2025-05-21T05:01:15.893259+00:00",
      "remote_heads_hash": "d0d6f3b5214a"
    },
    {
      "remote_url": "https://github.com/FormalSAT/trestle",
      "last_time_visited": "2025-05-21T05:01:16.516241+00:00",
      "remote_heads_hash": "65e51d93bcb8"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/BonnLeanSeminar",
      "last_time_visited": "2025-05-21T05:05:27.972731+00:00",
      "remote_heads_hash": "ee0ef2c63a3d"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/sard",
      "last_time_visited": "2025-05-21T05:05:28.498699+00:00",
      "remote_heads_hash": "95b73595aa3d"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/LogicColloquiumTutorial",
      "last_time_visited": "2025-05-21T05:05:28.919906+00:00",
      "remote_heads_hash": "882f65b12a0f"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/LeanCourse24",
      "last_time_visited": "2025-05-21T05:05:29.463285+00:00",
      "remote_heads_hash": "9ec29a82bdef"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/HausdorffSchoolLean",
      "last_time_visited": "2025-05-21T05:05:29.964165+00:00",
      "remote_heads_hash": "f96efea3d8b0"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/carleson",
      "last_time_visited": "2025-05-25T05:16:11.407709+00:00",
      "remote_heads_hash": "910e80c76bac"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/BonnAnalysis",
      "last_time_visited": "2025-05-21T05:05:33.397356+00:00",
      "remote_heads_hash": "a346ac04dd45"
    },
    {
      "remote_url": "https://github.com/FR-vdash-bot/Algorithm",
      "last_time_visited": "2025-05-21T05:05:33.866671+00:00",
      "remote_heads_hash": "731cbd0bc431"
    },
    {
      "remote_url": "https://github.com/FredRaj3/SemicircleLaw",
      "last_time_visited": "2025-05-21T05:05:34.286185+00:00",
      "remote_heads_hash": "8ab34523803a"
    },
    {
      "remote_url": "https://github.com/frenzymath/jixia",
      "last_time_visited": "2025-05-21T05:05:34.720152+00:00",
      "remote_heads_hash": "de412e9b1be2"
    },
    {
      "remote_url": "https://github.com/functionally/crypto-lean4",
      "last_time_visited": "2025-05-21T05:05:35.156347+00:00",
      "remote_heads_hash": "4cbd4d4584a2"
    },
    {
      "remote_url": "https://github.com/funexists/raylean",
      "last_time_visited": "2025-05-21T05:05:35.582956+00:00",
      "remote_heads_hash": "72a50b820b10"
    },
    {
      "remote_url": "https://github.com/FWuermse/lean-postgres",
      "last_time_visited": "2025-05-21T05:05:36.298443+00:00",
      "remote_heads_hash": "32be1086f64b"
    },
    {
      "remote_url": "https://github.com/GasStationManager/SafeVerify",
      "last_time_visited": "2025-05-21T05:05:36.776218+00:00",
      "remote_heads_hash": "211db3c413e7"
    },
    {
      "remote_url": "https://github.com/GasStationManager/LeanTool",
      "last_time_visited": "2025-05-21T05:05:37.195420+00:00",
      "remote_heads_hash": "3405f7a052ae"
    },
    {
      "remote_url": "https://github.com/GasStationManager/FormalizeWithTest",
      "last_time_visited": "2025-05-21T05:05:37.884265+00:00",
      "remote_heads_hash": "c9bc0ed602e4"
    },
    {
      "remote_url": "https://github.com/GasStationManager/CodeProofTheArena",
      "last_time_visited": "2025-05-21T05:05:38.311233+00:00",
      "remote_heads_hash": "6eaeef733792"
    },
    {
      "remote_url": "https://github.com/gdncc/Cryptography",
      "last_time_visited": "2025-05-21T05:05:38.764522+00:00",
      "remote_heads_hash": "e404ba4a5cb4"
    },
    {
      "remote_url": "https://github.com/girafe-ai/lean-course",
      "last_time_visited": "2025-05-21T05:05:39.581486+00:00",
      "remote_heads_hash": "3908cec9c038"
    },
    {
      "remote_url": "https://github.com/girving/ray",
      "last_time_visited": "2025-05-21T05:05:40.108352+00:00",
      "remote_heads_hash": "8b8a12f19700"
    },
    {
      "remote_url": "https://github.com/girving/interval",
      "last_time_visited": "2025-05-21T05:05:40.655966+00:00",
      "remote_heads_hash": "6aeaa065e6e7"
    },
    {
      "remote_url": "https://github.com/glams-lean-2024/formal-2024",
      "last_time_visited": "2025-05-21T05:05:41.172287+00:00",
      "remote_heads_hash": "53d17afbfcae"
    },
    {
      "remote_url": "https://github.com/goens/lost-pop-lean",
      "last_time_visited": "2025-05-21T05:05:41.645040+00:00",
      "remote_heads_hash": "8035a1ab2a5a"
    },
    {
      "remote_url": "https://github.com/google-deepmind/debate",
      "last_time_visited": "2025-05-21T05:05:42.154190+00:00",
      "remote_heads_hash": "5a9708e14c57"
    },
    {
      "remote_url": "https://github.com/gsierra99/ExFormMathL4",
      "last_time_visited": "2025-05-21T05:05:42.540200+00:00",
      "remote_heads_hash": "18bdfe18ef1b"
    },
    {
      "remote_url": "https://github.com/Hagb/lean-groebner",
      "last_time_visited": "2025-05-21T05:05:42.984132+00:00",
      "remote_heads_hash": "acce45122642"
    },
    {
      "remote_url": "https://github.com/HannahSantos/FMCn_Lean",
      "last_time_visited": "2025-05-21T05:05:43.412854+00:00",
      "remote_heads_hash": "245f1abf4da5"
    },
    {
      "remote_url": "https://github.com/hanwenzhu/primality-tests",
      "last_time_visited": "2025-05-21T05:05:43.828151+00:00",
      "remote_heads_hash": "79fdaf3d2420"
    },
    {
      "remote_url": "https://github.com/Happyves/BerLean_Workshop",
      "last_time_visited": "2025-05-21T05:05:44.246894+00:00",
      "remote_heads_hash": "2247c3aa5df3"
    },
    {
      "remote_url": "https://github.com/hargoniX/socket.lean",
      "last_time_visited": "2025-05-21T05:05:44.662113+00:00",
      "remote_heads_hash": "111508e7609c"
    },
    {
      "remote_url": "https://github.com/hargoniX/crup",
      "last_time_visited": "2025-05-21T05:05:45.046322+00:00",
      "remote_heads_hash": "73001adfc524"
    },
    {
      "remote_url": "https://github.com/hargoniX/cpdt-lean",
      "last_time_visited": "2025-05-21T05:05:45.456200+00:00",
      "remote_heads_hash": "326e1c617a9a"
    },
    {
      "remote_url": "https://github.com/haruhisa-enomoto/mathlib4-all-tactics",
      "last_time_visited": "2025-05-21T05:05:45.853362+00:00",
      "remote_heads_hash": "c0aa438185da"
    },
    {
      "remote_url": "https://github.com/HEPLean/PhysLean",
      "last_time_visited": "2025-05-25T05:16:20.526733+00:00",
      "remote_heads_hash": "aecbb653a5e3"
    },
    {
      "remote_url": "https://github.com/HEPLean/PhysLean_notes",
      "last_time_visited": "2025-05-21T05:05:48.496745+00:00",
      "remote_heads_hash": "93365f65b90a"
    },
    {
      "remote_url": "https://github.com/hhu-adam/lean4web-tools",
      "last_time_visited": "2025-05-21T05:05:48.947771+00:00",
      "remote_heads_hash": "2f3c06a624c8"
    },
    {
      "remote_url": "https://github.com/hhu-adam/lean-i18n",
      "last_time_visited": "2025-05-21T05:05:49.340555+00:00",
      "remote_heads_hash": "0f73c0dadeae"
    },
    {
      "remote_url": "https://github.com/hhu-adam/GameSkeleton",
      "last_time_visited": "2025-05-21T05:05:49.809652+00:00",
      "remote_heads_hash": "fd32eae4aa15"
    },
    {
      "remote_url": "https://github.com/hwatheod/galeshapley-lean",
      "last_time_visited": "2025-05-21T05:05:50.220158+00:00",
      "remote_heads_hash": "d26cadb7afa2"
    },
    {
      "remote_url": "https://github.com/igrep/lean-workshop",
      "last_time_visited": "2025-05-21T05:05:50.664476+00:00",
      "remote_heads_hash": "ceaca61933d0"
    },
    {
      "remote_url": "https://github.com/imbrem/discretion",
      "last_time_visited": "2025-05-21T05:06:23.108825+00:00",
      "remote_heads_hash": "8afd67e27698"
    },
    {
      "remote_url": "https://github.com/imbrem/debruijn-ssa",
      "last_time_visited": "2025-05-21T05:06:23.626602+00:00",
      "remote_heads_hash": "333a657f701e"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/M1F-explained",
      "last_time_visited": "2025-05-21T05:06:24.202170+00:00",
      "remote_heads_hash": "3110da3d860a"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/IUM",
      "last_time_visited": "2025-05-21T05:06:24.664894+00:00",
      "remote_heads_hash": "a4cc0b92642f"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/formalising-mathematics-2024",
      "last_time_visited": "2025-05-21T05:06:25.165860+00:00",
      "remote_heads_hash": "e7cfe4f5ab5b"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/FLT",
      "last_time_visited": "2025-05-25T05:34:54.682776+00:00",
      "remote_heads_hash": "0cb82ea38f70"
    },
    {
      "remote_url": "https://github.com/Ivan-Sergeyev/seymour",
      "last_time_visited": "2025-05-25T05:34:58.977796+00:00",
      "remote_heads_hash": "ed69105b6fdb"
    },
    {
      "remote_url": "https://github.com/ivankobe/FactorizationSystems",
      "last_time_visited": "2025-05-21T05:18:00.387133+00:00",
      "remote_heads_hash": "edb00f932869"
    },
    {
      "remote_url": "https://github.com/Izzimach/EffSpec-lean",
      "last_time_visited": "2025-05-21T05:18:00.982671+00:00",
      "remote_heads_hash": "562e30665420"
    },
    {
      "remote_url": "https://github.com/jaalonso/Calculemus2_es",
      "last_time_visited": "2025-05-21T05:18:01.417332+00:00",
      "remote_heads_hash": "515249923b37"
    },
    {
      "remote_url": "https://github.com/jaalonso/Calculemus2",
      "last_time_visited": "2025-05-21T05:18:02.139299+00:00",
      "remote_heads_hash": "9dfe5bbf1634"
    },
    {
      "remote_url": "https://github.com/JadAbouHawili/KnightsAndKnaves-Lean4Game",
      "last_time_visited": "2025-05-25T05:49:19.854698+00:00",
      "remote_heads_hash": "de5d661c3b7c"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/LeanColls",
      "last_time_visited": "2025-05-21T05:20:10.162893+00:00",
      "remote_heads_hash": "eb1f88b6d779"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/lean-openapi",
      "last_time_visited": "2025-05-21T05:20:16.124412+00:00",
      "remote_heads_hash": "eb90315a8e44"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/http",
      "last_time_visited": "2025-05-21T05:20:16.678850+00:00",
      "remote_heads_hash": "533140b90c9c"
    },
    {
      "remote_url": "https://github.com/jeswr/RDF.lean",
      "last_time_visited": "2025-05-21T05:20:17.091712+00:00",
      "remote_heads_hash": "a9f36adc4a2f"
    },
    {
      "remote_url": "https://github.com/JLimperg/regensburg-itp-school-2023",
      "last_time_visited": "2025-05-21T05:20:17.485084+00:00",
      "remote_heads_hash": "916808b5f2b9"
    },
    {
      "remote_url": "https://github.com/joehendrix/lean-crypto",
      "last_time_visited": "2025-05-21T05:20:17.960447+00:00",
      "remote_heads_hash": "3a6516ecfb15"
    },
    {
      "remote_url": "https://github.com/Joonas-vonlerber/Type-Theory-Game",
      "last_time_visited": "2025-05-21T05:20:18.965193+00:00",
      "remote_heads_hash": "fd331073f317"
    },
    {
      "remote_url": "https://github.com/jsm28/IMOLean",
      "last_time_visited": "2025-05-21T05:20:19.415889+00:00",
      "remote_heads_hash": "634b4b73821d"
    },
    {
      "remote_url": "https://github.com/jsm28/AperiodicMonotilesLean",
      "last_time_visited": "2025-05-21T05:20:19.841194+00:00",
      "remote_heads_hash": "6738a8601b42"
    },
    {
      "remote_url": "https://github.com/jtristan/UnicodeSkipListTableExample",
      "last_time_visited": "2025-05-21T05:20:20.239013+00:00",
      "remote_heads_hash": "a0b36d6854c6"
    },
    {
      "remote_url": "https://github.com/jtristan/UnicodeSkipListTable",
      "last_time_visited": "2025-05-21T05:20:20.617946+00:00",
      "remote_heads_hash": "da2e0c455f22"
    },
    {
      "remote_url": "https://github.com/jtristan/lffi",
      "last_time_visited": "2025-05-21T05:20:20.981512+00:00",
      "remote_heads_hash": "c7f1d443a80a"
    },
    {
      "remote_url": "https://github.com/katydid/regex-deriv-reproving-agda-in-lean",
      "last_time_visited": "2025-05-21T05:20:21.361095+00:00",
      "remote_heads_hash": "dbf24bf5079a"
    },
    {
      "remote_url": "https://github.com/katydid/regex-deriv-lean",
      "last_time_visited": "2025-05-25T05:51:43.374070+00:00",
      "remote_heads_hash": "be4d03f89f44"
    },
    {
      "remote_url": "https://github.com/katzenpost/crypt_walker",
      "last_time_visited": "2025-05-19T00:00:00+00:00",
      "remote_heads_hash": null
    },
    {
      "remote_url": "https://github.com/kbuzzard/FilterGame",
      "last_time_visited": "2025-05-21T05:22:37.401231+00:00",
      "remote_heads_hash": "8e2468fdf597"
    },
    {
      "remote_url": "https://github.com/kebekus/ProjectVD",
      "last_time_visited": "2025-05-25T05:54:35.203599+00:00",
      "remote_heads_hash": "983b5292a34d"
    },
    {
      "remote_url": "https://github.com/keilambda/ttfpi",
      "last_time_visited": "2025-05-21T05:22:39.031016+00:00",
      "remote_heads_hash": "73224ae044cf"
    },
    {
      "remote_url": "https://github.com/keilambda/eocia-lean",
      "last_time_visited": "2025-05-21T05:22:39.449095+00:00",
      "remote_heads_hash": "52b63bb55762"
    },
    {
      "remote_url": "https://github.com/kim-em/lean-training-data",
      "last_time_visited": "2025-05-21T05:22:39.861252+00:00",
      "remote_heads_hash": "7108932d8b3e"
    },
    {
      "remote_url": "https://github.com/KislyjKisel/Raylib.lean",
      "last_time_visited": "2025-05-21T05:22:40.339150+00:00",
      "remote_heads_hash": "e42544c02b44"
    },
    {
      "remote_url": "https://github.com/KislyjKisel/lean-pod",
      "last_time_visited": "2025-05-21T05:22:40.884571+00:00",
      "remote_heads_hash": "56f501aed7c9"
    },
    {
      "remote_url": "https://github.com/kkaunda/spgf",
      "last_time_visited": "2025-05-21T05:22:41.310348+00:00",
      "remote_heads_hash": "e6ded94f00f7"
    },
    {
      "remote_url": "https://github.com/kkytola/ExtremeValueProject",
      "last_time_visited": "2025-05-25T05:54:37.929887+00:00",
      "remote_heads_hash": "0b1aaeeb95c4"
    },
    {
      "remote_url": "https://github.com/kmill/lean4-raytracer",
      "last_time_visited": "2025-05-21T05:22:42.849802+00:00",
      "remote_heads_hash": "a93cae6611b5"
    },
    {
      "remote_url": "https://github.com/kmill/msri2023_graphs",
      "last_time_visited": "2025-05-21T05:22:44.151806+00:00",
      "remote_heads_hash": "9eea0e9acd3b"
    },
    {
      "remote_url": "https://github.com/kmill/LeanTeX-mathlib",
      "last_time_visited": "2025-05-21T05:22:44.547136+00:00",
      "remote_heads_hash": "7eeb12426a64"
    },
    {
      "remote_url": "https://github.com/kmill/LeanTeX",
      "last_time_visited": "2025-05-21T05:22:44.939944+00:00",
      "remote_heads_hash": "f2b67cb68de9"
    },
    {
      "remote_url": "https://github.com/knowsys/Formale-Systeme-in-LEAN",
      "last_time_visited": "2025-05-21T05:22:45.378208+00:00",
      "remote_heads_hash": "fb4e3ae53e50"
    },
    {
      "remote_url": "https://github.com/knowsys/CertifyingDatalog",
      "last_time_visited": "2025-05-22T05:03:16.496175+00:00",
      "remote_heads_hash": "0bf8f156ea86"
    },
    {
      "remote_url": "https://github.com/kovach/etch",
      "last_time_visited": "2025-05-21T05:23:04.013035+00:00",
      "remote_heads_hash": "4191c72dce05"
    },
    {
      "remote_url": "https://github.com/lean-dojo/LeanCopilot",
      "last_time_visited": "2025-05-21T05:23:05.549130+00:00",
      "remote_heads_hash": "6c779cc311f2"
    },
    {
      "remote_url": "https://github.com/lean-ja/reference-manual-ja",
      "last_time_visited": "2025-05-21T05:23:06.018167+00:00",
      "remote_heads_hash": "87e7e8a81be1"
    },
    {
      "remote_url": "https://github.com/lean-ja/lean99",
      "last_time_visited": "2025-05-21T05:23:07.481667+00:00",
      "remote_heads_hash": "d458dfc3b5c8"
    },
    {
      "remote_url": "https://github.com/lean-ja/lean-by-example",
      "last_time_visited": "2025-05-21T05:23:08.064098+00:00",
      "remote_heads_hash": "47a08d2cbe06"
    },
    {
      "remote_url": "https://github.com/lean-machines-central/lean-machines",
      "last_time_visited": "2025-05-21T05:23:08.716511+00:00",
      "remote_heads_hash": "a931d02dc3c3"
    },
    {
      "remote_url": "https://github.com/lean-machines-central/lean-machines-examples",
      "last_time_visited": "2025-05-21T05:23:09.256395+00:00",
      "remote_heads_hash": "693936d31735"
    },
    {
      "remote_url": "https://github.com/leanprover-community/tutorials4",
      "last_time_visited": "2025-05-21T05:23:09.685972+00:00",
      "remote_heads_hash": "d2deab6affd4"
    },
    {
      "remote_url": "https://github.com/leanprover-community/sphere-eversion",
      "last_time_visited": "2025-05-21T05:23:10.072369+00:00",
      "remote_heads_hash": "01901a2c5eb4"
    },
    {
      "remote_url": "https://github.com/leanprover-community/quote4",
      "last_time_visited": "2025-05-21T05:23:11.456828+00:00",
      "remote_heads_hash": "4f1b9db6e006"
    },
    {
      "remote_url": "https://github.com/leanprover-community/ProofWidgets4",
      "last_time_visited": "2025-05-21T05:23:11.925486+00:00",
      "remote_heads_hash": "26c0e435f5c7"
    },
    {
      "remote_url": "https://github.com/leanprover-community/plausible",
      "last_time_visited": "2025-05-21T05:23:12.542998+00:00",
      "remote_heads_hash": "e36c7738c30e"
    },
    {
      "remote_url": "https://github.com/leanprover-community/mathport",
      "last_time_visited": "2025-05-21T05:23:12.951918+00:00",
      "remote_heads_hash": "f1a810136ef9"
    },
    {
      "remote_url": "https://github.com/leanprover-community/mathlib4",
      "last_time_visited": "2025-05-25T05:54:44.214546+00:00",
      "remote_heads_hash": "e4fe9987487d"
    },
    {
      "remote_url": "https://github.com/leanprover-community/llm",
      "last_time_visited": "2025-05-21T05:28:50.899059+00:00",
      "remote_heads_hash": "d239306b7ab7"
    },
    {
      "remote_url": "https://github.com/leanprover-community/LeanSearchClient",
      "last_time_visited": "2025-05-21T05:28:51.419328+00:00",
      "remote_heads_hash": "0674ee6a0314"
    },
    {
      "remote_url": "https://github.com/leanprover-community/lean4-metaprogramming-book",
      "last_time_visited": "2025-05-21T05:28:51.826781+00:00",
      "remote_heads_hash": "d44060733757"
    },
    {
      "remote_url": "https://github.com/leanprover-community/iris-lean",
      "last_time_visited": "2025-05-25T05:59:17.702921+00:00",
      "remote_heads_hash": "c5b093fbb5b6"
    },
    {
      "remote_url": "https://github.com/leanprover-community/import-graph",
      "last_time_visited": "2025-05-21T05:28:52.785561+00:00",
      "remote_heads_hash": "f307db24f933"
    },
    {
      "remote_url": "https://github.com/leanprover-community/NNG4",
      "last_time_visited": "2025-05-21T05:28:53.258802+00:00",
      "remote_heads_hash": "6c6fa024917e"
    },
    {
      "remote_url": "https://github.com/leanprover-community/flt-regular",
      "last_time_visited": "2025-05-21T05:28:53.904208+00:00",
      "remote_heads_hash": "1210bc7334ab"
    },
    {
      "remote_url": "https://github.com/leanprover-community/duper",
      "last_time_visited": "2025-05-22T05:04:14.053045+00:00",
      "remote_heads_hash": "ca23f951c168"
    },
    {
      "remote_url": "https://github.com/leanprover-community/con-nf",
      "last_time_visited": "2025-05-21T05:28:57.101048+00:00",
      "remote_heads_hash": "d28ba8349bce"
    },
    {
      "remote_url": "https://github.com/leanprover-community/batteries",
      "last_time_visited": "2025-05-25T06:00:19.426909+00:00",
      "remote_heads_hash": "a86554951826"
    },
    {
      "remote_url": "https://github.com/leanprover-community/lean-auto",
      "last_time_visited": "2025-05-22T05:04:26.681947+00:00",
      "remote_heads_hash": "6abeba7e0359"
    },
    {
      "remote_url": "https://github.com/leanprover-community/aesop",
      "last_time_visited": "2025-05-22T05:04:28.318514+00:00",
      "remote_heads_hash": "13108c2d40c6"
    },
    {
      "remote_url": "https://github.com/leanprover/verso",
      "last_time_visited": "2025-05-25T06:00:41.454104+00:00",
      "remote_heads_hash": "61a111095d97"
    },
    {
      "remote_url": "https://github.com/leanprover/reference-manual",
      "last_time_visited": "2025-05-25T06:00:43.712765+00:00",
      "remote_heads_hash": "23676583bc45"
    },
    {
      "remote_url": "https://github.com/leanprover/TensorLib",
      "last_time_visited": "2025-05-21T05:29:26.063225+00:00",
      "remote_heads_hash": "64388694a770"
    },
    {
      "remote_url": "https://github.com/leanprover/TenCert",
      "last_time_visited": "2025-05-21T05:33:35.044851+00:00",
      "remote_heads_hash": "5869ed4df92d"
    },
    {
      "remote_url": "https://github.com/leanprover/subverso",
      "last_time_visited": "2025-05-25T06:00:56.826841+00:00",
      "remote_heads_hash": "46e75bc16c4c"
    },
    {
      "remote_url": "https://github.com/leanprover/SHerLOC",
      "last_time_visited": "2025-05-21T05:33:37.625688+00:00",
      "remote_heads_hash": "8db31b4878a6"
    },
    {
      "remote_url": "https://github.com/leanprover/SampCert",
      "last_time_visited": "2025-05-21T05:33:38.056409+00:00",
      "remote_heads_hash": "7282485ffc73"
    },
    {
      "remote_url": "https://github.com/leanprover/LNSym",
      "last_time_visited": "2025-05-21T05:33:38.646333+00:00",
      "remote_heads_hash": "57b8e43d83f5"
    },
    {
      "remote_url": "https://github.com/leanprover/leansat",
      "last_time_visited": "2025-05-21T05:34:06.418661+00:00",
      "remote_heads_hash": "1b9c393441a9"
    },
    {
      "remote_url": "https://github.com/leanprover/LeanInk",
      "last_time_visited": "2025-05-21T05:34:06.990022+00:00",
      "remote_heads_hash": "6bf8dc0678ef"
    },
    {
      "remote_url": "https://github.com/leanprover/leanbv",
      "last_time_visited": "2025-05-19T00:00:00+00:00",
      "remote_heads_hash": null
    },
    {
      "remote_url": "https://github.com/leanprover/lean4export",
      "last_time_visited": "2025-05-21T05:34:07.836277+00:00",
      "remote_heads_hash": "8fde9a477129"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4checker",
      "last_time_visited": "2025-05-21T05:34:08.544774+00:00",
      "remote_heads_hash": "f997ce0b4f50"
    },
    {
      "remote_url": "https://github.com/leanprover/KLR",
      "last_time_visited": "2025-05-25T06:00:59.859923+00:00",
      "remote_heads_hash": "5fb15819615d"
    },
    {
      "remote_url": "https://github.com/leanprover/doc-gen4",
      "last_time_visited": "2025-05-25T06:04:58.387883+00:00",
      "remote_heads_hash": "e252767d4d3b"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4-cli",
      "last_time_visited": "2025-05-21T05:39:13.259837+00:00",
      "remote_heads_hash": "169fa1e53530"
    },
    {
      "remote_url": "https://github.com/LeastAuthority/STIR",
      "last_time_visited": "2025-05-21T05:39:13.674015+00:00",
      "remote_heads_hash": "7bbf2a22ae76"
    },
    {
      "remote_url": "https://github.com/lecopivo/SciLean",
      "last_time_visited": "2025-05-21T05:39:14.154628+00:00",
      "remote_heads_hash": "d123fd93d8f8"
    },
    {
      "remote_url": "https://github.com/lecopivo/LeanBLAS",
      "last_time_visited": "2025-05-21T05:39:15.927554+00:00",
      "remote_heads_hash": "0d414cf850d5"
    },
    {
      "remote_url": "https://github.com/lecopivo/lean4-karray",
      "last_time_visited": "2025-05-21T05:39:16.371980+00:00",
      "remote_heads_hash": "1277b66d931f"
    },
    {
      "remote_url": "https://github.com/lf-lang/reactor-model",
      "last_time_visited": "2025-05-21T05:39:16.784821+00:00",
      "remote_heads_hash": "43ecefc264f0"
    },
    {
      "remote_url": "https://github.com/LieLean/LowDimSolvClassification",
      "last_time_visited": "2025-05-21T05:39:17.532175+00:00",
      "remote_heads_hash": "49788dc4a82c"
    },
    {
      "remote_url": "https://github.com/lindy-labs/wadray_verification",
      "last_time_visited": "2025-05-21T05:39:17.947880+00:00",
      "remote_heads_hash": "7adff5a82c09"
    },
    {
      "remote_url": "https://github.com/lindy-labs/corelib_verification",
      "last_time_visited": "2025-05-25T06:05:01.099797+00:00",
      "remote_heads_hash": "bb30bba38b62"
    },
    {
      "remote_url": "https://github.com/lindy-labs/aegis",
      "last_time_visited": "2025-05-25T06:05:02.951961+00:00",
      "remote_heads_hash": "f671301b0fb7"
    },
    {
      "remote_url": "https://github.com/loganrjmurphy/LeanEuclid",
      "last_time_visited": "2025-05-21T05:39:20.199289+00:00",
      "remote_heads_hash": "96f00f91dc4f"
    },
    {
      "remote_url": "https://github.com/m4lvin/lean4-pdl",
      "last_time_visited": "2025-05-25T06:05:04.265606+00:00",
      "remote_heads_hash": "8ca218337b47"
    },
    {
      "remote_url": "https://github.com/madvorak/vcsp",
      "last_time_visited": "2025-05-21T05:41:22.952296+00:00",
      "remote_heads_hash": "0811265fdc45"
    },
    {
      "remote_url": "https://github.com/madvorak/thue",
      "last_time_visited": "2025-05-21T05:41:23.487367+00:00",
      "remote_heads_hash": "89373b15f103"
    },
    {
      "remote_url": "https://github.com/madvorak/read-lean",
      "last_time_visited": "2025-05-21T05:41:23.965044+00:00",
      "remote_heads_hash": "14f55738d01a"
    },
    {
      "remote_url": "https://github.com/madvorak/lean4-koch",
      "last_time_visited": "2025-05-21T05:41:24.349482+00:00",
      "remote_heads_hash": "452ca3eec645"
    },
    {
      "remote_url": "https://github.com/madvorak/fecssk",
      "last_time_visited": "2025-05-21T05:41:24.714412+00:00",
      "remote_heads_hash": "5308ed2b561f"
    },
    {
      "remote_url": "https://github.com/madvorak/duality",
      "last_time_visited": "2025-05-21T05:41:25.188965+00:00",
      "remote_heads_hash": "7f0115cffaf0"
    },
    {
      "remote_url": "https://github.com/madvorak/chomsky",
      "last_time_visited": "2025-05-21T05:41:26.012258+00:00",
      "remote_heads_hash": "03bb7ea3fbbd"
    },
    {
      "remote_url": "https://github.com/Maokami/vqc_in_lean",
      "last_time_visited": "2025-05-21T05:41:26.486998+00:00",
      "remote_heads_hash": "31f759a86b91"
    },
    {
      "remote_url": "https://github.com/marcusrossel/lean-snakebird",
      "last_time_visited": "2025-05-21T05:41:26.900871+00:00",
      "remote_heads_hash": "613f0a2c6dd3"
    },
    {
      "remote_url": "https://github.com/marcusrossel/lean-egg",
      "last_time_visited": "2025-05-22T05:06:55.760207+00:00",
      "remote_heads_hash": "5d9b102a881f"
    },
    {
      "remote_url": "https://github.com/matematiflo/SumsOfSquares",
      "last_time_visited": "2025-05-21T05:41:28.208237+00:00",
      "remote_heads_hash": "310bcf563ab8"
    },
    {
      "remote_url": "https://github.com/matematiflo/CompAssistedMath2024",
      "last_time_visited": "2025-05-21T05:41:28.789441+00:00",
      "remote_heads_hash": "033e412ee0d4"
    },
    {
      "remote_url": "https://github.com/math-xmum/gametheory",
      "last_time_visited": "2025-05-21T05:41:38.008270+00:00",
      "remote_heads_hash": "205b07a67326"
    },
    {
      "remote_url": "https://github.com/mhuisi/Uniq",
      "last_time_visited": "2025-05-21T05:41:38.455856+00:00",
      "remote_heads_hash": "8632f707f342"
    },
    {
      "remote_url": "https://github.com/MichaelStollBayreuth/Weights",
      "last_time_visited": "2025-05-21T05:41:39.070674+00:00",
      "remote_heads_hash": "cab50a1177cf"
    },
    {
      "remote_url": "https://github.com/MichaelStollBayreuth/EulerProducts",
      "last_time_visited": "2025-05-21T05:41:39.489164+00:00",
      "remote_heads_hash": "a475080c281b"
    },
    {
      "remote_url": "https://github.com/mo271/FormalBook",
      "last_time_visited": "2025-05-21T05:41:39.885588+00:00",
      "remote_heads_hash": "205f79a11375"
    },
    {
      "remote_url": "https://github.com/model-checking/rust-lean-models",
      "last_time_visited": "2025-05-21T05:41:40.433358+00:00",
      "remote_heads_hash": "9acadaa1b951"
    },
    {
      "remote_url": "https://github.com/MohanadAhmed/LeanMathSigProc",
      "last_time_visited": "2025-05-21T05:41:40.891719+00:00",
      "remote_heads_hash": "93b0625a6350"
    },
    {
      "remote_url": "https://github.com/morganfshirley/CommComp",
      "last_time_visited": "2025-05-21T05:41:41.274127+00:00",
      "remote_heads_hash": "bb6b1df5fd9e"
    },
    {
      "remote_url": "https://github.com/mortarsanjaya/IMOSLLean4",
      "last_time_visited": "2025-05-21T05:41:42.584727+00:00",
      "remote_heads_hash": "cd24d3f3c273"
    },
    {
      "remote_url": "https://github.com/mseri/BET",
      "last_time_visited": "2025-05-21T05:41:47.197544+00:00",
      "remote_heads_hash": "22c3c6a82e86"
    },
    {
      "remote_url": "https://github.com/NethermindEth/risczero-fv",
      "last_time_visited": "2025-05-21T05:41:47.782752+00:00",
      "remote_heads_hash": "be4562d9e9c0"
    },
    {
      "remote_url": "https://github.com/NethermindEth/EVMYulLean",
      "last_time_visited": "2025-05-21T05:41:48.720390+00:00",
      "remote_heads_hash": "2d3177845d1b"
    },
    {
      "remote_url": "https://github.com/niklasmohrin/lean-seminar-2023",
      "last_time_visited": "2025-05-21T05:41:49.318264+00:00",
      "remote_heads_hash": "11e47f92bf1d"
    },
    {
      "remote_url": "https://github.com/nomeata/lean-wf-induct",
      "last_time_visited": "2025-05-21T05:41:49.749894+00:00",
      "remote_heads_hash": "3a05bb7d6557"
    },
    {
      "remote_url": "https://github.com/nomeata/loogle",
      "last_time_visited": "2025-05-21T05:41:50.163894+00:00",
      "remote_heads_hash": "b874eac18af4"
    },
    {
      "remote_url": "https://github.com/nomeata/lean-calcify",
      "last_time_visited": "2025-05-21T05:41:50.633126+00:00",
      "remote_heads_hash": "9b5c02bf8403"
    },
    {
      "remote_url": "https://github.com/NUS-Math-Formalization/CalculusSkeleton",
      "last_time_visited": "2025-05-21T05:41:51.052346+00:00",
      "remote_heads_hash": "77b97786a779"
    },
    {
      "remote_url": "https://github.com/objectionary/proof",
      "last_time_visited": "2025-05-21T05:41:51.605799+00:00",
      "remote_heads_hash": "3b0f76baa17a"
    },
    {
      "remote_url": "https://github.com/opencompl/lean-mlir",
      "last_time_visited": "2025-05-25T06:33:57.076806+00:00",
      "remote_heads_hash": "aaad5e79541b"
    },
    {
      "remote_url": "https://github.com/optimisticexquisite/lean-rsa-project",
      "last_time_visited": "2025-05-21T05:44:39.668151+00:00",
      "remote_heads_hash": "d52b924ec8c5"
    },
    {
      "remote_url": "https://github.com/optsuite/optlib",
      "last_time_visited": "2025-05-21T05:44:40.082114+00:00",
      "remote_heads_hash": "8cbe5e6c351d"
    },
    {
      "remote_url": "https://github.com/or4nge19/NeuralNetworks",
      "last_time_visited": "2025-05-21T05:44:40.584191+00:00",
      "remote_heads_hash": "fa07a9601d1e"
    },
    {
      "remote_url": "https://github.com/pandaman64/lean-regex",
      "last_time_visited": "2025-05-21T05:46:41.474645+00:00",
      "remote_heads_hash": "070a4ebde3ee"
    },
    {
      "remote_url": "https://github.com/Paper-Proof/paperproof",
      "last_time_visited": "2025-05-21T05:46:42.146291+00:00",
      "remote_heads_hash": "69f0d23a0693"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/verbose-lean4",
      "last_time_visited": "2025-05-21T05:46:49.154026+00:00",
      "remote_heads_hash": "1576ce6c3c97"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/GlimpseOfLean",
      "last_time_visited": "2025-05-21T05:46:49.883601+00:00",
      "remote_heads_hash": "225216dbbb61"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/checkdecls",
      "last_time_visited": "2025-05-21T05:48:45.491985+00:00",
      "remote_heads_hash": "4e94d076112d"
    },
    {
      "remote_url": "https://github.com/paulch42/lean-spec",
      "last_time_visited": "2025-05-21T05:48:45.936268+00:00",
      "remote_heads_hash": "8264d464e45c"
    },
    {
      "remote_url": "https://github.com/pawelsberg/lean-directory-browser",
      "last_time_visited": "2025-05-21T05:48:46.383891+00:00",
      "remote_heads_hash": "e740683950be"
    },
    {
      "remote_url": "https://github.com/PeterKementzey/graph-library-for-lean4",
      "last_time_visited": "2025-05-21T05:48:46.769507+00:00",
      "remote_heads_hash": "0eb4fa24abc1"
    },
    {
      "remote_url": "https://github.com/Philogy/remco-mul-verification",
      "last_time_visited": "2025-05-21T05:48:47.192939+00:00",
      "remote_heads_hash": "3cb97281280e"
    },
    {
      "remote_url": "https://github.com/pimpale/llm.lean",
      "last_time_visited": "2025-05-21T05:48:47.555267+00:00",
      "remote_heads_hash": "5875eed27aef"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanProject",
      "last_time_visited": "2025-05-25T06:34:26.652710+00:00",
      "remote_heads_hash": "fe1e29c87bc2"
    },
    {
      "remote_url": "https://github.com/pitmonticone/NewProject",
      "last_time_visited": "2025-05-21T05:48:48.624150+00:00",
      "remote_heads_hash": "73ad76e05f52"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanInVienna2024",
      "last_time_visited": "2025-05-21T05:48:49.013899+00:00",
      "remote_heads_hash": "bfa3f74922c2"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanCHANGE",
      "last_time_visited": "2025-05-21T05:48:49.625910+00:00",
      "remote_heads_hash": "c4393e98b93a"
    },
    {
      "remote_url": "https://github.com/pnwamk/lean4-assert-command",
      "last_time_visited": "2025-05-21T05:48:50.304207+00:00",
      "remote_heads_hash": "eb9325120877"
    },
    {
      "remote_url": "https://github.com/proofs-and-programs/proofs-and-programs-25",
      "last_time_visited": "2025-05-21T05:48:50.768361+00:00",
      "remote_heads_hash": "9109a7d7ee76"
    },
    {
      "remote_url": "https://github.com/provables/special-numbers",
      "last_time_visited": "2025-05-21T05:48:51.234937+00:00",
      "remote_heads_hash": "3ff028720537"
    },
    {
      "remote_url": "https://github.com/quangvdao/ZKLib-deprecated",
      "last_time_visited": "2025-05-21T05:49:09.302602+00:00",
      "remote_heads_hash": "6f178ea20246"
    },
    {
      "remote_url": "https://github.com/rah4927/lean-dojo-mew",
      "last_time_visited": "2025-05-21T05:49:09.865333+00:00",
      "remote_heads_hash": "0addf07670e6"
    },
    {
      "remote_url": "https://github.com/rahul3613/ProofNet-lean4",
      "last_time_visited": "2025-05-21T05:49:10.283724+00:00",
      "remote_heads_hash": "62462040cf28"
    },
    {
      "remote_url": "https://github.com/rahul3613/miniF2F-lean4",
      "last_time_visited": "2025-05-21T05:49:10.931033+00:00",
      "remote_heads_hash": "ed3336e45e16"
    },
    {
      "remote_url": "https://github.com/rami3l/PLFaLean",
      "last_time_visited": "2025-05-21T05:49:11.369269+00:00",
      "remote_heads_hash": "64870ad853f0"
    },
    {
      "remote_url": "https://github.com/reilabs/proven-zk",
      "last_time_visited": "2025-05-21T05:49:11.816442+00:00",
      "remote_heads_hash": "7bc1fffe39cc"
    },
    {
      "remote_url": "https://github.com/remimimimimi/leansec",
      "last_time_visited": "2025-05-21T05:49:12.246230+00:00",
      "remote_heads_hash": "bbd95c0ce07f"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/testing-lower-bounds",
      "last_time_visited": "2025-05-21T05:49:12.658939+00:00",
      "remote_heads_hash": "fccb394cbbf7"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/kolmogorov_extension4",
      "last_time_visited": "2025-05-21T05:49:13.391168+00:00",
      "remote_heads_hash": "9345e9d53d9f"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/CLT",
      "last_time_visited": "2025-05-25T06:34:30.914904+00:00",
      "remote_heads_hash": "ae0f6fa1de4d"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/brownian-motion",
      "last_time_visited": "2025-05-21T05:49:15.226042+00:00",
      "remote_heads_hash": "58370ed77614"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/demontrer2025",
      "last_time_visited": "2025-05-21T05:49:16.519198+00:00",
      "remote_heads_hash": "bd4089796258"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/LFTCM2024",
      "last_time_visited": "2025-05-21T05:49:17.564927+00:00",
      "remote_heads_hash": "1508422fc709"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/flt3",
      "last_time_visited": "2025-05-21T05:49:18.042092+00:00",
      "remote_heads_hash": "70b51e008451"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/kaplanski4",
      "last_time_visited": "2025-05-21T05:49:18.478267+00:00",
      "remote_heads_hash": "c72bdd4bef8e"
    },
    {
      "remote_url": "https://github.com/RikHeurter/LeanBscThesisFormalisation",
      "last_time_visited": "2025-05-25T06:34:33.573237+00:00",
      "remote_heads_hash": "d356992c19dd"
    },
    {
      "remote_url": "https://github.com/risc0/risc0-lean4",
      "last_time_visited": "2025-05-21T05:49:19.996075+00:00",
      "remote_heads_hash": "76fff39fd5ca"
    },
    {
      "remote_url": "https://github.com/Seasawher/mk-exercise",
      "last_time_visited": "2025-05-21T05:49:20.711069+00:00",
      "remote_heads_hash": "6e539becf4e4"
    },
    {
      "remote_url": "https://github.com/Seasawher/mdgen",
      "last_time_visited": "2025-05-21T05:49:21.134307+00:00",
      "remote_heads_hash": "cdeacad263ab"
    },
    {
      "remote_url": "https://github.com/Seasawher/mathlib4-help",
      "last_time_visited": "2025-05-25T06:34:35.468895+00:00",
      "remote_heads_hash": "ba8ae58654f8"
    },
    {
      "remote_url": "https://github.com/Seasawher/lean-book",
      "last_time_visited": "2025-05-21T05:49:23.203680+00:00",
      "remote_heads_hash": "0983d0db0314"
    },
    {
      "remote_url": "https://github.com/Seasawher/import-all",
      "last_time_visited": "2025-05-21T05:49:23.734840+00:00",
      "remote_heads_hash": "25fd7700d30b"
    },
    {
      "remote_url": "https://github.com/Shreyas4991/DGAlgorithms",
      "last_time_visited": "2025-05-21T05:49:24.148785+00:00",
      "remote_heads_hash": "f8e6e81245a0"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/Saturn",
      "last_time_visited": "2025-05-21T05:49:24.623462+00:00",
      "remote_heads_hash": "3f2346688f39"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/Polylean",
      "last_time_visited": "2025-05-21T05:49:25.176869+00:00",
      "remote_heads_hash": "dd3cef356d86"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/proofs-and-programs-2023",
      "last_time_visited": "2025-05-21T05:49:25.728016+00:00",
      "remote_heads_hash": "f50f15d7d0b0"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/MetaExamples",
      "last_time_visited": "2025-05-21T05:49:26.333898+00:00",
      "remote_heads_hash": "21673a31a16b"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanLion",
      "last_time_visited": "2025-05-21T05:49:26.721376+00:00",
      "remote_heads_hash": "9506b2acf8a3"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanAideTools",
      "last_time_visited": "2025-05-21T05:49:27.129029+00:00",
      "remote_heads_hash": "9555b8513464"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanAide",
      "last_time_visited": "2025-05-25T06:34:38.912588+00:00",
      "remote_heads_hash": "002fb19cb9d1"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/lean-loris",
      "last_time_visited": "2025-05-21T05:49:59.360725+00:00",
      "remote_heads_hash": "1e336dd1a8f1"
    },
    {
      "remote_url": "https://github.com/sinhp/LeanFibredCategories",
      "last_time_visited": "2025-05-21T05:50:00.028031+00:00",
      "remote_heads_hash": "cb5cdf9d5b6e"
    },
    {
      "remote_url": "https://github.com/somombo/formalized-quicksort",
      "last_time_visited": "2025-05-21T05:50:00.469543+00:00",
      "remote_heads_hash": "ca6441232fec"
    },
    {
      "remote_url": "https://github.com/starkware-libs/formal-proofs",
      "last_time_visited": "2025-05-21T05:50:00.956181+00:00",
      "remote_heads_hash": "e7128b1e4414"
    },
    {
      "remote_url": "https://github.com/sven-manthe/A-formalization-of-Borel-determinacy-in-Lean",
      "last_time_visited": "2025-05-21T05:50:01.518516+00:00",
      "remote_heads_hash": "5cfc842b0804"
    },
    {
      "remote_url": "https://github.com/T-Brick/lean-wasm",
      "last_time_visited": "2025-05-21T05:50:01.982349+00:00",
      "remote_heads_hash": "b88e6c28788e"
    },
    {
      "remote_url": "https://github.com/T-Brick/Numbers",
      "last_time_visited": "2025-05-21T05:50:02.454120+00:00",
      "remote_heads_hash": "ba1c7cfb1a40"
    },
    {
      "remote_url": "https://github.com/T-Brick/lean2wasm",
      "last_time_visited": "2025-05-21T05:50:02.908109+00:00",
      "remote_heads_hash": "3aa558e05c14"
    },
    {
      "remote_url": "https://github.com/T-Brick/DateTime",
      "last_time_visited": "2025-05-21T05:50:03.283526+00:00",
      "remote_heads_hash": "b73826adda67"
    },
    {
      "remote_url": "https://github.com/T-Brick/ControlFlow",
      "last_time_visited": "2025-05-21T05:50:03.683239+00:00",
      "remote_heads_hash": "63d1d45d51d4"
    },
    {
      "remote_url": "https://github.com/teorth/pfr",
      "last_time_visited": "2025-05-21T05:50:04.223257+00:00",
      "remote_heads_hash": "b2a5708a0130"
    },
    {
      "remote_url": "https://github.com/teorth/expdb",
      "last_time_visited": "2025-05-25T07:10:55.611365+00:00",
      "remote_heads_hash": "7c526272f40a"
    },
    {
      "remote_url": "https://github.com/teorth/equational_theories",
      "last_time_visited": "2025-05-25T07:10:57.149980+00:00",
      "remote_heads_hash": "96b34b5b566c"
    },
    {
      "remote_url": "https://github.com/Timeroot/Lean-QuantumInfo",
      "last_time_visited": "2025-05-25T07:11:09.095341+00:00",
      "remote_heads_hash": "8f6172b1e4d0"
    },
    {
      "remote_url": "https://github.com/Timeroot/ComputableReal",
      "last_time_visited": "2025-05-21T05:50:18.868073+00:00",
      "remote_heads_hash": "8abf2e84860e"
    },
    {
      "remote_url": "https://github.com/todbeibrot/Lean-Oscar",
      "last_time_visited": "2025-05-21T05:50:19.258021+00:00",
      "remote_heads_hash": "5be3ae253c94"
    },
    {
      "remote_url": "https://github.com/Trequetrum/lean4game-logic",
      "last_time_visited": "2025-05-21T05:50:19.730948+00:00",
      "remote_heads_hash": "eebd9da88e9d"
    },
    {
      "remote_url": "https://github.com/TristanCacqueray/gen-zmk",
      "last_time_visited": "2025-05-21T05:50:20.209536+00:00",
      "remote_heads_hash": "842533be3bb6"
    },
    {
      "remote_url": "https://github.com/TristanCacqueray/advent-of-lean",
      "last_time_visited": "2025-05-21T05:50:20.632552+00:00",
      "remote_heads_hash": "06e80305a4d5"
    },
    {
      "remote_url": "https://github.com/tydeu/lean4-partax",
      "last_time_visited": "2025-05-21T05:50:21.077644+00:00",
      "remote_heads_hash": "b2f8a34bd5cf"
    },
    {
      "remote_url": "https://github.com/tydeu/lean4-itertools",
      "last_time_visited": "2025-05-21T05:50:21.480385+00:00",
      "remote_heads_hash": "b84ab774823f"
    },
    {
      "remote_url": "https://github.com/tydeu/lean4-alloy",
      "last_time_visited": "2025-05-21T05:50:21.871835+00:00",
      "remote_heads_hash": "460ccd1f03b7"
    },
    {
      "remote_url": "https://github.com/ufmg-smite/lean-smt",
      "last_time_visited": "2025-05-25T07:11:12.330457+00:00",
      "remote_heads_hash": "1e3f1d5ca2f5"
    },
    {
      "remote_url": "https://github.com/utensil/LeanBlueprintExample",
      "last_time_visited": "2025-05-21T05:50:23.159389+00:00",
      "remote_heads_hash": "d4d30dec3e6e"
    },
    {
      "remote_url": "https://github.com/utensil/ginac-lean",
      "last_time_visited": "2025-05-21T05:50:25.026154+00:00",
      "remote_heads_hash": "c0c9217564e1"
    },
    {
      "remote_url": "https://github.com/vasnesterov/HadwigerNelson",
      "last_time_visited": "2025-05-21T05:50:25.622110+00:00",
      "remote_heads_hash": "7efb56d83e82"
    },
    {
      "remote_url": "https://github.com/vbeffara/RMT4",
      "last_time_visited": "2025-05-21T05:50:26.080212+00:00",
      "remote_heads_hash": "6ea56edcd62d"
    },
    {
      "remote_url": "https://github.com/VCA-EPFL/leanses",
      "last_time_visited": "2025-05-21T05:50:26.528939+00:00",
      "remote_heads_hash": "4a086d674a6c"
    },
    {
      "remote_url": "https://github.com/VCA-EPFL/dataflow-rewriter",
      "last_time_visited": "2025-05-25T07:11:14.953971+00:00",
      "remote_heads_hash": "971bdc1e102a"
    },
    {
      "remote_url": "https://github.com/verified-optimization/CvxLean",
      "last_time_visited": "2025-05-21T05:50:29.260841+00:00",
      "remote_heads_hash": "7a4249e9e921"
    },
    {
      "remote_url": "https://github.com/Verified-zkEVM/clean",
      "last_time_visited": "2025-05-25T07:11:17.393766+00:00",
      "remote_heads_hash": "10c1b3d94c5d"
    },
    {
      "remote_url": "https://github.com/Verified-zkEVM/ArkLib",
      "last_time_visited": "2025-05-25T07:29:18.809749+00:00",
      "remote_heads_hash": "32af68993747"
    },
    {
      "remote_url": "https://github.com/verse-lab/veil",
      "last_time_visited": "2025-05-21T05:54:09.176118+00:00",
      "remote_heads_hash": "21719df4e7e4"
    },
    {
      "remote_url": "https://github.com/verse-lab/lean-ssr",
      "last_time_visited": "2025-05-21T05:54:09.744437+00:00",
      "remote_heads_hash": "1401032f0496"
    },
    {
      "remote_url": "https://github.com/vihdzp/rubik-lean4",
      "last_time_visited": "2025-05-21T05:54:10.192239+00:00",
      "remote_heads_hash": "1fc48ff90e62"
    },
    {
      "remote_url": "https://github.com/vihdzp/combinatorial-games",
      "last_time_visited": "2025-05-21T05:54:10.668987+00:00",
      "remote_heads_hash": "f521d632a4bd"
    },
    {
      "remote_url": "https://github.com/vltanh/lean4-analysis-tao",
      "last_time_visited": "2025-05-21T05:54:11.175419+00:00",
      "remote_heads_hash": "db07bff01f80"
    },
    {
      "remote_url": "https://github.com/wellecks/ntptutorial",
      "last_time_visited": "2025-05-21T05:54:11.567400+00:00",
      "remote_heads_hash": "ecbb7c378fae"
    },
    {
      "remote_url": "https://github.com/wellecks/llmstep",
      "last_time_visited": "2025-05-21T05:54:12.497760+00:00",
      "remote_heads_hash": "164bd714fab9"
    },
    {
      "remote_url": "https://github.com/wupr/order-p-q",
      "last_time_visited": "2025-05-21T05:54:13.123331+00:00",
      "remote_heads_hash": "b0999047d697"
    },
    {
      "remote_url": "https://github.com/WuProver/groebner_proj",
      "last_time_visited": "2025-05-25T07:46:41.954855+00:00",
      "remote_heads_hash": "51b6c27c7871"
    },
    {
      "remote_url": "https://github.com/Xiyou-Wu/RiemannianGeometry",
      "last_time_visited": "2025-05-21T05:54:15.009398+00:00",
      "remote_heads_hash": "711e79694735"
    },
    {
      "remote_url": "https://github.com/YaelDillies/Toric",
      "last_time_visited": "2025-05-25T07:46:44.001630+00:00",
      "remote_heads_hash": "e77a375838b5"
    },
    {
      "remote_url": "https://github.com/YaelDillies/LeanCamCombi",
      "last_time_visited": "2025-05-21T05:54:17.070094+00:00",
      "remote_heads_hash": "fbf5b24f39c1"
    },
    {
      "remote_url": "https://github.com/YaelDillies/LeanAPAP",
      "last_time_visited": "2025-05-25T07:46:46.020795+00:00",
      "remote_heads_hash": "c0606594661e"
    },
    {
      "remote_url": "https://github.com/YaelDillies/ChandraFurstLipton",
      "last_time_visited": "2025-05-21T05:54:18.261327+00:00",
      "remote_heads_hash": "c78289448703"
    },
    {
      "remote_url": "https://github.com/yangky11/miniF2F-lean4",
      "last_time_visited": "2025-05-21T05:54:18.703894+00:00",
      "remote_heads_hash": "d7f0063c6ed2"
    },
    {
      "remote_url": "https://github.com/yangky11/lean4-example",
      "last_time_visited": "2025-05-21T05:54:19.231636+00:00",
      "remote_heads_hash": "37ac29a79cca"
    },
    {
      "remote_url": "https://github.com/YnirPaz/PCF-Theory",
      "last_time_visited": "2025-05-21T05:54:19.631325+00:00",
      "remote_heads_hash": "7b0d1c8f2732"
    },
    {
      "remote_url": "https://github.com/yuma-mizuno/lean-math-workshop",
      "last_time_visited": "2025-05-21T05:54:20.047298+00:00",
      "remote_heads_hash": "21fbc4ec8b2a"
    },
    {
      "remote_url": "https://github.com/zkcrypto/cryptolib",
      "last_time_visited": "2025-05-21T05:54:20.540309+00:00",
      "remote_heads_hash": "211ff009691b"
    }
  ],
  "sorries": [
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/EasyDirection.lean",
        "start_line": 24,
        "start_column": 20,
        "end_line": 24,
        "end_column": 25
      },
      "debug_info": {
        "goal": "case cographic\nα : Type\ninst✝ : DecidableEq α\nM M✝ : Matroid α\nhM : M✝.IsCographic\n⊢ M✝.IsRegular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/EasyDirection.lean#L24"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-17T15:49:08+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "223fd08fe10a8100304cccfa5c897cb6b00f81ef9a59ee21883fbb738c9997db"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/HardDirection.lean",
        "start_line": 8,
        "start_column": 2,
        "end_line": 8,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nM : Matroid α\nhM : M.IsRegular\n⊢ M.IsGood",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/HardDirection.lean#L8"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-13T12:19:44+01:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "ec9b6ac25089d2564cf8885e684c3d1b58e1932bf0f96bd030e7cb59f2ac9376"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 60,
        "start_column": 6,
        "end_line": 60,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.mp\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  I ⊆ (standardRepr1sumComposition hXY hYX).1.X ∪ (standardRepr1sumComposition hXY hYX).1.Y ∧\n    LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ (standardRepr1sumComposition hXY hYX).1.B) x ∘ Subtype.toSum)\n      (Subtype.val ⁻¹' I)\n⊢ (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sₗ.B) x ∘ Subtype.toSum) (Subtype.val ⁻¹' (I ∩ (Sₗ.X ∪ Sₗ.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sᵣ.B) x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (Sᵣ.X ∪ Sᵣ.Y)))) ∧\n      I ⊆ Sₗ.X ∪ Sₗ.Y ∪ (Sᵣ.X ∪ Sᵣ.Y)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum1.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "ea52ba487b7db52399ac852426cfe81d6b4d4a46b441c93a2de81151674ab353"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 62,
        "start_column": 6,
        "end_line": 62,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case right\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sₗ.B) x ∘ Subtype.toSum) (Subtype.val ⁻¹' (I ∩ (Sₗ.X ∪ Sₗ.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sᵣ.B) x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (Sᵣ.X ∪ Sᵣ.Y)))) ∧\n      I ⊆ Sₗ.X ∪ Sₗ.Y ∪ (Sᵣ.X ∪ Sᵣ.Y)\n⊢ LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ (standardRepr1sumComposition hXY hYX).1.B) x ∘ Subtype.toSum)\n    (Subtype.val ⁻¹' I)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum1.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "b68fc1c4c207b9274f9de69f09136b896d354a76d8cc5674d1a95f05ce083284"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 446,
        "start_column": 2,
        "end_line": 446,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nQ : Matrix ↑X ↑Y ℚ\nx' y₀ y₁ : α\nhQ : Q.IsTotallyUnimodular\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhyy : y₀ ≠ y₁\nhQy₀ : Q ⟨x', hx'⟩ ⟨y₀, hy₀⟩ = 1\nhQy₁ : Q ⟨x', hx'⟩ ⟨y₁, hy₁⟩ = 1\nhQy : ∀ (y : ↑Y), ↑y ≠ y₀ ∧ ↑y ≠ y₁ → Q ⟨x', hx'⟩ y = 0\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ◫ ▮c₀ ◫ ▮c₁ ◫ ▮(c₀ - c₁)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L446"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "429799f4e3b1e04f23af2a35557b3f848631a0652a62d962dd8d31502554ff90"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 640,
        "start_column": 2,
        "end_line": 640,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ' :\n  (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x'ₗ := ⟨x', ⋯⟩;\n  let x'ᵣ := ⟨x', ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y'ₗ := ⟨y', ⋯⟩;\n  let y'ᵣ := ⟨y', ⋯⟩;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀ₗ x₁ₗ x'ₗ y₀ₗ y₁ₗ y'ₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀ᵣ x₁ᵣ x'ᵣ y₀ᵣ y₁ᵣ y'ᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ := !![Bₗ x₀ₗ y₀ₗ, Bₗ x₀ₗ y₁ₗ; Bₗ x₁ₗ y₀ₗ, Bₗ x₁ₗ y₁ₗ];\n  let D₀ᵣ := !![Bᵣ x₀ᵣ y₀ᵣ, Bᵣ x₀ᵣ y₁ᵣ; Bᵣ x₁ᵣ y₀ᵣ, Bᵣ x₁ᵣ y₁ᵣ];\n  let Dₗ := ![Bₗ x₀ₗ ∘ ⋯.elem, Bₗ x₁ₗ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) y₀ᵣ, Bᵣ (⋯.elem i) y₁ᵣ];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := ⊞ Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := D'.submatrix fᵣ fₗ;\n  let c₀ := fun j => Bᵣ (⋯.elem j) y₀ᵣ;\n  let c₁ := fun j => Bᵣ (⋯.elem j) y₁ᵣ;\n  let d₀ := fun i => Bₗ x₀ₗ (⋯.elem i);\n  let d₁ := fun i => Bₗ x₁ₗ (⋯.elem i);\n  let D₀' := (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ - d₁ else ⋯.elim;\n  let r₁ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then -d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₁ else ⋯.elim;\n  let r₂ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ - d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ else ⋯.elim;\n  D =\n    (fun {X Y α} [Mul α] c r => Matrix.of fun i j => c i * r j) c₀ r₀ +\n      (fun {X Y α} [Mul α] c r => Matrix.of fun i j => c i * r j) c₁ r₁",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L640"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "690c78822fa6e7ef8386935e976ac323da917650b794d0aaa94461617fa2700f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 729,
        "start_column": 2,
        "end_line": 729,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ' :\n  (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x'ₗ := ⟨x', ⋯⟩;\n  let x'ᵣ := ⟨x', ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y'ₗ := ⟨y', ⋯⟩;\n  let y'ᵣ := ⟨y', ⋯⟩;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀ₗ x₁ₗ x'ₗ y₀ₗ y₁ₗ y'ₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀ᵣ x₁ᵣ x'ᵣ y₀ᵣ y₁ᵣ y'ᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ := !![Bₗ x₀ₗ y₀ₗ, Bₗ x₀ₗ y₁ₗ; Bₗ x₁ₗ y₀ₗ, Bₗ x₁ₗ y₁ₗ];\n  let D₀ᵣ := !![Bᵣ x₀ᵣ y₀ᵣ, Bᵣ x₀ᵣ y₁ᵣ; Bᵣ x₁ᵣ y₀ᵣ, Bᵣ x₁ᵣ y₁ᵣ];\n  let Dₗ := ![Bₗ x₀ₗ ∘ ⋯.elem, Bₗ x₁ₗ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) y₀ᵣ, Bᵣ (⋯.elem i) y₁ᵣ];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := ⊞ Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := D'.submatrix fᵣ fₗ;\n  let c₀ := fun j => Bᵣ (⋯.elem j) y₀ᵣ;\n  let c₁ := fun j => Bᵣ (⋯.elem j) y₁ᵣ;\n  let d₀ := fun i => Bₗ x₀ₗ (⋯.elem i);\n  let d₁ := fun i => Bₗ x₁ₗ (⋯.elem i);\n  let D₀' := (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ - d₁ else ⋯.elim;\n  let r₁ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then -d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₁ else ⋯.elim;\n  let r₂ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ - d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ else ⋯.elim;\n  ∀ (i : ↑(Xᵣ \\ {x'})), D i = r₀ ∨ D i = -r₀ ∨ D i = r₁ ∨ D i = -r₁ ∨ D i = r₂ ∨ D i = -r₂ ∨ D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L729"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "cb2584c0dd84e62d560f3a126bd33b3129dd4ff1f51f0382dc5b61f970b87067"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 818,
        "start_column": 2,
        "end_line": 818,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ' :\n  (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x'ₗ := ⟨x', ⋯⟩;\n  let x'ᵣ := ⟨x', ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y'ₗ := ⟨y', ⋯⟩;\n  let y'ᵣ := ⟨y', ⋯⟩;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀ₗ x₁ₗ x'ₗ y₀ₗ y₁ₗ y'ₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀ᵣ x₁ᵣ x'ᵣ y₀ᵣ y₁ᵣ y'ᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ := !![Bₗ x₀ₗ y₀ₗ, Bₗ x₀ₗ y₁ₗ; Bₗ x₁ₗ y₀ₗ, Bₗ x₁ₗ y₁ₗ];\n  let D₀ᵣ := !![Bᵣ x₀ᵣ y₀ᵣ, Bᵣ x₀ᵣ y₁ᵣ; Bᵣ x₁ᵣ y₀ᵣ, Bᵣ x₁ᵣ y₁ᵣ];\n  let Dₗ := ![Bₗ x₀ₗ ∘ ⋯.elem, Bₗ x₁ₗ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) y₀ᵣ, Bᵣ (⋯.elem i) y₁ᵣ];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := ⊞ Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := D'.submatrix fᵣ fₗ;\n  let c₀ := fun j => Bᵣ (⋯.elem j) y₀ᵣ;\n  let c₁ := fun j => Bᵣ (⋯.elem j) y₁ᵣ;\n  let d₀ := fun i => Bₗ x₀ₗ (⋯.elem i);\n  let d₁ := fun i => Bₗ x₁ₗ (⋯.elem i);\n  let D₀' := (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ - d₁ else ⋯.elim;\n  let r₁ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then -d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₁ else ⋯.elim;\n  let r₂ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ - d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ else ⋯.elim;\n  ∀ (j : ↑(Yₗ \\ {y'})),\n    (fun x => D x j) = c₀ ∨\n      (fun x => D x j) = -c₀ ∨\n        (fun x => D x j) = c₁ ∨\n          (fun x => D x j) = -c₁ ∨ (fun x => D x j) = c₀ - c₁ ∨ (fun x => D x j) = c₁ - c₀ ∨ (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L818"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "e3f51d8945dabb8fbd0a5e82a7aae928c7ddf8c1c547392dc82a6c40bd9cad23"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 907,
        "start_column": 2,
        "end_line": 907,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ' :\n  (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x'ₗ := ⟨x', ⋯⟩;\n  let x'ᵣ := ⟨x', ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y'ₗ := ⟨y', ⋯⟩;\n  let y'ᵣ := ⟨y', ⋯⟩;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀ₗ x₁ₗ x'ₗ y₀ₗ y₁ₗ y'ₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀ᵣ x₁ᵣ x'ᵣ y₀ᵣ y₁ᵣ y'ᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ := !![Bₗ x₀ₗ y₀ₗ, Bₗ x₀ₗ y₁ₗ; Bₗ x₁ₗ y₀ₗ, Bₗ x₁ₗ y₁ₗ];\n  let D₀ᵣ := !![Bᵣ x₀ᵣ y₀ᵣ, Bᵣ x₀ᵣ y₁ᵣ; Bᵣ x₁ᵣ y₀ᵣ, Bᵣ x₁ᵣ y₁ᵣ];\n  let Dₗ := ![Bₗ x₀ₗ ∘ ⋯.elem, Bₗ x₁ₗ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) y₀ᵣ, Bᵣ (⋯.elem i) y₁ᵣ];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := ⊞ Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := D'.submatrix fᵣ fₗ;\n  let c₀ := fun j => Bᵣ (⋯.elem j) y₀ᵣ;\n  let c₁ := fun j => Bᵣ (⋯.elem j) y₁ᵣ;\n  let d₀ := fun i => Bₗ x₀ₗ (⋯.elem i);\n  let d₁ := fun i => Bₗ x₁ₗ (⋯.elem i);\n  let D₀' := (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ - d₁ else ⋯.elim;\n  let r₁ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then -d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₁ else ⋯.elim;\n  let r₂ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ - d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ else ⋯.elim;\n  (Aᵣ ◫ D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L907"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "1f0883d9f106b8938e9f6e43961f0a7249dce894331d4961a6c8c4ea3c9864a5"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ' :\n  (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Matrix.submatrix3x3mems Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x'ₗ := ⟨x', ⋯⟩;\n  let x'ᵣ := ⟨x', ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y'ₗ := ⟨y', ⋯⟩;\n  let y'ᵣ := ⟨y', ⋯⟩;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀ₗ x₁ₗ x'ₗ y₀ₗ y₁ₗ y'ₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀ᵣ x₁ᵣ x'ᵣ y₀ᵣ y₁ᵣ y'ᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ := !![Bₗ x₀ₗ y₀ₗ, Bₗ x₀ₗ y₁ₗ; Bₗ x₁ₗ y₀ₗ, Bₗ x₁ₗ y₁ₗ];\n  let D₀ᵣ := !![Bᵣ x₀ᵣ y₀ᵣ, Bᵣ x₀ᵣ y₁ᵣ; Bᵣ x₁ᵣ y₀ᵣ, Bᵣ x₁ᵣ y₁ᵣ];\n  let Dₗ := ![Bₗ x₀ₗ ∘ ⋯.elem, Bₗ x₁ₗ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) y₀ᵣ, Bᵣ (⋯.elem i) y₁ᵣ];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := ⊞ Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := D'.submatrix fᵣ fₗ;\n  let c₀ := fun j => Bᵣ (⋯.elem j) y₀ᵣ;\n  let c₁ := fun j => Bᵣ (⋯.elem j) y₁ᵣ;\n  let d₀ := fun i => Bₗ x₀ₗ (⋯.elem i);\n  let d₁ := fun i => Bₗ x₁ₗ (⋯.elem i);\n  let D₀' := (Matrix.submatrix3x3mems Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ - d₁ else ⋯.elim;\n  let r₁ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then -d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₁ else ⋯.elim;\n  let r₂ := if hD₀₀ : D₀' = matrix3x3unsigned₀ then d₀ - d₁ else if hD₀₁ : D₀' = matrix3x3unsigned₁ then d₀ else ⋯.elim;\n  (Aₗ ⊟ D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "116de01ff2b0257b395c9b107da9c556ee9ecd3a8428f071b5672fbdfa04e823"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "74640d8a57a6c95bc7e7007559554a1ec7835267",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1060,
        "start_column": 2,
        "end_line": 1060,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nx₀ x₁ x' y₀ y₁ y' : α\nhXX : Sₗ.X ∩ Sᵣ.X = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Sₗ.Y ∩ Sᵣ.Y = y₀ ᕃ y₁ ᕃ {y'}\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nBₗ : Matrix ↑Sₗ.X ↑Sₗ.Y ℚ\nhBₗ : Bₗ.IsTotallyUnimodular\nhBBₗ : Bₗ.IsSigningOf Sₗ.B\nBᵣ : Matrix ↑Sᵣ.X ↑Sᵣ.Y ℚ\nhBᵣ : Bᵣ.IsTotallyUnimodular\nhBBᵣ : Bᵣ.IsSigningOf Sᵣ.B\n⊢ (standardRepr3sumComposition_standard hXX hYY hXY hYX).1.B.HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/74640d8a57a6c95bc7e7007559554a1ec7835267/Seymour/Matroid/Operations/Sum3.lean#L1060"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T17:54:51+02:00",
        "inclusion_date": "2025-05-21T05:06:30.038457+00:00"
      },
      "id": "bcc918ff93ca21eafc49ff7367831aa26042190cd694b3309b259ba5c3c3cd44"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 341,
        "start_column": 2,
        "end_line": 341,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\no : Ord α\nd : DecidableEq α\nx y : α\nneq : x ≠ y\n⊢ x < y ∨ x > y",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L341"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-19T15:53:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "f5aa64966ef657cc819e5e3a94eaf73206e25eac52c6211b69539007e9af7d6b"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 389,
        "start_column": 2,
        "end_line": 389,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝¹ : Ord α\ninst✝ : DecidableEq α\nx y : Regex α\nhx : OrIsSmart x\nhy : Regex.notOr y\n⊢ OrIsSmart (insertOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L389"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-19T15:53:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "556213af6d62a5dc3a2c50222b82a8c4361c5452f114946c826a99a30d7e2e83"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 394,
        "start_column": 2,
        "end_line": 394,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝¹ : Ord α\ninst✝ : DecidableEq α\nx y : Regex α\nhx : OrIsSmart x\nhy : OrIsSmart y\n⊢ OrIsSmart (mergeOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L394"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-15T15:28:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "d03824fe8e5542a27c2ef5fdcce8ffaca864d633f564122920b4432eaa85c82b"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "1e788736f206c0c111682f566380c757a6ec0c77",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartPropOr.lean",
        "start_line": 399,
        "start_column": 2,
        "end_line": 399,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝¹ : Ord α\ninst✝ : DecidableEq α\nx y : Regex α\nhx : OrIsSmart x\nhy : OrIsSmart y\n⊢ OrIsSmart (smartOr x y)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/1e788736f206c0c111682f566380c757a6ec0c77/Katydid/Regex/Smart/SmartPropOr.lean#L399"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-15T15:28:17+02:00",
        "inclusion_date": "2025-05-21T05:20:22.105045+00:00"
      },
      "id": "38e3014f89189364f6ecdfc2980c13019738ee80663f7bf782b6d46b6cb19937"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 433,
        "start_column": 2,
        "end_line": 433,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : ℕ\nhp2 : p.AtLeastTwo\ninst✝ : NeZero m\nχ : ℕ\nhe : p > 4 * (χ * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst✝ χ he)\n⊢ |[=true|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))).exec do\n              let b ←\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))).lift_probComp\n                    ($ᵗBool)\n              let __discr ← keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr ← adv.chooseMessages pk\n                  match __discr with\n                    | (m₁, m₂, state) =>\n                      let m_1 := if b = true then m₁ else m₂;\n                      do\n                      let c ←\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) pk m_1\n                      let b' ← adv.distinguish state c\n                      pure (decide (b = b'))].toReal -\n        [=false|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))).exec\n              do\n              let b ←\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))).lift_probComp\n                    ($ᵗBool)\n              let __discr ← keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr ← adv.chooseMessages pk\n                  match __discr with\n                    | (m₁, m₂, state) =>\n                      let m_1 := if b = true then m₁ else m₂;\n                      do\n                      let c ←\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) pk m_1\n                      let b' ← adv.distinguish state c\n                      pure (decide (b = b'))].toReal| ≤\n    |[=true|do\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst✝ χ he adv (fun __discr => ProbComp Bool) __discr fun m₁ m₂ st =>\n                  let __do_jp := fun c => do\n                    let b' ← adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y ←\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) (A, u) m₁\n                    __do_jp y\n                  else do\n                    let y ←\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) (A, u) m₂\n                    __do_jp y].toReal -\n          [=false|do\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst✝ χ he adv (fun __discr => ProbComp Bool) __discr fun m₁ m₂ st =>\n                  let __do_jp := fun c => do\n                    let b' ← adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y ←\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) (A, u) m₁\n                    __do_jp y\n                  else do\n                    let y ←\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) (A, u) m₂\n                    __do_jp y].toReal| +\n      |[=true|do\n              let b ← $ᵗBool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) × Vector (Fin p) m → ProbComp Bool := fun distr => do\n                let b' ←\n                  (fun Au => do\n                        let b ← $ᵗBool\n                        let __discr ← adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst✝ χ he adv (fun __discr => ProbComp Bool) __discr\n                            fun m₁ m₂ st =>\n                            let __do_jp := fun c => do\n                              let b' ← adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y ←\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) Au\n                                    m₁\n                              __do_jp y\n                            else do\n                              let y ←\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) Au\n                                    m₂\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y ← LWE_Distr n m p (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))\n                  __do_jp y\n                else do\n                  let y ← LWE_Uniform_Distr n m p\n                  __do_jp y].toReal -\n          [=false|do\n              let b ← $ᵗBool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) × Vector (Fin p) m → ProbComp Bool := fun distr => do\n                let b' ←\n                  (fun Au => do\n                        let b ← $ᵗBool\n                        let __discr ← adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst✝ χ he adv (fun __discr => ProbComp Bool) __discr\n                            fun m₁ m₂ st =>\n                            let __do_jp := fun c => do\n                              let b' ← adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y ←\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) Au\n                                    m₁\n                              __do_jp y\n                            else do\n                              let y ←\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) Au\n                                    m₂\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y ← LWE_Distr n m p (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))\n                  __do_jp y\n                else do\n                  let y ← LWE_Uniform_Distr n m p\n                  __do_jp y].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/Regev.lean#L433"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "87746af40a0726f4264899ba3ec871c9df2a304ea61573d534b853f3d22837cb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 494,
        "start_column": 2,
        "end_line": 494,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : ℕ\nhp2 : p.AtLeastTwo\ninst✝ : NeZero m\nχ : ℕ\nhe : p > 4 * (χ * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst✝ χ he)\n⊢ |(2⁻¹ *\n              [=true|do\n                let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n                let u ← $ᵗVector (Fin p) m\n                let __discr ← adv.chooseMessages (A, u)\n                let a ← $ᵗVector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) a).get),\n                      u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) a).get + if __discr.1 = true then 0 else ↑(p / 2))] +\n            2⁻¹ *\n              [=true|do\n                let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n                let u ← $ᵗVector (Fin p) m\n                let __discr ← adv.chooseMessages (A, u)\n                let a ← $ᵗVector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) a).get),\n                        u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) a).get +\n                          if __discr.2.1 = true then 0 else ↑(p / 2))]).toReal -\n        (2⁻¹ *\n              [=false|do\n                let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n                let u ← $ᵗVector (Fin p) m\n                let __discr ← adv.chooseMessages (A, u)\n                let a ← $ᵗVector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) a).get),\n                      u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) a).get + if __discr.1 = true then 0 else ↑(p / 2))] +\n            2⁻¹ *\n              [=false|do\n                let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n                let u ← $ᵗVector (Fin p) m\n                let __discr ← adv.chooseMessages (A, u)\n                let a ← $ᵗVector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) a).get),\n                        u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) a).get +\n                          if __discr.2.1 = true then 0 else ↑(p / 2))]).toReal| ≤\n    |[=true|do\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              let c₁ ← $ᵗVector (Fin p) n\n              let c₂ ← $ᵗFin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c₁, c₂)].toReal -\n          [=false|do\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              let c₁ ← $ᵗVector (Fin p) n\n              let c₂ ← $ᵗFin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c₁, c₂)].toReal| +\n      |[=true|do\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let r2 ← $ᵗVector (Fin 2) m\n              let b ← $ᵗBool\n              let A_1 ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u_1 ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A_1, u_1)\n              (fun a => decide (b = a)) <$>\n                  adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) r2).get),\n                      u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) r2).get)].toReal -\n          [=true|do\n              let x ← $ᵗVector (Fin p) n\n              let y ← $ᵗFin p\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (x, y)].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/Regev.lean#L494"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "bc997fe69d335bc4112251bb926415b59eaeb7d2a14f7e8f92a749289a84c035"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "831a3dbb0601e0c2a6474f4fcc407fe16fbac1efd3128b4e9414a7718020cbff"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n            else {none},\n          OracleComp.neverFails\n              (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                (fun _ => pure none) fun verified_msg =>\n                pure\n                  (some\n                    (SimulationData.mk verified_msg\n                      (MessagePackage.mk\n                        (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                        (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                        (ReportingTag.mk\n                          (mock_hmac_sha256 (123456789#256)\n                            (string_to_bitvec\n                              (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                (bitvec_to_string 1730230302#256)))))\n                        (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                      123456789#256))) ∧\n            ∀\n              x_2 ∈\n                OracleComp.support\n                  (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))),\n              OracleComp.neverFails\n                (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag (MessagePackage.reporting_tag (SimulationData.message_package data)))))) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                          x))\n                  else pure none\n              let maybeData ←\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content a).1, a)).1\n                          a))\n                  else pure none\n              let maybeData ←\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content a).1))\n                            (FrankingTag.mk (mock_hmac_sha256 a (serialize_message_data message_content a).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) a)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "9d598cf645497f0137ee1ebd4b1fd6f9335e46138bfa974bd486420dbac2a171"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n          else {none},\n        OracleComp.neverFails\n            (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n              (fun _ => pure none) fun verified_msg =>\n              pure\n                (some\n                  (SimulationData.mk verified_msg\n                    (MessagePackage.mk (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                      (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                      (ReportingTag.mk\n                        (mock_hmac_sha256 (123456789#256)\n                          (string_to_bitvec\n                            (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                              (bitvec_to_string 1730230302#256)))))\n                      (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                    123456789#256))) ∧\n          ∀\n            x_2 ∈\n              OracleComp.support\n                (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                  (fun _ => pure none) fun verified_msg =>\n                  pure\n                    (some\n                      (SimulationData.mk verified_msg\n                        (MessagePackage.mk\n                          (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                          (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                          (ReportingTag.mk\n                            (mock_hmac_sha256 (123456789#256)\n                              (string_to_bitvec\n                                (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                  (bitvec_to_string 1730230302#256)))))\n                          (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                        123456789#256))),\n            OracleComp.neverFails\n              (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                (fun _ => pure true) fun val => pure false)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "b9d8fad8999ee609a59a372698cd34bb2dc89add8cdcfd75a0c12f977fc49ba4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "7524780f5cfbd50a3abda5c2b3ced9c8230a9ff8affa48dd06bcbddee0254d52"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\ninst✝ : spec.FiniteRange\nα β γ δ ε : Type\noa : OracleComp spec α\nob : OracleComp spec β\noc : OracleComp spec γ\nod : OracleComp spec δ\noe : α → β → γ → δ → OracleComp spec ε\nz : ε\n⊢ [=z|do\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      let d ← od\n      oe a b c d] =\n    [=z|do\n      let d ← od\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "8b337fa11095fc5aa2f3c1f5fed4c5a1e3e3c24d649a1a7a87114ad500e37c7c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\noa : Bool → ProbComp α\nx : α\n⊢ [=x|$ᵗBool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "3cff1f817b48431eff7506afa76aeaccb63f0825148369831c334ef9e4e8933c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst✝⁶ inst✝⁵ AddCommGroup.toAddGroup inst✝³ inst✝²)\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₁ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun α x => ProbComp α) α x_1\n                    fun m₁ _m₂ => pure (c +ᵥ x, m₁ * (c +ᵥ g₁ +ᵥ x)) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "dc617e393a3e9b86eb09753e60d75fce8c5c1c39dc6f2a9d4264137408440c8c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst✝⁶ inst✝⁵ AddCommGroup.toAddGroup inst✝³ inst✝²)\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₂ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let y ← $ᵗP\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun α x => ProbComp α) α x_1\n                    fun m₁ _m₂ => pure (c +ᵥ x, m₁ * y) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "440411b95b9c897b8d78c05262aec5d1dffdcde66756b3b7d159987440f5a706"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    @OracleComp.allWhen ι spec β (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      @OracleComp.allWhen ι spec α (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ((x : α) →\n          (x ∈ (oa u).supportWhen fun {α} => possible_outputs) →\n            @OracleComp.allWhen ι spec β (fun {α} => Q) F (fun {α} => possible_outputs) (ob x))\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        @OracleComp.allWhen ι spec α (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ((x_1 : α) →\n            x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x) →\n              @OracleComp.allWhen ι spec β (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1))) ↔\n    (Q (query i t) ∧\n        ((x : spec.range i) →\n          x ∈ possible_outputs (query i t) →\n            @OracleComp.allWhen ι spec α (fun {α} => Q) F (fun {α} => possible_outputs) (oa x))) ∧\n      ((x : α) →\n        (x_1 : spec.range i) →\n          x_1 ∈ possible_outputs (query i t) →\n            x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n              @OracleComp.allWhen ι spec β (fun {α} => Q) F (fun {α} => possible_outputs) (ob x))",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "1bb4b20567335f33cd72e9dcb7dfdec67e5507c331f86317506c1b1436822363"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "56646337c65fa8ce23a76e64ec7ff6f688d32e6b0bedeee05d2095e930ddb7f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "dca3e7f7a202d2927602a4996a4a25509613aaedddc26e58d0f92da59f6166b6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "f1747b179bca9fef58ad71db95fb194899f1873d43365fe96efd8f376222a4be"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "7b036569075ae97f1c46836035957c9b9a11f495721542fe40fc39858c9a238a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "b186305fc1501cc52dbfcca784f16cea250dd05d346c0e28a6f0b061e190f743"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "61b9d24aa4a56176081f6c56f3eeed44659eddb82fb22a0b27d666a3d1ee9a01"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "06d426ca1718bd51e17ac87f1269881de5c2701acf9d417e4770f1c04398a9fb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "fd423b072770d2652841528096205440e65685f6baedd7be5444f9f5ac81a89a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "d808b3ca9f8f5c3d00052c46a92599a7f37649a27bc69e5b4a4defc069bd2086"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "58025250119f57bac68a1af7801a949c8efbbbedc588d1258fadc21c008b9787"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "120926ffb8b8bb66e4212b7205eab93afe87e6af7d701210c318e668c999f2be"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "7b714ce4e33fe8e7c70b6dbe2d3345b0c34521f8cdd4881db17548ba34032f8d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf).support =\n    (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "18f9ba9b40c90ca9e8289a39bcf1e9da6f42d9d79fccf6821c2afe2538ea4f51"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf).finSupport =\n    Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "9eda13b4834ab294eae775ebaa3f96fa5be0ac053124450754783b3243d6bf1b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ support (OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf)\n⊢ cf x₁ = cf x₂",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "7ea4d2e5cfd6a0d291072d9fa60b40a3dbbd2036ab9eed9a5dac16392e75ec13"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(none, s)|Prod.map cf cf <$> OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "d79cbbf30ddfaac98bbfbc3a6a98c43557c14cccf0a6c71a5c3222902a058b72"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(s, none)|Prod.map cf cf <$> OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "303b96ddcf74296539dbe978e46769bf09ae355bc87078559e7bd2fcdc5639d5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ support (OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf)\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "e853c05b8a446a61c41d72746be8e84caec647cc6e75d864ba9f75edb3e43229"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "de16ea35e8d4fa5928287e8dbbfb1d9366b878b5e3a6a05ffdc554c963007927"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "c04bf69a4f40ebb8c30b937e3e8d5cc9aac0b205d481769e28afdebfc515305a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ENNReal := ∑ s, [=some s|cf <$> main]\nh : ENNReal := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ ∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h ≤\n    ∑ s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "6bcdc6306636c69157e87b1400f04e8e1a0e29c7ce5de5f9c4241d7c5155b38f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ENNReal := ∑ s, [=some s|cf <$> main]\nh : ENNReal := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h) =\n    1 - ∑ s, [=some s|cf <$> main] ^ 2 + ∑ s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "f0f626024b7ca969d3bce0b4e9dc2c88b5dfe4f03c7f89d5b4f3463d7b2f4ad8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ENNReal := ∑ s, [=some s|cf <$> main]\nh : ENNReal := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ acc * h⁻¹ + (1 - acc ^ 2 * (↑q)⁻¹) = 1 - (acc ^ 2 * (↑q)⁻¹ - acc * h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "f39c2acf4aefb27d2d197e319f0257bc40bedcde23574b28e7901f0fb2f11385"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : @SymmEncAlg m M K C\ninst✝ : @SymmEncAlg.Complete m M K C inst✝⁵ encAlg\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ @SymmEncAlg.perfectSecrecy m M K C inst✝⁵ encAlg ↔\n    (∀ (k : K),\n        [=k|ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg) (@SymmEncAlg.keygen m M K C encAlg)] =\n          (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C),\n        ∃! k,\n          k ∈\n              support\n                (ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg)\n                  (@SymmEncAlg.keygen m M K C encAlg)) ∧\n            @SymmEncAlg.encrypt m M K C encAlg k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "fa31956e58ccf178faa556f450b2fca4cc9d1574c745edb193d048efa732e79a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p inst✝⁵ inst✝⁴\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (let so := idOracle ++ₛₒ randomOracle;\n    (simulateQ so (monadLift c)).run' ∅) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "b44655a14e54538cb7c8e17808b0bd880831a82e0b84637074b786683ce31766"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean",
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : ℕ\ninst✝ : NeZero p\nerrSamp : ProbComp (Fin p)\nadv : LWE_Adversary n m p\n⊢ |[=true|do\n              let y ← LWE_Distr n m p inst✝ errSamp\n              @adv y].toReal +\n          [=true|do\n              let y ← LWE_Uniform_Distr n m p inst✝\n              (fun a => !a) <$> @adv y].toReal -\n        ([=true|do\n              let a ← LWE_Distr n m p inst✝ errSamp\n              not <$> @adv a].toReal +\n          [=true|do\n              let a ← LWE_Uniform_Distr n m p inst✝\n              @adv a].toReal)| =\n    |[=true|do\n            let y ← LWE_Distr n m p inst✝ errSamp\n            @adv y].toReal -\n        [=true|do\n            let a ← LWE_Uniform_Distr n m p inst✝\n            @adv a].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "9e3d6d98c408ea676f0f99669cc220dac525a6b593088a685ed5b61500b8a425"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/ProgramLogic/Unary/DijkstraMonad.lean",
        "start_line": 138,
        "start_column": 45,
        "end_line": 138,
        "end_column": 50
      },
      "debug_info": {
        "goal": "m : Type u → Type v\nn : Type u → Type w\nw : Type u_1 → Type u_2\nd : {α : Type u_1} → w α → Type u_3\ninst✝² : Monad w\ninst✝¹ : @DijkstraMonad w d inst✝²\nh : LawfulMonad w\ninst✝ : @LawfulDijkstraMonad w (fun {α} => d) inst✝² h inst✝¹\nα : Type u_1\nx : w α\ny : d x\n⊢ HEq\n    (@DijkstraMonad.dBind w d inst✝² inst✝¹ α α x (fun a => pure a) y fun a =>\n      @DijkstraMonad.dPure w d inst✝² inst✝¹ α a)\n    y",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/ProgramLogic/Unary/DijkstraMonad.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T11:21:13+07:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "4425877322691fceaa542cac90b7682992454035587ac12e4a0d30855f7a5968"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "612bb05277e09b7057dc4f4f29b3f5e3375bf3b69db958705ab9fc8bea033001"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "70daecca8a3fa53f9b1d3afac9811d5f8d8b642eeaa8c3cebd3df5ac77a7254e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ (@seededOracle ι spec inst✝³) oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "a0d4da78aa7d53b0c5ce510fce52697609d545961c56c947a93520e48820f476"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ (@seededOracle ι spec inst✝³) oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "b2095b2198fc3aa2234e9de8068d97a0b4432b7c59704cba56bbbe02c302d2e8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (QueryImpl.impl (@countingOracle ι inst✝ spec) q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "b77c44228d6857a45e0e36a3b401fb16f54832df8d688e67934fd1e3e1f800ce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (QueryImpl.impl (@loggingOracle ι spec) q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "990d6cf91db53fd33cf11041bebdc75b3372243a3fef6d8fea04378b64d705f3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : OracleComp.SelectableType α\n⊢ neverFails (OracleComp.uniformOfFintype α hα)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "1bbe0d31541aa338337cd871b4e72172508a3b6befc009edfcfabdde09c22533"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\nα✝ : Type\nhα : OracleComp.SelectableType α✝\nα : Type\nm : ℕ\ninst✝ : OracleComp.SelectableType α\nx y : Matrix (Fin 0) (Fin m) α\n⊢ (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "9e11c1ff537d91942ce014e4efe5a6046bed001d03af307e33b9ca833faf98ed"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : OracleComp.SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : OracleComp.SelectableType α\nm : ℕ\nih :\n  ∀ (x y : Matrix (Fin m) (Fin m✝) α),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m✝) α\n⊢ [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "6993e28c6c694b233df69fb4768c3f3be06933ea6e3e06cf2a59f88a3705d529"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : OracleComp.SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : OracleComp.SelectableType α\nm : ℕ\nih :\n  [⊥|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n⊢ Vector α m✝ →\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n          Fin.cons top.get <$> ihn)\n        m)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "801d3d2b24a96c7d259b8768baf2a4bec929263dcc2d3ea173f4b63bc0508cdd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "9a662b4f866ed22369840ec45497ead233327fad7a612e7b8587a9ad44445bc0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (OracleComp.generateSeed ι inst✝¹ spec inst✝ qc js) =\n    {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "52aa558d0b7a9e140e3d0d6ade38a245ddc273dfcfff9112c8d701dfdaa79721"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (OracleComp.generateSeed ι inst✝² spec inst✝¹ qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "410c70b7fd028bed230c36c3d254fc99a9ad28d2bbe386d44457a5e6ddb1173f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (OracleComp.generateSeed ι inst✝² spec inst✝¹ qc j),\n    [=seed|OracleComp.generateSeed ι inst✝² spec inst✝¹ qc j] =\n      1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (OracleComp.generateSeed ι inst✝² spec inst✝¹ qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        List.foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "5ecc7d30ee6cae390f9b08cd29e76bed2550c12d2297f3d227497f8bb0a458ef"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (OracleComp.generateSeed ι inst✝³ spec inst✝² qc js)\n⊢ [=seed|OracleComp.generateSeed ι inst✝³ spec inst✝² qc js] =\n    (↑(finSupport (OracleComp.generateSeed ι inst✝³ spec inst✝² qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "f0721cc558d14bc50f6a4abd13c19f30df313d815c8d567c99cf2d7db90aa1e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "4bdf0752b37896e0fcc55766b0217ea5787e1af567ee0ce13ab34a9f71e73530"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "4e18a7beb8b01ef0159c503681ee79f2a2cf78172aba4cf141aefdc49f0301b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "abbee72297ba301b2bdc7dc28e7ebf45ce66f15201ce4cc766a596ae3dd8074d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "6dafefde1b372492beb00b8c17f4186143e35584d88b490e47f770349d8ab02b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "a5cb07392eed56476aaf5b006b98399a318e1448b1de5e6cd49ef1da1ee85d01"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ENNReal\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "e805924a8e0c81ad0f70fe4a4feee377837cbafee07ddcf3f9440bdfcab8132b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "4668486f8317b1567a67c3880e5b75f8ce4c5c03fa5e037a5431d774cb21ec23"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "9bccf8285ecfcc70ee4295568ea8cbd4297c8aa947e960b91ac9361e76d53d17"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "d7009f197745946be59b5c254cf471add6be3d35660f6af368c57a107541a8d0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "97741c2220d4214c922fb24fdc6f4067e8b9076e7ff132df185886a03e5a3458"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ENNReal\nh' : @OracleComp.probFailure ι spec α inst✝ oa = s\nob : α → OracleComp spec β\nr : ENNReal\nhr : ∀ x ∈ oa.support, @OracleComp.probFailure ι spec β inst✝ (ob x) ≤ r\n⊢ @OracleComp.probFailure ι spec β inst✝ (oa >>= ob) ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "d8a9279cb0a8f033bf107db4f5cb5a325cf70882880d7fb10c561baefb655498"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ENNReal\nh' : @OracleComp.probFailure ι spec α inst✝ oa = s\nob : α → OracleComp spec β\nr : ENNReal\nhr : ∀ x ∈ oa.support, @OracleComp.probFailure ι spec β inst✝ (ob x) ≤ r\n⊢ @OracleComp.probFailure ι spec β inst✝ (oa >>= ob) ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "22e483e6b79e37899ec42d250d4d5a3e7ce1d62cfdbaa5e308247f185298893f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ENNReal\nhr : ∀ x ∈ oa.support, @OracleComp.probFailure ι spec β inst✝ (ob x) ≤ r\n⊢ @OracleComp.probFailure ι spec β inst✝ (oa >>= ob) ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "ad19bc68fa1290f08667a85d3a7aed38ec8294fd781555ce60e03f7a546b2382"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ @OracleComp.probFailure ι spec β inst✝ (oa >>= ob) =\n    ∑' (x : α), @OracleComp.probOutput ι spec α inst✝ oa x * @OracleComp.probFailure ι spec β inst✝ (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "b6479dddcf44febabb833749b8ed9cb14c390cca20149043c0355952868d1973"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ @OracleComp.probFailure ι spec α inst✝ oa = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "02e20bef5085867f6ae7bf23a6751f2f247cdabc0d9bfaf1cabe96d2304e2fb0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < @OracleComp.probFailure ι spec α inst✝ oa ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "ed4d473cdff3d56768163a2aebab71481316ee1df52433029ae9a5f113ffdd80"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 972,
        "start_column": 2,
        "end_line": 972,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\ninst✝¹ : spec.FiniteRange\nα : Type\noa : OracleComp spec α\nh : oa.neverFails\np : α → Prop\ninst✝ : DecidablePred p\n⊢ (∑' (x : α), if p x then @OracleComp.probOutput ι spec α inst✝¹ oa x else 0) =\n    1 - ∑' (x : α), if p x then 0 else @OracleComp.probOutput ι spec α inst✝¹ oa x",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/EvalDist.lean#L972"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "dbddb820fcca8740b18ee3ac6feefc2673256355953f105e94b147883f8e4dd9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "8fd7e1467a74521e549550ea10246c0055f5ec8c65c6834f8de2d54808b2d8b8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "cc2f1744801f35bb34e461ab4070bdbe048b90c6e97cc74a9aa7480143dd34fc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "90be5408f277e28f8b4600b4fc60270dfb521c3b08579a7b6d05afac40f7ba37"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 180,
        "start_column": 8,
        "end_line": 180,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/List.lean#L180"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "0cbbb2e7f01c483ecde8e2e963d560f6fc6b29869f26f82fd4a1f66b937fbfd4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 315,
        "start_column": 4,
        "end_line": 315,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/List.lean#L315"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "b4aa84c8b2b356502929a1ab803470d81d8bd10c6900877814e3d46e52215986"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 327,
        "start_column": 4,
        "end_line": 327,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case v_insert\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nn : ℕ\nf : α → OracleComp spec β\nn✝ : ℕ\nhd : α\ntl : Vector α n✝\nih : ∀ {x : Vector β n✝}, x ∈ (Vector.mapM f tl).support ↔ ∀ (i : Fin n✝), x[i] ∈ (f tl[i]).support\nx : Vector β (n✝ + 1)\n⊢ x ∈ (Vector.mapM f { toArray := #[hd] ++ tl.toArray, size_toArray := ⋯ }).support ↔\n    ∀ (i : Fin (n✝ + 1)), x[↑i] ∈ (f (#[hd] ++ tl.toArray)[↑i]).support",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/DistSemantics/List.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "a18b5294397f3236bd1d39eab9e456f4e2ffe2ccb27dce7685518a31860a69f8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "f29423141a3e747f61e16bb4051a38509b6c2d91297e155f13d6f4d309451e0c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "2ce8feffc2249ab16ab9717f4e4a2b89f25634e8c7fbe051f94013cb4745889b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u\np : PMF α\nx : α\n⊢ (PMF.map some p) (some x) = p x",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-24T05:43:31-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "127e81914a740f15ef6f77f9d7945bcaf6f70ab2e20000a814c5cacafcd24443"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 69,
        "start_column": 2,
        "end_line": 69,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u\np : PMF α\nx : α\n⊢ (some <$> p) (some x) = p x",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-05-24T05:43:31-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "f158a31c7401a06f0e6790b66aae80f3c1cfbd41b0a94d309bf10184c58a3468"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 4,
        "end_line": 91,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : @SPMF (α × β)\nh1 : @Functor.map SPMF Applicative.toFunctor (α × β) α Prod.fst c = some <$> PMF.pure a\nh2 : @Functor.map SPMF Applicative.toFunctor (α × β) β Prod.snd c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (@Functor.map SPMF Applicative.toFunctor (α × β) α Prod.fst c) x = (some <$> PMF.pure a) x\n⊢ c = @pure SPMF Applicative.toPure (α × β) (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "d79b7219f8786d17464ed5a75474b49f32d8fff2f09eba717413c4a85d66aa9d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 98,
        "start_column": 13,
        "end_line": 98,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : @SPMF (α × β)\nh : @SPMF.IsCoupling α β c OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "c605ecad54d2400d30085b682fe3090547ea1ebdedc0d7dd80409b4c6ebab925"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 99,
        "start_column": 42,
        "end_line": 99,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : @SPMF (α × β)\nh : c = OptionT.fail\n⊢ @Functor.map SPMF Applicative.toFunctor (α × β) α Prod.fst OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "df097dd8f0bb62b60dd552e0206a3a1753af0f5ea8b3f8850ad9e4bb8cb258ae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 99,
        "start_column": 42,
        "end_line": 99,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : @SPMF (α × β)\nh : c = OptionT.fail\n⊢ @Functor.map SPMF Applicative.toFunctor (α × β) β Prod.snd OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "341e2266ef2ea7820444dd972c3e5b8c56535275047ed90fd28af87931044617"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 109,
        "start_column": 59,
        "end_line": 109,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : @SPMF α₁\nq : @SPMF α₂\nf : α₁ → @SPMF β₁\ng : α₂ → @SPMF β₂\nc : @SPMF.Coupling α₁ α₂ p q\nd : α₁ → α₂ → @SPMF (β₁ × β₂)\nh : (a₁ : α₁) → (a₂ : α₂) → ↑↑c (some (a₁, a₂)) ≠ 0 → @SPMF.IsCoupling β₁ β₂ (@d a₁ a₂) (@f a₁) (@g a₂)\nhc₁ : @Functor.map SPMF Applicative.toFunctor (α₁ × α₂) α₁ Prod.fst ↑c = p\nhc₂ : @Functor.map SPMF Applicative.toFunctor (α₁ × α₂) α₂ Prod.snd ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → @SPMF.IsCoupling β₁ β₂ (@d a₁ a₂) (@f a₁) (@g a₂)\n⊢ @Functor.map SPMF Applicative.toFunctor (β₁ × β₂) β₁ Prod.fst (@d (a₁, a₂).1 (a₁, a₂).2) = @f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "fabbeb764a9d8d7a6986154a8cdc2c5d0577961c90e7a40c40c4a85ccd9991a8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 110,
        "start_column": 18,
        "end_line": 110,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : @SPMF α₁\nq : @SPMF α₂\nf : α₁ → @SPMF β₁\ng : α₂ → @SPMF β₂\nc : @SPMF.Coupling α₁ α₂ p q\nd : α₁ → α₂ → @SPMF (β₁ × β₂)\nh : (a₁ : α₁) → (a₂ : α₂) → ↑↑c (some (a₁, a₂)) ≠ 0 → @SPMF.IsCoupling β₁ β₂ (@d a₁ a₂) (@f a₁) (@g a₂)\nhc₁ : @Functor.map SPMF Applicative.toFunctor (α₁ × α₂) α₁ Prod.fst ↑c = p\nhc₂ : @Functor.map SPMF Applicative.toFunctor (α₁ × α₂) α₂ Prod.snd ↑c = q\n⊢ (do\n      let a ← ↑c\n      @Functor.map SPMF Applicative.toFunctor (β₁ × β₂) β₂ Prod.snd (@d a.1 a.2)) =\n    do\n    let a ← ↑c\n    @g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/ProbabilityTheory/Coupling.lean#L110"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "d0bf959f83370241f31dc6d6dab57157dd1dcdb5ab1339927f3d425c06283b23"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "generalize-eval-dist",
        "commit": "436d8067a742848a225e5a729cfc8e9381541214",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/436d8067a742848a225e5a729cfc8e9381541214/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:05:53.779433+00:00"
      },
      "id": "9a508e14c5deb395c8720d2b09345ff0b2f98fbff6ab5c96ca37b350dba922c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 433,
        "start_column": 2,
        "end_line": 433,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : ℕ\nhp2 : p.AtLeastTwo\ninst✝ : NeZero m\nχ : ℕ\nhe : p > 4 * (χ * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst✝ χ he)\n⊢ |[=true|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))).exec do\n              let b ←\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))).lift_probComp\n                    ($ᵗBool)\n              let __discr ← keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr ← adv.chooseMessages pk\n                  match __discr with\n                    | (m₁, m₂, state) =>\n                      let m_1 := if b = true then m₁ else m₂;\n                      do\n                      let c ←\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) pk m_1\n                      let b' ← adv.distinguish state c\n                      pure (decide (b = b'))].toReal -\n        [=false|(toExecutionMethod (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))).exec\n              do\n              let b ←\n                (toExecutionMethod\n                        (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))).lift_probComp\n                    ($ᵗBool)\n              let __discr ← keygen (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he)))\n              match __discr with\n                | (pk, snd) => do\n                  let __discr ← adv.chooseMessages pk\n                  match __discr with\n                    | (m₁, m₂, state) =>\n                      let m_1 := if b = true then m₁ else m₂;\n                      do\n                      let c ←\n                        encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) pk m_1\n                      let b' ← adv.distinguish state c\n                      pure (decide (b = b'))].toReal| ≤\n    |[=true|do\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst✝ χ he adv (fun __discr => ProbComp Bool) __discr fun m₁ m₂ st =>\n                  let __do_jp := fun c => do\n                    let b' ← adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y ←\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) (A, u) m₁\n                    __do_jp y\n                  else do\n                    let y ←\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) (A, u) m₂\n                    __do_jp y].toReal -\n          [=false|do\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              @Regev.Hybrid_1.match_1 n m p hp2 inst✝ χ he adv (fun __discr => ProbComp Bool) __discr fun m₁ m₂ st =>\n                  let __do_jp := fun c => do\n                    let b' ← adv.distinguish st c\n                    pure (decide (b = b'));\n                  if b = true then do\n                    let y ←\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) (A, u) m₁\n                    __do_jp y\n                  else do\n                    let y ←\n                      encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) (A, u) m₂\n                    __do_jp y].toReal| +\n      |[=true|do\n              let b ← $ᵗBool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) × Vector (Fin p) m → ProbComp Bool := fun distr => do\n                let b' ←\n                  (fun Au => do\n                        let b ← $ᵗBool\n                        let __discr ← adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst✝ χ he adv (fun __discr => ProbComp Bool) __discr\n                            fun m₁ m₂ st =>\n                            let __do_jp := fun c => do\n                              let b' ← adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y ←\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) Au\n                                    m₁\n                              __do_jp y\n                            else do\n                              let y ←\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) Au\n                                    m₂\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y ← LWE_Distr n m p (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))\n                  __do_jp y\n                else do\n                  let y ← LWE_Uniform_Distr n m p\n                  __do_jp y].toReal -\n          [=false|do\n              let b ← $ᵗBool\n              let __do_jp : Matrix (Fin n) (Fin m) (Fin p) × Vector (Fin p) m → ProbComp Bool := fun distr => do\n                let b' ←\n                  (fun Au => do\n                        let b ← $ᵗBool\n                        let __discr ← adv.chooseMessages Au\n                        @Regev.Hybrid_1.match_1 n m p hp2 inst✝ χ he adv (fun __discr => ProbComp Bool) __discr\n                            fun m₁ m₂ st =>\n                            let __do_jp := fun c => do\n                              let b' ← adv.distinguish st c\n                              pure b';\n                            if b = true then do\n                              let y ←\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) Au\n                                    m₁\n                              __do_jp y\n                            else do\n                              let y ←\n                                encrypt (regevAsymmEnc n m p hp2 (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))) Au\n                                    m₂\n                              __do_jp y)\n                      distr\n                pure (decide (b' = b))\n              if b = true then do\n                  let y ← LWE_Distr n m p (uniformErrSamp p χ (relax_p_bound p χ m inst✝ he))\n                  __do_jp y\n                else do\n                  let y ← LWE_Uniform_Distr n m p\n                  __do_jp y].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/Regev.lean#L433"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "ab802c6afff31144c950eead790bb136dcfbd1a39feaba2d4565586818fb8f9e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 494,
        "start_column": 2,
        "end_line": 494,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : ℕ\nhp2 : p.AtLeastTwo\ninst✝ : NeZero m\nχ : ℕ\nhe : p > 4 * (χ * m + 1)\nadv : IND_CPA_Adv (uniformRegevAsymmEnc n m p hp2 inst✝ χ he)\n⊢ |(2⁻¹ *\n              [=true|do\n                let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n                let u ← $ᵗVector (Fin p) m\n                let __discr ← adv.chooseMessages (A, u)\n                let a ← $ᵗVector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) a).get),\n                      u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) a).get + if __discr.1 = true then 0 else ↑(p / 2))] +\n            2⁻¹ *\n              [=true|do\n                let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n                let u ← $ᵗVector (Fin p) m\n                let __discr ← adv.chooseMessages (A, u)\n                let a ← $ᵗVector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) a).get),\n                        u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) a).get +\n                          if __discr.2.1 = true then 0 else ↑(p / 2))]).toReal -\n        (2⁻¹ *\n              [=false|do\n                let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n                let u ← $ᵗVector (Fin p) m\n                let __discr ← adv.chooseMessages (A, u)\n                let a ← $ᵗVector (Fin 2) m\n                adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) a).get),\n                      u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) a).get + if __discr.1 = true then 0 else ↑(p / 2))] +\n            2⁻¹ *\n              [=false|do\n                let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n                let u ← $ᵗVector (Fin p) m\n                let __discr ← adv.chooseMessages (A, u)\n                let a ← $ᵗVector (Fin 2) m\n                (fun a => !a) <$>\n                    adv.distinguish __discr.2.2\n                      (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) a).get),\n                        u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) a).get +\n                          if __discr.2.1 = true then 0 else ↑(p / 2))]).toReal| ≤\n    |[=true|do\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              let c₁ ← $ᵗVector (Fin p) n\n              let c₂ ← $ᵗFin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c₁, c₂)].toReal -\n          [=false|do\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              let c₁ ← $ᵗVector (Fin p) n\n              let c₂ ← $ᵗFin p\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (c₁, c₂)].toReal| +\n      |[=true|do\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let r2 ← $ᵗVector (Fin 2) m\n              let b ← $ᵗBool\n              let A_1 ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u_1 ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A_1, u_1)\n              (fun a => decide (b = a)) <$>\n                  adv.distinguish __discr.2.2\n                    (Vector.ofFn (A.mulVec (Vector.map (Fin.castLE ⋯) r2).get),\n                      u.get ⬝ᵥ (Vector.map (Fin.castLE ⋯) r2).get)].toReal -\n          [=true|do\n              let x ← $ᵗVector (Fin p) n\n              let y ← $ᵗFin p\n              let b ← $ᵗBool\n              let A ← $ᵗMatrix (Fin n) (Fin m) (Fin p)\n              let u ← $ᵗVector (Fin p) m\n              let __discr ← adv.chooseMessages (A, u)\n              (fun a => decide (b = a)) <$> adv.distinguish __discr.2.2 (x, y)].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/Regev.lean#L494"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "a180805320b13f4ff5c1dce9150a129faffcc7d141eb46638c7c3899571ba41b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "ecd13b80d76640635d045dabccc8675a6b8e6f3a5b4704475d88299cbdc79830"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n            else {none},\n          OracleComp.neverFails\n              (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                (fun _ => pure none) fun verified_msg =>\n                pure\n                  (some\n                    (SimulationData.mk verified_msg\n                      (MessagePackage.mk\n                        (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                        (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                        (ReportingTag.mk\n                          (mock_hmac_sha256 (123456789#256)\n                            (string_to_bitvec\n                              (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                (bitvec_to_string 1730230302#256)))))\n                        (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                      123456789#256))) ∧\n            ∀\n              x_2 ∈\n                OracleComp.support\n                  (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))),\n              OracleComp.neverFails\n                (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag (MessagePackage.reporting_tag (SimulationData.message_package data)))))) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                          x))\n                  else pure none\n              let maybeData ←\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                            (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content a).1, a)).1\n                          a))\n                  else pure none\n              let maybeData ←\n                @simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x\n                    (fun _ => pure none) fun verified_msg =>\n                    pure\n                      (some\n                        (SimulationData.mk verified_msg\n                          (MessagePackage.mk\n                            (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content a).1))\n                            (FrankingTag.mk (mock_hmac_sha256 a (serialize_message_data message_content a).1))\n                            (ReportingTag.mk\n                              (mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                    (bitvec_to_string 1730230302#256)))))\n                            (Context.mk (1001#256) (1002#256) 1730230302 123) a)\n                          123456789#256))\n              @test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) maybeData\n                  (fun _ => pure false) fun data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 (SecretMessage.nonce (SimulationData.verified_msg data))\n                            (serialize_message_data (SecretMessage.content (SimulationData.verified_msg data))\n                                (SecretMessage.nonce (SimulationData.verified_msg data))).1 =\n                          FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data))) &&\n                      decide\n                        (mock_hmac_sha256 (SimulationData.facebook_key data)\n                            (string_to_bitvec\n                              (String.append\n                                (FrankingTag.tag (MessagePackage.franking_tag (SimulationData.message_package data)))\n                                (bitvec_to_string\n                                  (BitVec.ofNat 256\n                                    (Context.timestamp\n                                      (MessagePackage.context (SimulationData.message_package data))))))) =\n                          ReportingTag.tag\n                            (MessagePackage.reporting_tag (SimulationData.message_package data))))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "e6c97bdc7d25723987af1c47fa0c88c1ae284ee314086ab333c4a6ca421790fe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x)}\n          else {none},\n        OracleComp.neverFails\n            (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n              (fun _ => pure none) fun verified_msg =>\n              pure\n                (some\n                  (SimulationData.mk verified_msg\n                    (MessagePackage.mk (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                      (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                      (ReportingTag.mk\n                        (mock_hmac_sha256 (123456789#256)\n                          (string_to_bitvec\n                            (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                              (bitvec_to_string 1730230302#256)))))\n                      (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                    123456789#256))) ∧\n          ∀\n            x_2 ∈\n              OracleComp.support\n                (@simulation_setup.match_1 (fun maybeVerifiedMsg => OracleComp unifSpec (Option SimulationData)) x_1\n                  (fun _ => pure none) fun verified_msg =>\n                  pure\n                    (some\n                      (SimulationData.mk verified_msg\n                        (MessagePackage.mk\n                          (EncryptedMessage.mk (mock_encrypt (serialize_message_data message_content x).1))\n                          (FrankingTag.mk (mock_hmac_sha256 x (serialize_message_data message_content x).1))\n                          (ReportingTag.mk\n                            (mock_hmac_sha256 (123456789#256)\n                              (string_to_bitvec\n                                (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                  (bitvec_to_string 1730230302#256)))))\n                          (Context.mk (1001#256) (1002#256) 1730230302 123) x)\n                        123456789#256))),\n            OracleComp.neverFails\n              (@test_abuse_report_validation.match_1 (fun maybeData => OracleComp unifSpec Bool) x_2\n                (fun _ => pure true) fun val => pure false)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "09692b72302cb7b792d4aac326df59cc1b404c7a702c324a5012be43630874ee"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure (some (SecretMessage.mk (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x))\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "bb798511e425087d71c18728b72b228a88d840fcadd07d898d66c06895f9be17"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\ninst✝ : spec.FiniteRange\nα β γ δ ε : Type\noa : OracleComp spec α\nob : OracleComp spec β\noc : OracleComp spec γ\nod : OracleComp spec δ\noe : α → β → γ → δ → OracleComp spec ε\nz : ε\n⊢ [=z|do\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      let d ← od\n      oe a b c d] =\n    [=z|do\n      let d ← od\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "db1330ac3bf201eaf56a8497540ffde5b0fa3fac0dfde1efa5932da249128f0d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\noa : Bool → ProbComp α\nx : α\n⊢ [=x|$ᵗBool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "e46e871547643439a4036995af126ddf520682009071bcf9d3ce0f3055e79252"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst✝⁶ inst✝⁵ AddCommGroup.toAddGroup inst✝³ inst✝²)\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₁ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun α x => ProbComp α) α x_1\n                    fun m₁ _m₂ => pure (c +ᵥ x, m₁ * (c +ᵥ g₁ +ᵥ x)) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "5083a5a0aa026816f5ca2af7316116de075804642c887dcb8a34093991a93e64"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : IND_CPA_adversary (elgamalAsymmEnc G P inst✝⁶ inst✝⁵ AddCommGroup.toAddGroup inst✝³ inst✝²)\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₂ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let y ← $ᵗP\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  @elgamalAsymmEnc.IND_CPA_parallelTesting_reduction.match_1 P (fun α x => ProbComp α) α x_1\n                    fun m₁ _m₂ => pure (c +ᵥ x, m₁ * y) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "6024d61645870d8be02252e425a57e1a63a3f702c8b8bf184a22f9989522665d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    @OracleComp.allWhen ι spec β (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      @OracleComp.allWhen ι spec α (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ((x : α) →\n          (x ∈ (oa u).supportWhen fun {α} => possible_outputs) →\n            @OracleComp.allWhen ι spec β (fun {α} => Q) F (fun {α} => possible_outputs) (ob x))\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        @OracleComp.allWhen ι spec α (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ((x_1 : α) →\n            x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x) →\n              @OracleComp.allWhen ι spec β (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1))) ↔\n    (Q (query i t) ∧\n        ((x : spec.range i) →\n          x ∈ possible_outputs (query i t) →\n            @OracleComp.allWhen ι spec α (fun {α} => Q) F (fun {α} => possible_outputs) (oa x))) ∧\n      ((x : α) →\n        (x_1 : spec.range i) →\n          x_1 ∈ possible_outputs (query i t) →\n            x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n              @OracleComp.allWhen ι spec β (fun {α} => Q) F (fun {α} => possible_outputs) (ob x))",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "747ab189c36765a871a35cf51b18a120e7d3f2a3b1f345ca4b81e7ab19246f0d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "0fdc8f68702bb333ef2fc54454bafff3c032a6dd9629240eb252816c7ccb41d9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "d0542739f758131dcb6d0a8f66bcee211f737247bb075c6321961b8aefeb4ec5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "4b234ef72c9a9ea4834dd69731a213928f04ca04ad376710f2f6b7f47f2ef9b0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "7207ac74bb6e72a103b75a06aac8144c53e55dfc01279c1bfd0e32eaa5829191"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "3ac3843ce28131dfaa1aad23957312b6f0359b79df92e66892c9ada0736752fe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "e7c5a26a2602c4c37fbc270a8f26b8be912011589e15bcad99c38078a3b29a76"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "075642ce9bf7341c73f719646cda46fa999822788a090c9e781c0509126722b2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "6461eac217afba45cccd16549ef6b562f74459e59868f84d5b2a724e2d4ace9d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "6d04f5357de8b15bfeb2333ccbe537e2992f78ece6642fbfa645d147bd8e9c18"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "c13447a0f5efe7cead4700efe5a2546947c79efc13beb12a5b4090a7009bdc6e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "6f4adfde40e1b9aa23dd6034458e7fa5621fff95e3d4df0ff07e80d5cfefe0f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "77d9335e4a12568a4bdc4a3815ce2a412cbaeeae4af424991d63c559eb03b321"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf).support =\n    (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "ff9e0a3be8697bea93780a711fd159bfc2b8c41025488d04a6cb758867f82f52"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf).finSupport =\n    Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "b607ef126c3c533e83d2ea2c73a3de1bae4f9e2d472ac7f042ca46ab540fb249"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ support (OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf)\n⊢ cf x₁ = cf x₂",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "5ac77fa5375a64983edc657442bac1f51d30916aeef262e50906693d82103bca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(none, s)|Prod.map cf cf <$> OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "21549bc4569044e29779fe868e6cb454326a1fc72a331ee7836db7289b5fbb56"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(s, none)|Prod.map cf cf <$> OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "5eff346b67338fb611a2ec2e964f558a63c49d019d3fad50cae07b0d85ed0f9b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ support (OracleComp.fork ι inst✝⁴ spec inst✝³ inst✝² inst✝¹ α main qb js i cf)\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "59a41fe1531ba0bfa9f76802dd5b5cf6578c1f48fdbf8beb7434e975f338924a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "737bd903487f7685a856969c7aa3cb4fafac9e4e941a98b50f20559483751383"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ENNReal := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "eabef388b95902fed84eb337a9685d4014f29a6508aeab28f160f1e08686b6e2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ENNReal := ∑ s, [=some s|cf <$> main]\nh : ENNReal := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ ∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h ≤\n    ∑ s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "6db888ffca87e303ead9161404b645e8d2cb814bcfadc1f25ca8d9835467d8ec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ENNReal := ∑ s, [=some s|cf <$> main]\nh : ENNReal := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h) =\n    1 - ∑ s, [=some s|cf <$> main] ^ 2 + ∑ s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "7776b098a4982a6af9ea225c25a7547412d5ede52b4fa85b18bc3f4426454457"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ENNReal := ∑ s, [=some s|cf <$> main]\nh : ENNReal := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ acc * h⁻¹ + (1 - acc ^ 2 * (↑q)⁻¹) = 1 - (acc ^ 2 * (↑q)⁻¹ - acc * h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "ff3544f30b78fc14066266ac57b69cb4a825c5d4ff810b2a2eeecf7072000e18"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : @SymmEncAlg m M K C\ninst✝ : @SymmEncAlg.Complete m M K C inst✝⁵ encAlg\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ @SymmEncAlg.perfectSecrecy m M K C inst✝⁵ encAlg ↔\n    (∀ (k : K),\n        [=k|ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg) (@SymmEncAlg.keygen m M K C encAlg)] =\n          (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C),\n        ∃! k,\n          k ∈\n              support\n                (ExecutionMethod.exec (@SymmEncAlg.toExecutionMethod m M K C encAlg)\n                  (@SymmEncAlg.keygen m M K C encAlg)) ∧\n            @SymmEncAlg.encrypt m M K C encAlg k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "128f7b6f0f5175c50feaaf49cfe0fc4ee810fb1f6bb842311a1792e27e16030d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p inst✝⁵ inst✝⁴\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (let so := idOracle ++ₛₒ randomOracle;\n    (simulateQ so (monadLift c)).run' ∅) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "22d97f81ea4dcd841eebd7908c387eea7c76a2f4f6cea469e10a605c04bf1cf9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean",
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m p : ℕ\ninst✝ : NeZero p\nerrSamp : ProbComp (Fin p)\nadv : LWE_Adversary n m p\n⊢ |[=true|do\n              let y ← LWE_Distr n m p inst✝ errSamp\n              @adv y].toReal +\n          [=true|do\n              let y ← LWE_Uniform_Distr n m p inst✝\n              (fun a => !a) <$> @adv y].toReal -\n        ([=true|do\n              let a ← LWE_Distr n m p inst✝ errSamp\n              not <$> @adv a].toReal +\n          [=true|do\n              let a ← LWE_Uniform_Distr n m p inst✝\n              @adv a].toReal)| =\n    |[=true|do\n            let y ← LWE_Distr n m p inst✝ errSamp\n            @adv y].toReal -\n        [=true|do\n            let a ← LWE_Uniform_Distr n m p inst✝\n            @adv a].toReal|",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/CryptoFoundations/HardnessAssumptions/LWE.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "ec56a77610a3e37c717258ec30a8672f293551c6347c440356eb748e1be259e2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/ProgramLogic/Unary/DijkstraMonad.lean",
        "start_line": 138,
        "start_column": 45,
        "end_line": 138,
        "end_column": 50
      },
      "debug_info": {
        "goal": "m : Type u → Type v\nn : Type u → Type w\nw : Type u_1 → Type u_2\nd : {α : Type u_1} → w α → Type u_3\ninst✝² : Monad w\ninst✝¹ : @DijkstraMonad w d inst✝²\nh : LawfulMonad w\ninst✝ : @LawfulDijkstraMonad w (fun {α} => d) inst✝² h inst✝¹\nα : Type u_1\nx : w α\ny : d x\n⊢ HEq\n    (@DijkstraMonad.dBind w d inst✝² inst✝¹ α α x (fun a => pure a) y fun a =>\n      @DijkstraMonad.dPure w d inst✝² inst✝¹ α a)\n    y",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/ProgramLogic/Unary/DijkstraMonad.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T11:21:13+07:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "97776e6783fdc9468755ff844e2cc355258698216bb5b0c98c60a4f1ade76333"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "3ba094adb2355d20111bd320b2baec3ca80966a474c0b79d9f98fc0357ce8186"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "1c52ecfcc8e2b1cda57d1ce6890b1be0ec348db0adabe9329a32ee7ee3c5e607"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ (@seededOracle ι spec inst✝³) oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "6785446a950a93cc0ddf22bc60b3d64aa7ee97f5e147327a5c5e987f433ab22a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ (@seededOracle ι spec inst✝³) oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "6b4d7a2036b5b434eb324f2a031328525fffeaa27ef8de2a2b80639c34d1c404"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (QueryImpl.impl (@countingOracle ι inst✝ spec) q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "907c1755527923f56d64e20699b168fc8900f91db18356f29fd48df0a4e14688"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (QueryImpl.impl (@loggingOracle ι spec) q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "e5e4162f0f23ecb345e3c868058d54e9ee768b54b51c431a826dbe0ceba2a0da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : OracleComp.SelectableType α\n⊢ neverFails (OracleComp.uniformOfFintype α hα)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "fcd53fd3232696c1caddc49efb46a94c174576b4e116584861117b81d475a417"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\nα✝ : Type\nhα : OracleComp.SelectableType α✝\nα : Type\nm : ℕ\ninst✝ : OracleComp.SelectableType α\nx y : Matrix (Fin 0) (Fin m) α\n⊢ (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "e789c663c49e88f1956203933073f08aaaf5dc7399a61f35aa188c114976dbc2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : OracleComp.SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : OracleComp.SelectableType α\nm : ℕ\nih :\n  ∀ (x y : Matrix (Fin m) (Fin m✝) α),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m✝) α\n⊢ [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "cb5fb543c78c8ce43131c31802582cf69df537398ad16d0d2cf54f79e978b3f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : OracleComp.SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : OracleComp.SelectableType α\nm : ℕ\nih :\n  [⊥|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n⊢ Vector α m✝ →\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← OracleComp.uniformOfFintype (Vector α m✝) (OracleComp.instSelectableTypeVector α m✝ inst✝)\n          Fin.cons top.get <$> ihn)\n        m)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "8644cd82fdc528c60d1e8dfd6e6448ce5a35f1ae372787e259b44cc12e72e594"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "5ca8c734bb1bc89482ee14ed362524c918a5ae9b99efa4bd6f65ca33bd2d112b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (OracleComp.generateSeed ι inst✝¹ spec inst✝ qc js) =\n    {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "af1ec1675e06a82df7aac8a9aae5db667e9d987c54942c040b3f68876d5aaea3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (OracleComp.generateSeed ι inst✝² spec inst✝¹ qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "14f31404dadb6b6e0f33eb70b5547477d479f2356d350ce1095f413e98f3af13"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (OracleComp.generateSeed ι inst✝² spec inst✝¹ qc j),\n    [=seed|OracleComp.generateSeed ι inst✝² spec inst✝¹ qc j] =\n      1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (OracleComp.generateSeed ι inst✝² spec inst✝¹ qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        List.foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "98d51f88f24403ae4bc02a57a162f3c71085c49fd44012bf33184a9417478e0b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (OracleComp.generateSeed ι inst✝³ spec inst✝² qc js)\n⊢ [=seed|OracleComp.generateSeed ι inst✝³ spec inst✝² qc js] =\n    (↑(finSupport (OracleComp.generateSeed ι inst✝³ spec inst✝² qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "7ff8e5594d6cd09d6ac2350ad152ec151aaa24cbf46c50193bfcd27c037b6caf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "9d98ec848087e6433dc683bda1db583351ca5e4aa9f3999ae5df6655646397c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "def663ee4d8a24c96cf0132dbb5ce8bb01a6711a1e6aa331b5724658d6131639"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "268c9e94c2b457eb05cc6118dd949b5f8c1d85012970204deeb82573c46c059f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "2c79bb68d0611d187d6c6015a6cebe8ca11bc2de52a77d52325c7e6bdb77bc2a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "bca2f7f6ce93ea2903b441002d5d1b5f23624ff70f3d33f55ea2231408a3407b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ENNReal\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "c96b7aa242350c1b750973427e4e09e46a43012036367ba17ed29f4a7214a703"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "d724c5a10bcc37d657840bb722ea58a66ec2f42c13a5b2a1196db83026c99080"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "67d8337635b22092d4d27a4cbf0de1336b4bd7874314485517798ca798f68115"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "229f187a394f7a0d432ee44d5e887e15dff6fdf3e948bfcb7cfd9475f6a01330"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "45e39d1238a745178bfa3f0eb6342573bc7ba2cf93bdc6d1b71f50ac2337007e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ENNReal\nh' : @OracleComp.probFailure ι spec α inst✝ oa = s\nob : α → OracleComp spec β\nr : ENNReal\nhr : ∀ x ∈ oa.support, @OracleComp.probFailure ι spec β inst✝ (ob x) ≤ r\n⊢ @OracleComp.probFailure ι spec β inst✝ (oa >>= ob) ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "0d69340f5c6939ae1b7120f1951d462c4133ed58d5b1a260b5e2a5258339222c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ENNReal\nh' : @OracleComp.probFailure ι spec α inst✝ oa = s\nob : α → OracleComp spec β\nr : ENNReal\nhr : ∀ x ∈ oa.support, @OracleComp.probFailure ι spec β inst✝ (ob x) ≤ r\n⊢ @OracleComp.probFailure ι spec β inst✝ (oa >>= ob) ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "31ccf4c13fa11a2ade0e70d94956ce70e63f0db86f16bdd76f13219cfa6300f4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ENNReal\nhr : ∀ x ∈ oa.support, @OracleComp.probFailure ι spec β inst✝ (ob x) ≤ r\n⊢ @OracleComp.probFailure ι spec β inst✝ (oa >>= ob) ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "3cb49419745e96fa76f548eb415993033f35edb162257526752cc0d3b1a277da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ @OracleComp.probFailure ι spec β inst✝ (oa >>= ob) =\n    ∑' (x : α), @OracleComp.probOutput ι spec α inst✝ oa x * @OracleComp.probFailure ι spec β inst✝ (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "381a08dfcd6e38f0a0d3f023cc90e9f45299373f236021741cf772b540b103f2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ @OracleComp.probFailure ι spec α inst✝ oa = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "6282c3ac72a00871e7a590ea114a7bb029ca7e42073502a8788c215613a545c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < @OracleComp.probFailure ι spec α inst✝ oa ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "cf822fa1ca73c655b8a2f240f281a7ce2d013de751011ec5f6268696159d75c5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 972,
        "start_column": 2,
        "end_line": 972,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\ninst✝¹ : spec.FiniteRange\nα : Type\noa : OracleComp spec α\nh : oa.neverFails\np : α → Prop\ninst✝ : DecidablePred p\n⊢ (∑' (x : α), if p x then @OracleComp.probOutput ι spec α inst✝¹ oa x else 0) =\n    1 - ∑' (x : α), if p x then 0 else @OracleComp.probOutput ι spec α inst✝¹ oa x",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/EvalDist.lean#L972"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-27T11:58:04-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "23686e6d9d7307e77a535413afb61bb9578491e805451c5655c8e10bd20836a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "f7a0a90cc17b96f50f287115e714df8020a3733e416bbb851d6e16ffd39c3229"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "b452cab0107a2685bcc108c4b6248d5bd9752cdf8c64cda41bc76bc61ea2ff90"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "a94e8dd8646e68d0911118a3cb9649ed6754a434c33cd29825a4aac9ac5a1d4c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 180,
        "start_column": 8,
        "end_line": 180,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/List.lean#L180"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "d0e11d363ae2b0816550e30c8ea2f9d4fd56addbda6a15e84b1e057d22a9f495"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 315,
        "start_column": 4,
        "end_line": 315,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/List.lean#L315"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "73e032806449add47586c5afa1c3a2d3cc76b0f5cf3ed8db18ea8b37b755acbe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 327,
        "start_column": 4,
        "end_line": 327,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case v_insert\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nn : ℕ\nf : α → OracleComp spec β\nn✝ : ℕ\nhd : α\ntl : Vector α n✝\nih : ∀ {x : Vector β n✝}, x ∈ (Vector.mapM f tl).support ↔ ∀ (i : Fin n✝), x[i] ∈ (f tl[i]).support\nx : Vector β (n✝ + 1)\n⊢ x ∈ (Vector.mapM f { toArray := #[hd] ++ tl.toArray, size_toArray := ⋯ }).support ↔\n    ∀ (i : Fin (n✝ + 1)), x[↑i] ∈ (f (#[hd] ++ tl.toArray)[↑i]).support",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/DistSemantics/List.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "76ab197bec858b1ff6aee862ae13625fbe3115c74b8672ee6f90d9dd0e19d7c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "f23635b3a5e060d9bd1a3190c4c3778d5bbe4276bc6e19bc2270f6a3c51cf681"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "d2410e70be5b21a1ad79e7ac159466e570bb809c74187cdd840e531d2cc1c9ee"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : @SPMF (α × β)\nh1 : @Functor.map SPMF Applicative.toFunctor (α × β) α Prod.fst c = some <$> PMF.pure a\nh2 : @Functor.map SPMF Applicative.toFunctor (α × β) β Prod.snd c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (@Functor.map SPMF Applicative.toFunctor (α × β) α Prod.fst c) x = (some <$> PMF.pure a) x\n⊢ c = @pure SPMF Applicative.toPure (α × β) (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "ba715a276e50fe3b067966dc529b023b92da472ddafb1e35645ebcc9d22bbf20"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : @SPMF (α × β)\nh : @SPMF.IsCoupling α β c OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "216df46282d66df30a34e2e16af779d70ee06eae02bbef8ccdd1c69807d48f39"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : @SPMF (α × β)\nh : c = OptionT.fail\n⊢ @Functor.map SPMF Applicative.toFunctor (α × β) α Prod.fst OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "9ff339e2afa5371c2731713ea93cf62fd6d3dd2789fec6e07a3ceac609ef8a49"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : @SPMF (α × β)\nh : c = OptionT.fail\n⊢ @Functor.map SPMF Applicative.toFunctor (α × β) β Prod.snd OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "23a5f2bf96ee6b813049e5a6e9046481467c9ed2c425ce20c18b7c8e808c75a0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : @SPMF α₁\nq : @SPMF α₂\nf : α₁ → @SPMF β₁\ng : α₂ → @SPMF β₂\nc : @SPMF.Coupling α₁ α₂ p q\nd : α₁ → α₂ → @SPMF (β₁ × β₂)\nh : (a₁ : α₁) → (a₂ : α₂) → ↑↑c (some (a₁, a₂)) ≠ 0 → @SPMF.IsCoupling β₁ β₂ (@d a₁ a₂) (@f a₁) (@g a₂)\nhc₁ : @Functor.map SPMF Applicative.toFunctor (α₁ × α₂) α₁ Prod.fst ↑c = p\nhc₂ : @Functor.map SPMF Applicative.toFunctor (α₁ × α₂) α₂ Prod.snd ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → @SPMF.IsCoupling β₁ β₂ (@d a₁ a₂) (@f a₁) (@g a₂)\n⊢ @Functor.map SPMF Applicative.toFunctor (β₁ × β₂) β₁ Prod.fst (@d (a₁, a₂).1 (a₁, a₂).2) = @f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "0c8ce21453b5383da2b4faed23e0f0c9c438f3725cb70770df9810383137e0c9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : @SPMF α₁\nq : @SPMF α₂\nf : α₁ → @SPMF β₁\ng : α₂ → @SPMF β₂\nc : @SPMF.Coupling α₁ α₂ p q\nd : α₁ → α₂ → @SPMF (β₁ × β₂)\nh : (a₁ : α₁) → (a₂ : α₂) → ↑↑c (some (a₁, a₂)) ≠ 0 → @SPMF.IsCoupling β₁ β₂ (@d a₁ a₂) (@f a₁) (@g a₂)\nhc₁ : @Functor.map SPMF Applicative.toFunctor (α₁ × α₂) α₁ Prod.fst ↑c = p\nhc₂ : @Functor.map SPMF Applicative.toFunctor (α₁ × α₂) α₂ Prod.snd ↑c = q\n⊢ (do\n      let a ← ↑c\n      @Functor.map SPMF Applicative.toFunctor (β₁ × β₂) β₂ Prod.snd (@d a.1 a.2)) =\n    do\n    let a ← ↑c\n    @g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "8373d0c1bcee230600973df2009af93f26ba03f4b7747f642272626a0f7ec8b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "14ed781543483774b7c5772b361f0ee26a977132",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/14ed781543483774b7c5772b361f0ee26a977132/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-05-25T05:12:42.616735+00:00"
      },
      "id": "e6c6ab690c6240e0e8353cd28fad4dc15820d2286a8bc3c18a8204af1b3a98bd"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/EasyDirection.lean",
        "start_line": 24,
        "start_column": 20,
        "end_line": 24,
        "end_column": 25
      },
      "debug_info": {
        "goal": "case cographic\nα : Type\ninst✝ : DecidableEq α\nM M✝ : Matroid α\nhM : M✝.IsCographic\n⊢ M✝.IsRegular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/EasyDirection.lean#L24"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-17T15:49:08+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "5e409476d9e0f103efc852e9ad8e24b6c03b03ac2df09db400b831bb03aca746"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/HardDirection.lean",
        "start_line": 8,
        "start_column": 2,
        "end_line": 8,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nM : Matroid α\nhM : M.IsRegular\n⊢ M.IsGood",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/HardDirection.lean#L8"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-13T12:19:44+01:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "ff5f7b075fccaa675ec804481796c081a7c793844b790c1ee7ae97ff2718fc67"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 60,
        "start_column": 6,
        "end_line": 60,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.mp\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  I ⊆ (standardRepr1sumComposition hXY hYX).1.X ∪ (standardRepr1sumComposition hXY hYX).1.Y ∧\n    LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ (standardRepr1sumComposition hXY hYX).1.B) x ∘ Subtype.toSum)\n      (Subtype.val ⁻¹' I)\n⊢ (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sₗ.B) x ∘ Subtype.toSum) (Subtype.val ⁻¹' (I ∩ (Sₗ.X ∪ Sₗ.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sᵣ.B) x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (Sᵣ.X ∪ Sᵣ.Y)))) ∧\n      I ⊆ Sₗ.X ∪ Sₗ.Y ∪ (Sᵣ.X ∪ Sᵣ.Y)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum1.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "90f300c5480207fef46f487e96cc4174e3cdd2dd794b14deabeb4e0655e19a54"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 62,
        "start_column": 6,
        "end_line": 62,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case right\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sₗ.B) x ∘ Subtype.toSum) (Subtype.val ⁻¹' (I ∩ (Sₗ.X ∪ Sₗ.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sᵣ.B) x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (Sᵣ.X ∪ Sᵣ.Y)))) ∧\n      I ⊆ Sₗ.X ∪ Sₗ.Y ∪ (Sᵣ.X ∪ Sᵣ.Y)\n⊢ LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ (standardRepr1sumComposition hXY hYX).1.B) x ∘ Subtype.toSum)\n    (Subtype.val ⁻¹' I)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum1.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "38576ef7d1c1fb2653ade1b24377103494fe4b6fd0235dce4f048ab9af276409"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 794,
        "start_column": 2,
        "end_line": 794,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nQ : Matrix ↑X ↑Y ℚ\nx₂ y₀ y₁ : α\nhQ : Q.IsTotallyUnimodular\nhx₂ : x₂ ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhyy : y₀ ≠ y₁\nhQy₀ : Q ⟨x₂, hx₂⟩ ⟨y₀, hy₀⟩ = 1\nhQy₁ : Q ⟨x₂, hx₂⟩ ⟨y₁, hy₁⟩ = 1\nhQy : ∀ (y : ↑Y), ↑y ≠ y₀ ∧ ↑y ≠ y₁ → Q ⟨x₂, hx₂⟩ y = 0\n⊢ let c₀ := Q._col ⟨y₀, hy₀⟩;\n  let c₁ := Q._col ⟨y₁, hy₁⟩;\n  let Q' := Q.drop1row2cols x₂ y₀ y₁;\n  (Q' ◫ ▮c₀ ◫ ▮c₁ ◫ ▮(c₀ - c₁)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L794"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "3912fb607dd036d3c9170f8f416e2343fa1d0a2a29ea90f51c2ade4c1901ce84"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 896,
        "start_column": 2,
        "end_line": 896,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x₂ₗ := ⟨x₂, ⋯⟩;\n  let x₂ᵣ := ⟨x₂, ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y₂ₗ := ⟨y₂, ⋯⟩;\n  let y₂ᵣ := ⟨y₂, ⋯⟩;\n  let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n  let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n  let D₀ₗ := Bₗ.submatrix2x2 x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n  let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n  let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n  let c₀ := Bᵣ._col y₀ᵣ;\n  let c₁ := Bᵣ._col y₁ᵣ;\n  match Bₗ'._rrr x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ hBₗ' with\n  | (r₀, r₁, snd) =>\n    (⊞ Dₗ D₀ₗ(Dᵣ * D₀ₗ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY =\n      (fun {X Y α} [Mul α] c r => Matrix.of fun i j => c i * r j) c₀ r₀ +\n        (fun {X Y α} [Mul α] c r => Matrix.of fun i j => c i * r j) c₁ r₁",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L896"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "a6d9c34bd0b113e5d530a7906a1b7b0fd592bb8722a0f5b62305ae5d9ede546a"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 934,
        "start_column": 2,
        "end_line": 934,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x₂ₗ := ⟨x₂, ⋯⟩;\n  let x₂ᵣ := ⟨x₂, ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y₂ₗ := ⟨y₂, ⋯⟩;\n  let y₂ᵣ := ⟨y₂, ⋯⟩;\n  let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n  let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n  let D₀ₗ := Bₗ.submatrix2x2 x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n  let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n  let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n  let D := (⊞ Dₗ D₀ₗ(Dᵣ * D₀ₗ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY;\n  match Bₗ'._rrr x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ hBₗ' with\n  | (r₀, r₁, r₂) => ∀ (i : ↑(Xᵣ \\ {x₂})), D i = r₀ ∨ D i = -r₀ ∨ D i = r₁ ∨ D i = -r₁ ∨ D i = r₂ ∨ D i = -r₂ ∨ D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L934"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "aa8b1d05a5098286992f888805d9cc1ef4b52a216782057f85edd3596d0a2ce3"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 973,
        "start_column": 2,
        "end_line": 973,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x₂ₗ := ⟨x₂, ⋯⟩;\n  let x₂ᵣ := ⟨x₂, ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y₂ₗ := ⟨y₂, ⋯⟩;\n  let y₂ᵣ := ⟨y₂, ⋯⟩;\n  let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n  let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n  let D₀ₗ := Bₗ.submatrix2x2 x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n  let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n  let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n  let D := (⊞ Dₗ D₀ₗ(Dᵣ * D₀ₗ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY;\n  let c₀ := Bᵣ._col y₀ᵣ;\n  let c₁ := Bᵣ._col y₁ᵣ;\n  ∀ (j : ↑(Yₗ \\ {y₂})),\n    (fun x => D x j) = c₀ ∨\n      (fun x => D x j) = -c₀ ∨\n        (fun x => D x j) = c₁ ∨\n          (fun x => D x j) = -c₁ ∨ (fun x => D x j) = c₀ - c₁ ∨ (fun x => D x j) = c₁ - c₀ ∨ (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L973"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "ad426e1266862fff233e69768885774fb49d64614fecd4cf952b7b5932205e1f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ match hXX.inter3all with\n  | ((x₀ₗ, x₁ₗ, x₂ₗ), x₀ᵣ, x₁ᵣ, x₂ᵣ) =>\n    match hYY.inter3all with\n    | ((y₀ₗ, y₁ₗ, y₂ₗ), y₀ᵣ, y₁ᵣ, y₂ᵣ) =>\n      let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n      let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n      let D₀ᵣ := Bᵣ.submatrix2x2 x₀ᵣ x₁ᵣ y₀ᵣ y₁ᵣ;\n      let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n      let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n      (Bᵣ.drop1row2cols x₂ y₀ y₁ ◫ (⊞ Dₗ D₀ᵣ(Dᵣ * D₀ᵣ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "d037e842ef54d836aa3fd268afc9a071e7773524151d97e184765182e26f2683"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1019,
        "start_column": 2,
        "end_line": 1019,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ match hXX.inter3all with\n  | ((x₀ₗ, x₁ₗ, x₂ₗ), x₀ᵣ, x₁ᵣ, x₂ᵣ) =>\n    match hYY.inter3all with\n    | ((y₀ₗ, y₁ₗ, y₂ₗ), y₀ᵣ, y₁ᵣ, y₂ᵣ) =>\n      let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n      let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n      let D₀ₗ := Bₗ.submatrix2x2 x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n      let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n      let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n      (Bₗ.drop2rows1col x₀ x₁ y₂ ⊟ (⊞ Dₗ D₀ₗ(Dᵣ * D₀ₗ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L1019"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "2f68c608653b5552662afe30c21d51481a612f5ce6b8b33cd60a503faa57f023"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1101,
        "start_column": 4,
        "end_line": 1101,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.left\nα : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\n⊢ (matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L1101"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "0381372f44d433ad1ec11f891c9ffaeab97f74a775c8d69fb55f480c4b5a564a"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1144,
        "start_column": 10,
        "end_line": 1144,
        "end_column": 15
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\niₗ : ↑(Xₗ \\ (x₀ ᕃ {x₁}))\njᵣ : ↑(Yᵣ \\ (y₀ ᕃ {y₁}))\nhx₂ : ↑iₗ = x₂\nhy₂ : ¬↑jᵣ = y₂\n⊢ |matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY ◩iₗ ◪jᵣ| =\n    ↑(ZMod.val ((matrix3sumComposition Bₗ Bᵣ hXX hYY).1 ◩iₗ ◪jᵣ))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L1144"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "2d2ca0c38104f3ca9751378d6b3f4de675bca082ae18d80e8ccb3319acc158ed"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1146,
        "start_column": 8,
        "end_line": 1146,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\niₗ : ↑(Xₗ \\ (x₀ ᕃ {x₁}))\njᵣ : ↑(Yᵣ \\ (y₀ ᕃ {y₁}))\nhx₂ : ¬↑iₗ = x₂\n⊢ |matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY ◩iₗ ◪jᵣ| =\n    ↑(ZMod.val ((matrix3sumComposition Bₗ Bᵣ hXX hYY).1 ◩iₗ ◪jᵣ))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L1146"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "f26dea4f1a22245c4a9550fcc6782bbef6b8fc2bc79b303490b9379c30a55cf7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1147,
        "start_column": 6,
        "end_line": 1147,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.right.inr.inl\nα : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\niᵣ : ↑(Xᵣ \\ {x₂})\njₗ : ↑(Yₗ \\ {y₂})\n⊢ |matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY ◪iᵣ ◩jₗ| =\n    ↑(ZMod.val ((matrix3sumComposition Bₗ Bᵣ hXX hYY).1 ◪iᵣ ◩jₗ))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L1147"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "f3f9cd66d91cbf6f0716d314fa7004c3725a6af7886c03af103b1d98e38ae074"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "d8029e530783e371699ae3848c18e81410f4fad1",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1148,
        "start_column": 6,
        "end_line": 1148,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.right.inr.inr\nα : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\niᵣ : ↑(Xᵣ \\ {x₂})\njᵣ : ↑(Yᵣ \\ (y₀ ᕃ {y₁}))\n⊢ |matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY ◪iᵣ ◪jᵣ| =\n    ↑(ZMod.val ((matrix3sumComposition Bₗ Bᵣ hXX hYY).1 ◪iᵣ ◪jᵣ))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/d8029e530783e371699ae3848c18e81410f4fad1/Seymour/Matroid/Operations/Sum3.lean#L1148"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:54:27+02:00",
        "inclusion_date": "2025-05-25T05:34:59.846374+00:00"
      },
      "id": "ddd3c7dfd1533c149e8506b342ba159ad1c1232b280f5e625246035fe0c5f56e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/EasyDirection.lean",
        "start_line": 24,
        "start_column": 20,
        "end_line": 24,
        "end_column": 25
      },
      "debug_info": {
        "goal": "case cographic\nα : Type\ninst✝ : DecidableEq α\nM M✝ : Matroid α\nhM : M✝.IsCographic\n⊢ M✝.IsRegular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/EasyDirection.lean#L24"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-17T15:49:08+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "6f11a0b58fbcad4d71c07d723ef37f825b4b85e3c50225fe8ce5f90081fe372c"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/HardDirection.lean",
        "start_line": 8,
        "start_column": 2,
        "end_line": 8,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nM : Matroid α\nhM : M.IsRegular\n⊢ M.IsGood",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/HardDirection.lean#L8"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-13T12:19:44+01:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "314111654a3d06a1a1f1a56a903452e82a0d19da5d5f42be1257c3ab7afcc0ca"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 60,
        "start_column": 6,
        "end_line": 60,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.mp\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  I ⊆ (standardRepr1sumComposition hXY hYX).1.X ∪ (standardRepr1sumComposition hXY hYX).1.Y ∧\n    LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ (standardRepr1sumComposition hXY hYX).1.B) x ∘ Subtype.toSum)\n      (Subtype.val ⁻¹' I)\n⊢ (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sₗ.B) x ∘ Subtype.toSum) (Subtype.val ⁻¹' (I ∩ (Sₗ.X ∪ Sₗ.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sᵣ.B) x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (Sᵣ.X ∪ Sᵣ.Y)))) ∧\n      I ⊆ Sₗ.X ∪ Sₗ.Y ∪ (Sᵣ.X ∪ Sᵣ.Y)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum1.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "6be51853771be67f7185222489c2a65373f67c616cf20fae5d335d1eb6858a25"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 62,
        "start_column": 6,
        "end_line": 62,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case right\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sₗ.B) x ∘ Subtype.toSum) (Subtype.val ⁻¹' (I ∩ (Sₗ.X ∪ Sₗ.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ Sᵣ.B) x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (Sᵣ.X ∪ Sᵣ.Y)))) ∧\n      I ⊆ Sₗ.X ∪ Sₗ.Y ∪ (Sᵣ.X ∪ Sᵣ.Y)\n⊢ LinearIndepOn Z2 (Matrix.transpose fun x => (1 ◫ (standardRepr1sumComposition hXY hYX).1.B) x ∘ Subtype.toSum)\n    (Subtype.val ⁻¹' I)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum1.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "23ffb195461132c929e2fdba15c86fd7ac7a2cc096b59ba2c177fac512f28592"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 794,
        "start_column": 2,
        "end_line": 794,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nQ : Matrix ↑X ↑Y ℚ\nx₂ y₀ y₁ : α\nhQ : Q.IsTotallyUnimodular\nhx₂ : x₂ ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhyy : y₀ ≠ y₁\nhQy₀ : Q ⟨x₂, hx₂⟩ ⟨y₀, hy₀⟩ = 1\nhQy₁ : Q ⟨x₂, hx₂⟩ ⟨y₁, hy₁⟩ = 1\nhQy : ∀ (y : ↑Y), ↑y ≠ y₀ ∧ ↑y ≠ y₁ → Q ⟨x₂, hx₂⟩ y = 0\n⊢ let c₀ := Q._col ⟨y₀, hy₀⟩;\n  let c₁ := Q._col ⟨y₁, hy₁⟩;\n  let Q' := Q.drop1row2cols x₂ y₀ y₁;\n  (Q' ◫ ▮c₀ ◫ ▮c₁ ◫ ▮(c₀ - c₁)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L794"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "c833c00894ea246d3aa7016afc87c00ea738c29cda662f021fc46681769f46f2"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 896,
        "start_column": 2,
        "end_line": 896,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x₂ₗ := ⟨x₂, ⋯⟩;\n  let x₂ᵣ := ⟨x₂, ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y₂ₗ := ⟨y₂, ⋯⟩;\n  let y₂ᵣ := ⟨y₂, ⋯⟩;\n  let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n  let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n  let D₀ₗ := Bₗ.submatrix2x2 x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n  let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n  let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n  let c₀ := Bᵣ._col y₀ᵣ;\n  let c₁ := Bᵣ._col y₁ᵣ;\n  match Bₗ'._rrr x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ hBₗ' with\n  | (r₀, r₁, snd) =>\n    (⊞ Dₗ D₀ₗ(Dᵣ * D₀ₗ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY =\n      (fun {X Y α} [Mul α] c r => Matrix.of fun i j => c i * r j) c₀ r₀ +\n        (fun {X Y α} [Mul α] c r => Matrix.of fun i j => c i * r j) c₁ r₁",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L896"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "511d2ccc1ef5704e69ed15ff82098947f851c8e36ab9ccc25c8d4de4dcbee03e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 934,
        "start_column": 2,
        "end_line": 934,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x₂ₗ := ⟨x₂, ⋯⟩;\n  let x₂ᵣ := ⟨x₂, ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y₂ₗ := ⟨y₂, ⋯⟩;\n  let y₂ᵣ := ⟨y₂, ⋯⟩;\n  let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n  let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n  let D₀ₗ := Bₗ.submatrix2x2 x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n  let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n  let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n  let D := (⊞ Dₗ D₀ₗ(Dᵣ * D₀ₗ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY;\n  match Bₗ'._rrr x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ hBₗ' with\n  | (r₀, r₁, r₂) => ∀ (i : ↑(Xᵣ \\ {x₂})), D i = r₀ ∨ D i = -r₀ ∨ D i = r₁ ∨ D i = -r₁ ∨ D i = r₂ ∨ D i = -r₂ ∨ D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L934"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "8b1edfd9257dbae318f31e8ecdf61f3d5504d09d9f3a020f8714a493fa9681a7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 973,
        "start_column": 2,
        "end_line": 973,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let x₂ₗ := ⟨x₂, ⋯⟩;\n  let x₂ᵣ := ⟨x₂, ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y₂ₗ := ⟨y₂, ⋯⟩;\n  let y₂ᵣ := ⟨y₂, ⋯⟩;\n  let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n  let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n  let D₀ₗ := Bₗ.submatrix2x2 x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n  let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n  let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n  let D := (⊞ Dₗ D₀ₗ(Dᵣ * D₀ₗ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY;\n  let c₀ := Bᵣ._col y₀ᵣ;\n  let c₁ := Bᵣ._col y₁ᵣ;\n  ∀ (j : ↑(Yₗ \\ {y₂})),\n    (fun x => D x j) = c₀ ∨\n      (fun x => D x j) = -c₀ ∨\n        (fun x => D x j) = c₁ ∨\n          (fun x => D x j) = -c₁ ∨ (fun x => D x j) = c₀ - c₁ ∨ (fun x => D x j) = c₁ - c₀ ∨ (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L973"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "9b7db6ed1cc4680de38ea8a85abb6a768fdd27ab2b32c3bb539d116e88d7a315"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ match hXX.inter3all with\n  | ((x₀ₗ, x₁ₗ, x₂ₗ), x₀ᵣ, x₁ᵣ, x₂ᵣ) =>\n    match hYY.inter3all with\n    | ((y₀ₗ, y₁ₗ, y₂ₗ), y₀ᵣ, y₁ᵣ, y₂ᵣ) =>\n      let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n      let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n      let D₀ᵣ := Bᵣ.submatrix2x2 x₀ᵣ x₁ᵣ y₀ᵣ y₁ᵣ;\n      let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n      let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n      (Bᵣ.drop1row2cols x₂ y₀ y₁ ◫ (⊞ Dₗ D₀ᵣ(Dᵣ * D₀ᵣ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "f8b063eeb98107caa45a1b9de0f4ddb9895beac709d01be58e3bde0111d3f93c"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1019,
        "start_column": 2,
        "end_line": 1019,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ'✝ : Bₗ'.IsTotallyUnimodular\nhBᵣ'✝ : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhBₗ' :\n  (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bₗ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\nhBᵣ' :\n  (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₀ ∨\n    (Bᵣ'.submatrix3x3mems ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = matrix3x3unsigned₁\n⊢ match hXX.inter3all with\n  | ((x₀ₗ, x₁ₗ, x₂ₗ), x₀ᵣ, x₁ᵣ, x₂ᵣ) =>\n    match hYY.inter3all with\n    | ((y₀ₗ, y₁ₗ, y₂ₗ), y₀ᵣ, y₁ᵣ, y₂ᵣ) =>\n      let Bₗ := Bₗ'.toCanonicalSigning x₀ₗ x₁ₗ x₂ₗ y₀ₗ y₁ₗ y₂ₗ;\n      let Bᵣ := Bᵣ'.toCanonicalSigning x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ y₂ᵣ;\n      let D₀ₗ := Bₗ.submatrix2x2 x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n      let Dₗ := Bₗ.submatrix2x7 x₀ₗ x₁ₗ y₀ y₁ y₂;\n      let Dᵣ := Bᵣ.submatrix7x2 x₀ x₁ x₂ y₀ᵣ y₁ᵣ;\n      (Bₗ.drop2rows1col x₀ x₁ y₂ ⊟ (⊞ Dₗ D₀ₗ(Dᵣ * D₀ₗ⁻¹ * Dₗ)Dᵣ).submatrix mapX mapY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1019"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-20T12:58:38+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "cf5fbb6cc193d50f37fc3a5bc56c5e28de3fbf58cfd479a5940587f14ef250aa"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1101,
        "start_column": 4,
        "end_line": 1101,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.left\nα : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\n⊢ (matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1101"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "ca7e0efa923f051cd9cdee3b5c6bc9ab24bd1d131d8cbd85443f873b10949137"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1144,
        "start_column": 10,
        "end_line": 1144,
        "end_column": 15
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\niₗ : ↑(Xₗ \\ (x₀ ᕃ {x₁}))\njᵣ : ↑(Yᵣ \\ (y₀ ᕃ {y₁}))\nhx₂ : ↑iₗ = x₂\nhy₂ : ¬↑jᵣ = y₂\n⊢ |matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY ◩iₗ ◪jᵣ| =\n    ↑(ZMod.val ((matrix3sumComposition Bₗ Bᵣ hXX hYY).1 ◩iₗ ◪jᵣ))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1144"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "08bcd4ff94909e5b2acdfa86dc69816ccf3c1f3536bddc3998ccb76fd4b8862e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1146,
        "start_column": 8,
        "end_line": 1146,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\niₗ : ↑(Xₗ \\ (x₀ ᕃ {x₁}))\njᵣ : ↑(Yᵣ \\ (y₀ ᕃ {y₁}))\nhx₂ : ¬↑iₗ = x₂\n⊢ |matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY ◩iₗ ◪jᵣ| =\n    ↑(ZMod.val ((matrix3sumComposition Bₗ Bᵣ hXX hYY).1 ◩iₗ ◪jᵣ))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1146"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "cf0c4cb5fcfe0c6b4b354738e6a11c86da06509f0ea04247bc71d3ed820383a2"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1147,
        "start_column": 6,
        "end_line": 1147,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.right.inr.inl\nα : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\niᵣ : ↑(Xᵣ \\ {x₂})\njₗ : ↑(Yₗ \\ {y₂})\n⊢ |matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY ◪iᵣ ◩jₗ| =\n    ↑(ZMod.val ((matrix3sumComposition Bₗ Bᵣ hXX hYY).1 ◪iᵣ ◩jₗ))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1147"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:42:03+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "b2ccfca0a6268e1db0180f2955d0a7fb3ac63dbf8dfbdfa97f04122b610db907"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1148,
        "start_column": 6,
        "end_line": 1148,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.right.inr.inr\nα : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x₂ y₀ y₁ y₂ : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ)\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ)\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ)\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ)\nBₗ : Matrix (↑Xₗ) (↑Yₗ) Z2\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) Z2\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Xₗ ⫗ Yᵣ\nhYX : Yₗ ⫗ Xᵣ\nhSS : (matrix3sumComposition Bₗ Bᵣ hXX hYY).2\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nhAₗ : Aₗ.IsTotallyUnimodular\nhABₗ : Aₗ.IsSigningOf Bₗ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhAᵣ : Aᵣ.IsTotallyUnimodular\nhABᵣ : Aᵣ.IsSigningOf Bᵣ\nhxx₂ : x₁ ≠ x₀\nhxx₁ : x₂ ≠ x₀\nhxx₀ : x₂ ≠ x₁\nhyy₂ : y₁ ≠ y₀\nhyy₁ : y₂ ≠ y₀\nhyy₀ : y₂ ≠ y₁\niᵣ : ↑(Xᵣ \\ {x₂})\njᵣ : ↑(Yᵣ \\ (y₀ ᕃ {y₁}))\n⊢ |matrix3sumCompositionCanonicalSigning Aₗ Aᵣ hXX hYY ◪iᵣ ◪jᵣ| =\n    ↑(ZMod.val ((matrix3sumComposition Bₗ Bᵣ hXX hYY).1 ◪iᵣ ◪jᵣ))",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3.lean#L1148"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-05-23T09:54:27+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "ccfcd1ea3895e781fa5b563b54e46140cf4063ea289b028a08be04543373fcc9"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3RefactorTest.lean",
        "start_line": 359,
        "start_column": 2,
        "end_line": 359,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nx₀ x₁ x₂ y₀ y₁ y₂ : α\nhXX : Sₗ.X ∩ Sᵣ.X = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Sₗ.Y ∩ Sᵣ.Y = y₀ ᕃ y₁ ᕃ {y₂}\n⊢ let x₀ₗ := ⟨x₀, ⋯⟩;\n  let x₀ᵣ := ⟨x₀, ⋯⟩;\n  let x₁ₗ := ⟨x₁, ⋯⟩;\n  let x₁ᵣ := ⟨x₁, ⋯⟩;\n  let _x₂ₗ := ⟨x₂, ⋯⟩;\n  let x₂ᵣ := ⟨x₂, ⋯⟩;\n  let y₀ₗ := ⟨y₀, ⋯⟩;\n  let y₀ᵣ := ⟨y₀, ⋯⟩;\n  let y₁ₗ := ⟨y₁, ⋯⟩;\n  let y₁ᵣ := ⟨y₁, ⋯⟩;\n  let y₂ₗ := ⟨y₂, ⋯⟩;\n  let _y₂ᵣ := ⟨y₂, ⋯⟩;\n  let Aₗ := Matrix.Aₗ_alt2 Sₗ.B x₀ₗ x₁ₗ y₀ₗ y₁ₗ y₂ₗ;\n  let Aₗ' := Matrix.Aₗ'_alt2 Sₗ.B x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n  let Dₗ := Matrix.Dₗ_alt2 Sₗ.B x₀ₗ x₁ₗ y₀ₗ y₁ₗ y₂ₗ;\n  let D₀ := Matrix.D₀_alt2 Sₗ.B x₀ₗ x₁ₗ y₀ₗ y₁ₗ;\n  let Dᵣ := Matrix.Dᵣ_alt2 Sᵣ.B x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ;\n  let Aᵣ' := Matrix.Aᵣ'_alt2 Sᵣ.B x₀ᵣ x₁ᵣ y₀ᵣ y₁ᵣ;\n  let Aᵣ := Matrix.Aᵣ_alt2 Sᵣ.B x₀ᵣ x₁ᵣ x₂ᵣ y₀ᵣ y₁ᵣ;\n  let S := matrix3sumComposition_alt2 Aₗ Aₗ' Dₗ D₀ Dᵣ Aᵣ' Aᵣ;\n  matrix3sumComposition_alt2_mapped' S = matrix3sumComposition_curr Sₗ.B Sᵣ.B hXX hYY",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3RefactorTest.lean#L359"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-23T19:21:41+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "fecfcd460fee795d31706f5cd1dec7b77e0bd6a3246c9a96ed56dc99f13c407b"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "sum3-refactor",
        "commit": "bfc80735dd2c5a8d30221d977686cb1d82fc517b",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3RefactorTest.lean",
        "start_line": 391,
        "start_column": 2,
        "end_line": 391,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nx₀ x₁ x₂ y₀ y₁ y₂ : α\nhXX : Sₗ.X ∩ Sᵣ.X = x₀ ᕃ x₁ ᕃ {x₂}\nhYY : Sₗ.Y ∩ Sᵣ.Y = y₀ ᕃ y₁ ᕃ {y₂}\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\n⊢ standardRepr3sumComposition_alt2 hXX hYY hXY hYX = standardRepr3sumComposition_curr hXX hYY hXY hYX",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/bfc80735dd2c5a8d30221d977686cb1d82fc517b/Seymour/Matroid/Operations/Sum3RefactorTest.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-05-23T19:21:41+02:00",
        "inclusion_date": "2025-05-25T05:46:47.508244+00:00"
      },
      "id": "2c9443fcb82e64add418da5fdec62c3bbde4e4b86ba0a50cf643afab5f58f5b3"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 163,
        "start_column": 6,
        "end_line": 163,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Type\ninst✝¹ : Ord α\ninst✝ : DecidableEq α\nx y z1 z2 : Regex α\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y ≠ Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh : z1 = y\n⊢ OrIsSmart (z1.or z2)",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L163"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "0795b5a855a8a96f21ff3d57526a36dafa6372c1ec93b975cfd2550366f28e73"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 166,
        "start_column": 6,
        "end_line": 166,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Type\ninst✝¹ : Ord α\ninst✝ : DecidableEq α\nx y z1 z2 : Regex α\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y ≠ Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh✝ : ¬z1 = y\nh : z1 < y\n⊢ OrIsSmart (z1.or (insertOr y z2))",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "0e418e6715bdb1ade9ed6b376531fc245b37660de998a287a08d9883f9fe3919"
    },
    {
      "repo": {
        "remote": "https://github.com/katydid/regex-deriv-lean",
        "branch": "main",
        "commit": "311fe74883f7d50aa3ebbb1301e5a69415358743",
        "lean_version": "v4.14.0"
      },
      "location": {
        "path": "Katydid/Regex/Smart/SmartOr.lean",
        "start_line": 168,
        "start_column": 6,
        "end_line": 168,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Type\ninst✝¹ : Ord α\ninst✝ : DecidableEq α\nx y z1 z2 : Regex α\nhx : Regex.SmartOrElem x\nhy : Regex.NotOr y\nhny : y ≠ Regex.any.star\nhi : OrIsSmart (insertOr y (z1.or z2))\nhlty : x < y\nhltz1 : x < z1\nh✝ : ¬z1 = y\nh : ¬z1 < y\n⊢ OrIsSmart (x.or (consOr y (z1.or z2)))",
        "url": "https://github.com/katydid/regex-deriv-lean/blob/311fe74883f7d50aa3ebbb1301e5a69415358743/Katydid/Regex/Smart/SmartOr.lean#L168"
      },
      "metadata": {
        "blame_email_hash": "e3e649d9026a",
        "blame_date": "2025-05-24T14:29:51+01:00",
        "inclusion_date": "2025-05-25T05:51:43.879168+00:00"
      },
      "id": "e384f72ddd3bb1e2ebc724ca8fa1a3a2835cb01b2bd239f51c3f55d3f24771c4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a b : Formula⦄, a ≈ b → (~a) ≈ (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "1fdd32966ed742104cb6dcc92b17cfddc0cc4e49e4f9d06a991a31e5ad019794"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a₁ a₂ : Formula⦄, a₁ ≈ a₂ → ∀ ⦃b₁ b₂ : Formula⦄, b₁ ≈ b₂ → a₁⋀b₁ ≈ a₂⋀b₂",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "2312f5d66ca58f28a2a598efbf0e5f94227cc8194149d3f8bfd8267554155b33"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 720,
        "start_column": 10,
        "end_line": 720,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ sorry ∈ endNodesOf (next (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ⋯)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/Soundness.lean#L720"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "3ec48b8b24c0d90e0f294504be6a3e0dd81df1c9020099a59fee748acb460c60"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 721,
        "start_column": 10,
        "end_line": 721,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ (M, v)⊨sorry ∧\n    (sorry.isFree = true ∨\n      ∃ F γ,\n        (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side sorry ∧\n          relateSeq M γ v w ∧\n            (∀ f ∈ F, evaluate M v f) ∧\n              (F, γ) ∈ H α ∧ (sorry.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/Soundness.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "376016076ad506a31c21f7dd698b55c7975b259c5c33c329a793702ed81a3368"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 724,
        "start_column": 8,
        "end_line": 724,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nα' : Program\nφ : Formula\nα'_not_atomic : ¬α'.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α'⌋AnyFormula.normal φ)) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α'⌋AnyFormula.normal φ) (LoadRule.dia' α'_not_atomic)) (L, R, O)\n⊢ ∃ Y,\n    (∃ l, (∃ a, ∃ (h : a ∈ B), endNodesOf (next a ⋯) = l) ∧ Y ∈ l) ∧\n      (M, v)⊨Y ∧\n        (Y.isFree = true ∨\n          ∃ F γ,\n            (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n              relateSeq M γ v w ∧\n                (∀ f ∈ F, evaluate M v f) ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/Soundness.lean#L724"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "8b42b889a23a8ca5fe89614ffc0a503029a81fe8c9a8c6b17dc09a16fd90934b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 728,
        "start_column": 6,
        "end_line": 728,
        "end_column": 11
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nlocRulTru : ∀ (w : W), (M, w)⊨(L, R, O) ↔ ∃ Ci ∈ B, (M, w)⊨Ci\nress✝ : List (List Formula × Option NegLoadFormula)\nχ✝ : LoadFormula\nlrule✝ : LoadRule (~'χ✝) ress✝\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inr (~'χ✝)) ⊆ O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR χ✝ lrule✝) (L, R, O)\n⊢ ∃\n    Y ∈\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk ∅ ∅ (some (Sum.inr (~'χ✝))) (LocalRule.loadedR χ✝ lrule✝) precons)\n          next),\n    (M, v)⊨Y ∧\n      (Y.isFree = true ∨\n        ∃ F γ,\n          (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n            relateSeq M γ v w ∧ (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/Soundness.lean#L728"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "e45efae41a117a3b8f41986899e343364d7e9387f035a0dbd37f6852583141ea"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 844,
        "start_column": 2,
        "end_line": 844,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nv_α_w : relate M α v w\nw_nξ : (M, w)⊨~''ξ\n⊢ ∃ s,\n    Relation.TransGen (cEdge X tab) t s ∧\n      satisfiable (nodeAt s) ∧\n        (¬cEquiv X tab s t ∨\n          (~''ξ).in_side side (nodeAt s) ∧ (M, w)⊨nodeAt s ∧ ((nodeAt s).without (~''ξ)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/Soundness.lean#L844"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "c5a091c4da57d2c643900dc303d4ffbcb385d1f907ccf945419f4726afd71f17"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1021,
        "start_column": 16,
        "end_line": 1021,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : ∀ f ∈ F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nh✝ : ¬δ = []\nws : List.Vector W δ.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin δ.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[↑k])⊨nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ))).isFree = true\na✝ : ℕ\nnegLoad_in : (~''(AnyFormula.loaded (⌊·a✝⌋ξ))).in_side side (nodeAt t)\nv_α_w : M.Rel a✝ v w\nFδ_in_H : (F, δ) ∈ H (·a✝)\nws_rel : ∀ (i : Fin δ.length), relate M δ[↑i] (ws.get i.castSucc) (ws.get i.succ)\nthis : δ[↑k] = ·a✝\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/Soundness.lean#L1021"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "a2af418ff636406859364dce92f7a36fec05dca313894b4acf84eadd805c964c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1025,
        "start_column": 16,
        "end_line": 1025,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : ∀ f ∈ F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nh✝ : ¬δ = []\nws : List.Vector W δ.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin δ.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[↑k])⊨nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ))).isFree = true\na✝ : Program\nnegLoad_in : (~''(AnyFormula.loaded (⌊∗a✝⌋ξ))).in_side side (nodeAt t)\nv_α_w : Relation.ReflTransGen (relate M a✝) v w\nFδ_in_H : (F, δ) ∈ H (∗a✝)\nws_rel : ∀ (i : Fin δ.length), relate M δ[↑i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram δ[↑k] ≤ 1 + lengthOfProgram a✝\n⊢ lengthOfProgram δ[↑k] < 1 + lengthOfProgram a✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/Soundness.lean#L1025"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "9a06663981b0e50e0955e88a5422b20f57bbe371fda151f8d2491ef226cfa134"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1362,
        "start_column": 6,
        "end_line": 1362,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nv_α_w : relate M α v w\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\nIH :\n  t = s →\n    ∃ s_1,\n      Relation.TransGen (cEdge X tab) s s_1 ∧\n        (satisfiable (nodeAt s_1) ∧ ¬cEquiv X tab s_1 s ∨\n          (~''ξ).in_side side (nodeAt s_1) ∧ (M, w)⊨nodeAt s_1 ∧ ((nodeAt s_1).without (~''ξ)).isFree = true)\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.lrep lpr⟩⟩\n⊢ (tabAt t).snd.snd = Tableau.lrep (⋯ ▸ lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/Soundness.lean#L1362"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "b457266ab8c689cc4f8e20d88ea51cb19ada4dce58bc6e748674d030e2b38e4b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18
      },
      "debug_info": {
        "goal": "⊢ ∀ (p next : Sequent ⊕ Sequent × Formula × Rule), next ∈ sorry p → sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "d3cd79536f23c28ed31c3fb181408fe1f3f6f75b38c5f13fb794207c30aa94d6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.A\nh : winning (Sum.inl X) s\n⊢ Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "716465dfd9f8dd6dc2cf33c7c663be267a77dffc04974379bec8238bb2622143"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.B\nh : winning (Sum.inl X) s\n⊢ ∃ WS mg, X.toFinset ∈ WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "c804c491e4b403e96e900dcd1da9a4c5aa8e96c62e23a106d35895470eca7ec6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\nτ : Formula\nτ_in : τ ∈ testsOfProgram α\nψ_in : (~τ) ∈ L\nx_in_voc_ψ : x ∈ τ.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "9ae18c34f019ad718c156cfc72c354ee13b24737974b27f856a66a432e71b4d5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\na : ℕ\nδ : List Program\nψ_in : (⌈·a⌉⌈⌈δ⌉⌉φ) ∈ L\nright✝ : ·a ∈ subprograms α ∧ ∀ a ∈ δ, a ∈ subprograms α\nx_in_voc_ψ : x = Sum.inr a ∨ x ∈ δ.pvoc ∪ φ.voc\n⊢ x ∈ α.voc ∨ x ∈ φ.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "b1c02db27f686feefed0933ff12cf2339aee5d076aa2d5d73b0920835294a6d1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nFs : List Formula\nδ : List Program\nin_H : (Fs, δ) ∈ H α\nthis : ∀ (α : Program) {Fs : List Formula} {δ : List Program}, (Fs, δ) ∈ H α → δ = [] ∨ ∃ a δ', δ = ·a :: δ'\nα' : Program\nα'_in : α' ∈ δ\nx_in : x ∈ α'.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "38a260911ead69f76148050a9895b79ca2a650a5a62383ae4679ec13fa97e1cb"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : ℕ ⊕ ℕ\nress : List (List Formula × Option NegLoadFormula)\nχ : LoadFormula\nlrule : LoadRule (~'χ) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) ∈ ress\nφ : Formula\nφ_in_L : φ ∈ L\nbla : x ∈ φ.voc\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "6e7077e724401052a20f6be6086e5fa16edfbfb68f13feaf2fa2949058bab2b2"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.1.fvoc ⊆ Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "eded67dd792e94874360803e3c266da1e5e521685414ed2d4abdf3a4783304a4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.2.voc ⊆ Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "6625f28df7d73e8a813b1cce238571c56604f58c6c08791ca948a0e51f535a7c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L ∧ Rcond.Subperm R ∧ Ocond ⊆ O\ncL cR : List Formula\ncO : Olf\nx : ℕ ⊕ ℕ\nx_in_voc_C :\n  (x ∈ Vocab.fromList (List.map Formula.voc cL) ∨ x ∈ Vocab.fromList (List.map Formula.voc (Olf.toForms cO))) ∧\n    (x ∈ Vocab.fromList (List.map Formula.voc cR) ∨ x ∈ Vocab.fromList (List.map Formula.voc (Olf.toForms cO)))\nthis : ∀ res ∈ ress, res.1.fvoc ⊆ Lcond.fvoc\nC_in : (cL, cR, cO) ∈ applyLocalRule lrule (L, R, O)\n⊢ x ∈ jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "57db4d617a3b9a3f369e8c1c77ed2a61a71143f5da9a4210b3885c6e87703e95"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nL_and_nθ_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "433449c314476ce04753ca62c5c9630d48d4539082ec83eb7b6426be3428afa8"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nR_and_θ_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "1bfad7eb75b6c8e2ee5c80f3d90a3127becc1bd6bb4c98a3ff7eb42f41afb640"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nL_and_nθ_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "ab7297742e9f4d4e6e81c4ce52dcd913cc2baf10357570234d4b8c8544850d9f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nR_and_θ_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "7f52fd66538211095038ac68bdde93c1641101147da17bf1dac64c445488b4e6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈∗a⌉~⌈a⌉p)⋀(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "74ea7c210bd541158a39fd5b8e2dd837dcf6a770b2f92690a6146e9cba2e7b28"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈a⌉⌈∗a⌉p)⋀(~⌈a⌉⌈∗a⌉q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "e7c0bdb19007f87add040d01d2f0801c04acb9f21216f74be9b2640ba47ce0a6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 55,
        "start_column": 42,
        "end_line": 55,
        "end_column": 47
      },
      "debug_info": {
        "goal": "⊢ 4 ∈ []",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "c7a69b8e055474fd3c6ab2b9334d31751183b777d9780fa27c82277b5c05cb11"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 56,
        "start_column": 42,
        "end_line": 56,
        "end_column": 47
      },
      "debug_info": {
        "goal": "⊢ 4 ∈ [3]",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "d4d2f09a27764f4d482393d77a53c35ed5fc9d405080721f3dd5a7181a085bcb"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 68,
        "start_column": 2,
        "end_line": 68,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a✝ : List ℕ\nt : NiceTree a✝\nk : ℕ\nk_in_N : k ∈ a✝\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "9b25aea54fa7ae09dc3f2b2b2fafe81073195921b99052147ed5f615fe088841"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 227,
        "start_column": 4,
        "end_line": 227,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : ℕ\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\nthis : k < List.length Hp\n⊢ k ≤ PathIn.length [] n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L227"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "8bf129964808612bf2a65cadf0a73770998baf835c0174ffb3d878886449d141"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 222,
        "start_column": 28,
        "end_line": 222,
        "end_column": 33
      },
      "debug_info": {
        "goal": "n : ℕ\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\n⊢ k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L222"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "d7fb48a34ddc55b568a1504008c88ddee4bc97bcb540680fcd313cd4931027bd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 248,
        "start_column": 4,
        "end_line": 248,
        "end_column": 9
      },
      "debug_info": {
        "goal": "H : History\nn : ℕ\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\nthis : k < List.length Hp\n⊢ k ≤ PathIn.length H n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-09T19:21:30+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "6099c1e2939672b4c17dade39f2370c810d20e446962c5febb9e1047532f503b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 243,
        "start_column": 28,
        "end_line": 243,
        "end_column": 33
      },
      "debug_info": {
        "goal": "H : History\nn : ℕ\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\n⊢ k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "404f9f0eb829526c878b578c17730c0c454546c42e03559b0618dbbfa97f57dc"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 289,
        "start_column": 2,
        "end_line": 289,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\na✝¹ : List ℕ\nm_in_ms : m ∈ a✝¹\na✝ : ℕ\nst : Step a✝ a✝¹\ntail✝ : List ℕ\nnext : {m : ℕ} → m ∈ a✝¹ → HisTree (a✝ :: tail✝) m\nrest rest' : PathIn (a✝ :: tail✝) m (@next m m_in_ms)\nhyp :\n  Sigma.fst (treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest) =\n    Sigma.fst (treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest')\n⊢ (treeAtP._proof_27 tail✝ a✝ a✝¹ m m_in_ms next rest ▸ treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest).fst =\n    (treeAtP._proof_27 tail✝ a✝ a✝¹ m m_in_ms (fun {m} => @next m) rest' ▸\n        treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest').fst",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L289"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "a8b8541d196892be696538ddd19339332df04b8080553c1e9886ce52816b4b01"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 311,
        "start_column": 4,
        "end_line": 311,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : ℕ\nms : List ℕ\nm : ℕ\nm_in_ms : m ∈ ms\nst : Step n ms\nnext : {m : ℕ} → m ∈ ms → HisTree [n] m\nrest : PathIn [n] m (@next m m_in_ms)\np_is_rep : isRep (treeAt [] n (HisTree.step n [] ms st next) (PathIn.cons [] ms n m m_in_ms st next rest))\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L311"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "aa781a93336667e5955f68363dc433f6290a84fa8316fe2c9bfcedca89c8772d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 350,
        "start_column": 8,
        "end_line": 350,
        "end_column": 13
      },
      "debug_info": {
        "goal": "n st : ℕ\nH : List ℕ\nk✝ : ℕ\n_in_empty : some k✝ = List.idxOf? n (st :: H)\np_is_rep : True\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L350"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "6fa07b874724d89ed6c1a9b058a8280b068cd1294c6eec209ecda8ec5120fe65"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 370,
        "start_column": 4,
        "end_line": 370,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl\nn✝ : ℕ\nms✝ : List ℕ\nm✝ : ℕ\nm_in✝ : m✝ ∈ ms✝\ns✝ : Step n✝ ms✝\nnext✝ : {m : ℕ} → m ∈ ms✝ → HisTree [n✝] m\nrest✝ : PathIn [n✝] m✝ (@next✝ m✝ m_in✝)\np_is_rep✝² : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) (PathIn.cons [] ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\nn : (n : ℕ) ×' (ht : HisTree [] n) ×' (p : PathIn [] n ht) ×' isRep (treeAt [] n ht p)\na✝³ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht✝ : (ht : HisTree [] n✝) ×' (p : PathIn [] n✝ ht) ×' isRep (treeAt [] n✝ ht p)\na✝² : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree [] n✝\np✝¹ : (p : PathIn [] n✝ ht) ×' isRep (treeAt [] n✝ ht p)\na✝¹ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np✝ : PathIn [] n✝ ht\np_is_rep✝¹ : isRep (treeAt [] n✝ ht p✝)\na✝ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nβ✝ : Type\np : PathIn [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝)\np_is_rep✝ : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) p)\nβ : Type\np_is_rep : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) (PathIn.cons [] ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\n⊢ 1 + PathIn.length [n✝] m✝ (@next✝ m✝ m_in✝) rest✝ < [].length + PathIn.length [] n✝ ht p✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L370"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "b9836464ffbb323ce68505d5ffb00a0422c0c608c0387c2b7a3c7604066e89a1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 373,
        "start_column": 4,
        "end_line": 373,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl.refl\nn✝ head✝ : ℕ\ntail✝ ms✝ : List ℕ\nm✝ : ℕ\nm_in✝ : m✝ ∈ ms✝\ns✝ : Step n✝ ms✝\nnext✝ : {m : ℕ} → m ∈ ms✝ → HisTree (n✝ :: head✝ :: tail✝) m\nrest✝ : PathIn (n✝ :: head✝ :: tail✝) m✝ (@next✝ m✝ m_in✝)\np_is_rep✝² :\n  isRep\n    (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\n      (PathIn.cons (head✝ :: tail✝) ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\nn :\n  (n : ℕ) ×'\n    (ht : HisTree (head✝ :: tail✝) n) ×' (p : PathIn (head✝ :: tail✝) n ht) ×' isRep (treeAt (head✝ :: tail✝) n ht p)\na✝³ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht✝ :\n  (ht : HisTree (head✝ :: tail✝) n✝) ×' (p : PathIn (head✝ :: tail✝) n✝ ht) ×' isRep (treeAt (head✝ :: tail✝) n✝ ht p)\na✝² : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree (head✝ :: tail✝) n✝\np✝¹ : (p : PathIn (head✝ :: tail✝) n✝ ht) ×' isRep (treeAt (head✝ :: tail✝) n✝ ht p)\na✝¹ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np✝ : PathIn (head✝ :: tail✝) n✝ ht\np_is_rep✝¹ : isRep (treeAt (head✝ :: tail✝) n✝ ht p✝)\na✝ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nβ✝ : Type\np : PathIn (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\np_is_rep✝ : isRep (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝) p)\nβ : Type\np_is_rep :\n  isRep\n    (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\n      (PathIn.cons (head✝ :: tail✝) ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\n⊢ tail✝.length + 1 + 1 + PathIn.length (n✝ :: head✝ :: tail✝) m✝ (@next✝ m✝ m_in✝) rest✝ <\n    (head✝ :: tail✝).length + PathIn.length (head✝ :: tail✝) n✝ ht p✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L373"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "9612d0af55b4dee7e7e6bd2f4218caf173e1c1e55d4c0d5fe3e789391ace8784"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "better-depgraph",
        "commit": "fcd7b96aad2fad8ffec6de478765b45a3f693f1f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 397,
        "start_column": 6,
        "end_line": 397,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : ℕ\nH' : History\nn' : ℕ\nH✝ : History\nm✝ k✝ : ℕ\n_in_H : some k✝ = List.idxOf? m✝ H✝\np_is_rep :\n  @isRep.match_1 (fun x => Prop) ⟨H✝, ⟨m✝, HisTree.rep H✝ m✝ k✝ _in_H⟩⟩ (fun fst fst_1 k a => True) fun x => False\nms : List ℕ\nm : ℕ\nm_in : m ∈ ms\ns : Step n ms\nnext : {m : ℕ} → m ∈ ms → HisTree [n] m\nrest : PathIn [n] m (@next m m_in)\np_ht_def :\n  ⟨H✝, ⟨m✝, HisTree.rep H✝ m✝ k✝ _in_H⟩⟩ =\n    treeAt [] n (HisTree.step n [] ms s next) (PathIn.cons [] ms n m m_in s next rest)\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/fcd7b96aad2fad8ffec6de478765b45a3f693f1f/Unused/Repeat.lean#L397"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:05:04.755812+00:00"
      },
      "id": "5a58100c19e5c0669ffe49bb28bd0876e954a01998ec19f70a67a59ce2304e89"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a b : Formula⦄, a ≈ b → (~a) ≈ (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "61d9496a80d4ea8d2641e087f4fe104c71c44779dfe3840e2dc2af5ca3d12294"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a₁ a₂ : Formula⦄, a₁ ≈ a₂ → ∀ ⦃b₁ b₂ : Formula⦄, b₁ ≈ b₂ → a₁⋀b₁ ≈ a₂⋀b₂",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "19db564eb6c44e8f9091c1e1f08cd68f1199d156c38d99300094ce2d557428a9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 720,
        "start_column": 10,
        "end_line": 720,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ sorry ∈ endNodesOf (next (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ⋯)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L720"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "9f3b89c6497c19c732ed3947c35351d4b5e23b56c9798c42b132679360ae99b8"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 721,
        "start_column": 10,
        "end_line": 721,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ (M, v)⊨sorry ∧\n    (sorry.isFree = true ∨\n      ∃ F γ,\n        (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side sorry ∧\n          relateSeq M γ v w ∧\n            (∀ f ∈ F, evaluate M v f) ∧\n              (F, γ) ∈ H α ∧ (sorry.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "0500915e2ed1ef704c073ed696872a701d1d85471a75689c313e0b36cbefb92e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 724,
        "start_column": 8,
        "end_line": 724,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nα' : Program\nφ : Formula\nα'_not_atomic : ¬α'.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α'⌋AnyFormula.normal φ)) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α'⌋AnyFormula.normal φ) (LoadRule.dia' α'_not_atomic)) (L, R, O)\n⊢ ∃ Y,\n    (∃ l, (∃ a, ∃ (h : a ∈ B), endNodesOf (next a ⋯) = l) ∧ Y ∈ l) ∧\n      (M, v)⊨Y ∧\n        (Y.isFree = true ∨\n          ∃ F γ,\n            (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n              relateSeq M γ v w ∧\n                (∀ f ∈ F, evaluate M v f) ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L724"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "bba55ed57c79e2509fdcb503e3246f238fbe169a7574a92497071ed6706f89f3"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 728,
        "start_column": 6,
        "end_line": 728,
        "end_column": 11
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nlocRulTru : ∀ (w : W), (M, w)⊨(L, R, O) ↔ ∃ Ci ∈ B, (M, w)⊨Ci\nress✝ : List (List Formula × Option NegLoadFormula)\nχ✝ : LoadFormula\nlrule✝ : LoadRule (~'χ✝) ress✝\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inr (~'χ✝)) ⊆ O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR χ✝ lrule✝) (L, R, O)\n⊢ ∃\n    Y ∈\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk ∅ ∅ (some (Sum.inr (~'χ✝))) (LocalRule.loadedR χ✝ lrule✝) precons)\n          next),\n    (M, v)⊨Y ∧\n      (Y.isFree = true ∨\n        ∃ F γ,\n          (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n            relateSeq M γ v w ∧ (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L728"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "7279b2868264f6c9011ffbc6393ba2e4c5d94be9d8bd622defda588d3a01c6ca"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 844,
        "start_column": 2,
        "end_line": 844,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nv_α_w : relate M α v w\nw_nξ : (M, w)⊨~''ξ\n⊢ ∃ s,\n    Relation.TransGen (cEdge X tab) t s ∧\n      satisfiable (nodeAt s) ∧\n        (¬cEquiv X tab s t ∨\n          (~''ξ).in_side side (nodeAt s) ∧ (M, w)⊨nodeAt s ∧ ((nodeAt s).without (~''ξ)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L844"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "18dfb1953a0d28f5ea92372abefe2584b42b9e49ddbd8918137bd8537deb4a7f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1021,
        "start_column": 16,
        "end_line": 1021,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : ∀ f ∈ F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nh✝ : ¬δ = []\nws : List.Vector W δ.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin δ.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[↑k])⊨nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ))).isFree = true\na✝ : ℕ\nnegLoad_in : (~''(AnyFormula.loaded (⌊·a✝⌋ξ))).in_side side (nodeAt t)\nv_α_w : M.Rel a✝ v w\nFδ_in_H : (F, δ) ∈ H (·a✝)\nws_rel : ∀ (i : Fin δ.length), relate M δ[↑i] (ws.get i.castSucc) (ws.get i.succ)\nthis : δ[↑k] = ·a✝\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1021"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "a8d9aaca55b8fa15a40801a99fdb558f4114123502b455396067280acb923214"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1025,
        "start_column": 16,
        "end_line": 1025,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : ∀ f ∈ F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nh✝ : ¬δ = []\nws : List.Vector W δ.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin δ.length\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[↑k])⊨nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ))).isFree = true\na✝ : Program\nnegLoad_in : (~''(AnyFormula.loaded (⌊∗a✝⌋ξ))).in_side side (nodeAt t)\nv_α_w : Relation.ReflTransGen (relate M a✝) v w\nFδ_in_H : (F, δ) ∈ H (∗a✝)\nws_rel : ∀ (i : Fin δ.length), relate M δ[↑i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram δ[↑k] ≤ 1 + lengthOfProgram a✝\n⊢ lengthOfProgram δ[↑k] < 1 + lengthOfProgram a✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1025"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "fd08048676cc54ddaa64757d999b54fe3bc589fcf320148ac31b41f3a5fa234e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1362,
        "start_column": 6,
        "end_line": 1362,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nv_α_w : relate M α v w\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\nIH :\n  t = s →\n    ∃ s_1,\n      Relation.TransGen (cEdge X tab) s s_1 ∧\n        (satisfiable (nodeAt s_1) ∧ ¬cEquiv X tab s_1 s ∨\n          (~''ξ).in_side side (nodeAt s_1) ∧ (M, w)⊨nodeAt s_1 ∧ ((nodeAt s_1).without (~''ξ)).isFree = true)\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.lrep lpr⟩⟩\n⊢ (tabAt t).snd.snd = Tableau.lrep (⋯ ▸ lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/Soundness.lean#L1362"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "96f22d4d42ae5622d1adb4559d423d44894e1a2307c895995a5ff91ce4254210"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18
      },
      "debug_info": {
        "goal": "⊢ ∀ (p next : Sequent ⊕ Sequent × Formula × Rule), next ∈ sorry p → sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "c02dc7b591ac909b38cd8652c32fa54e61eaa6039a00b8940681fcc87b30e64d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.A\nh : winning (Sum.inl X) s\n⊢ Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "c85bc5825a85b0e8009ee9819d5ddd062d4ffeea557767fafd5f6bd5f08c4543"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.B\nh : winning (Sum.inl X) s\n⊢ ∃ WS mg, X.toFinset ∈ WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "fe9e4ebf6c9f6ac67abdbac75bd935f6b90a0a0d215757494202e12ff1eb2898"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\nτ : Formula\nτ_in : τ ∈ testsOfProgram α\nψ_in : (~τ) ∈ L\nx_in_voc_ψ : x ∈ τ.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "e3f0215f096042631bddf32819c2b625437fc1c55b23c5bfae06153915857b40"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\na : ℕ\nδ : List Program\nψ_in : (⌈·a⌉⌈⌈δ⌉⌉φ) ∈ L\nright✝ : ·a ∈ subprograms α ∧ ∀ a ∈ δ, a ∈ subprograms α\nx_in_voc_ψ : x = Sum.inr a ∨ x ∈ δ.pvoc ∪ φ.voc\n⊢ x ∈ α.voc ∨ x ∈ φ.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "73eea4a10f7eca1fe3519fd9c912a2fb248fa803de25b57824e021f155debd25"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nFs : List Formula\nδ : List Program\nin_H : (Fs, δ) ∈ H α\nthis : ∀ (α : Program) {Fs : List Formula} {δ : List Program}, (Fs, δ) ∈ H α → δ = [] ∨ ∃ a δ', δ = ·a :: δ'\nα' : Program\nα'_in : α' ∈ δ\nx_in : x ∈ α'.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "31248dcf9b73dd2f568274db1723b87edc48156fd7a46b84e092ddc6daf7d914"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : ℕ ⊕ ℕ\nress : List (List Formula × Option NegLoadFormula)\nχ : LoadFormula\nlrule : LoadRule (~'χ) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) ∈ ress\nφ : Formula\nφ_in_L : φ ∈ L\nbla : x ∈ φ.voc\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "f33428031252faaf55d1a9f720d8d6214ef020cfd8432aecb2d07ba79ab2411e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.1.fvoc ⊆ Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "109fe83b842d04da7052a5409158d2f3c36d5ef9aba3972dcb368f37495304ee"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.2.voc ⊆ Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "1567b2f82906c5f2dc6cbd83b39d5c4fa6bc17d7cd7cb4b38af56d89c1a2d24b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L ∧ Rcond.Subperm R ∧ Ocond ⊆ O\ncL cR : List Formula\ncO : Olf\nx : ℕ ⊕ ℕ\nx_in_voc_C :\n  (x ∈ Vocab.fromList (List.map Formula.voc cL) ∨ x ∈ Vocab.fromList (List.map Formula.voc (Olf.toForms cO))) ∧\n    (x ∈ Vocab.fromList (List.map Formula.voc cR) ∨ x ∈ Vocab.fromList (List.map Formula.voc (Olf.toForms cO)))\nthis : ∀ res ∈ ress, res.1.fvoc ⊆ Lcond.fvoc\nC_in : (cL, cR, cO) ∈ applyLocalRule lrule (L, R, O)\n⊢ x ∈ jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "086568eb731e19a197df682dd0b78592307c411836e104cff5ed3c42d6b42dc7"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nL_and_nθ_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "012e4c03bdba4c67d60891168201463c45590bcc604223c6067c267f1eb5cf6e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nR_and_θ_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "4c3d2b4eb214e6fc785ce83fd42971e81f234c7930f4a80488e2e00cb575b7c1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nL_and_nθ_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "f40ba3666e0e08232287a2cd76479c771ed7a02928a8c4c44c9b995bbd0e7de6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nR_and_θ_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "d6753a7d6ed99613a5e8c7890fa16122eb319b0f621160a324e980fade015a4b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈∗a⌉~⌈a⌉p)⋀(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "cc3ec035e6b313b4b9743ea2446247825cb89126ec13e448d6f95a1ddd384fb9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈a⌉⌈∗a⌉p)⋀(~⌈a⌉⌈∗a⌉q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "9c73a2bbe7824ab5652122f71d463f97c2c1df16c0982112f51f451ef2a9a7b4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 55,
        "start_column": 42,
        "end_line": 55,
        "end_column": 47
      },
      "debug_info": {
        "goal": "⊢ 4 ∈ []",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "6425367fb2390c982193a35f3ffc7428c76a91fa2df8c5baa1f6f1995be11fbf"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 56,
        "start_column": 42,
        "end_line": 56,
        "end_column": 47
      },
      "debug_info": {
        "goal": "⊢ 4 ∈ [3]",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "9a5b3b9ac92138307298649956a9d2aae0c0f27691fc6fdd2d1b6ad6f450af39"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 68,
        "start_column": 2,
        "end_line": 68,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a✝ : List ℕ\nt : NiceTree a✝\nk : ℕ\nk_in_N : k ∈ a✝\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "db57dc43d7c8f89aef81adcbd8a1362d77261fdfe95933638cdf4adac2900fbe"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 227,
        "start_column": 4,
        "end_line": 227,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : ℕ\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\nthis : k < List.length Hp\n⊢ k ≤ PathIn.length [] n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L227"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "f4608cf90b55d99dd26df900d2e67e5b0b7024222e6f0d7bb6dd2b96a85d1b9e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 222,
        "start_column": 28,
        "end_line": 222,
        "end_column": 33
      },
      "debug_info": {
        "goal": "n : ℕ\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\n⊢ k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L222"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "f76feb29e60a83bb30e5f772c20c4e00ffe94aee5deba2909983173125957369"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 248,
        "start_column": 4,
        "end_line": 248,
        "end_column": 9
      },
      "debug_info": {
        "goal": "H : History\nn : ℕ\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\nthis : k < List.length Hp\n⊢ k ≤ PathIn.length H n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-09T19:21:30+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "35894879ff61cd37dc719012fb178f796a3ea5cab28a6e2f4f5c956e5e851eb4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 243,
        "start_column": 28,
        "end_line": 243,
        "end_column": 33
      },
      "debug_info": {
        "goal": "H : History\nn : ℕ\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\n⊢ k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "12d9ae237e5ea1c8239cda1bc45eb50b6693789a600be4c5c5fff1f67db580d9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 289,
        "start_column": 2,
        "end_line": 289,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\na✝¹ : List ℕ\nm_in_ms : m ∈ a✝¹\na✝ : ℕ\nst : Step a✝ a✝¹\ntail✝ : List ℕ\nnext : {m : ℕ} → m ∈ a✝¹ → HisTree (a✝ :: tail✝) m\nrest rest' : PathIn (a✝ :: tail✝) m (@next m m_in_ms)\nhyp :\n  Sigma.fst (treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest) =\n    Sigma.fst (treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest')\n⊢ (treeAtP._proof_27 tail✝ a✝ a✝¹ m m_in_ms next rest ▸ treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest).fst =\n    (treeAtP._proof_27 tail✝ a✝ a✝¹ m m_in_ms (fun {m} => @next m) rest' ▸\n        treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest').fst",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L289"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "831efd99acb890c2c6423b7a4df0593611a96928b954e87a2f2267a095f65d58"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 311,
        "start_column": 4,
        "end_line": 311,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : ℕ\nms : List ℕ\nm : ℕ\nm_in_ms : m ∈ ms\nst : Step n ms\nnext : {m : ℕ} → m ∈ ms → HisTree [n] m\nrest : PathIn [n] m (@next m m_in_ms)\np_is_rep : isRep (treeAt [] n (HisTree.step n [] ms st next) (PathIn.cons [] ms n m m_in_ms st next rest))\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L311"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "f2860bbae275eea47d5a5e101b43eda65307f002bfa1372fc96577b94d73d050"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 350,
        "start_column": 8,
        "end_line": 350,
        "end_column": 13
      },
      "debug_info": {
        "goal": "n st : ℕ\nH : List ℕ\nk✝ : ℕ\n_in_empty : some k✝ = List.idxOf? n (st :: H)\np_is_rep : True\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L350"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "e584908a6ce19b1eab6ca1f51373cd2e4aedd6ce66d71cd564267b6082167c5d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 370,
        "start_column": 4,
        "end_line": 370,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl\nn✝ : ℕ\nms✝ : List ℕ\nm✝ : ℕ\nm_in✝ : m✝ ∈ ms✝\ns✝ : Step n✝ ms✝\nnext✝ : {m : ℕ} → m ∈ ms✝ → HisTree [n✝] m\nrest✝ : PathIn [n✝] m✝ (@next✝ m✝ m_in✝)\np_is_rep✝² : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) (PathIn.cons [] ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\nn : (n : ℕ) ×' (ht : HisTree [] n) ×' (p : PathIn [] n ht) ×' isRep (treeAt [] n ht p)\na✝³ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht✝ : (ht : HisTree [] n✝) ×' (p : PathIn [] n✝ ht) ×' isRep (treeAt [] n✝ ht p)\na✝² : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree [] n✝\np✝¹ : (p : PathIn [] n✝ ht) ×' isRep (treeAt [] n✝ ht p)\na✝¹ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np✝ : PathIn [] n✝ ht\np_is_rep✝¹ : isRep (treeAt [] n✝ ht p✝)\na✝ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nβ✝ : Type\np : PathIn [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝)\np_is_rep✝ : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) p)\nβ : Type\np_is_rep : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) (PathIn.cons [] ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\n⊢ 1 + PathIn.length [n✝] m✝ (@next✝ m✝ m_in✝) rest✝ < [].length + PathIn.length [] n✝ ht p✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L370"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "54640288f6e2543d4657e1d1823bdb104c344b5c85aa6800fd4a29e1b5cddd69"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 373,
        "start_column": 4,
        "end_line": 373,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl.refl\nn✝ head✝ : ℕ\ntail✝ ms✝ : List ℕ\nm✝ : ℕ\nm_in✝ : m✝ ∈ ms✝\ns✝ : Step n✝ ms✝\nnext✝ : {m : ℕ} → m ∈ ms✝ → HisTree (n✝ :: head✝ :: tail✝) m\nrest✝ : PathIn (n✝ :: head✝ :: tail✝) m✝ (@next✝ m✝ m_in✝)\np_is_rep✝² :\n  isRep\n    (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\n      (PathIn.cons (head✝ :: tail✝) ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\nn :\n  (n : ℕ) ×'\n    (ht : HisTree (head✝ :: tail✝) n) ×' (p : PathIn (head✝ :: tail✝) n ht) ×' isRep (treeAt (head✝ :: tail✝) n ht p)\na✝³ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht✝ :\n  (ht : HisTree (head✝ :: tail✝) n✝) ×' (p : PathIn (head✝ :: tail✝) n✝ ht) ×' isRep (treeAt (head✝ :: tail✝) n✝ ht p)\na✝² : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree (head✝ :: tail✝) n✝\np✝¹ : (p : PathIn (head✝ :: tail✝) n✝ ht) ×' isRep (treeAt (head✝ :: tail✝) n✝ ht p)\na✝¹ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np✝ : PathIn (head✝ :: tail✝) n✝ ht\np_is_rep✝¹ : isRep (treeAt (head✝ :: tail✝) n✝ ht p✝)\na✝ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nβ✝ : Type\np : PathIn (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\np_is_rep✝ : isRep (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝) p)\nβ : Type\np_is_rep :\n  isRep\n    (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\n      (PathIn.cons (head✝ :: tail✝) ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\n⊢ tail✝.length + 1 + 1 + PathIn.length (n✝ :: head✝ :: tail✝) m✝ (@next✝ m✝ m_in✝) rest✝ <\n    (head✝ :: tail✝).length + PathIn.length (head✝ :: tail✝) n✝ ht p✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L373"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "dd13770b7fe9e4baac118067ff36001380cf9182201c72e9013747ad82932828"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "main",
        "commit": "1e2c5ddff9323c3319579ee6a909bed7f8709d29",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 397,
        "start_column": 6,
        "end_line": 397,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : ℕ\nH' : History\nn' : ℕ\nH✝ : History\nm✝ k✝ : ℕ\n_in_H : some k✝ = List.idxOf? m✝ H✝\np_is_rep :\n  @isRep.match_1 (fun x => Prop) ⟨H✝, ⟨m✝, HisTree.rep H✝ m✝ k✝ _in_H⟩⟩ (fun fst fst_1 k a => True) fun x => False\nms : List ℕ\nm : ℕ\nm_in : m ∈ ms\ns : Step n ms\nnext : {m : ℕ} → m ∈ ms → HisTree [n] m\nrest : PathIn [n] m (@next m m_in)\np_ht_def :\n  ⟨H✝, ⟨m✝, HisTree.rep H✝ m✝ k✝ _in_H⟩⟩ =\n    treeAt [] n (HisTree.step n [] ms s next) (PathIn.cons [] ms n m m_in s next rest)\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/1e2c5ddff9323c3319579ee6a909bed7f8709d29/Unused/Repeat.lean#L397"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:15:42.613459+00:00"
      },
      "id": "65c5475d685fb1fc8eecf37f0b39b6c08420b20410a58b0880b6eba032e767b0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a b : Formula⦄, a ≈ b → (~a) ≈ (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "4ee4bdb1d34026567ddebdec55c937d8b6732296eb01f0929f9ac401e5e37901"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a₁ a₂ : Formula⦄, a₁ ≈ a₂ → ∀ ⦃b₁ b₂ : Formula⦄, b₁ ≈ b₂ → a₁⋀b₁ ≈ a₂⋀b₂",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "e58bd7d072cb6dcd4114332c91b3b0ff9bdc5f77ab0fe7d8de8bd758b4cfe4d8"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 798,
        "start_column": 10,
        "end_line": 798,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ sorry ∈ endNodesOf (next (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ⋯)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L798"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "1b432b149d3ecaabf0e5d85660d24b32ef55589a41bef02416f79332bc245c9f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 799,
        "start_column": 10,
        "end_line": 799,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ (M, v)⊨sorry ∧\n    (sorry.isFree = true ∨\n      ∃ F γ,\n        (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side sorry ∧\n          relateSeq M γ v w ∧\n            (∀ f ∈ F, evaluate M v f) ∧\n              (F, γ) ∈ H α ∧ (sorry.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L799"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "918e00b6289d9292a7814658bdda41078873db8924c8d3e19bcdfcc4a9cf0ca4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 802,
        "start_column": 8,
        "end_line": 802,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nα' : Program\nφ : Formula\nα'_not_atomic : ¬α'.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α'⌋AnyFormula.normal φ)) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α'⌋AnyFormula.normal φ) (LoadRule.dia' α'_not_atomic)) (L, R, O)\n⊢ ∃ Y,\n    (∃ l, (∃ a, ∃ (h : a ∈ B), endNodesOf (next a ⋯) = l) ∧ Y ∈ l) ∧\n      (M, v)⊨Y ∧\n        (Y.isFree = true ∨\n          ∃ F γ,\n            (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n              relateSeq M γ v w ∧\n                (∀ f ∈ F, evaluate M v f) ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L802"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "334319fa8a6458631a6b4e44d452af22c30f528d226984c70fc62d78726cfd4c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 806,
        "start_column": 6,
        "end_line": 806,
        "end_column": 11
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nlocRulTru : ∀ (w : W), (M, w)⊨(L, R, O) ↔ ∃ Ci ∈ B, (M, w)⊨Ci\nress✝ : List (List Formula × Option NegLoadFormula)\nχ✝ : LoadFormula\nlrule✝ : LoadRule (~'χ✝) ress✝\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inr (~'χ✝)) ⊆ O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR χ✝ lrule✝) (L, R, O)\n⊢ ∃\n    Y ∈\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk ∅ ∅ (some (Sum.inr (~'χ✝))) (LocalRule.loadedR χ✝ lrule✝) precons)\n          next),\n    (M, v)⊨Y ∧\n      (Y.isFree = true ∨\n        ∃ F γ,\n          (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n            relateSeq M γ v w ∧ (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L806"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "58d35097cbd28533cf57c0e1ee3ba19939939a672abd41b375635cf1a74e104a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1014,
        "start_column": 112,
        "end_line": 1014,
        "end_column": 117
      },
      "debug_info": {
        "goal": "χ : LoadFormula\nα : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nα_natom : ¬α.isAtomic\n⊢ ∃ s,\n    t ⋖_ s ∧\n      ∀ Fδ ∈ H α,\n        if side = Side.LL then\n          if ξ = AnyFormula.loaded χ then\n            nodeAt s = ((nodeAt s).1 ++ Fδ.1, (nodeAt s).2.1, some (Sum.inl (~'⌊⌊Fδ.2⌋⌋χ)))\n          else nodeAt s = ((nodeAt s).1 ++ Fδ.1, (nodeAt s).2.1, some (Sum.inl (~'⌊⌊Fδ.2⌋⌋χ)))\n        else\n          if ξ = AnyFormula.loaded χ then\n            nodeAt s = ((nodeAt s).1, (nodeAt s).2.1 ++ Fδ.1, some (Sum.inr (~'⌊⌊Fδ.2⌋⌋χ)))\n          else nodeAt s = ((nodeAt s).1, (nodeAt s).2.1 ++ Fδ.1, some (Sum.inr (~'⌊⌊Fδ.2⌋⌋χ)))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L1014"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "4fdbf85b4dfd54d969e3c66fcf33812a90fdc8a1c1a29d3bfeb2219daadf7df6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1614,
        "start_column": 16,
        "end_line": 1614,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case inr.intro.intro.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nt0 : PathIn tab\ns_t0 : t0 ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nβ : Program\nnegLoad_in : (~''(AnyFormula.loaded (⌊∗β⌋ξ))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF✝ : List Formula\nδ✝ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ✝ ξ)).in_side side Y\nv_seq_w : relateSeq M δ✝ v w\nv_F : (M, v)⊨F✝\nFδ_in_H : (F✝, δ✝) ∈ H (∗β)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ✝ ξ))).isFree = true\nδ_ne✝ : ¬δ✝ = []\nv_α_w : Relation.ReflTransGen (relate M β) v w\nn : ℕ\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : ∀ (i : Fin n), relate M β (ws.get i.castSucc) (ws.get i.succ)\nk : Fin n\nih :\n  ∃ sk,\n    Relation.TransGen (cEdge X tab) t sk ∧\n      (satisfiable (nodeAt sk) ∧ ¬cEquiv X tab sk t ∨\n        ∃ γ,\n          (~''(AnyFormula.loaded (⌊⌊γ⌋⌋⌊∗β⌋ξ))).in_side side (nodeAt sk) ∧\n            (M, ws[k.castSucc])⊨nodeAt sk ∧\n              ((nodeAt sk).without (~''(AnyFormula.loaded (⌊⌊γ⌋⌋⌊∗β⌋ξ)))).isFree = true ∧ True)\nne : ¬ws[k.castSucc] = ws[k.succ]\nsk : PathIn tab\nt_sk : Relation.TransGen (cEdge X tab) t sk\nγ : List Program\ninside_con : (~''(AnyFormula.loaded (⌊⌊γ⌋⌋⌊∗β⌋ξ))).in_side side (nodeAt sk)\nwk_sk : (M, ws[k.castSucc])⊨nodeAt sk\nloaded_con : ((nodeAt sk).without (~''(AnyFormula.loaded (⌊⌊γ⌋⌋⌊∗β⌋ξ)))).isFree = true\nprincipal_con : True\nF : List Formula\nδ : List Program\nFδ_in : (F, δ) ∈ H β\nwk_F : (M, ws[k.castSucc])⊨(F, δ).1\nwk_δ_wk1 : relateSeq M (F, δ).2 ws[k.castSucc] ws[k.succ]\nδ_ne : δ ≠ []\nHβstar_prop : (F, δ ++ [∗β]) ∈ H (∗β)\n⊢ ∃ sk,\n    Relation.TransGen (cEdge X tab) t sk ∧\n      (satisfiable (nodeAt sk) ∧ ¬cEquiv X tab sk t ∨\n        ∃ γ,\n          (~''(AnyFormula.loaded (⌊⌊γ⌋⌋⌊∗β⌋ξ))).in_side side (nodeAt sk) ∧\n            (M, ws[k.succ])⊨nodeAt sk ∧\n              ((nodeAt sk).without (~''(AnyFormula.loaded (⌊⌊γ⌋⌋⌊∗β⌋ξ)))).isFree = true ∧ True)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L1614"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "c6e69c43f25323d299938bbd4d3eee3f238cc6afe9fbe2b9b68d6ceeec47ce55"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1624,
        "start_column": 10,
        "end_line": 1624,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case inr.intro.intro\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nt0 : PathIn tab\ns_t0 : t0 ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nβ : Program\nnegLoad_in : (~''(AnyFormula.loaded (⌊∗β⌋ξ))).in_side side (nodeAt t)\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : (M, v)⊨F\nFδ_in_H : (F, δ) ∈ H (∗β)\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nδ_ne : ¬δ = []\nv_α_w : Relation.ReflTransGen (relate M β) v w\nn : ℕ\nws : List.Vector W n.succ\nv_head : v = ws.head\nw_tail : w = ws.last\nrel : ∀ (i : Fin n), relate M β (ws.get i.castSucc) (ws.get i.succ)\nclaim :\n  ∀ (k : Fin n.succ),\n    ∃ sk,\n      Relation.TransGen (cEdge X tab) t sk ∧\n        (satisfiable (nodeAt sk) ∧ ¬cEquiv X tab sk t ∨\n          ∃ γ,\n            (~''(AnyFormula.loaded (⌊⌊γ⌋⌋⌊∗β⌋ξ))).in_side side (nodeAt sk) ∧\n              (M, ws[k])⊨nodeAt sk ∧ ((nodeAt sk).without (~''(AnyFormula.loaded (⌊⌊γ⌋⌋⌊∗β⌋ξ)))).isFree = true ∧ True)\nh : w = w\nsn : PathIn tab\nt_sn : Relation.TransGen (cEdge X tab) t sn\nloaded_con : List Program\nw_sn : (~''(AnyFormula.loaded (⌊⌊loaded_con⌋⌋⌊∗β⌋ξ))).in_side side (nodeAt sn)\nwithout_con :\n  (M, w)⊨nodeAt sn ∧ ((nodeAt sn).without (~''(AnyFormula.loaded (⌊⌊loaded_con⌋⌋⌊∗β⌋ξ)))).isFree = true ∧ True\nα_natom : ¬(∗β).isAtomic\n⊢ ∃ s,\n    Relation.TransGen (cEdge X tab) t s ∧\n      (satisfiable (nodeAt s) ∧ ¬cEquiv X tab s t ∨\n        (~''ξ).in_side side (nodeAt s) ∧ (M, w)⊨nodeAt s ∧ ((nodeAt s).without (~''ξ)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/Soundness.lean#L1624"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-05-24T17:50:42+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "d3ba8589e077136158acee0b7e6c615694a8f54052a72a44176aaddc37a03af0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18
      },
      "debug_info": {
        "goal": "⊢ ∀ (p next : Sequent ⊕ Sequent × Formula × Rule), next ∈ sorry p → sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "6711a94129bd08dcec641bc0778e83f9f98926678f98b1dfe1182c334200addd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.A\nh : winning (Sum.inl X) s\n⊢ Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "030641f995b96d37e0ad2a06399e7d29d168e12fa7aa782120d5572ae8d4059c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Player.B\nh : winning (Sum.inl X) s\n⊢ ∃ WS mg, X.toFinset ∈ WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "541e1b025e5d0b97d2ea581d14a81dabbd0571614616d071443f595132fc4cd6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\nτ : Formula\nτ_in : τ ∈ testsOfProgram α\nψ_in : (~τ) ∈ L\nx_in_voc_ψ : x ∈ τ.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "79205e14ba3dedfa464d67fe21aeb13e5ad90555b85748571f3f0fb41b1291d9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\na : ℕ\nδ : List Program\nψ_in : (⌈·a⌉⌈⌈δ⌉⌉φ) ∈ L\nright✝ : ·a ∈ subprograms α ∧ ∀ a ∈ δ, a ∈ subprograms α\nx_in_voc_ψ : x = Sum.inr a ∨ x ∈ δ.pvoc ∪ φ.voc\n⊢ x ∈ α.voc ∨ x ∈ φ.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "55d1543282ef1234a508b1b032ff1505a0067a30319930965e643b869d081ece"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nFs : List Formula\nδ : List Program\nin_H : (Fs, δ) ∈ H α\nthis : ∀ (α : Program) {Fs : List Formula} {δ : List Program}, (Fs, δ) ∈ H α → δ = [] ∨ ∃ a δ', δ = ·a :: δ'\nα' : Program\nα'_in : α' ∈ δ\nx_in : x ∈ α'.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "88b676747afe4c084b8b960d9532b68125be7f907b41690b330da79cdf9996e4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : ℕ ⊕ ℕ\nress : List (List Formula × Option NegLoadFormula)\nχ : LoadFormula\nlrule : LoadRule (~'χ) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) ∈ ress\nφ : Formula\nφ_in_L : φ ∈ L\nbla : x ∈ φ.voc\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "2b5e82f69a12e185fa8487a3b0b804c2e793bafcd7ba9dccb2b54a115a4849f5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.1.fvoc ⊆ Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "e4202b0532185bbd4d111e20c1cb07a6ce49ec561c1677958b0ffcc669b6e741"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.2.voc ⊆ Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "726a5d8a3a9c035ef217fcf10e3437047aafdfc67d77f38c3d972b62ec57fe9f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L ∧ Rcond.Subperm R ∧ Ocond ⊆ O\ncL cR : List Formula\ncO : Olf\nx : ℕ ⊕ ℕ\nx_in_voc_C :\n  (x ∈ Vocab.fromList (List.map Formula.voc cL) ∨ x ∈ Vocab.fromList (List.map Formula.voc (Olf.toForms cO))) ∧\n    (x ∈ Vocab.fromList (List.map Formula.voc cR) ∨ x ∈ Vocab.fromList (List.map Formula.voc (Olf.toForms cO)))\nthis : ∀ res ∈ ress, res.1.fvoc ⊆ Lcond.fvoc\nC_in : (cL, cR, cO) ∈ applyLocalRule lrule (L, R, O)\n⊢ x ∈ jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "bf58f705bb0cddf77938d6e8dba799587dd2664e2d8d8881bc76c2ec5d2f4887"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nL_and_nθ_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "a899e1f6d17fb8b249eb3291eee3e31a7d493b6c8ddef6329c87954859a63da5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nR_and_θ_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "d1a6cdfab5ae66d659002b1ffeb9f0569e581b53e8da66b77fcf93f7da2152b4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nL_and_nθ_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "71251aae6763bef16ec2e1ef4bfece7f0bab3213c9b8d07df4391e6e46341c63"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map (fun x => @localInterpolantStep.match_1 C (fun x => Formula) x fun c cinC => ↑(@subθs c cinC)) C.attach\nR_and_θ_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "c694bf9fbe56cb8d5c44a39fd0f7c302a7b6ab649930e194a8fe784322cc37c9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈∗a⌉~⌈a⌉p)⋀(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "f564e6af7f10cec0148281facc22ee461937b5f50655beb508345e676acc502b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈a⌉⌈∗a⌉p)⋀(~⌈a⌉⌈∗a⌉q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "0ce3ddd2f2a5d3996d1b9acf53baeebbf3fdfc7f3b2a71b5276b5ab248aa3874"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 55,
        "start_column": 42,
        "end_line": 55,
        "end_column": 47
      },
      "debug_info": {
        "goal": "⊢ 4 ∈ []",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "690c3bf14a304d64953477a20fe411ed1547bbea3298cb7f04c0cf9449e29b73"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 56,
        "start_column": 42,
        "end_line": 56,
        "end_column": 47
      },
      "debug_info": {
        "goal": "⊢ 4 ∈ [3]",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "e0479a60e806bc365dd9d971fd8f8b6ce1d695de1a4063988ff5c051656c08fe"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 68,
        "start_column": 2,
        "end_line": 68,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a✝ : List ℕ\nt : NiceTree a✝\nk : ℕ\nk_in_N : k ∈ a✝\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-03T12:15:03+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "2382546d1be0fe9c641b7633ab280e855afe8311a59fdb200ae1f34e6e9fe383"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 227,
        "start_column": 4,
        "end_line": 227,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : ℕ\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\nthis : k < List.length Hp\n⊢ k ≤ PathIn.length [] n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L227"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "8806c94e27f435217af140d76d4caea6b6376c0cfcc90c526c5f54347cfdae40"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 222,
        "start_column": 28,
        "end_line": 222,
        "end_column": 33
      },
      "debug_info": {
        "goal": "n : ℕ\nroot : HisTree [] n\np : PathIn [] n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt [] n root p)) = [].length + PathIn.length [] n root p\n⊢ k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L222"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "eb859dfe0ae16476e4675c55dd90c5a0e87239e940cc7d1e872d5f5afb656609"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 248,
        "start_column": 4,
        "end_line": 248,
        "end_column": 9
      },
      "debug_info": {
        "goal": "H : History\nn : ℕ\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\nthis : k < List.length Hp\n⊢ k ≤ PathIn.length H n root p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-09T19:21:30+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "236ba65b7f2ba0836ee55c1a84900ebeecaa4df3cc0ccfc9c56614a5543025bf"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 243,
        "start_column": 28,
        "end_line": 243,
        "end_column": 33
      },
      "debug_info": {
        "goal": "H : History\nn : ℕ\nroot : HisTree H n\np : PathIn H n root\nHp : History\nm k : ℕ\nk_eq : some k = List.idxOf? m Hp\nHp_len_def : List.length (Sigma.fst (treeAt H n root p)) = List.length H + PathIn.length H n root p\n⊢ k < List.length Hp",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-05-13T21:59:41+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "699914277ac6c6764ea627ce65cf77b2651c3fa05e0299bd4950d4912a31b231"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 289,
        "start_column": 2,
        "end_line": 289,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\na✝¹ : List ℕ\nm_in_ms : m ∈ a✝¹\na✝ : ℕ\nst : Step a✝ a✝¹\ntail✝ : List ℕ\nnext : {m : ℕ} → m ∈ a✝¹ → HisTree (a✝ :: tail✝) m\nrest rest' : PathIn (a✝ :: tail✝) m (@next m m_in_ms)\nhyp :\n  Sigma.fst (treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest) =\n    Sigma.fst (treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest')\n⊢ (treeAtP._proof_27 tail✝ a✝ a✝¹ m m_in_ms next rest ▸ treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest).fst =\n    (treeAtP._proof_27 tail✝ a✝ a✝¹ m m_in_ms (fun {m} => @next m) rest' ▸\n        treeAtP (a✝ :: tail✝) m (@next m m_in_ms) rest').fst",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L289"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "999b17b8c5ed061be127510687bc39a0a9143da7b86766bf72d9792c05764999"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 311,
        "start_column": 4,
        "end_line": 311,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n : ℕ\nms : List ℕ\nm : ℕ\nm_in_ms : m ∈ ms\nst : Step n ms\nnext : {m : ℕ} → m ∈ ms → HisTree [n] m\nrest : PathIn [n] m (@next m m_in_ms)\np_is_rep : isRep (treeAt [] n (HisTree.step n [] ms st next) (PathIn.cons [] ms n m m_in_ms st next rest))\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L311"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "8760f43a1cb9249d09e615e864b0e680e9e9212c6b9196b98e25d2696721c81b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 350,
        "start_column": 8,
        "end_line": 350,
        "end_column": 13
      },
      "debug_info": {
        "goal": "n st : ℕ\nH : List ℕ\nk✝ : ℕ\n_in_empty : some k✝ = List.idxOf? n (st :: H)\np_is_rep : True\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L350"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "6f90ecd3b7a643168a0f3ebaecdf238bd1d61958ddb607ee0b10985fdb10c702"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 370,
        "start_column": 4,
        "end_line": 370,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl\nn✝ : ℕ\nms✝ : List ℕ\nm✝ : ℕ\nm_in✝ : m✝ ∈ ms✝\ns✝ : Step n✝ ms✝\nnext✝ : {m : ℕ} → m ∈ ms✝ → HisTree [n✝] m\nrest✝ : PathIn [n✝] m✝ (@next✝ m✝ m_in✝)\np_is_rep✝² : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) (PathIn.cons [] ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\nn : (n : ℕ) ×' (ht : HisTree [] n) ×' (p : PathIn [] n ht) ×' isRep (treeAt [] n ht p)\na✝³ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht✝ : (ht : HisTree [] n✝) ×' (p : PathIn [] n✝ ht) ×' isRep (treeAt [] n✝ ht p)\na✝² : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree [] n✝\np✝¹ : (p : PathIn [] n✝ ht) ×' isRep (treeAt [] n✝ ht p)\na✝¹ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np✝ : PathIn [] n✝ ht\np_is_rep✝¹ : isRep (treeAt [] n✝ ht p✝)\na✝ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nβ✝ : Type\np : PathIn [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝)\np_is_rep✝ : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) p)\nβ : Type\np_is_rep : isRep (treeAt [] n✝ (HisTree.step n✝ [] ms✝ s✝ next✝) (PathIn.cons [] ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\n⊢ 1 + PathIn.length [n✝] m✝ (@next✝ m✝ m_in✝) rest✝ < [].length + PathIn.length [] n✝ ht p✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L370"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "12db5b987ec02f142048f143805d26aa1f274db00aad3c54d0bcc48d255d7e05"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 373,
        "start_column": 4,
        "end_line": 373,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refl.refl.refl.refl.refl\nn✝ head✝ : ℕ\ntail✝ ms✝ : List ℕ\nm✝ : ℕ\nm_in✝ : m✝ ∈ ms✝\ns✝ : Step n✝ ms✝\nnext✝ : {m : ℕ} → m ∈ ms✝ → HisTree (n✝ :: head✝ :: tail✝) m\nrest✝ : PathIn (n✝ :: head✝ :: tail✝) m✝ (@next✝ m✝ m_in✝)\np_is_rep✝² :\n  isRep\n    (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\n      (PathIn.cons (head✝ :: tail✝) ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\nn :\n  (n : ℕ) ×'\n    (ht : HisTree (head✝ :: tail✝) n) ×' (p : PathIn (head✝ :: tail✝) n ht) ×' isRep (treeAt (head✝ :: tail✝) n ht p)\na✝³ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht✝ :\n  (ht : HisTree (head✝ :: tail✝) n✝) ×' (p : PathIn (head✝ :: tail✝) n✝ ht) ×' isRep (treeAt (head✝ :: tail✝) n✝ ht p)\na✝² : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nht : HisTree (head✝ :: tail✝) n✝\np✝¹ : (p : PathIn (head✝ :: tail✝) n✝ ht) ×' isRep (treeAt (head✝ :: tail✝) n✝ ht p)\na✝¹ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\np✝ : PathIn (head✝ :: tail✝) n✝ ht\np_is_rep✝¹ : isRep (treeAt (head✝ :: tail✝) n✝ ht p✝)\na✝ : failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)\nβ✝ : Type\np : PathIn (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\np_is_rep✝ : isRep (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝) p)\nβ : Type\np_is_rep :\n  isRep\n    (treeAt (head✝ :: tail✝) n✝ (HisTree.step n✝ (head✝ :: tail✝) ms✝ s✝ next✝)\n      (PathIn.cons (head✝ :: tail✝) ms✝ n✝ m✝ m_in✝ s✝ next✝ rest✝))\n⊢ tail✝.length + 1 + 1 + PathIn.length (n✝ :: head✝ :: tail✝) m✝ (@next✝ m✝ m_in✝) rest✝ <\n    (head✝ :: tail✝).length + PathIn.length (head✝ :: tail✝) n✝ ht p✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L373"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "f54ef1c79db185ebb390b04aab794ca95312cab02f39d4e3d1fa15f5473a5759"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "multisetEqTo",
        "commit": "95cf3b8e35d44fecd1030344f99342d594da4c28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Unused/Repeat.lean",
        "start_line": 397,
        "start_column": 6,
        "end_line": 397,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : ℕ\nH' : History\nn' : ℕ\nH✝ : History\nm✝ k✝ : ℕ\n_in_H : some k✝ = List.idxOf? m✝ H✝\np_is_rep :\n  @isRep.match_1 (fun x => Prop) ⟨H✝, ⟨m✝, HisTree.rep H✝ m✝ k✝ _in_H⟩⟩ (fun fst fst_1 k a => True) fun x => False\nms : List ℕ\nm : ℕ\nm_in : m ∈ ms\ns : Step n ms\nnext : {m : ℕ} → m ∈ ms → HisTree [n] m\nrest : PathIn [n] m (@next m m_in)\np_ht_def :\n  ⟨H✝, ⟨m✝, HisTree.rep H✝ m✝ k✝ _in_H⟩⟩ =\n    treeAt [] n (HisTree.step n [] ms s next) (PathIn.cons [] ms n m m_in s next rest)\n⊢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/95cf3b8e35d44fecd1030344f99342d594da4c28/Unused/Repeat.lean#L397"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-04-01T19:43:15+02:00",
        "inclusion_date": "2025-05-25T06:21:45.052190+00:00"
      },
      "id": "8daf839542f9888a4d1fe113fbc207b3d06ef16c2827f84d563c3cbfc907f28b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 203,
        "start_column": 2,
        "end_line": 203,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ 2 ≤ 1",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L203"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-04-30T15:46:18+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "4e5d858219041619f8f5efc8d198eaf9f2c466db0c76b4693fa808fba0e585be"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 234,
        "start_column": 18,
        "end_line": 234,
        "end_column": 23
      },
      "debug_info": {
        "goal": "P Q : Prop\n⊢ Q",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "63889ee39d18a4100cd7e6938c97f0c9d35a34bafd96a25389f804d2b0329a8b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 235,
        "start_column": 22,
        "end_line": 235,
        "end_column": 27
      },
      "debug_info": {
        "goal": "P Q : Prop\nass : Q\n⊢ Q → P",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L235"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "3eef76804a987db488b9ba4dc1536a105e1060653ef38ca0183a1c40c353b1fc"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 239,
        "start_column": 25,
        "end_line": 239,
        "end_column": 30
      },
      "debug_info": {
        "goal": "P : ℕ → Prop\nf : ℕ → ℕ\n⊢ ∀ (n : ℕ), P n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L239"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-07-22T19:06:07+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "cc7304237ba6b5308bf06ad7247a6b1b0625d3072dff20bf5f38336277789b9e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 243,
        "start_column": 28,
        "end_line": 243,
        "end_column": 33
      },
      "debug_info": {
        "goal": "p₁ p₂ p₃ q : Prop\n⊢ p₁ ∨ p₂ ∨ p₃",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L243"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-08-02T10:30:50+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "2b1cd5e46731b0389f8ca7dee2933e3a10047a3cd77cc2db1204b332316838b3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 250,
        "start_column": 43,
        "end_line": 250,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : ℕ\nq : Prop\n⊢ n = 1 ∨ n = 2 ∨ n = 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L250"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-08-02T10:30:50+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "fd29ca647327a32c8f69903aa3a713e798a3bfa405370a192ab5203d5132fd5f"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "Scratch/Fiddle4.lean",
        "start_line": 319,
        "start_column": 2,
        "end_line": 323,
        "end_column": 15
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/Scratch/Fiddle4.lean#L319"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-12-26T19:58:00+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "891c220d8a0a91090b91836e5ec8fad6f0e88d3e3a2c9d09b18f012baf0fc0e5"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 86,
        "start_column": 78,
        "end_line": 86,
        "end_column": 83
      },
      "debug_info": {
        "goal": "n : ℕ\nh✝ : Even n\ncalculation_104313057753019104 : ∃ k, ↑n = 2 * k → ↑n * (↑n + 1) = 2 * k * (2 * k + 1)\n⊢ ∃ k, ↑n = 2 * k",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_17638710709303199183.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "31a109dbd90a75b55992032e01af42d18eef6b6783ec5ad367a3967a2b0c8f4d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 93,
        "start_column": 49,
        "end_line": 93,
        "end_column": 54
      },
      "debug_info": {
        "goal": "n : ℕ\nh✝ : ¬Even n\n⊢ Odd n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_17638710709303199183.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "7209b19745e89134690230053bac4711304bba9aad7c60e82dc8d7cc5cefcec1"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 100,
        "start_column": 6,
        "end_line": 100,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : ℕ\nh✝ : ¬Even n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : ∃ k, ↑n = 2 * k + 1 → True\n⊢ ∃ k, ↑n = 2 * k + 1 → 2 * k + 1 = (2 * k + 1) * (2 * k + 2)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_17638710709303199183.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "45277d3e11d05022e5aea8805bd5c1bda9e160750bad0cffe5ae7e0a425f54c8"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_17638710709303199183.lean",
        "start_line": 104,
        "start_column": 6,
        "end_line": 104,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : ℕ\nh✝ : ¬Even n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : ∃ k, ↑n = 2 * k + 1 → True\ncalculation_2616508765904695607 : ∃ k, ↑n = 2 * k + 1 → 2 * k + 1 = (2 * k + 1) * (2 * k + 2)\n⊢ ∃ k, ↑n = 2 * (2 * k + 1) * (k + 1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_17638710709303199183.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-02-01T02:51:42+00:00",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "3ec98b65ad551b6408062a877da9479347064ac7bcb02b55d6c44f9edc4c66d3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_9890995833570380899.lean",
        "start_line": 86,
        "start_column": 78,
        "end_line": 86,
        "end_column": 93
      },
      "debug_info": {
        "goal": "n : ℕ\nh✝ : Even n\ncalculation_104313057753019104 : ∃ k, ↑n = 2 * k → ↑n * (↑n + 1) = 2 * k * (2 * k + 1)\n⊢ ∃ k, ↑n = 2 * k",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_9890995833570380899.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-01-31T10:48:45+00:00",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "da09227e253a2ba60bae0515cdf3419c1df0fea826c00529bc63452677e87b0f"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_9890995833570380899.lean",
        "start_line": 93,
        "start_column": 49,
        "end_line": 93,
        "end_column": 64
      },
      "debug_info": {
        "goal": "n : ℕ\nh✝ : ¬Even n\n⊢ Odd n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_9890995833570380899.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-01-31T10:48:45+00:00",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "764b8f2704295cfdcf0f9c58dbc3ac1394b6e13c06a53794530c8891a1583f70"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_9890995833570380899.lean",
        "start_line": 100,
        "start_column": 6,
        "end_line": 100,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : ℕ\nh✝ : ¬Even n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : ∃ k, ↑n = 2 * k + 1 → True\n⊢ ∃ k, ↑n = 2 * k + 1 → 2 * k + 1 = (2 * k + 1) * (2 * k + 2)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_9890995833570380899.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-01-31T10:48:45+00:00",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "258721a4949ca445f6d11f9b40d680c6be9bbf40b4873c3fa5087f3396569e07"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "CodeGen/from_statement_9890995833570380899.lean",
        "start_line": 104,
        "start_column": 6,
        "end_line": 104,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n : ℕ\nh✝ : ¬Even n\ncond_2667733541464095191 : Odd n\ncalculation_11723580698188269905 : ∃ k, ↑n = 2 * k + 1 → True\ncalculation_2616508765904695607 : ∃ k, ↑n = 2 * k + 1 → 2 * k + 1 = (2 * k + 1) * (2 * k + 2)\n⊢ ∃ k, ↑n = 2 * (2 * k + 1) * (k + 1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/CodeGen/from_statement_9890995833570380899.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2025-01-31T10:48:45+00:00",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "72deb981d59af525919eb4380a93894e29be21733ca228146c41d193a04710cb"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ThmInfo.lean",
        "start_line": 36,
        "start_column": 51,
        "end_line": 36,
        "end_column": 56
      },
      "debug_info": {
        "goal": "⊢ ∀ (n : Nat), n + 2 = 2 + n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/DataGenAide/ThmInfo.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-08-16T17:16:08+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "e3503a1176647b5bcd3e447b0f7c01737454b9c8df20603189b51e5eb6624456"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ThmInfo.lean",
        "start_line": 39,
        "start_column": 50,
        "end_line": 39,
        "end_column": 55
      },
      "debug_info": {
        "goal": "a b c : Nat\n⊢ a ^ 3 + b ^ 3 = c ^ 3 → a * b * c = 0",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/DataGenAide/ThmInfo.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-08-16T17:16:08+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "1aeb318cf210058837c469a8e5ebdf88ff5043651837ee2b624c9194ecff5742"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "DataGenAide/ConstDeps.lean",
        "start_line": 114,
        "start_column": 17,
        "end_line": 114,
        "end_column": 22
      },
      "debug_info": {
        "goal": "case succ\nm n : Nat\nih : n + m = m + n\n⊢ n + 1 + m = m + (n + 1)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/DataGenAide/ConstDeps.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-05-05T19:52:08+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "b7b1645900c28ff1bb6936a6aadbaf667425acb9c989c6daea22ae65199fe827"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 41,
        "start_column": 26,
        "end_line": 41,
        "end_column": 41
      },
      "debug_info": {
        "goal": "⊢ 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "4f7efb18841f972dcd9251d8f7fe3745c7e6874d309726e479abb5ecf5c1ae7c"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 46,
        "start_column": 44,
        "end_line": 46,
        "end_column": 59
      },
      "debug_info": {
        "goal": "n : Nat\n⊢ 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "4146e501e7a04260042e32ac74dc68f0f711ccd1b93f1033160d0e67825d0a04"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case left\n⊢ 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "f80b5acf092e04dda12f40b2a5bf2c4c3668b700397ef8957c6ddca2e0e2ca42"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 101,
        "start_column": 2,
        "end_line": 101,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case right.left\n⊢ 2 + 2 = 4",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L101"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "28f1ed08e927eeefd194a2018d953602c298ceff99b9bf6612d74986dd160212"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanAide/CheckedSorry.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case right.right\n⊢ 1 + 1 = 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanAide/CheckedSorry.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-11-11T13:21:12+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "a812b6c594cdb09f74837f853b2439bdbd57d2d73dd7fd3e75aa3b297968ceb8"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 19,
        "start_column": 104,
        "end_line": 19,
        "end_column": 109
      },
      "debug_info": {
        "goal": "⊢ (∀ {a b : ℤ},\n      ∃ x y z w,\n        a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 ∧\n          ∃ x y z w, b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 → ∃ x y z w, a * b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2) →\n    let is_sum_of_four_squares := fun n => ∃ a b c d, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2;\n    ∀ (x y : ℕ), is_sum_of_four_squares x → is_sum_of_four_squares y → is_sum_of_four_squares (x * y)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L19"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "3ab59edd7c375394edb7b9b1170bf770ffc7fa4595efa5dc4bc4e57b877fdfed"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 21,
        "start_column": 267,
        "end_line": 21,
        "end_column": 272
      },
      "debug_info": {
        "goal": "⊢ (let is_sum_of_four_squares := fun n => ∃ a b c d, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2;\n    ∀ (x y : ℕ), is_sum_of_four_squares x → is_sum_of_four_squares y → is_sum_of_four_squares (x * y)) →\n    ∀ {a b : ℤ},\n      ∃ x y z w,\n        a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 ∧ b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 →\n          ∃ x y z w, a * b = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "a8a67e413b7e20200a9e483bb31d124dbb2f219908bdad4589b060b48130ab38"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 30,
        "start_column": 2,
        "end_line": 30,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case a\nh : {R : Type u} → [inst : CommRing R] → (∀ (x : R), x * x = x) → CommRing R\nR : Type u\nRRing : Ring R\nhyp : ∀ (x : R), x * x = x\nthis : CommRing R\nx : R\n⊢ x * x = x",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L30"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-12T12:43:25+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "969c60b995551ef7a0c397f95b4f5870e6a07272348d28ff68c294cfb7ea656c"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 40,
        "start_column": 2,
        "end_line": 40,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h.left\nh : ∀ (n : ℕ), ∃ p₁ p₂, Nat.Prime p₁ ∧ Nat.Prime p₂ ∧ p₁ + 2 = p₂ ∧ 2 + n < p₂\nn p₁ p₂ : ℕ\nPrime_p₁ : Nat.Prime p₁\nPrime_p₂ : Nat.Prime p₂\nhyp₁ : p₁ + 2 = p₂\nhyp₂ : 2 + n < p₂\n⊢ p₁ > n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-12T12:43:25+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "ee6fb76685df32f6f4659d67c521b76b7139a3c8c308e53f953067c06e62006b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 51,
        "start_column": 28,
        "end_line": 51,
        "end_column": 33
      },
      "debug_info": {
        "goal": "h : ∀ (n : ℕ), ∃ p > n, Nat.Prime p ∧ Nat.Prime (p + 2)\nn p : ℕ\nhpn : p > n\nPrime_p : Nat.Prime p\nPrime_pp2 : Nat.Prime (p + 2)\n⊢ 2 + n < p + 2",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L51"
      },
      "metadata": {
        "blame_email_hash": "daa7bcb7d9e3",
        "blame_date": "2022-11-14T19:44:46+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "01ccd0085368235a0730a2f92a19f85eed4627a0231e6af8a399207fcb47326e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 58,
        "start_column": 350,
        "end_line": 58,
        "end_column": 355
      },
      "debug_info": {
        "goal": "⊢ (∀ {α : Type u_1} {r : α → α → Prop} [inst : Preorder α],\n      (∀ (c : Set α), IsChain r c → ∃ ub, ∀ a ∈ c, r a ub) → ∀ [inst : Nonempty α], ∃ m, ∀ (a : α), r m a → r a m) →\n    ∀ {α : Type u} [inst : PartialOrder α] [inst_1 : Nonempty α],\n      (∀ (c : Set α), IsChain LE.le c → ∃ b, ∀ a ∈ c, a ≤ b) → ∃ m, ∀ (a : α), m ≤ a → a = m",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "663f1d7bed0a07da1b4b022f0896edf609082f4923aac93ba6c2242baed4653b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 59,
        "start_column": 350,
        "end_line": 59,
        "end_column": 355
      },
      "debug_info": {
        "goal": "⊢ (∀ {α : Type u} [inst : PartialOrder α] [inst_1 : Nonempty α],\n      (∀ (c : Set α), IsChain LE.le c → ∃ b, ∀ a ∈ c, a ≤ b) → ∃ m, ∀ (a : α), m ≤ a → a = m) →\n    ∀ {α : Type u_1} {r : α → α → Prop} [inst : Preorder α],\n      (∀ (c : Set α), IsChain r c → ∃ ub, ∀ a ∈ c, r a ub) → ∀ [inst : Nonempty α], ∃ m, ∀ (a : α), r m a → r a m",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L59"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "72fa5673545f23f21204579d2e2bdbd4316dfea4fb13fc9b48c208a13a9deabb"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 62,
        "start_column": 420,
        "end_line": 62,
        "end_column": 425
      },
      "debug_info": {
        "goal": "⊢ (∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β]\n      [inst_2 : UniformSpace γ] {f : α → β} {g : β → γ},\n      UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f)) →\n    ∀ {α β γ : Type u} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ] (f : α → β)\n      (g : β → γ), UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "1ed0c4569a254e4c6ed7dc09554aee0af9329886a9a8e1a13e78d353cbc6355d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 63,
        "start_column": 420,
        "end_line": 63,
        "end_column": 425
      },
      "debug_info": {
        "goal": "⊢ (∀ {α β γ : Type u} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ] (f : α → β)\n      (g : β → γ), UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f)) →\n    ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β]\n      [inst_2 : UniformSpace γ] {f : α → β} {g : β → γ},\n      UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L63"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "2644c07ea1f0df7797d6745d8bf3c181cad089d5f9eb6e2dadaf1f97291c8a66"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 67,
        "start_column": 488,
        "end_line": 67,
        "end_column": 493
      },
      "debug_info": {
        "goal": "⊢ (∀ {C : Type u₁} [inst : CategoryTheory.Category.{u_3, u₁} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\n      {T T' : C} (t : CategoryTheory.Limits.IsTerminal T),\n      CategoryTheory.Limits.IsTerminal T' → CategoryTheory.IsIso (t.from T')) →\n    ∀ {C : Type u_4} [inst : CategoryTheory.Category.{u_5, u_4} C] (T₁ T₂ : C),\n      CategoryTheory.Limits.IsTerminal T₁ → CategoryTheory.Limits.IsTerminal T₂ → ∃ ι, ∀ (ι' : T₁ ≅ T₂), ι = ι'",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "9ef757eff2319a133ecd20e70df68091c888370384a35912f8fdb150ea0e4b94"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 68,
        "start_column": 488,
        "end_line": 68,
        "end_column": 493
      },
      "debug_info": {
        "goal": "⊢ (∀ {C : Type u_3} [inst : CategoryTheory.Category.{u_4, u_3} C] (T₁ T₂ : C),\n      CategoryTheory.Limits.IsTerminal T₁ → CategoryTheory.Limits.IsTerminal T₂ → ∃ ι, ∀ (ι' : T₁ ≅ T₂), ι = ι') →\n    ∀ {C : Type u₁} [inst : CategoryTheory.Category.{u_5, u₁} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\n      {T T' : C} (t : CategoryTheory.Limits.IsTerminal T),\n      CategoryTheory.Limits.IsTerminal T' → CategoryTheory.IsIso (t.from T')",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "c663d343c0db9ea5b173e622b518238ab5bddf4ddedbec6851b16186f7d2478e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 71,
        "start_column": 104,
        "end_line": 71,
        "end_column": 109
      },
      "debug_info": {
        "goal": "⊢ (∀ (a b c : ℤ), a ^ 3 + b ^ 3 ≠ c ^ 3) → ∀ (a b c : ℕ), a > 0 → b > 0 → ¬a ^ 3 + b ^ 3 = c ^ 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "e35c9a5aa981d6ec97f6ca5f1d9d14f4688c689fd69fad5fe5c6dc05c9a34cbf"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 72,
        "start_column": 104,
        "end_line": 72,
        "end_column": 109
      },
      "debug_info": {
        "goal": "⊢ (∀ (a b c : ℕ), a > 0 → b > 0 → ¬a ^ 3 + b ^ 3 = c ^ 3) → ∀ (a b c : ℤ), a ^ 3 + b ^ 3 ≠ c ^ 3",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "19e8535422803b1595460313d54c4aadd1dceae5c809641e07aeb05ce60f580e"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 75,
        "start_column": 183,
        "end_line": 75,
        "end_column": 188
      },
      "debug_info": {
        "goal": "⊢ (∀ {G : Type u_1} [inst : Group G], (∀ (x : G), x ^ 2 = 1) → ∀ {x y : G}, Commute x y) →\n    ∀ {G : Type u} [inst : Group G], (∀ (x : G), G → x * x = 1) → ∀ (x y : G), Commute x y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "0438722d586fd8e17dc2869a27a52e187152da4a5af3ceeb63b75c1758c19e00"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 76,
        "start_column": 183,
        "end_line": 76,
        "end_column": 188
      },
      "debug_info": {
        "goal": "⊢ (∀ {G : Type u} [inst : Group G], (∀ (x : G), G → x * x = 1) → ∀ (x y : G), Commute x y) →\n    ∀ {G : Type u_1} [inst : Group G], (∀ (x : G), x ^ 2 = 1) → ∀ {x y : G}, Commute x y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "62cf8b873407764dfabab1067ab9af91e69d5eb886e360ca0f3ffeabf10bded3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 79,
        "start_column": 89,
        "end_line": 79,
        "end_column": 94
      },
      "debug_info": {
        "goal": "⊢ (∀ {p q : ℕ}, p = q + 1 → Even (p * q)) → ∀ (n : ℕ), Even (n * (n + 1))",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "c86656f44ad14cd03106f340e7e4651fadd120af04bbf2e527534d5b3ec8f564"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 80,
        "start_column": 89,
        "end_line": 80,
        "end_column": 94
      },
      "debug_info": {
        "goal": "⊢ (∀ (n : ℕ), Even (n * (n + 1))) → ∀ {p q : ℕ}, p = q + 1 → Even (p * q)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T10:45:47+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "d9b8232dad3f51debcf164925a297ec80bfd8f4550a2c4b948c30289b7fba032"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 83,
        "start_column": 120,
        "end_line": 83,
        "end_column": 125
      },
      "debug_info": {
        "goal": "⊢ (∀ (α : Type u), Monoid.IsTorsionFree (FreeGroup α)) → ∀ {α : Type u}, Monoid.IsTorsionFree (FreeGroup α)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "9b29d4e46fb190ebea3ef7f1bdd1217f07f27f28df7e2f87297b75e99c81d0e9"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 84,
        "start_column": 120,
        "end_line": 84,
        "end_column": 125
      },
      "debug_info": {
        "goal": "⊢ (∀ {α : Type u}, Monoid.IsTorsionFree (FreeGroup α)) → ∀ (α : Type u), Monoid.IsTorsionFree (FreeGroup α)",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "ac33ad033bd3a6c2a6ff9fcca308504ea6c758ef2c0b5ec79d2c84dda1207263"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 88,
        "start_column": 58,
        "end_line": 88,
        "end_column": 63
      },
      "debug_info": {
        "goal": "⊢ (∀ {n : ℕ}, 1 < n → ∃ p, Nat.Prime p ∧ p ∣ n) → ∀ n > 1, ∃ p, Nat.Prime p ∧ ∃ d, p * d = n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "82cb2e8514f1f346f837e9bedca83952637b520b289e4ee545f559abf135a3e9"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 89,
        "start_column": 124,
        "end_line": 89,
        "end_column": 129
      },
      "debug_info": {
        "goal": "⊢ (∀ n > 1, ∃ p, Nat.Prime p ∧ ∃ d, p * d = n) → ∀ {n : ℕ}, 1 < n → ∃ p, Nat.Prime p ∧ p ∣ n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "f093a45c38a98320b5490594ce6312df77ec2bf86616f34ed196bed0b45c2b16"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 98,
        "start_column": 310,
        "end_line": 98,
        "end_column": 315
      },
      "debug_info": {
        "goal": "⊢ (∀ {α : Type u_1} {β : Type u_2} [inst : Group α] [inst_1 : Group β] [inst_2 : Fintype α] [inst_3 : Fintype β]\n      {f : α → β}, IsGroupHom f → Function.Surjective f → Function.Injective f) →\n    ∀ {α : Type u} [inst : Finite α] (f : FreeGroup α → FreeGroup α),\n      IsGroupHom f → Function.Surjective f → Function.Injective f",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "003c141b7d015e3e5cb6dd3a8a60205c6878cd7820c7a004c806aade4c913631"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 99,
        "start_column": 310,
        "end_line": 99,
        "end_column": 315
      },
      "debug_info": {
        "goal": "⊢ (∀ {α : Type u} [inst : Finite α] (f : FreeGroup α → FreeGroup α),\n      IsGroupHom f → Function.Surjective f → Function.Injective f) →\n    ∀ {α : Type u_1} {β : Type u_2} [inst : Group α] [inst_1 : Group β] [inst_2 : Fintype α] [inst_3 : Fintype β]\n      {f : α → β}, IsGroupHom f → Function.Surjective f → Function.Injective f",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "c7dee68ddd88dedd3f20b275f0d2e27116494451a32583ca3f7381be7f072b99"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 102,
        "start_column": 167,
        "end_line": 102,
        "end_column": 172
      },
      "debug_info": {
        "goal": "⊢ (∀ {n : ℕ}, 0 < n → Even n → ∃ p q, Nat.Prime p ∧ Nat.Prime q ∧ p + q = n) →\n    ∀ n > 0, Even n → ∃ p q, Nat.Prime p → Nat.Prime q → n = p + q",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "8206c9aaa2fa9184f9c229d2222d0fb67551d4760e758efd5c07ed7c70960dc6"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 103,
        "start_column": 167,
        "end_line": 103,
        "end_column": 172
      },
      "debug_info": {
        "goal": "⊢ (∀ n > 0, Even n → ∃ p q, Nat.Prime p → Nat.Prime q → n = p + q) →\n    ∀ {n : ℕ}, 0 < n → Even n → ∃ p q, Nat.Prime p ∧ Nat.Prime q ∧ p + q = n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "47b0123095d16240592f5ebfd32ad9edbb62c2f285bf0b435506003ebb5c1a58"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 108,
        "start_column": 139,
        "end_line": 108,
        "end_column": 144
      },
      "debug_info": {
        "goal": "⊢ (∀ {M : Type u} [inst : Semiring M] [inst_1 : DecidableEq M] (a : M), Even (a * a) → Even a) →\n    ∀ (n : ℕ), Even (n ^ 2) → Even n",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "17f545e86ffb4cb8350a95be0e8c7d55b251c2a838fb8fd924b7a2911fb3ff6d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 109,
        "start_column": 139,
        "end_line": 109,
        "end_column": 144
      },
      "debug_info": {
        "goal": "⊢ (∀ (n : ℕ), Even (n ^ 2) → Even n) →\n    ∀ {M : Type u} [inst : Semiring M] [inst_1 : DecidableEq M] (a : M), Even (a * a) → Even a",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "f6af45e546f3cd9befe593e471508ca5c018cabbd6d0e38042d2911848f09f42"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 113,
        "start_column": 228,
        "end_line": 113,
        "end_column": 233
      },
      "debug_info": {
        "goal": "⊢ (∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α}, (∀ x ∈ s, ∃ t, IsOpen t ∧ x ∈ t) → IsOpen s) →\n    ∀ {X : Type u} [inst : TopologicalSpace X] (S : Set X), (∀ x ∈ S, ∃ U, IsOpen U) → IsOpen S",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "12eb71883f898de749d67714e9931c8181f4bd7dea68bb6913c9f81e7fc6728c"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 114,
        "start_column": 228,
        "end_line": 114,
        "end_column": 233
      },
      "debug_info": {
        "goal": "⊢ (∀ {X : Type u} [inst : TopologicalSpace X] (S : Set X), (∀ x ∈ S, ∃ U, IsOpen U) → IsOpen S) →\n    ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α}, (∀ x ∈ s, ∃ t, IsOpen t ∧ x ∈ t) → IsOpen s",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:02:22+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "6123f134b839694867bd942fcd7b4b38cc78fd3b2436461fdac58a8645d8b2d3"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 117,
        "start_column": 176,
        "end_line": 117,
        "end_column": 181
      },
      "debug_info": {
        "goal": "⊢ (∀ {α : Type u} [inst : DecidableEq α] {x : FreeGroup α}, x ≠ 1 → ¬IsOfFinOrder x) →\n    ∀ {G : Type u} [inst : Group G], FreeGroup G → ∀ (g : G), g ≠ 1 → orderOf g = 0",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "6bf20589b9981e30ae355ec982c65aca6e28295e85e601898344954a16b3aae0"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 118,
        "start_column": 176,
        "end_line": 118,
        "end_column": 181
      },
      "debug_info": {
        "goal": "⊢ (∀ {G : Type u} [inst : Group G], FreeGroup G → ∀ (g : G), g ≠ 1 → orderOf g = 0) →\n    ∀ {α : Type u} [inst : DecidableEq α] {x : FreeGroup α}, x ≠ 1 → ¬IsOfFinOrder x",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "99064a8e68711877876dac1419e217d62be230e3215a054baf2d12847be9993d"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 121,
        "start_column": 220,
        "end_line": 121,
        "end_column": 225
      },
      "debug_info": {
        "goal": "⊢ (∀ {m n : ℕ}, 0 < m → 0 < n → m.gcd n = 1 → ∀ N > m * n, ∃ x y, N = m * x + n * y) →\n    ∀ (a b : ℕ), a > 0 → b > 0 → a.Coprime b → ∃ m, ∀ N > m, ∃ x y, N = a * x + b * y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-02-07T16:00:51+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "61b5e1cead9ff13f2be61d51975ce0c7f12348d260397327ffb0bd5b64c04dbc"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 122,
        "start_column": 220,
        "end_line": 122,
        "end_column": 225
      },
      "debug_info": {
        "goal": "⊢ (∀ (a b : ℕ), a > 0 → b > 0 → a.Coprime b → ∃ m, ∀ N > m, ∃ x y, N = a * x + b * y) →\n    ∀ {m n : ℕ}, 0 < m → 0 < n → m.gcd n = 1 → ∀ N > m * n, ∃ x y, N = m * x + n * y",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L122"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2024-02-07T16:00:51+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "08c6247ca6908e5befdba1cae97f09f870a17a9f74746b4e376af43e3ceacc7b"
    },
    {
      "repo": {
        "remote": "https://github.com/siddhartha-gadgil/LeanAide",
        "branch": "main",
        "commit": "1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe",
        "lean_version": "v4.15.0"
      },
      "location": {
        "path": "LeanCodePrompts/Examples/EquivalenceProofExercises.lean",
        "start_line": 133,
        "start_column": 189,
        "end_line": 133,
        "end_column": 194
      },
      "debug_info": {
        "goal": "⊢ Unit →\n    ∀ {η : Type u_1} (G : Type u_2) [inst : Group G] {Γ : Type u_3} [inst_1 : Group Γ],\n      Monoid.IsTorsionFree (G × Γ) → Monoid.IsTorsionFree G ∧ Monoid.IsTorsionFree Γ",
        "url": "https://github.com/siddhartha-gadgil/LeanAide/blob/1eb0d986c5cdac3b342fe6373f5c3e7afa1cf0fe/LeanCodePrompts/Examples/EquivalenceProofExercises.lean#L133"
      },
      "metadata": {
        "blame_email_hash": "7b8d77610b35",
        "blame_date": "2022-11-12T11:31:19+05:30",
        "inclusion_date": "2025-05-25T06:35:07.061955+00:00"
      },
      "id": "6f7bdd694ad934042f57942c62247bbd21c90a3ddb60f28fe6eaef9e67733fdb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "8097ab391a0a372d4a4dd4babb1522d5ee163d3c6bde4c7cc06ddb3fcb1b72ca"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 95,
        "start_column": 2,
        "end_line": 95,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : ℕ\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 = FieldUtils.mod (Expression.eval env x_var) ⟨2 ^ ↑offset, ⋯⟩ ⋯ ∧\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)\nh0 : env.get i0 = FieldUtils.mod (Expression.eval env x_var) ⟨2 ^ ↑offset, ⋯⟩ ⋯\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)\n⊢ (ZMod.val (FieldUtils.mod (Expression.eval env x_var) ⟨2 ^ ↑offset, ⋯⟩ ⋯) < 2 ^ ↑offset.castSucc ∧\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)) < 2 ^ ↑(8 - offset.castSucc)) ∧\n    FieldUtils.mod (Expression.eval env x_var) ⟨2 ^ ↑offset, ⋯⟩ ⋯ +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset) * 2 ^ ↑offset +\n        -x =\n      0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-15T17:59:45+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "74b0c0d504d68ffe06c9e81635cd8db56a92bf63319a791d180d9b1b3b676f41"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 195,
        "start_column": 2,
        "end_line": 195,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case mk.mk\np : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : ℕ\nenv : Environment (F p)\nx0_var x1_var x2_var x3_var x4_var x5_var x6_var x7_var : Expression (F p)\nhenv :\n  env.uses_local_witnesses_completeness\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)\nx0 x1 x2 x3 x4 x5 x6 x7 : F p\nh_eval :\n  eval env\n      { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n        x7 := x7_var } =\n    { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }\nas : { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }.is_normalized\n⊢ Circuit.constraints_hold.completeness env\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L195"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-24T23:40:51+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "73c060cb0fd472613172b3ff5132443a0dc2fd810a47f40a983ce63af2a090ea"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\nx0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 x0_l x1_l x2_l x3_l x4_l x5_l x6_l x7_l x0_h x1_h x2_h x3_h x4_h x5_h x6_h x7_h :\n  F p\nh_x0_l : ZMod.val x0_l = ZMod.val x0 % 2 ^ ↑offset\nh_x0_h : ZMod.val x0_h = ZMod.val x0 / 2 ^ ↑offset\nh_x1_l : ZMod.val x1_l = ZMod.val x1 % 2 ^ ↑offset\nh_x1_h : ZMod.val x1_h = ZMod.val x1 / 2 ^ ↑offset\nh_x2_l : ZMod.val x2_l = ZMod.val x2 % 2 ^ ↑offset\nh_x2_h : ZMod.val x2_h = ZMod.val x2 / 2 ^ ↑offset\nh_x3_l : ZMod.val x3_l = ZMod.val x3 % 2 ^ ↑offset\nh_x3_h : ZMod.val x3_h = ZMod.val x3 / 2 ^ ↑offset\nh_x4_l : ZMod.val x4_l = ZMod.val x4 % 2 ^ ↑offset\nh_x4_h : ZMod.val x4_h = ZMod.val x4 / 2 ^ ↑offset\nh_x5_l : ZMod.val x5_l = ZMod.val x5 % 2 ^ ↑offset\nh_x5_h : ZMod.val x5_h = ZMod.val x5 / 2 ^ ↑offset\nh_x6_l : ZMod.val x6_l = ZMod.val x6 % 2 ^ ↑offset\nh_x6_h : ZMod.val x6_h = ZMod.val x6 / 2 ^ ↑offset\nh_x7_l : ZMod.val x7_l = ZMod.val x7 % 2 ^ ↑offset\nh_x7_h : ZMod.val x7_h = ZMod.val x7 / 2 ^ ↑offset\neq0 : x1_l * 2 ^ ↑offset + x0_h + -y0 = 0\neq1 : x2_l * 2 ^ ↑offset + x1_h + -y1 = 0\neq2 : x3_l * 2 ^ ↑offset + x2_h + -y2 = 0\neq3 : x4_l * 2 ^ ↑offset + x3_h + -y3 = 0\neq4 : x5_l * 2 ^ ↑offset + x4_h + -y4 = 0\neq5 : x6_l * 2 ^ ↑offset + x5_h + -y5 = 0\neq6 : x7_l * 2 ^ ↑offset + x6_h + -y6 = 0\neq7 : x0_l * 2 ^ ↑offset + x7_h + -y7 = 0\n⊢ let x_val :=\n    ZMod.val x0 + ZMod.val x1 * 256 + ZMod.val x2 * 256 ^ 2 + ZMod.val x3 * 256 ^ 3 + ZMod.val x4 * 256 ^ 4 +\n          ZMod.val x5 * 256 ^ 5 +\n        ZMod.val x6 * 256 ^ 6 +\n      ZMod.val x7 * 256 ^ 7;\n  let y_val :=\n    ZMod.val y0 + ZMod.val y1 * 256 + ZMod.val y2 * 256 ^ 2 + ZMod.val y3 * 256 ^ 3 + ZMod.val y4 * 256 ^ 4 +\n          ZMod.val y5 * 256 ^ 5 +\n        ZMod.val y6 * 256 ^ 6 +\n      ZMod.val y7 * 256 ^ 7;\n  y_val = x_val % 2 ^ (↑offset % 64) * 2 ^ (64 - ↑offset % 64) + x_val / 2 ^ (↑offset % 64)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:54:41+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "a50a19702be193017aab81d1c60fb20c59c881eadca862dc6cd9041bd478e6ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 144,
        "start_column": 2,
        "end_line": 144,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n⊢ Completeness (F p) (elaborated offset) assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T11:26:47+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "73640cd7f201a98d030dbe244c200522848e43f9a7ee96fa6af9dea3d47ffe50"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 22,
        "start_column": 2,
        "end_line": 22,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\nx : ℕ\nh : x < 2 ^ 64\noffset : ℕ\n⊢ rot_right64 x offset = (x.toUInt64.toBitVec.rotateRight offset).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Rotation64/Theorems.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "1912e3925aec2358a7bb54e558485e89c1aaec61cd47639f1b8a2d9671898a03"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 41,
        "start_column": 35,
        "end_line": 41,
        "end_column": 40
      },
      "debug_info": {
        "goal": "x n m : ℕ\nh : x < 2 ^ 64\n⊢ (x.toUInt64.toBitVec.rotateRight n).toNat < 2 ^ 64",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Rotation64/Theorems.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "ce86ac5539394d55d0e5994f28e12b300b27f073152424ea536d00e286111d97"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "x n m : ℕ\nh : x < 2 ^ 64\n⊢ ((x.toUInt64.toBitVec.rotateRight n).toNat.toUInt64.toBitVec.rotateRight m).toNat =\n    (x.toUInt64.toBitVec.rotateRight (n + m)).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Rotation64/Theorems.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T16:41:17+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "d4461c4d11105e17d9740fe6f0c7c49d3624d78fdccd88dd0b33db302d2ff16d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "blake3-blueprint",
        "commit": "c710c9904f3cdb6a70012542e1b7ca5642de15af",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 93,
        "start_column": 2,
        "end_line": 93,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[4]).is_normalized ∧\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[3])) ∧\n            (eval env state_var[1]).is_normalized ∧\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[4])) ∧\n        (eval env state_var[2]).is_normalized ∧\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[3]).is_normalized ∧\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c710c9904f3cdb6a70012542e1b7ca5642de15af/Clean/Gadgets/Keccak/ThetaD.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-05-25T07:11:19.300056+00:00"
      },
      "id": "c97b72c6c746ca6a5cf69a3d0da4c36e62d4fb22f473375a9f93a0b3fcb8ef12"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "2a9cce597350811fd269adf6d8e4e4c4ae99300193c4882c78bc7771a7114848"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 95,
        "start_column": 2,
        "end_line": 95,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : ℕ\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 =\n      FieldUtils.mod (Expression.eval env x_var)\n        ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n        (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) ∧\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)\nh0 :\n  env.get i0 =\n    FieldUtils.mod (Expression.eval env x_var)\n      ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n      (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)\n⊢ (ZMod.val\n          (FieldUtils.mod (Expression.eval env x_var)\n            ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)) <\n        2 ^ ↑offset.castSucc ∧\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)) < 2 ^ ↑(8 - offset.castSucc)) ∧\n    FieldUtils.mod (Expression.eval env x_var)\n            ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset) * 2 ^ ↑offset +\n        -x =\n      0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-15T17:59:45+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "d7983fa3e1abb030a8a9e99cbb816b71646853b67f43c16883fd7e3e5587133c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 195,
        "start_column": 2,
        "end_line": 195,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case mk.mk\np : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : ℕ\nenv : Environment (F p)\nx0_var x1_var x2_var x3_var x4_var x5_var x6_var x7_var : Expression (F p)\nhenv :\n  env.uses_local_witnesses_completeness\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)\nx0 x1 x2 x3 x4 x5 x6 x7 : F p\nh_eval :\n  eval env\n      { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n        x7 := x7_var } =\n    { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }\nas : { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }.is_normalized\n⊢ Circuit.constraints_hold.completeness env\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L195"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-24T23:40:51+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "dc4de1a6ae95bfc3269f28aa8de5b5a0e3c447b4ca01d5eebb262fd855c9be29"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\nx0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 x0_l x1_l x2_l x3_l x4_l x5_l x6_l x7_l x0_h x1_h x2_h x3_h x4_h x5_h x6_h x7_h :\n  F p\nh_x0_l : ZMod.val x0_l = ZMod.val x0 % 2 ^ ↑offset\nh_x0_h : ZMod.val x0_h = ZMod.val x0 / 2 ^ ↑offset\nh_x1_l : ZMod.val x1_l = ZMod.val x1 % 2 ^ ↑offset\nh_x1_h : ZMod.val x1_h = ZMod.val x1 / 2 ^ ↑offset\nh_x2_l : ZMod.val x2_l = ZMod.val x2 % 2 ^ ↑offset\nh_x2_h : ZMod.val x2_h = ZMod.val x2 / 2 ^ ↑offset\nh_x3_l : ZMod.val x3_l = ZMod.val x3 % 2 ^ ↑offset\nh_x3_h : ZMod.val x3_h = ZMod.val x3 / 2 ^ ↑offset\nh_x4_l : ZMod.val x4_l = ZMod.val x4 % 2 ^ ↑offset\nh_x4_h : ZMod.val x4_h = ZMod.val x4 / 2 ^ ↑offset\nh_x5_l : ZMod.val x5_l = ZMod.val x5 % 2 ^ ↑offset\nh_x5_h : ZMod.val x5_h = ZMod.val x5 / 2 ^ ↑offset\nh_x6_l : ZMod.val x6_l = ZMod.val x6 % 2 ^ ↑offset\nh_x6_h : ZMod.val x6_h = ZMod.val x6 / 2 ^ ↑offset\nh_x7_l : ZMod.val x7_l = ZMod.val x7 % 2 ^ ↑offset\nh_x7_h : ZMod.val x7_h = ZMod.val x7 / 2 ^ ↑offset\neq0 : x1_l * 2 ^ ↑offset + x0_h + -y0 = 0\neq1 : x2_l * 2 ^ ↑offset + x1_h + -y1 = 0\neq2 : x3_l * 2 ^ ↑offset + x2_h + -y2 = 0\neq3 : x4_l * 2 ^ ↑offset + x3_h + -y3 = 0\neq4 : x5_l * 2 ^ ↑offset + x4_h + -y4 = 0\neq5 : x6_l * 2 ^ ↑offset + x5_h + -y5 = 0\neq6 : x7_l * 2 ^ ↑offset + x6_h + -y6 = 0\neq7 : x0_l * 2 ^ ↑offset + x7_h + -y7 = 0\n⊢ let x_val :=\n    ZMod.val x0 + ZMod.val x1 * 256 + ZMod.val x2 * 256 ^ 2 + ZMod.val x3 * 256 ^ 3 + ZMod.val x4 * 256 ^ 4 +\n          ZMod.val x5 * 256 ^ 5 +\n        ZMod.val x6 * 256 ^ 6 +\n      ZMod.val x7 * 256 ^ 7;\n  let y_val :=\n    ZMod.val y0 + ZMod.val y1 * 256 + ZMod.val y2 * 256 ^ 2 + ZMod.val y3 * 256 ^ 3 + ZMod.val y4 * 256 ^ 4 +\n          ZMod.val y5 * 256 ^ 5 +\n        ZMod.val y6 * 256 ^ 6 +\n      ZMod.val y7 * 256 ^ 7;\n  y_val = x_val % 2 ^ (↑offset % 64) * 2 ^ (64 - ↑offset % 64) + x_val / 2 ^ (↑offset % 64)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:54:41+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "d5e1afefdf997b9b687f765f5274e2839c77eeeb4f98a20e70201f75e814c589"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 144,
        "start_column": 2,
        "end_line": 144,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n⊢ Completeness (F p) (Gadgets.Rotation64Bits.elaborated p inst✝ p_large_enough offset)\n    (Gadgets.Rotation64Bits.assumptions p)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T11:26:47+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "8e689c9816f9f3d79c3cedaa41879ed3b5acd492d487cafd4118b02d79825621"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 22,
        "start_column": 2,
        "end_line": 22,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\nx : ℕ\nh : x < 2 ^ 64\noffset : ℕ\n⊢ rot_right64 x offset = (x.toUInt64.toBitVec.rotateRight offset).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Gadgets/Rotation64/Theorems.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "aecc9fe20c19e72f1cf62b54eeba49a666bd5bc62cf17f4dad96abac017b85d2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 41,
        "start_column": 35,
        "end_line": 41,
        "end_column": 40
      },
      "debug_info": {
        "goal": "x n m : ℕ\nh : x < 2 ^ 64\n⊢ (x.toUInt64.toBitVec.rotateRight n).toNat < 2 ^ 64",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Gadgets/Rotation64/Theorems.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "4fa398c0523f55da0acc21f803a53a72a1dcfe98849cc6469e568abdd6a8f629"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "x n m : ℕ\nh : x < 2 ^ 64\n⊢ ((x.toUInt64.toBitVec.rotateRight n).toNat.toUInt64.toBitVec.rotateRight m).toNat =\n    (x.toUInt64.toBitVec.rotateRight (n + m)).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Gadgets/Rotation64/Theorems.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T16:41:17+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "05ca8111b62f5df38444e6c2448dbca7983b5a444f5262c6948e9a61e75fc9ae"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "main",
        "commit": "33507f95147129a8247200412ff54918a1b86aca",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 93,
        "start_column": 2,
        "end_line": 93,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : Gadgets.Keccak256.ThetaD.assumptions p state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[4]).is_normalized ∧\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[3])) ∧\n            (eval env state_var[1]).is_normalized ∧\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[4])) ∧\n        (eval env state_var[2]).is_normalized ∧\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[3]).is_normalized ∧\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33507f95147129a8247200412ff54918a1b86aca/Clean/Gadgets/Keccak/ThetaD.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-05-25T07:17:20.474607+00:00"
      },
      "id": "635d846d1f280ea2c39cd51fd0008f3f7ac2a10f5358d49ee2e2282ca38a863a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "b8d8915e1588e87dd2c5b535db1142f4d83a4f1d3a625a8922a41fe00d30adaf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 57,
        "start_column": 4,
        "end_line": 57,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : ℕ\nprime : Fact (Nat.Prime p)\nn k : ℕ\nenv : Environment (F p)\nx_var : Var field (F p)\nx : field (F p)\nh_input : Expression.eval env x_var = x\nh_assumptions : ZMod.val x < 2 ^ n\nh_holds :\n  match\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.offset,\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.withLength,\n    (Equality.circuit id).to_subcircuit\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.offset\n      (x_var, Fin.foldl n (fun acc x => acc + var { index := k + ↑x } * Expression.const (2 ^ ↑x)) 0) with\n  | m, Operations.empty .(m), s =>\n    Expression.eval env x_var =\n      Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + ↑x } * Expression.const (2 ^ ↑x)) 0)\n  | x, x_1, s =>\n    Circuit.constraints_hold.soundness env\n        (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n              (fun bit =>\n                StateT.modifyGet fun s =>\n                  (PUnit.unit,\n                    { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                      withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n              (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                (Gadgets.ToBits.main._proof_3 p prime))\n              { offset := k + n,\n                withLength :=\n                  (Operations.empty k).witness n fun eval =>\n                    Vector.ofFn fun i =>\n                      if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.withLength ∧\n      Expression.eval env x_var =\n        Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + ↑x } * Expression.const (2 ^ ↑x)) 0)\n⊢ ∀ i < n, env.get (k + i) = if (ZMod.val x).testBit i = true then 1 else 0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Bits.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-23T17:56:13+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "b0c6b16f96678fba0d31f695cf18f4aef9fca34891abab9e89999a8e1020e98a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Bits.lean",
        "start_line": 62,
        "start_column": 4,
        "end_line": 62,
        "end_column": 9
      },
      "debug_info": {
        "goal": "p : ℕ\nprime : Fact (Nat.Prime p)\nn k : ℕ\nenv : Environment (F p)\nx_var : Var field (F p)\nx : field (F p)\nh_input : Expression.eval env x_var = x\nh_assumptions : ZMod.val x < 2 ^ n\nh_env :\n  env.uses_local_witnesses_completeness\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.withLength ∧\n    ((Equality.circuit id).to_subcircuit\n          (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n                (fun bit =>\n                  StateT.modifyGet fun s =>\n                    (PUnit.unit,\n                      { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                        withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n                (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                  (Gadgets.ToBits.main._proof_3 p prime))\n                { offset := k + n,\n                  withLength :=\n                    (Operations.empty k).witness n fun eval =>\n                      Vector.ofFn fun i =>\n                        if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.offset\n          (x_var,\n            Fin.foldl n (fun acc x => acc + var { index := k + ↑x } * Expression.const (2 ^ ↑x))\n              0)).uses_local_witnesses\n      env\n⊢ match\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.offset,\n    (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n          (fun bit =>\n            StateT.modifyGet fun s =>\n              (PUnit.unit,\n                { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                  withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n          (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance) (Gadgets.ToBits.main._proof_3 p prime))\n          { offset := k + n,\n            withLength :=\n              (Operations.empty k).witness n fun eval =>\n                Vector.ofFn fun i =>\n                  if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.withLength,\n    (Equality.circuit id).to_subcircuit\n      (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n            (fun bit =>\n              StateT.modifyGet fun s =>\n                (PUnit.unit,\n                  { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                    withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n            (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n              (Gadgets.ToBits.main._proof_3 p prime))\n            { offset := k + n,\n              withLength :=\n                (Operations.empty k).witness n fun eval =>\n                  Vector.ofFn fun i =>\n                    if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.offset\n      (x_var, Fin.foldl n (fun acc x => acc + var { index := k + ↑x } * Expression.const (2 ^ ↑x)) 0) with\n  | m, Operations.empty .(m), s =>\n    Expression.eval env x_var =\n      Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + ↑x } * Expression.const (2 ^ ↑x)) 0)\n  | x, x_1, s =>\n    Circuit.constraints_hold.completeness env\n        (Circuit.forEach (Vector.mapRange n fun i => var { index := k + i })\n              (fun bit =>\n                StateT.modifyGet fun s =>\n                  (PUnit.unit,\n                    { offset := s.offset + ElaboratedCircuit.local_length unit bit,\n                      withLength := s.withLength.subcircuit (Boolean.circuit.to_subcircuit s.offset bit) }))\n              (ConstantLawfulCircuits.from_constant_length (fun a => inferInstance)\n                (Gadgets.ToBits.main._proof_3 p prime))\n              { offset := k + n,\n                withLength :=\n                  (Operations.empty k).witness n fun eval =>\n                    Vector.ofFn fun i =>\n                      if (ZMod.val (Expression.eval eval x_var)).testBit ↑i = true then 1 else 0 }).2.withLength ∧\n      Expression.eval env x_var =\n        Expression.eval env (Fin.foldl n (fun acc x => acc + var { index := k + ↑x } * Expression.const (2 ^ ↑x)) 0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Bits.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-05-23T17:56:13+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "7d551fb92a802b27274735eb877a266592b6e82182d7e6a094ec0794db89aabe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 95,
        "start_column": 2,
        "end_line": 95,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : ℕ\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 =\n      FieldUtils.mod (Expression.eval env x_var)\n        ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n        (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) ∧\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)\nh0 :\n  env.get i0 =\n    FieldUtils.mod (Expression.eval env x_var)\n      ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n      (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)\n⊢ (ZMod.val\n          (FieldUtils.mod (Expression.eval env x_var)\n            ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)) <\n        2 ^ ↑offset.castSucc ∧\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)) < 2 ^ ↑(8 - offset.castSucc)) ∧\n    FieldUtils.mod (Expression.eval env x_var)\n            ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset) * 2 ^ ↑offset +\n        -x =\n      0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-15T17:59:45+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "bae1c33ced5126bee31edffd52c522126ebd5a06aa08cadb34d455931776ec0d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 195,
        "start_column": 2,
        "end_line": 195,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case mk.mk\np : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : ℕ\nenv : Environment (F p)\nx0_var x1_var x2_var x3_var x4_var x5_var x6_var x7_var : Expression (F p)\nhenv :\n  env.uses_local_witnesses_completeness\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)\nx0 x1 x2 x3 x4 x5 x6 x7 : F p\nh_eval :\n  eval env\n      { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n        x7 := x7_var } =\n    { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }\nas : { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }.is_normalized\n⊢ Circuit.constraints_hold.completeness env\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L195"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-24T23:40:51+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "d24c26eef6e00682f53a7fb04de136b980f0fdc3da88fc94d64cceda0a38e436"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\nx0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 x0_l x1_l x2_l x3_l x4_l x5_l x6_l x7_l x0_h x1_h x2_h x3_h x4_h x5_h x6_h x7_h :\n  F p\nh_x0_l : ZMod.val x0_l = ZMod.val x0 % 2 ^ ↑offset\nh_x0_h : ZMod.val x0_h = ZMod.val x0 / 2 ^ ↑offset\nh_x1_l : ZMod.val x1_l = ZMod.val x1 % 2 ^ ↑offset\nh_x1_h : ZMod.val x1_h = ZMod.val x1 / 2 ^ ↑offset\nh_x2_l : ZMod.val x2_l = ZMod.val x2 % 2 ^ ↑offset\nh_x2_h : ZMod.val x2_h = ZMod.val x2 / 2 ^ ↑offset\nh_x3_l : ZMod.val x3_l = ZMod.val x3 % 2 ^ ↑offset\nh_x3_h : ZMod.val x3_h = ZMod.val x3 / 2 ^ ↑offset\nh_x4_l : ZMod.val x4_l = ZMod.val x4 % 2 ^ ↑offset\nh_x4_h : ZMod.val x4_h = ZMod.val x4 / 2 ^ ↑offset\nh_x5_l : ZMod.val x5_l = ZMod.val x5 % 2 ^ ↑offset\nh_x5_h : ZMod.val x5_h = ZMod.val x5 / 2 ^ ↑offset\nh_x6_l : ZMod.val x6_l = ZMod.val x6 % 2 ^ ↑offset\nh_x6_h : ZMod.val x6_h = ZMod.val x6 / 2 ^ ↑offset\nh_x7_l : ZMod.val x7_l = ZMod.val x7 % 2 ^ ↑offset\nh_x7_h : ZMod.val x7_h = ZMod.val x7 / 2 ^ ↑offset\neq0 : x1_l * 2 ^ ↑offset + x0_h + -y0 = 0\neq1 : x2_l * 2 ^ ↑offset + x1_h + -y1 = 0\neq2 : x3_l * 2 ^ ↑offset + x2_h + -y2 = 0\neq3 : x4_l * 2 ^ ↑offset + x3_h + -y3 = 0\neq4 : x5_l * 2 ^ ↑offset + x4_h + -y4 = 0\neq5 : x6_l * 2 ^ ↑offset + x5_h + -y5 = 0\neq6 : x7_l * 2 ^ ↑offset + x6_h + -y6 = 0\neq7 : x0_l * 2 ^ ↑offset + x7_h + -y7 = 0\n⊢ let x_val :=\n    ZMod.val x0 + ZMod.val x1 * 256 + ZMod.val x2 * 256 ^ 2 + ZMod.val x3 * 256 ^ 3 + ZMod.val x4 * 256 ^ 4 +\n          ZMod.val x5 * 256 ^ 5 +\n        ZMod.val x6 * 256 ^ 6 +\n      ZMod.val x7 * 256 ^ 7;\n  let y_val :=\n    ZMod.val y0 + ZMod.val y1 * 256 + ZMod.val y2 * 256 ^ 2 + ZMod.val y3 * 256 ^ 3 + ZMod.val y4 * 256 ^ 4 +\n          ZMod.val y5 * 256 ^ 5 +\n        ZMod.val y6 * 256 ^ 6 +\n      ZMod.val y7 * 256 ^ 7;\n  y_val = x_val % 2 ^ (↑offset % 64) * 2 ^ (64 - ↑offset % 64) + x_val / 2 ^ (↑offset % 64)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:54:41+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "ac952f7e914985efa6c5ea4ed5e46ebfa4eaea88b22dbc67006beb691006d96b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 144,
        "start_column": 2,
        "end_line": 144,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n⊢ Completeness (F p) (Gadgets.Rotation64Bits.elaborated p inst✝ p_large_enough offset)\n    (Gadgets.Rotation64Bits.assumptions p)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T11:26:47+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "d778d6f53a2ca6d434e24f5839b74d6703ab919d651b9a747f65f5d4d3deba78"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 22,
        "start_column": 2,
        "end_line": 22,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\nx : ℕ\nh : x < 2 ^ 64\noffset : ℕ\n⊢ rot_right64 x offset = (x.toUInt64.toBitVec.rotateRight offset).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Rotation64/Theorems.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "0ae68486d5ab0d0867e0c851276992357719b505854f05ea436c53a8c75a382d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 41,
        "start_column": 35,
        "end_line": 41,
        "end_column": 40
      },
      "debug_info": {
        "goal": "x n m : ℕ\nh : x < 2 ^ 64\n⊢ (x.toUInt64.toBitVec.rotateRight n).toNat < 2 ^ 64",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Rotation64/Theorems.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:55:07+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "9df668f2fbf95b90ce0afe9bd3e5cb03e0316e52b387663e782bbb2eef95d08a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "x n m : ℕ\nh : x < 2 ^ 64\n⊢ ((x.toUInt64.toBitVec.rotateRight n).toNat.toUInt64.toBitVec.rotateRight m).toNat =\n    (x.toUInt64.toBitVec.rotateRight (n + m)).toNat",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Rotation64/Theorems.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T16:41:17+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "fe5ad8cd95a86323386f86d2993de86f5e26928ea04f088823e86cc8820d4d49"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "num2bits",
        "commit": "fe70fa95eb5c5d39b68d32d50e62318a233c082b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 93,
        "start_column": 2,
        "end_line": 93,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : Gadgets.Keccak256.ThetaD.assumptions p state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[4]).is_normalized ∧\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[3])) ∧\n            (eval env state_var[1]).is_normalized ∧\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[4])) ∧\n        (eval env state_var[2]).is_normalized ∧\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[3]).is_normalized ∧\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/fe70fa95eb5c5d39b68d32d50e62318a233c082b/Clean/Gadgets/Keccak/ThetaD.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-05-25T07:22:18.332874+00:00"
      },
      "id": "56550c2a5393e69d86ec84dea40d3e66011bb3ecd981f10796c2f77bcb3dddbc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "f0c5f0a21b04be6c4c327e368d92dbc7bdbb4f0c9811904a8f43fcb0da7a3e2b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 95,
        "start_column": 2,
        "end_line": 95,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : ℕ\nenv : Environment (F p)\nx_var : Var field (F p)\nx : F p\nh_eval : Expression.eval env x_var = x\nas : ZMod.val x < 256\nhenv :\n  env.get i0 =\n      FieldUtils.mod (Expression.eval env x_var)\n        ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n        (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) ∧\n    env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)\nh0 :\n  env.get i0 =\n    FieldUtils.mod (Expression.eval env x_var)\n      ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n      (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)\nh1 : env.get (i0 + 1) = FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)\n⊢ (ZMod.val\n          (FieldUtils.mod (Expression.eval env x_var)\n            ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset)) <\n        2 ^ ↑offset.castSucc ∧\n      ZMod.val (FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset)) < 2 ^ ↑(8 - offset.castSucc)) ∧\n    FieldUtils.mod (Expression.eval env x_var)\n            ⟨2 ^ ↑offset, Gadgets.ByteDecomposition.byte_decomposition._proof_4 offset⟩\n            (Gadgets.ByteDecomposition.byte_decomposition._proof_5 p p_large_enough offset) +\n          FieldUtils.floordiv (Expression.eval env x_var) (2 ^ ↑offset) * 2 ^ ↑offset +\n        -x =\n      0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-15T17:59:45+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "127cc9d60b9cb0a8be3ae8aa5284652ef4b664efdc1b71c796658603b2306669"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean",
        "start_line": 195,
        "start_column": 2,
        "end_line": 195,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case mk.mk\np : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\ni0 : ℕ\nenv : Environment (F p)\nx0_var x1_var x2_var x3_var x4_var x5_var x6_var x7_var : Expression (F p)\nhenv :\n  env.uses_local_witnesses_completeness\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)\nx0 x1 x2 x3 x4 x5 x6 x7 : F p\nh_eval :\n  eval env\n      { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n        x7 := x7_var } =\n    { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }\nas : { x0 := x0, x1 := x1, x2 := x2, x3 := x3, x4 := x4, x5 := x5, x6 := x6, x7 := x7 }.is_normalized\n⊢ Circuit.constraints_hold.completeness env\n    ((ElaboratedCircuit.main\n          { x0 := x0_var, x1 := x1_var, x2 := x2_var, x3 := x3_var, x4 := x4_var, x5 := x5_var, x6 := x6_var,\n            x7 := x7_var }).operations\n      i0)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/ByteDecomposition/ByteDecomposition.lean#L195"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-24T23:40:51+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "92c463ac250db2dcc2d407c28901fa9cf443a7c2481d3b0a6231e726353431fb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\nx0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 x0_l x1_l x2_l x3_l x4_l x5_l x6_l x7_l x0_h x1_h x2_h x3_h x4_h x5_h x6_h x7_h :\n  F p\nh_x0_l : ZMod.val x0_l = ZMod.val x0 % 2 ^ ↑offset\nh_x0_h : ZMod.val x0_h = ZMod.val x0 / 2 ^ ↑offset\nh_x1_l : ZMod.val x1_l = ZMod.val x1 % 2 ^ ↑offset\nh_x1_h : ZMod.val x1_h = ZMod.val x1 / 2 ^ ↑offset\nh_x2_l : ZMod.val x2_l = ZMod.val x2 % 2 ^ ↑offset\nh_x2_h : ZMod.val x2_h = ZMod.val x2 / 2 ^ ↑offset\nh_x3_l : ZMod.val x3_l = ZMod.val x3 % 2 ^ ↑offset\nh_x3_h : ZMod.val x3_h = ZMod.val x3 / 2 ^ ↑offset\nh_x4_l : ZMod.val x4_l = ZMod.val x4 % 2 ^ ↑offset\nh_x4_h : ZMod.val x4_h = ZMod.val x4 / 2 ^ ↑offset\nh_x5_l : ZMod.val x5_l = ZMod.val x5 % 2 ^ ↑offset\nh_x5_h : ZMod.val x5_h = ZMod.val x5 / 2 ^ ↑offset\nh_x6_l : ZMod.val x6_l = ZMod.val x6 % 2 ^ ↑offset\nh_x6_h : ZMod.val x6_h = ZMod.val x6 / 2 ^ ↑offset\nh_x7_l : ZMod.val x7_l = ZMod.val x7 % 2 ^ ↑offset\nh_x7_h : ZMod.val x7_h = ZMod.val x7 / 2 ^ ↑offset\neq0 : x1_l * 2 ^ ↑offset + x0_h + -y0 = 0\neq1 : x2_l * 2 ^ ↑offset + x1_h + -y1 = 0\neq2 : x3_l * 2 ^ ↑offset + x2_h + -y2 = 0\neq3 : x4_l * 2 ^ ↑offset + x3_h + -y3 = 0\neq4 : x5_l * 2 ^ ↑offset + x4_h + -y4 = 0\neq5 : x6_l * 2 ^ ↑offset + x5_h + -y5 = 0\neq6 : x7_l * 2 ^ ↑offset + x6_h + -y6 = 0\neq7 : x0_l * 2 ^ ↑offset + x7_h + -y7 = 0\n⊢ let x_val :=\n    ZMod.val x0 + ZMod.val x1 * 256 + ZMod.val x2 * 256 ^ 2 + ZMod.val x3 * 256 ^ 3 + ZMod.val x4 * 256 ^ 4 +\n          ZMod.val x5 * 256 ^ 5 +\n        ZMod.val x6 * 256 ^ 6 +\n      ZMod.val x7 * 256 ^ 7;\n  let y_val :=\n    ZMod.val y0 + ZMod.val y1 * 256 + ZMod.val y2 * 256 ^ 2 + ZMod.val y3 * 256 ^ 3 + ZMod.val y4 * 256 ^ 4 +\n          ZMod.val y5 * 256 ^ 5 +\n        ZMod.val y6 * 256 ^ 6 +\n      ZMod.val y7 * 256 ^ 7;\n  y_val = x_val % 2 ^ (↑offset % 64) * 2 ^ (64 - ↑offset % 64) + x_val / 2 ^ (↑offset % 64)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-14T10:54:41+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "c9e16c0b63930228ef71dd642a19a2b3ffa6699bd90e5c1434e05d80ce1d12d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64Bits.lean",
        "start_line": 144,
        "start_column": 2,
        "end_line": 144,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noffset : Fin 8\n⊢ Completeness (F p) (Gadgets.Rotation64Bits.elaborated p inst✝ p_large_enough offset)\n    (Gadgets.Rotation64Bits.assumptions p)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Rotation64/Rotation64Bits.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T11:26:47+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "bd8387a907616e161be344739409e09b7e1e8de60b885c75a7918f05ff363db3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Theorems.lean",
        "start_line": 171,
        "start_column": 2,
        "end_line": 171,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case pred\nx n m : ℕ\nh : x < 2 ^ 64\nx' : BitVec 64 := BitVec.ofNat 64 x\ni : ℕ\nhi : i < 64\n⊢ (bif decide (i < 64 - m % 64) then (x'.rotateRight n).getLsbD (m % 64 + i)\n    else decide (i < 64) && (x'.rotateRight n).getLsbD (i - (64 - m % 64))) =\n    (x'.rotateRight (n + m)).getLsbD i",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Rotation64/Theorems.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-05-13T16:41:17+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "92720eb8e709c6b9c2a459d883b49596c566037fee15e7d4bd4ccd504dc98fe6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "rotation-composition",
        "commit": "c28f35fab01a83f0942f37eb0ecd41b149b59dfd",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 93,
        "start_column": 2,
        "end_line": 93,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : Gadgets.Keccak256.ThetaD.assumptions p state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[4]).is_normalized ∧\n                      (eval env (ElaboratedCircuit.output state_var[1] i0)).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧\n                  (eval env\n                      (ElaboratedCircuit.output state_var[2]\n                        (i0 + (ElaboratedCircuit.local_length U64 state_var[1] + 8)))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[3])) ∧\n            (eval env state_var[1]).is_normalized ∧\n              (eval env\n                  (ElaboratedCircuit.output state_var[3]\n                    (i0 +\n                      (ElaboratedCircuit.local_length U64 state_var[1] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[2] + 8)))))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[4])) ∧\n        (eval env state_var[2]).is_normalized ∧\n          (eval env\n              (ElaboratedCircuit.output state_var[4]\n                (i0 +\n                  (ElaboratedCircuit.local_length U64 state_var[1] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[2] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[3] + 8)))))))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[3]).is_normalized ∧\n      (eval env\n          (ElaboratedCircuit.output state_var[0]\n            (i0 +\n              (ElaboratedCircuit.local_length U64 state_var[1] +\n                (8 +\n                  (ElaboratedCircuit.local_length U64 state_var[2] +\n                    (8 +\n                      (ElaboratedCircuit.local_length U64 state_var[3] +\n                        (8 + (ElaboratedCircuit.local_length U64 state_var[4] + 8)))))))))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c28f35fab01a83f0942f37eb0ecd41b149b59dfd/Clean/Gadgets/Keccak/ThetaD.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-05-25T07:25:38.579713+00:00"
      },
      "id": "53272a8b2423e13b5b7dd30af589c356cedbed90cedc541a0621ed68ed50056e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 62,
        "start_column": 9,
        "end_line": 62,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → OracleInterface (OStatement i)\nWitEquiv : Type\ninst✝ : OracleInterface WitEquiv\nequiv : Witness ≃ WitEquiv\n⊢ ∀ (i : ιₛᵢ ⊕ Unit),\n    (OStatement ⊕ᵥ fun x => WitEquiv) i =\n      match (⋯.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "97aa16f9a8af4f414c4128b572e9e6a19fbd44cd675108fc3610e421ab8bd6bc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 80,
        "start_column": 2,
        "end_line": 80,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝² : (i : ιₛᵢ) → OracleInterface (OStatement i)\nWitEquiv : Type\ninst✝¹ : OracleInterface WitEquiv\nequiv : Witness ≃ WitEquiv\nrelIn : Statement × ((i : ιₛᵢ) → OStatement i) → Witness → Prop\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "dbcc645bb6f878d24f46fc861fa646b55f514e691bb48d6d2a6e90ce49e71266"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 141,
        "start_column": 9,
        "end_line": 141,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst : (i : ιₛᵢ) → OracleInterface (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\n⊢ ∀ (i : ιₛᵢ ⊕ ιₛᵢ),\n    (OStatement ⊕ᵥ OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "773e371970a6e26ff0c722aaf561c13030bb4f6324f2a983ba22dcedf407e40d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 167,
        "start_column": 2,
        "end_line": 167,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝¹ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst : (i : ιₛᵢ) → OracleInterface (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L167"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "191e218863e97da77bda846402aeee2b1610bccf7e0c5c43a204eca965d0a659"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 259,
        "start_column": 2,
        "end_line": 259,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nOStatement : Type\ninst✝¹ : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Components.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1d32f3467a459ffcceaf7a9ece9c7d1d4634a1b70f860a47fbf74f80ea9fe8df"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let a ← (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ← Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "568e916ecdea4ca421599b43c67580d82ecd96d04cbfddd9964b37d6e7c74af6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst✝ : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let __discr ←\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => a.1)) <$>\n            (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++ₒ [pSpec.Challenge]ₒ)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ←\n      (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | ⟨0, isLt⟩ => __discr.1).liftComp\n        (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "0b7d3ffdef348d6460dbe6ea9c5c933d52ed63bc57ad329cc074b4b047402918"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ (do\n      let _ ← liftM (query 0 ())\n      (fun a => (0, ↑a)) <$> liftM (query 1 ())) =\n    do\n    let y ← liftM (query 1 ())\n    (fun a => (0, ↑y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "406094b9410945b7e6600a76bcde633e22cafbbd017a467b6589e97d0e403b92"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n⊢ (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a)))) none =\n    ∑' (a : Fin 2), 2⁻¹ * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a_1 => (0, ↑a)))) none",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "010a142f2fc1d7120f339242e7c6ac921f03255b89f4773afe00a0d32d413c84"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : ℕ\n⊢ (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a => (0, ↑y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e052439bf7a39b741849f6e695853803a1b56415d83d777da01275b2cd549b5b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : ℕ) → unifSpec.domain i → Fin (i + 1)\n⊢ (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun x => (fun a => (0, ↑a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun y => (fun a => (0, ↑y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "238bac9dd107b01e75d2fd774a16c7ede373d3bfb45becbd47fe903b7433d6a7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 312,
        "start_column": 2,
        "end_line": 312,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝⁵ : CommRing R\nd : ℕ\ninst✝⁴ : Fintype R\ninst✝³ : DecidableEq R\ninst✝² : IsDomain R\nσ : Type\ninst✝¹ : Fintype σ\ninst✝ : DecidableEq σ\na : R[X σ]\nha : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s a = 0 → ∀ (i : σ), s i ≤ d\nb : R[X σ]\nhb : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s b = 0 → ∀ (i : σ), s i ≤ d\nhNe : ¬a = b\n⊢ {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card ≤ Fintype.card σ * d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/OracleInterface.lean#L312"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "466ceb2e8a9afb46f22708412c1b38c4d73ff7939f912f485a81ab77ca9b4871"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 351,
        "start_column": 2,
        "end_line": 351,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nR : Type\ninst✝ : CommSemiring R\nm : ℕ\nD : Fin m ↪ R\np : R[X]\n⊢ ∃ x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {α} =>\n          (statelessOracle spec [fun x => R[X]]ₒ fun i q => oracle p q).impl) =\n        pure x ∧\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/OracleInterface.lean#L351"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "87e932ac9c431c5a841c8f23f707b86e2603cef6c3ba446def1e676209a21ce7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Transform/FiatShamir.lean",
        "start_line": 130,
        "start_column": 66,
        "end_line": 130,
        "end_column": 71
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝⁴ : VCVCompatible StmtIn\ninst✝³ : (i : Fin n) → VCVCompatible (pSpec i).2\ninst✝² : DecidableEq ι\ninst✝¹ : oSpec.FiniteRange\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\ncompletenessError : ℝ≥0\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ Reduction.completeness relIn relOut R completenessError →\n    Reduction.completeness relIn relOut R.fiatShamir completenessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Transform/FiatShamir.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-06T23:33:56-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "be469d7e55aea58ba3ae87928d7217273f7ebdcf64b482edbabdf03ecfc51ed2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).1.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "2c5c59d0a0d95590e3f09c94073c3204f524bdb56c398f439802847ab3a2449e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).2.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e147048be72f759311af06deb9b0abe77cef8ecb09fb43af7bd5363022418fe4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pEven ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "abd32a2462082659bc6718289b097b3e6e39175fd7f9c823b94292b02da7388d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pOdd ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "07bdac06e3f99ca0f4f31961ed90ff433cb15866257ea17547733ef66bae571d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\nα : Type\ninst✝² : DecidableEq α\ninst✝¹ : Inhabited α\ninst✝ : Fintype α\nhash : α × α → α\nn : ℕ\nih :\n  ∀ (leaves : List.Vector α (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function α hash)\n        (do\n          let cache ← buildMerkleTree α n leaves\n          let proof : List.Vector α n := generateProof α i cache\n          verifyProof α i leaves[i] (getRoot α cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector α (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n⊢ ((((Option.elimM (OptionT.run (buildMerkleTree α (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run ∘ fun cache =>\n                verifyProof α i (leaves.get i) (getRoot α cache) (generateProof α i cache))).mapM\n          fun {α_1} q =>\n          match α_1, q with\n          | .((spec α).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "d12410bcb99b6142a6622c964a0336184ee8966c679e85fa74b28674f0ee094c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 160,
        "start_column": 2,
        "end_line": 160,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝² : Fact (Nat.Prime p)\nG₁ : Type u_2\ninst✝¹ : CommGroup G₁\ninst✝ : IsPrimeOrderWith G₁ p\nn : ℕ\ng : G₁\na : ZMod p\npoly : ↥(degreeLT (ZMod p) (n + 1))\n⊢ g ^ ∑ i, a.val ^ ↑i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (∑ x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ ↑x).val",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/AGM/Basic.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-15T12:13:54+05:30",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3bce7a2bfc31b2c514ed165e702cb2c63d260d7267af7bf882376f27cfa6080a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 171,
        "start_column": 6,
        "end_line": 171,
        "end_column": 11
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst✝⁸ : CommGroup G\np : ℕ\ninst✝⁷ : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG₁ : Type u_2\ninst✝⁶ : CommGroup G₁\ninst✝⁵ : IsPrimeOrderWith G₁ p\ng₁ : G₁\nG₂ : Type u_3\ninst✝⁴ : CommGroup G₂\ninst✝³ : IsPrimeOrderWith G₂ p\ng₂ : G₂\nGₜ : Type u_4\ninst✝² : CommGroup Gₜ\ninst✝¹ : IsPrimeOrderWith Gₜ p\npairing : Additive G₁ →ₗ[ℤ] Additive G₂ →ₗ[ℤ] Additive Gₜ\nn : ℕ\ninst✝ : Fact (Nat.Prime p)\nsrs : Vector G₁ (n + 1)\ncoeffs : Fin (n + 1) → ZMod p\nz : ZMod p\npoly : ↥(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n⊢ ((↑poly - C (eval z ↑poly)) / (X - C z)).degree < ↑(n + 1)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/AGM/Basic.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-15T21:13:06-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "fd50eb520f249e187c4cc17da4b90f04d44f1cc638f8fedce8eb19be7b7e8ee8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\n⊢ ‖C‖₀' ≠ ⊤",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3009d57d0e90edd1050f2535b78f9e4f60cfd039f8ccbfbcd16a52cd702b891d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\nthis : ‖C‖₀' ≠ ⊤\n⊢ ENat.toNat (Finset.image (fun x => Δ₀(↑x.1, ↑x.2)) {p | ¬p.1 = p.2}).min =\n    sInf {d | ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d}",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "5eb12568cfc88f855ce8e1aa5eb37e600543cc30a15d7683127ada27583d4463"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₁.intro.intro.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nv : n → R\nhv : v ∈ C\nhuv : ¬u = v\nhDist : Δ₀(u, v) ≤ d\n⊢ ∃ u ∈ C, ¬u = 0 ∧ ‖u‖₀ ≤ d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6827f6e2af2e914c7b8e3d932d9fa3520d9cf00c1bf6f10b54d7bb2ce2ea1ebb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₂.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nhNorm : ¬u = 0\nhDist : ‖u‖₀ ≤ d\n⊢ ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "26d6446692aed7438cf4ca9710a4b11e615d0a4de6c914dc4cccf5a9cb898451"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 395,
        "start_column": 65,
        "end_line": 395,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝³ : Fintype n\nR : Type u_2\ninst✝² : DecidableEq R\ninst✝¹ : Finite R\ninst✝ : DivisionRing R\nC : Submodule R (n → R)\n⊢ Module.finrank R ↥C ≤ card n - ‖C.carrier‖₀ + 1",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/CodingTheory/Basic.lean#L395"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ebbcf02281803aa3f1ad085205ffae9455bf0080876cac3ddf59c6b00037b095"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "55d356c561bd0ef9c2c2a5faee2211f6e5804bd0cb7c371c52cbd652a198bea4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "733709b0b3eb61737241c7d253801f7b75b63c187dd6cddfd2025a376fa75cd4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\np q : MlPoly R n\n⊢ (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "dcd0b4dbe6b1ed9578696200172010514927605fccbb9579ca901fdb47a1fe75"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : CommSemiring R\nn : ℕ\nS : Type u_2\ninst✝ : CommSemiring S\nf : R →+* S\np : MlPoly R n\nx : Vector S n\n⊢ p.eval₂ f x = MvPolynomial.eval₂ f x.get ↑p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e6da4863dd6a091b176d7d5e3e364886431d4e3fa96abd1856f5e90ad00278f0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "444389e8f187f029ca4d6fb2647db178803951b6dbc54890f8203b4788d03007"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ (cons a b).get ⬝ᵥ (cons c d).get = a * c + b.get ⬝ᵥ d.get",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "8451e357d7c05083e9d922a97c7dd9f04b3ddf282eeb79223682bb59b43b4bac"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "8c8b0ec8a96778394f7a99ce84f781374e31d1d000fb791f81eecd6cc0e110aa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "10f21bccf93bda0f6ac9ed3034c4c7b5577881ba3dcc2e0ebffb57492de10fd3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "d26fddddac39506548395e2ff1a06aa68bca512166c25274e0572eea85d2572a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "5f3f7be8e2f427c7689f43fb1d21a72a01141e166f652943090465f67bc7cc44"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (n_1 : ℕ) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "15146d0ea41040b73992e26171f22283cf3638e4a72dedf94668231296528b7e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "868ab7a0efed5031b7e04f4d3b923346a42a39ff6ae28d596c7ba442c267909d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (b : MlPoly R n), 1 • b = b",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3ad86c7f3f1e3d2be1812433b8cc0eab51171e5e61ea4928992cb723d37d96c6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (x : MlPoly R n), 0 • x = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "09cec9f7ac47cd375b8365ff39899f9cc3d7b705d6c730af3e224b0a139b1f5a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nunit : α\nl l' : List α\nm n n' : ℕ\nh : n ≤ m\nh' : n' ≤ m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n ⊔ l.length = n' ⊔ l'.length\n⊢ l ++ replicate (n - l.length + (m - n' ⊔ l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' ⊔ l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "23597376809ed0dd1820b5788a632d56392b0458b608e84f3e7f9a01b2e54e35"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10
      },
      "debug_info": {
        "goal": "α : Type u_1\nl₁ l₂ : List α\nunit : α\n⊢ (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l₁.matchSize l₂ unit) ↔\n    ∀ (i : ℕ), l₁.getD i unit = l₂.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "bdc1ceac3ccfafecaec8c45a71ad75e64a4346ea31d0d51338b3fff59aadcb6d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\na : Array α\nn : ℕ\nunit : α\ni : ℕ\nh✝ : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n⊢ { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "31e7de4b5c769603c2eccbe6de15f326821a2085a894b3abf30b303dd1ecc960"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80
      },
      "debug_info": {
        "goal": "α : Type u_1\np : α → Bool\nas : Array α\nh : (popWhile p as).size > 0\n⊢ ¬p ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "80b4e920ce514d601f468a11fbffb8057a08720c1ab1e5b35c22c742b79c19d5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 469,
        "start_column": 4,
        "end_line": 469,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List ℕ\nj a : ℕ\nl' : List ℕ\nh : j < a + l'.sum\n⊢ ∃ n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L469"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "cd143a88ad9e31e826b00c24f4dd3dc3f8985d99e39765a4385c377b7da471ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 481,
        "start_column": 80,
        "end_line": 481,
        "end_column": 85
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝² : AddMonoid α\ninst✝¹ : Preorder α\ninst✝ : DecidableRel fun x1 x2 => x1 < x2\nl : List ℕ\nj : Fin l.sum\n⊢ l.findSumIdx ↑j < l.length",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Math/Basic.lean#L481"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6f78c462297f0e4cd5c48a684c88b578a4359d608848fa8d7f35892be2685179"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nσ : Type u_3\nσ₁ : Type u_4\nσ₂ : Type u_5\nx : σ₁ → R\nf : σ → σ₁ ⊕ σ₂\np : R[X σ]\nb : σ₁ →₀ ℕ\nh : ¬coeff b ((sumToIter R σ₁ σ₂) ((rename f) p)) = 0\n⊢ (coeff b ((sumToIter R σ₁ σ₂) ((rename f) p))).degrees ≤ Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3464a6856e1d089e7ce351210c1c0c0fce92da8ae1d61547f7b44e97fd899105"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\nh : n > 0\nD : Fin (n - 1) → Finset R\np : R[X Fin n]\n⊢ ((sumExceptFirst' n h D) p).degree ≤ ↑(degreeOf ⟨0, h⟩ p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7d5e20caac6893c3674c953bec16cb092f20fdceb57956d888049701943245c9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝⁴ : DecidableEq σ\ninst✝³ : Fintype σ\nR : Type u_2\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : DecidableEq R\np : R[X σ]\nhp : p ≠ 0\nS : σ → Finset R\n⊢ ↑(#({x ∈ p.vars.pi S | (eval (extendDomain x)) p = 0})) / ∏ i ∈ p.vars, ↑(#(S i)) ≤\n    ∑ i ∈ p.vars, ↑(degreeOf i p) / ↑(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1af9daf427587928cdf589f4d82b368bfc21a0a34848ba23a328f93988c922d1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝³ : DecidableEq σ\ninst✝² : Fintype σ\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\np q : R[X σ]\nS : σ → Finset R\nhDegree : ∀ (i : σ), degreeOf i p < #(S i)\nhEval : ∀ x ∈ piFinset fun i => S i, (eval x) p = (eval x) q\n⊢ p = q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "f9c5c4078caaeb5ea9a096da386729d8e7d2602bb881943905c6f04cc44e287f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 422,
        "start_column": 43,
        "end_line": 422,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : ℕ\nα : Fin n → Sort u\nl : List ℕ\nn' : ℕ\nl' : List ℕ\nmotive : Fin (n' :: l').sum → Sort u_1\ncases : (n : ℕ) → (h : n ∈ n' :: l') → (i : Fin n) → motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : ¬↑i < n'\n⊢ ↑i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L422"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "411d4e93182014c105091b33e53b3b6d5d799cb23da0f2ec94196ed042240822"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 450,
        "start_column": 16,
        "end_line": 450,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case ind\nn✝ n : ℕ\nIH : ∀ m < n, ∀ {a : Fin m → ℕ}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n → ℕ\n⊢ (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L450"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "c27e3b013cb8a561d94ba9842b1473e1fc573152e13a028548254969bf650b2a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 558,
        "start_column": 32,
        "end_line": 558,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L558"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ea72e91ae7f0d174174a192a3e94c4873a0a9040509bb277e6b35f8e937c4a74"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 560,
        "start_column": 35,
        "end_line": 560,
        "end_column": 40
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L560"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "24a1513f2164db0a7fea1726cf62914db82c42ce54ca98b2c025c752cbc7077c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Fin/Basic.lean",
        "start_line": 562,
        "start_column": 36,
        "end_line": 562,
        "end_column": 41
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/Fin/Basic.lean#L562"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "838d9cdb4bbecd732dabba4b171b77a20d141ed1d8596f65a1d571a2151806f8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q : UniPoly Q\ni : ℕ\nhi : i < Array.size (p.add_raw q)\n⊢ (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "0ac3987f91918316115bcbd5a5190f334718b43eef6d6a44d86861af2e6a0e98"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n⊢ p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7feadb1d1938b120c33ecd0497379e7edda0d34dd6a460c54ce4c81cbe63f302"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : Ring R\ninst✝ : BEq R\np : UniPoly R\n⊢ (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) ∈ TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b9dd5c0fe5236091ea8855dc3155bd98bb0faa5dd1e6a63db924678e498d338e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "21251d59309e749d53a0e3786bd81a88574eeca70048432b2247a03423b05129"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "01133ba8828bec9ecd45b93bb9f3585cbd6dcf7ba219d843d0a8517c8bbfa34e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e9400b844e33b3d7a18d8cd41ed92f1807e43589f763603212d3a8e31e94310f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2.1).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2 a)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "896bb0b36b0139fe1ea5349fb71c1901c89cf9e690bbbc785a2cb5fa62768eab"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "33227c9041bfb79809b37c45d9782948363814999aa7b5b1b56115b4ab529a0c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let __discr ← Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "1037dbfd13e7075f7f2df9ff6acc04c06f4f8eadc10bdcfe1c10621d0293caac"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\ncompletenessError : ℝ≥0\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn →\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run stmtIn witIn R] ≥\n        1 - ↑completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] ≥\n    1 - ↑completenessError\nx✝ : (StmtOut' × WitOut') × StmtOut' × pSpec.FullTranscript\na✝ : x✝ ∈ (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x✝.2.1 x✝.1.2 ∧ x✝.1.1 = x✝.2.1\n⊢ ((fun x => relOut x.2.1 x.1.2 ∧ x.1.1 = x.2.1) ∘ fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x✝",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b7e7785ddd0e7960be7923733551337f7ec78b3cec30de41c822cf0c03ad97e0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : ℝ≥0\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  ∀ (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    ∀ stmtIn ∉ langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut ∉ langOut'|run stmtIn witIn { prover := prover, verifier := V }] ≤\n        ↑soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn ∉ langIn\n⊢ [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut ∉\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] ≤\n    ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "afc81d98ed41f5f375579541273fc760226c833fd3841423ee3bf424d1fac91e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\nsoundnessError : ℝ≥0\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          ¬relIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) ∧\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] ≤\n      ↑soundnessError\n⊢ ∃ extractor,\n    ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            ¬relIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) ∧\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] ≤\n        ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "33d5b993990508a7aa631aa5108a54a42173506d8d6c9e672e3c2f582ae39edc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x✝³ : StmtIn\nx✝² : Unit\nx✝¹ : StmtOut'\nx✝ : Unit\np q : ℤ[X]\nt : ℤ\nf : ℤ[X]\nt' r : ℤ\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n⊢ eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b86f06e3609ce072183a451094d605a9386986f26397b83d153721c340f42524"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 390,
        "start_column": 2,
        "end_line": 390,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\ninst✝¹ : oSpec.FiniteRange\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : ℝ≥0\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        ¬relIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) ∧\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] ≤\n      ↑knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : ∀ (x : WitIn), ¬relIn stmtIn x\n⊢ [fun x => ∀ (x_1 : WitOut), ¬relOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] ≤\n    ↑knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L390"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "770f12482cdc9debff51d443ef514dd48ce83a009069228b67fc5e321558fa48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 410,
        "start_column": 75,
        "end_line": 410,
        "end_column": 80
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\ninst✝¹ : oSpec.FiniteRange\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nStmtIn StmtOut : Type\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrSoundnessError : pSpec.ChallengeIdx → ℝ≥0\n⊢ rbrSoundness langIn langOut verifier rbrSoundnessError → soundness langIn langOut verifier (∑ i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L410"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "86a6c29152a515529a53df345ef9924a23cc8bbe29734cbbc53ec7c45ce1de11"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 420,
        "start_column": 2,
        "end_line": 420,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\ninst✝¹ : oSpec.FiniteRange\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError →\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L420"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "e7b53eaa74b194b826fd0dadd533183d29bce9f0eb460d261efe4b0d69ddcbe5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 429,
        "start_column": 82,
        "end_line": 429,
        "end_column": 87
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\ninst✝¹ : oSpec.FiniteRange\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nrbrKnowledgeError : pSpec.ChallengeIdx → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier rbrKnowledgeError →\n    knowledgeSoundness relIn relOut verifier (∑ i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Security/Basic.lean#L429"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "9403abb6223ce075cfcc6cab81eb0a1b10e8e621d5db2ebc1016d6facae1fdef"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 429,
        "start_column": 2,
        "end_line": 429,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nOₘ₁ : (i : pSpec₁.MessageIdx) → OracleInterface (pSpec₁.Message i)\nOₘ₂ : (i : pSpec₂.MessageIdx) → OracleInterface (pSpec₂.Message i)\ninst✝² : (i : pSpec₁.ChallengeIdx) → Sampleable (pSpec₁.Challenge i)\ninst✝¹ : (i : pSpec₂.ChallengeIdx) → Sampleable (pSpec₂.Challenge i)\ninst✝ : oSpec.DecidableEq\nP₁ : Prover pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nP₂ : Prover pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\nstmt : Stmt₁\nwit : Wit₁\n⊢ run stmt wit (P₁.append P₂) = do\n    let __discr ← liftM (run stmt wit P₁)\n    match __discr with\n      | (stmt₂, wit₂, transcript₁) => do\n        let __discr ← liftM (run stmt₂ wit₂ P₂)\n        match __discr with\n          | (stmt₃, wit₃, transcript₂) => pure (stmt₃, wit₃, transcript₁ ++ₜ transcript₂)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L429"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ff389583a3a14493ea88d311f5bd7f386e2094d95b6749f378cd71e1a0b95d48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 459,
        "start_column": 89,
        "end_line": 459,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : ℕ\nι : Type\ninst✝⁴ : DecidableEq ι\noSpec : OracleSpec ι\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\ninst✝³ : (i : pSpec₁.ChallengeIdx) → Sampleable (pSpec₁.Challenge i)\ninst✝² : (i : pSpec₂.ChallengeIdx) → Sampleable (pSpec₂.Challenge i)\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nrel₁ : Stmt₁ → Wit₁ → Prop\nrel₂ : Stmt₂ → Wit₂ → Prop\nrel₃ : Stmt₃ → Wit₃ → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR₁ : Reduction pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nR₂ : Reduction pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\ncompletenessError₁ completenessError₂ : ℝ≥0\nh₁ : completeness rel₁ rel₂ R₁ completenessError₁\nh₂ : completeness rel₂ rel₃ R₂ completenessError₂\n⊢ completeness rel₁ rel₃ (R₁.append R₂) (completenessError₁ + completenessError₂)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L459"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "6981c0322199ff97ae32e02f728534c69de6b0a529caba6749265f2f4a372c1d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 489,
        "start_column": 27,
        "end_line": 489,
        "end_column": 32
      },
      "debug_info": {
        "goal": "case h.e'_6.h.h.h.h.e'_2.h.h.e\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\ninst✝² : oSpec.DecidableEq\ninst✝¹ : oSpec.FiniteRange\nn : Fin (0 + 1) → ℕ\npSpec : (i : Fin (0 + 1)) → ProtocolSpec (n i)\ninst✝ : (i : Fin (0 + 1)) → (j : (pSpec i).ChallengeIdx) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (0 + 2) → Type\nrel : (i : Fin (0 + 2)) → Stmt i → Wit i → Prop\nR : (i : Fin (0 + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (0 + 1) → ℝ≥0\nh : ∀ (i : Fin 1), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\ne_1✝¹ : ∑ i, n i = n 0\nhe✝ : ProtocolSpec.compose 0 n pSpec = pSpec 0\nx✝ : { i // (ProtocolSpec.compose 0 n pSpec i).1 = Direction.V_to_P }\ne_1✝ : (ProtocolSpec.compose 0 n pSpec ↑x✝).2 = (pSpec 0 ↑x✝).2\n⊢ instSampleableChallengeCompose = inst✝ 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L489"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "46190574d912f3b276b8956b56e28a4bde53f2ec71fd292107be42e3d80131d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 491,
        "start_column": 4,
        "end_line": 491,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\ninst✝² : oSpec.DecidableEq\ninst✝¹ : oSpec.FiniteRange\nm : ℕ\nih :\n  ∀ {n : Fin (m + 1) → ℕ} {pSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)}\n    [inst : (i : Fin (m + 1)) → (j : (pSpec i).ChallengeIdx) → Sampleable ((pSpec i).Challenge j)]\n    {Stmt Wit : Fin (m + 2) → Type} {rel : (i : Fin (m + 2)) → Stmt i → Wit i → Prop}\n    (R : (i : Fin (m + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ))\n    (completenessError : Fin (m + 1) → ℝ≥0),\n    (∀ (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)) →\n      completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (∑ i, completenessError i)\nn : Fin (m + 1 + 1) → ℕ\npSpec : (i : Fin (m + 1 + 1)) → ProtocolSpec (n i)\ninst✝ : (i : Fin (m + 1 + 1)) → (j : (pSpec i).ChallengeIdx) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 1 + 2) → Type\nrel : (i : Fin (m + 1 + 2)) → Stmt i → Wit i → Prop\nR : (i : Fin (m + 1 + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1 + 1) → ℝ≥0\nh : ∀ (i : Fin (m + 1 + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n⊢ completeness (rel 0) (rel (Fin.last (m + 1 + 1))) (compose (m + 1) n pSpec Stmt Wit R) (∑ i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L491"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "ae62a720f32f451490cdd962d1e3e6708b6e82e162cee3ef8e6ed17411e9e945"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 495,
        "start_column": 2,
        "end_line": 495,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\ninst✝ : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, ↥R⦃≤ ↑deg⦄[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : ↑(transcript 0) ∈ R⦃≤ ↑deg⦄[X]\nhEq : transcript 0 = ⟨↑(transcript 0), hp_i⟩\n⊢ (do\n      let a ←\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run ∘ fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (transcript 1)))).mapM\n            fun {α} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) ↑(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if ∑ x, Polynomial.eval (D x) ↑(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L495"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "b811112245ecb5dca87a20a0fd136ace45bc965f2f942d4af4cba61eb86bd5ce"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 513,
        "start_column": 57,
        "end_line": 513,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ (do\n      let x ←\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                ⟨0, ⋯⟩\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn✝)).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)\n      let a ← liftM (query (Sum.inr ⟨1, ⋯⟩) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  ⟨1, ⋯⟩ x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L513"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "3ac088511b47029a26d9c4c323340dc5ebdf616a1f950c9b6a9299018b5b40d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 522,
        "start_column": 2,
        "end_line": 522,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) → OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) ∈\n        (run ({ target := target, challenges := challenge }, oStmt) witIn✝\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support →\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | ⟨poly, property⟩ =>\n            ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x ∘ Fin.cast ⋯)) poly =\n              target) ∧\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L522"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "a7f2757e01506bedc5df9fa6f778328519644a12cfefe1cf14d7d1406ec143f0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 571,
        "start_column": 4,
        "end_line": 571,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R✝ : Type\ninst✝⁵ : CommSemiring R✝\nn✝ deg✝ m✝ : ℕ\nD✝ : Fin m✝ ↪ R✝\nι✝ : Type\noSpec✝ : OracleSpec ι✝\ninst✝⁴ : VCVCompatible R✝\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni✝ : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  ¬relation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i),\n    (a, b) ∈ (Verifier.run stmt tr (verifier R n deg D oSpec i)).support →\n      ∀ (x : Unit), ¬relation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "7eb57337a4a53afb95245e7e428de73d21423347faef6a472bf1ca807546d58b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "BoltonBailey/sumcheck-blueprint-graph",
        "commit": "20200cc6a383c7a9a393c07401eca95d6ddc2ab5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 646,
        "start_column": 42,
        "end_line": 646,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\nn deg m : ℕ\nD : Fin m ↪ R\ninst✝ : VCVCompatible R\n⊢ OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/20200cc6a383c7a9a393c07401eca95d6ddc2ab5/ArkLib/ProofSystem/Sumcheck/Basic.lean#L646"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:29:19.858722+00:00"
      },
      "id": "155192ee144b7a2eca0dac294e33382594c03befc133f75acbedddc961502efa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 62,
        "start_column": 9,
        "end_line": 62,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → OracleInterface (OStatement i)\nWitEquiv : Type\ninst✝ : OracleInterface WitEquiv\nequiv : Witness ≃ WitEquiv\n⊢ ∀ (i : ιₛᵢ ⊕ Unit),\n    (OStatement ⊕ᵥ fun x => WitEquiv) i =\n      match (⋯.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => ProtocolSpec.Message (SendWitness.pSpec WitEquiv) j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "cbadd1efb6922cc61c8cd595e9e1ca56e1073e4705d3613e65072aa35d872166"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 80,
        "start_column": 2,
        "end_line": 80,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝² : (i : ιₛᵢ) → OracleInterface (OStatement i)\nWitEquiv : Type\ninst✝¹ : OracleInterface WitEquiv\nequiv : Witness ≃ WitEquiv\nrelIn : Statement × ((i : ιₛᵢ) → OStatement i) → Witness → Prop\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness relIn (SendWitness.toRelOut Statement Witness ιₛᵢ OStatement WitEquiv equiv relIn)\n    (SendWitness.oracleReduction ι oSpec Statement Witness ιₛᵢ OStatement inst✝² WitEquiv inst✝¹ equiv)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "11404036b0daecc063481b3bcbb45fdb4022d402f17acce76a8bee7c64fddeec"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 141,
        "start_column": 9,
        "end_line": 141,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst : (i : ιₛᵢ) → OracleInterface (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\n⊢ ∀ (i : ιₛᵢ ⊕ ιₛᵢ),\n    (OStatement ⊕ᵥ OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => ProtocolSpec.Message (SameOracle.pSpec ιₛᵢ inst✝ OStatement) j",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "a09a1299953a459e4e2a396d74f021f96f695e6d00453df92ed801f4cabafa59"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 167,
        "start_column": 2,
        "end_line": 167,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝¹ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst : (i : ιₛᵢ) → OracleInterface (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (fun x x_1 => rel x) (SameOracle.relOut ιₛᵢ inst✝¹ OStatement)\n    (SameOracle.oracleReduction ι oSpec Statement ιₛᵢ inst✝¹ OStatement inst relComp)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L167"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "adc1dd3c85436e4c1d8d1deb38df7c5f99c89c4904f24d1682e2bc61c77020e2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 259,
        "start_column": 2,
        "end_line": 259,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nOStatement : Type\ninst✝¹ : OracleInterface OStatement\ninst : VCVCompatible (Query OStatement)\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (RandomQuery.relIn OStatement) (RandomQuery.relOut OStatement inst✝¹)\n    (RandomQuery.oracleReduction ι oSpec OStatement inst✝¹)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Components.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "13e3d31e590ed08cd2e9d6d8a0c3984f3bee6aab9b8f81bb036245165b89764f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let a ←\n        (simulateQ loggingOracle\n              (Prover.runToRound n pSpec ι oSpec StmtIn WitIn StmtOut WitOut inst✝ (Fin.last n) stmt wit\n                reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ← Prover.run n pSpec ι oSpec StmtIn WitIn StmtOut WitOut inst✝ stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "dbb37ce96e8b45ba1c4de57596afa2f136191af2577e71da2a066d4d2cb86957"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst✝ : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let __discr ←\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => a.1)) <$>\n            (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++ₒ [pSpec.Challenge]ₒ)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ←\n      (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              @Prover.run_of_prover_first.match_1 (fun i => (pSpec i).2) i fun isLt => __discr.1).liftComp\n        (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "611cc3d53d37d32c8030ee1bb798ee821e7a999487bba59682d7905618680811"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ (do\n      let _ ← liftM (query 0 ())\n      (fun a => (0, ↑a)) <$> liftM (query 1 ())) =\n    do\n    let y ← liftM (query 1 ())\n    (fun a => (0, ↑y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "ef27c3dea2207edc82dc06d73fea74e37f3d1eaf7942d1f961f39eb7198cc067"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n⊢ (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a)))) none =\n    ∑' (a : Fin 2), 2⁻¹ * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a_1 => (0, ↑a)))) none",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "e39dac02572db17b3813aab7ad10a23979a2b95e30de19e2de61c349a2679610"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : ℕ\n⊢ (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a => (0, ↑y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "90fd449fd5c5623bee4284dbc91c0db5fed3f73846cf4e968e4871c0bf2d90ac"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : ℕ) → unifSpec.domain i → Fin (i + 1)\n⊢ (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun x => (fun a => (0, ↑a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun y => (fun a => (0, ↑y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "5fa42a9c1ab7498e7fc20edbeb3eee3b6ca7f23d06c1b906f69606ccff87cb7c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 312,
        "start_column": 2,
        "end_line": 312,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝⁵ : CommRing R\nd : ℕ\ninst✝⁴ : Fintype R\ninst✝³ : DecidableEq R\ninst✝² : IsDomain R\nσ : Type\ninst✝¹ : Fintype σ\ninst✝ : DecidableEq σ\na : MvPolynomial σ R\nha : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s a = 0 → ∀ (i : σ), s i ≤ d\nb : MvPolynomial σ R\nhb : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s b = 0 → ∀ (i : σ), s i ≤ d\nhNe : ¬a = b\n⊢ {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card ≤ Fintype.card σ * d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/OracleInterface.lean#L312"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "58be387d31ad7e5878fb5dd2adf931fe69ff472c74b71411c21b80ebfa274c1e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/OracleInterface.lean",
        "start_line": 351,
        "start_column": 2,
        "end_line": 351,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nR : Type\ninst✝ : CommSemiring R\nm : ℕ\nD : Fin m ↪ R\np : Polynomial R\n⊢ ∃ x,\n    ((OptionT.run (List.mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {α} =>\n          QueryImpl.impl\n            (@SimOracle.statelessOracle Unit ι spec\n              (OracleInterface.toOracleSpec Unit (fun x => Polynomial R) fun i => instOracleInterfacePolynomial R inst✝)\n              fun i q => OracleInterface.oracle (Polynomial R) (instOracleInterfacePolynomial R inst✝) p q)) =\n        pure x ∧\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/OracleInterface.lean#L351"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "b83a17ad93335c101fe2c0c7f6c03836aed01263c833edff7946dc72ca2c749c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Transform/FiatShamir.lean",
        "start_line": 130,
        "start_column": 66,
        "end_line": 130,
        "end_column": 71
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝⁴ : VCVCompatible StmtIn\ninst✝³ : (i : Fin n) → VCVCompatible (pSpec i).2\ninst✝² : DecidableEq ι\ninst✝¹ : oSpec.FiniteRange\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\ncompletenessError : NNReal\nR : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ Reduction.completeness relIn relOut R completenessError →\n    Reduction.completeness relIn relOut (Reduction.fiatShamir n pSpec ι oSpec StmtIn WitIn StmtOut WitOut R)\n      completenessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Transform/FiatShamir.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-06T23:33:56-04:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "434b22a5d0473f47719df823adf49cc3f10e5fced20057cf4e25302438db4106"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 103,
        "start_column": 2,
        "end_line": 103,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : Polynomial R\n⊢ (FRI.splitEvenOdd R inst✝¹ p).1.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/Fold.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "32f7f5d9d3224aa7ea08d2e4164eb5bc060333162f32ddcceafa1721bdf50f22"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 107,
        "start_column": 2,
        "end_line": 107,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : Polynomial R\n⊢ (FRI.splitEvenOdd R inst✝¹ p).2.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/Fold.lean#L107"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "35c545d6f5ed13d6f9a02a100c11158c6f4bf52916e2a3892a1d5d277b743b74"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 119,
        "start_column": 11,
        "end_line": 119,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥(Polynomial.degreeLT R (2 * n))\npEven pOdd : Polynomial R\n⊢ pEven ∈ Polynomial.degreeLT R n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/Fold.lean#L119"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "77961a14454516e42c816c34d347ecfd77a97bad80fc61d6daff2eb126f5307a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 119,
        "start_column": 26,
        "end_line": 119,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥(Polynomial.degreeLT R (2 * n))\npEven pOdd : Polynomial R\n⊢ pOdd ∈ Polynomial.degreeLT R n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/Fold.lean#L119"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "dea1451306526feb00609134c32a080c9b4c7b33738c0eb680496c92ca4a5ef9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\nα : Type\ninst✝² : DecidableEq α\ninst✝¹ : Inhabited α\ninst✝ : Fintype α\nhash : α × α → α\nn : ℕ\nih :\n  ∀ (leaves : List.Vector α (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (@MerkleTree.implement_with_function α hash)\n        (do\n          let cache ← MerkleTree.buildMerkleTree α n leaves\n          let proof : List.Vector α n := MerkleTree.generateProof α n i cache\n          MerkleTree.verifyProof α inst✝² n i leaves[i] (MerkleTree.getRoot α n cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector α (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n⊢ ((((Option.elimM (OptionT.run (MerkleTree.buildMerkleTree α (n + 1) leaves)) (FreeMonad.pure none)\n              (@Function.comp (MerkleTree.Cache α (n + 1))\n                (OptionT (FreeMonad (OracleQuery (MerkleTree.spec α))) PUnit.{1})\n                (FreeMonad (OracleQuery (MerkleTree.spec α)) (Option PUnit.{1})) OptionT.run fun cache =>\n                MerkleTree.verifyProof α inst✝² (n + 1) i (leaves.get i) (MerkleTree.getRoot α (n + 1) cache)\n                  (MerkleTree.generateProof α (n + 1) i cache))).mapM\n          fun {α_1} q =>\n          @MerkleTree.implement_with_function.match_1 α (fun α_2 q => StateT Unit (OracleComp []ₒ) α_2) α_1 q\n            fun i left right => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "7280d8717b9fd011575f4f4132de767bb32b8850bf9dfef467d8da0bbeb21059"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 160,
        "start_column": 2,
        "end_line": 160,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝² : Fact (Nat.Prime p)\nG₁ : Type u_2\ninst✝¹ : CommGroup G₁\ninst✝ : @IsPrimeOrderWith G₁ CommGroup.toGroup p inst✝²\nn : ℕ\ng : G₁\na : ZMod p\npoly : ↥(degreeLT (ZMod p) (n + 1))\n⊢ g ^ ∑ i, a.val ^ ↑i * ((degreeLTEquiv (ZMod p) (n + 1)) poly i).val =\n    g ^ (∑ x, (degreeLTEquiv (ZMod p) (n + 1)) poly x * a ^ ↑x).val",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/AGM/Basic.lean#L160"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-15T12:13:54+05:30",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "0fa0fe31b389ab02a4c98a271e364889dc43b1d8dd99a55447d42ca28aed2291"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/AGM/Basic.lean",
        "start_line": 171,
        "start_column": 6,
        "end_line": 171,
        "end_column": 11
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst✝⁸ : CommGroup G\np : ℕ\ninst✝⁷ : Fact (Nat.Prime p)\nh : Nat.card G = p\ng : G\nG₁ : Type u_2\ninst✝⁶ : CommGroup G₁\ninst✝⁵ : @IsPrimeOrderWith G₁ CommGroup.toGroup p inst✝⁷\ng₁ : G₁\nG₂ : Type u_3\ninst✝⁴ : CommGroup G₂\ninst✝³ : @IsPrimeOrderWith G₂ CommGroup.toGroup p inst✝⁷\ng₂ : G₂\nGₜ : Type u_4\ninst✝² : CommGroup Gₜ\ninst✝¹ : @IsPrimeOrderWith Gₜ CommGroup.toGroup p inst✝⁷\npairing : Additive G₁ →ₗ[ℤ] Additive G₂ →ₗ[ℤ] Additive Gₜ\nn : ℕ\ninst✝ : Fact (Nat.Prime p)\nsrs : Vector G₁ (n + 1)\ncoeffs : Fin (n + 1) → ZMod p\nz : ZMod p\npoly : ↥(degreeLT (ZMod p) (n + 1)) := (degreeLTEquiv (ZMod p) (n + 1)).invFun coeffs\nthis : Field (ZMod p)\n⊢ ((↑poly - C (eval z ↑poly)) / (X - C z)).degree < ↑(n + 1)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/AGM/Basic.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-15T21:13:06-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "e5b9855eec0276df28d7b567898061d30e8a48805e5ce64fe3fc9248733007a3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\n⊢ @codeDist' n inst✝² R inst✝¹ C inst✝ ≠ ⊤",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "bfd535c8c2e55884cdb936d37f2ea4058db383b92b53458b6ef8749f8ad50909"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\nthis : @codeDist' n inst✝² R inst✝¹ C inst✝ ≠ ⊤\n⊢ ENat.toNat (Finset.image (fun x => hammingDist ↑x.1 ↑x.2) {p | ¬p.1 = p.2}).min =\n    sInf {d | ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ hammingDist u v ≤ d}",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "de7f5974859483276febb329ea48336ac48eaa0e9c066ac0349daae578398014"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₁.intro.intro.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nv : n → R\nhv : v ∈ C\nhuv : ¬u = v\nhDist : hammingDist u v ≤ d\n⊢ ∃ u ∈ C, ¬u = 0 ∧ hammingNorm u ≤ d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "3b21e1b2f81f5ab141de7473287e04ba5c42969018f0f360c226745f6f657f6a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₂.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nhNorm : ¬u = 0\nhDist : hammingNorm u ≤ d\n⊢ ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ hammingDist u v ≤ d",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "4007037a91780d35e5b0817a01a0e5d02a9c2b05a23c0031f22f966195e64fe4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 395,
        "start_column": 65,
        "end_line": 395,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝³ : Fintype n\nR : Type u_2\ninst✝² : DecidableEq R\ninst✝¹ : Finite R\ninst✝ : DivisionRing R\nC : Submodule R (n → R)\n⊢ Module.finrank R ↥C ≤ card n - @codeDist n inst✝³ R inst✝² C.carrier + 1",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/CodingTheory/Basic.lean#L395"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "27dbd89d5c5438cab8cbaafd88641efdb1095da173cc5cb0aec96f925a705bd8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.LeftInverse (@MlPoly.ofSpec R inst✝ n) (@MlPoly.toSpec R inst✝ n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "cff9e34b10cd90e5b4e76167bfec2a898b0a4121ae4eb7f343c715ef814e3aae"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.RightInverse (@MlPoly.ofSpec R inst✝ n) (@MlPoly.toSpec R inst✝ n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "b7bf77a33d064a8f207fa5e6bc26ce20b585a629999cdbf360851e95ad668915"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\np q : MlPoly R n\n⊢ @MlPoly.toSpec R inst✝ n (p + q) = @MlPoly.toSpec R inst✝ n p + @MlPoly.toSpec R inst✝ n q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "0aca7bc60d6d216b86bdcc46bd0b036fd13608c6a5131c810835912a2a7bd2ba"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : CommSemiring R\nn : ℕ\nS : Type u_2\ninst✝ : CommSemiring S\nf : R →+* S\np : MlPoly R n\nx : Vector S n\n⊢ p.eval₂ f x = MvPolynomial.eval₂ f x.get ↑(@MlPoly.toSpec R inst✝¹ n p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "b534aa5f65c8d5444d5239dab6758f3a95ef80492bb951983ca8ba519e720bfc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 45,
        "start_column": 2,
        "end_line": 45,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Basic.lean#L45"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "8bce7eb9b8f4bb8203a804eeda46369f1866afe3330ef78cd2ed0787b8c0c2b0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ get (@Vector.cons R n a b) ⬝ᵥ get (@Vector.cons R n c d) = a * c + b.get ⬝ᵥ d.get",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Basic.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "af11e56f6d73b726daaccaae76790ac20388a9bd1d4f47e70b8083f0f0d0db13"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 121,
        "start_column": 18,
        "end_line": 121,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (a : R), @HSMul.hSMul R (@MlPoly R n) (@MlPoly R n) instHSMul a 0 = 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MlPoly/Basic.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "d4844da37b7d9f12506aac7a80dfcf12aad9c4a9f5bb6c54c8c4ea7ac83aefb4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nunit : α\nl l' : List α\nm n n' : ℕ\nh : n ≤ m\nh' : n' ≤ m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : max n l.length = max n' l'.length\n⊢ l ++ replicate (n - l.length + (m - max n' l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - max n' l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "d9d5abbc8d3595d807bd92a16d38e619a038196c735c39897779843c7a926827"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 203,
        "start_column": 5,
        "end_line": 203,
        "end_column": 10
      },
      "debug_info": {
        "goal": "α : Type u_1\nl₁ l₂ : List α\nunit : α\n⊢ (@fun x => @List.matchSize_eq_iff_forall_eq.match_1 α (fun x => Prop) x fun x y => x = y)\n      (@List.matchSize α l₁ l₂ unit) ↔\n    ∀ (i : ℕ), l₁.getD i unit = l₂.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L203"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "7f091372fe158e3d80d9c23ec890c5997c2eaa7879089a33477babe8af51b1c4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 248,
        "start_column": 2,
        "end_line": 248,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\na : Array α\nn : ℕ\nunit : α\ni : ℕ\nh✝ : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n⊢ { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "7c4f5594d20fbb4e6b3562a3cd309570a674e66f513cba8b35ddc9bad546ef10"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80
      },
      "debug_info": {
        "goal": "α : Type u_1\np : α → Bool\nas : Array α\nh : (popWhile p as).size > 0\n⊢ ¬p (@Array.getLast α (popWhile p as) h) = true",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "62783b7ca13d6fcc0279b996c31a3e7a44cbb6e3bf6f6ded6fcad77df1018f8c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 460,
        "start_column": 4,
        "end_line": 460,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List ℕ\nj a : ℕ\nl' : List ℕ\nh : j < a + l'.sum\n⊢ ∃ n, @List.findSum ℕ Nat.instAddMonoid Nat.instPreorder Nat.decLt (a :: l') j = some n",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L460"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "93784d2459c7460301b8dbba482c39994b7d76741684ceebd39588128202c7ed"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Basic.lean",
        "start_line": 472,
        "start_column": 80,
        "end_line": 472,
        "end_column": 85
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝² : AddMonoid α\ninst✝¹ : Preorder α\ninst✝ : DecidableRel fun x1 x2 => x1 < x2\nl : List ℕ\nj : Fin l.sum\n⊢ @List.findSumIdx ℕ Nat.instAddMonoid Nat.instPreorder Nat.decLt l ↑j < l.length",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/Math/Basic.lean#L472"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "ecaa087f27b1cf595e2fe0a992043c6a3f785c1685fa56e1df1f36cf473ca004"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nσ : Type u_3\nσ₁ : Type u_4\nσ₂ : Type u_5\nx : σ₁ → R\nf : σ → σ₁ ⊕ σ₂\np : MvPolynomial σ R\nb : σ₁ →₀ ℕ\nh : ¬coeff b ((sumToIter R σ₁ σ₂) ((rename f) p)) = 0\n⊢ (coeff b ((sumToIter R σ₁ σ₂) ((rename f) p))).degrees ≤ Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "c3f6cf9248fdb96a4f8dc1eb82fe278301f1cb99f9c22928089266ed4c6c9ee1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\nh : n > 0\nD : Fin (n - 1) → Finset R\np : MvPolynomial (Fin n) R\n⊢ ((@MvPolynomial.sumExceptFirst' R inst✝ n h D) p).degree ≤ ↑(degreeOf ⟨0, h⟩ p)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "ff8b358fd34bb0c0779bd08152c8fb12c4666ab25882cf7beaa735a45c925489"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝⁴ : DecidableEq σ\ninst✝³ : Fintype σ\nR : Type u_2\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : DecidableEq R\np : MvPolynomial σ R\nhp : p ≠ 0\nS : σ → Finset R\n⊢ ↑{x ∈ p.vars.pi S | (eval (@MvPolynomial.Function.extendDomain σ R inst✝⁴ MulZeroClass.toZero p.vars x)) p = 0}.card /\n      ∏ i ∈ p.vars, ↑(S i).card ≤\n    ∑ i ∈ p.vars, ↑(degreeOf i p) / ↑(S i).card",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "e809d62de3d515de6853d403a1a049883dfe807b18f19309b741b50d1cc49165"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝³ : DecidableEq σ\ninst✝² : Fintype σ\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\np q : MvPolynomial σ R\nS : σ → Finset R\nhDegree : ∀ (i : σ), degreeOf i p < (S i).card\nhEval : ∀ x ∈ piFinset fun i => S i, (eval x) p = (eval x) q\n⊢ p = q",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "ccb154ac93d3abaf9564b202cacdc23801b02283bffd96e7bdddde7de66490b3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q : @UniPoly Q\ni : ℕ\nhi : i < Array.size (@UniPoly.add_raw Q inst✝ p q)\n⊢ (p ++ Array.replicate (Array.size q - Array.size p) 0)[i] +\n      (q ++ Array.replicate (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "b7719a8612295a5a241a9fd448ad8c7ab787e846158c07e28a08021f7bfd8b31"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q r : @UniPoly Q\nhpq : p ++ Array.replicate (Array.size q - Array.size p) 0 = q ++ Array.replicate (Array.size p - Array.size q) 0\nhqr : q ++ Array.replicate (Array.size r - Array.size q) 0 = r ++ Array.replicate (Array.size q - Array.size r) 0\n⊢ p ++ Array.replicate (Array.size r - Array.size p) 0 = r ++ Array.replicate (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "6c34b21706e8632baf36da88909d57091bd8ce528f4c6d9465ee721a2194413d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (fun a =>\n        (TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (a.2.2.1, (P.toProverOut.1 a.2.1).1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction\n        (pure\n          (default,\n            P.input\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                witIn),\n            stmtIn, witIn))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2.1).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n) =\n    (fun a =>\n        (TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (stmtIn, (P.toProverOut.1 a.2).1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            (witIn, (P.toProverOut.1 a.2).2),\n          a.1)) <$>\n      Fin.induction\n        (pure\n          (default,\n            P.input\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                witIn)))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2 a)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "6c8f44f6aef384494dfe93e782d4043c48211c816351461e817bd542c6aa8914"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let a ←\n        Prover.run\n            (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              stmtIn)\n            (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n              (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n            R.prover\n      (fun a_1 =>\n            ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                  (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                  (stmtIn, a.1),\n                TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                  (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                  (witIn, a.2.1)),\n              a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a =>\n                        TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                            WitOut' data)\n                          (stmtIn, a)) <$>\n                      R.verifier.verify\n                        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                            WitOut' data)\n                          stmtIn)\n                        transcript }).liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ←\n      Prover.run\n          (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            stmtIn)\n          (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n          R.prover\n    (fun a_1 =>\n          ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (stmtIn, a.1),\n              TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (witIn, a.2.1)),\n            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              (stmtIn, a_1),\n            a.2.2)) <$>\n        (Verifier.run\n              (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                stmtIn)\n              a.2.2 R.verifier).liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "7f4fe5f6d1eb85138c619e665fde9b5cfdc20430a0cb11c34e6303ca4164d907"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let __discr ←\n        Prover.runWithLog stmtIn witIn\n            (Prover.transport n pSpec ι oSpec StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a =>\n                            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                                WitOut' data)\n                              (stmtIn, a)) <$>\n                          R.verifier.verify\n                            (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                                WitOut' data)\n                              stmtIn)\n                            transcript })).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ←\n      Prover.runWithLog\n          (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n            stmtIn)\n          (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data) witIn)\n          R.prover\n    (fun a_1 =>\n          ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n                (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (stmtIn, a.1),\n              TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n                (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n                (witIn, a.2.1)),\n            TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n              (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' data)\n              (stmtIn, a_1.1),\n            a.2.2.1, a.2.2.2, a_1.2)) <$>\n        (simulateQ loggingOracle\n                (Verifier.run\n                  (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n                    (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n                      data)\n                    stmtIn)\n                  a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "0927d71f561c1481e4292e32a4d42b999c5f5b315a17ba81ccb7782a7075690e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\ncompletenessError : NNReal\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn →\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run stmtIn witIn R] ≥\n        1 - ↑completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut ∧\n          prvStmtOut =\n            stmtOut|run\n        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          stmtIn)\n        (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n          (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          witIn)\n        R] ≥\n    1 - ↑completenessError\nx✝ : (StmtOut' × WitOut') × StmtOut' × pSpec.FullTranscript\na✝ :\n  x✝ ∈\n    (run\n        (TransportStatement.fStmtIn StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          stmtIn)\n        (TransportWitness.fWitIn WitIn WitOut WitIn' WitOut'\n          (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          witIn)\n        R).support\nhRelOut' : relOut' x✝.2.1 x✝.1.2 ∧ x✝.1.1 = x✝.2.1\n⊢ ((fun x => relOut x.2.1 x.1.2 ∧ x.1.1 = x.2.1) ∘ fun a =>\n      ((TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n            (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n              (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n                relIn' relOut relOut' data))\n            (stmtIn, a.1.1),\n          TransportWitness.fWitOut WitIn WitOut WitIn' WitOut'\n            (TransportData.toTransportWitness StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n              (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n                relIn' relOut relOut' data))\n            (witIn, a.1.2)),\n        TransportStatement.fStmtOut StmtIn StmtOut StmtIn' StmtOut'\n          (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n            (TransportDataComplete.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn\n              relIn' relOut relOut' data))\n          (stmtIn, a.2.1),\n        a.2.2))\n    x✝",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "49820e392fc2e8f30aac1f5ae1a72a87b966dec1fd88e72db9471fae1bdccbde"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : NNReal\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  ∀ (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    ∀ stmtIn ∉ langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut ∉ langOut'|run stmtIn witIn { prover := prover, verifier := V }] ≤\n        ↑soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn ∉ langIn\n⊢ [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut ∉\n          langOut|run witIn WitIn\n        { prover := WitOut,\n          verifier :=\n            Verifier.transport n pSpec ι oSpec StmtIn StmtOut StmtIn' StmtOut'\n              (TransportDataSound.toTransportStatement StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\n                data)\n              V }] ≤\n    ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "1a88221f2ceac6b52fe0892bbc5fafa60bca1b4aa8db3b5a1bf82cd0c37d0cd7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\nsoundnessError : NNReal\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          ¬relIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) ∧\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] ≤\n      ↑soundnessError\n⊢ ∃ extractor,\n    ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            ¬relIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) ∧\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover,\n              verifier :=\n                Verifier.transport n pSpec ι oSpec StmtIn StmtOut StmtIn' StmtOut'\n                  (TransportData.toTransportStatement StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\n                    (TransportDataKnowledgeSound.toTransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut'\n                      WitOut' relIn relIn' relOut relOut' data))\n                  V }] ≤\n        ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "ec45bf99a591767607d46c539ceee8e72fecdf0cc2df2c76d9c7edc0556af57a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x✝³ : StmtIn\nx✝² : Unit\nx✝¹ : StmtOut'\nx✝ : Unit\np q : Polynomial ℤ\nt : ℤ\nf : Polynomial ℤ\nt' r : ℤ\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n⊢ eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "88bfefb97888853231b23e4a374d0b36deb25c9234d19d3160d15d4ce5062429"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 390,
        "start_column": 2,
        "end_line": 390,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\noSpec : OracleSpec ι\ninst✝¹ : oSpec.FiniteRange\ninst✝ : (i : pSpec.ChallengeIdx) → VCVCompatible (pSpec.Challenge i)\nStmtIn WitIn StmtOut WitOut : Type\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : NNReal\nhLt : knowledgeError < 1\nextractor :\n  @Reduction.StraightlineExtractor n pSpec (ι ⊕ { i // (pSpec i).1 = Direction.V_to_P }) (oSpec ++ₒ [pSpec.Challenge]ₒ)\n    StmtIn WitIn StmtOut WitOut\nhKS :\n  ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        ¬relIn stmtIn (@extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) ∧\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] ≤\n      ↑knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : ∀ (x : WitIn), ¬relIn stmtIn x\n⊢ [fun x => ∀ (x_1 : WitOut), ¬relOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] ≤\n    ↑knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Security/Basic.lean#L390"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "e63251c407b30eea7004d73940794926a2dcbd16e77ac26c91aa5b0366c15ff6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 404,
        "start_column": 2,
        "end_line": 404,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nOₘ₁ : (i : pSpec₁.MessageIdx) → OracleInterface (pSpec₁.Message i)\nOₘ₂ : (i : pSpec₂.MessageIdx) → OracleInterface (pSpec₂.Message i)\ninst✝² : (i : pSpec₁.ChallengeIdx) → Sampleable (pSpec₁.Challenge i)\ninst✝¹ : (i : pSpec₂.ChallengeIdx) → Sampleable (pSpec₂.Challenge i)\ninst✝ : oSpec.DecidableEq\nP₁ : Prover pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nP₂ : Prover pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\nstmt : Stmt₁\nwit : Wit₁\n⊢ run stmt wit (Prover.append m n pSpec₁ pSpec₂ ι oSpec Stmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ P₁ P₂) = do\n    let __discr ← liftM (run stmt wit P₁)\n    @Prover.append_run.match_1 m pSpec₁ Stmt₂ Wit₂\n        (fun __discr =>\n          OracleComp (oSpec ++ₒ [(pSpec₁ ++ₚ pSpec₂).Challenge]ₒ) (Stmt₃ × Wit₃ × (pSpec₁ ++ₚ pSpec₂).FullTranscript))\n        __discr fun stmt₂ wit₂ transcript₁ => do\n        let __discr ← liftM (run stmt₂ wit₂ P₂)\n        @Prover.append_run.match_1 n pSpec₂ Stmt₃ Wit₃\n            (fun __discr =>\n              OracleComp (oSpec ++ₒ [(pSpec₁ ++ₚ pSpec₂).Challenge]ₒ)\n                (Stmt₃ × Wit₃ × (pSpec₁ ++ₚ pSpec₂).FullTranscript))\n            __discr fun stmt₃ wit₃ transcript₂ => pure (stmt₃, wit₃, transcript₁ ++ₜ transcript₂)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "e33f7d15cd327a0df09e0de2355e1a040a4b682eca9fc9c96821ce25fdb807ac"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 434,
        "start_column": 89,
        "end_line": 434,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : ℕ\nι : Type\ninst✝⁴ : DecidableEq ι\noSpec : OracleSpec ι\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\ninst✝³ : (i : pSpec₁.ChallengeIdx) → Sampleable (pSpec₁.Challenge i)\ninst✝² : (i : pSpec₂.ChallengeIdx) → Sampleable (pSpec₂.Challenge i)\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nrel₁ : Stmt₁ → Wit₁ → Prop\nrel₂ : Stmt₂ → Wit₂ → Prop\nrel₃ : Stmt₃ → Wit₃ → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR₁ : Reduction pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nR₂ : Reduction pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\ncompletenessError₁ completenessError₂ : NNReal\nh₁ : completeness rel₁ rel₂ R₁ completenessError₁\nh₂ : completeness rel₂ rel₃ R₂ completenessError₂\n⊢ completeness rel₁ rel₃ (Reduction.append m n pSpec₁ pSpec₂ ι oSpec Stmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ R₁ R₂)\n    (completenessError₁ + completenessError₂)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L434"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "ae5d515980e27e20f0e45ed505bae676d69a4abc21bc8105720958931f2a830f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 464,
        "start_column": 27,
        "end_line": 464,
        "end_column": 32
      },
      "debug_info": {
        "goal": "case h.e'_6.h.h.h.h.e'_2.h.h.e\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\ninst✝² : oSpec.DecidableEq\ninst✝¹ : oSpec.FiniteRange\nn : Fin (0 + 1) → ℕ\npSpec : (i : Fin (0 + 1)) → ProtocolSpec (n i)\ninst✝ : (i : Fin (0 + 1)) → (j : (pSpec i).ChallengeIdx) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (0 + 2) → Type\nrel : (i : Fin (0 + 2)) → Stmt i → Wit i → Prop\nR : (i : Fin (0 + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (0 + 1) → NNReal\nh : ∀ (i : Fin 1), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\ne_1✝¹ : ∑ i, n i = n 0\nhe✝ : compose 0 n pSpec = pSpec 0\nx✝ : { i // (compose 0 n pSpec i).1 = Direction.V_to_P }\ne_1✝ : (compose 0 n pSpec ↑x✝).2 = (pSpec 0 ↑x✝).2\n⊢ instSampleableChallengeCompose 0 n pSpec inst✝ = inst✝ 0",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "21bd4f096f5afddafd90ea65bbdf9b9ba51fb2f824d8dde33cc8361909a4c8c1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/Basic.lean",
        "start_line": 466,
        "start_column": 4,
        "end_line": 466,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\ninst✝² : oSpec.DecidableEq\ninst✝¹ : oSpec.FiniteRange\nm : ℕ\nih :\n  ∀ {n : Fin (m + 1) → ℕ} {pSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)}\n    [inst : (i : Fin (m + 1)) → (j : (pSpec i).ChallengeIdx) → Sampleable ((pSpec i).Challenge j)]\n    {Stmt Wit : Fin (m + 2) → Type} {rel : (i : Fin (m + 2)) → Stmt i → Wit i → Prop}\n    (R : (i : Fin (m + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ))\n    (completenessError : Fin (m + 1) → NNReal),\n    (∀ (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)) →\n      completeness (rel 0) (rel (Fin.last (m + 1))) (Reduction.compose ι oSpec m n pSpec Stmt Wit R)\n        (∑ i, completenessError i)\nn : Fin (m + 1 + 1) → ℕ\npSpec : (i : Fin (m + 1 + 1)) → ProtocolSpec (n i)\ninst✝ : (i : Fin (m + 1 + 1)) → (j : (pSpec i).ChallengeIdx) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 1 + 2) → Type\nrel : (i : Fin (m + 1 + 2)) → Stmt i → Wit i → Prop\nR : (i : Fin (m + 1 + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1 + 1) → NNReal\nh : ∀ (i : Fin (m + 1 + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n⊢ completeness (rel 0) (rel (Fin.last (m + 1 + 1))) (Reduction.compose ι oSpec (m + 1) n pSpec Stmt Wit R)\n    (∑ i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/Basic.lean#L466"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-23T10:22:30+07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "463d6197bd684c5904e6b8a0ba2fc8aaea69712ccfaecb62e69fe8ca83b17e90"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential/ProtocolSpec.lean",
        "start_line": 354,
        "start_column": 2,
        "end_line": 354,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\nT : (i : Fin (m + 1)) → (pSpec i).FullTranscript\ni : Fin m\n⊢ @Fin.dfoldl (↑i + 1)\n      (fun i_1 =>\n        FullTranscript\n          (ProtocolSpec.compose (↑i_1)\n            (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (↑i + 1) i_1)\n              (Fin.take (↑i + 1 + 1) ⋯ n))\n            (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (↑i + 1) i_1)\n              (Fin.take (↑i + 1 + 1) ⋯ pSpec))))\n      (fun i_1 acc =>\n        @dcast₂ ℕ ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast₂\n          (∑ i_2, n (Fin.castLE ⋯ (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (↑i + 1) i_1) i_2)) +\n            n (Fin.castLE ⋯ i_1.succ))\n          (∑ i_2, n (Fin.castLE ⋯ (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_40 (↑i + 1) i_1) i_2)))\n          (ProtocolSpec.append\n            (∑ i_2, n (Fin.castLE ⋯ (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (↑i + 1) i_1) i_2)))\n            (n (Fin.castLE ⋯ i_1.succ))\n            (ProtocolSpec.compose (↑i_1)\n              (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (↑i + 1) i_1)\n                (Fin.take (↑i + 1 + 1) ⋯ n))\n              (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (↑i + 1) i_1)\n                (Fin.take (↑i + 1 + 1) ⋯ pSpec)))\n            (pSpec (Fin.castLE ⋯ i_1.succ)))\n          (ProtocolSpec.compose (↑i_1 + 1)\n            (Fin.take (↑i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (↑i + 1) i_1)\n              (Fin.take (↑i + 1 + 1) ⋯ n))\n            (Fin.take (↑i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (↑i + 1) i_1)\n              (Fin.take (↑i + 1 + 1) ⋯ pSpec)))\n          (ProtocolSpec.FullTranscript.compose._proof_41 (↑i + 1) (Fin.take (↑i + 1 + 1) ⋯ n) i_1)\n          (ProtocolSpec.FullTranscript.compose._proof_44 (↑i + 1) (Fin.take (↑i + 1 + 1) ⋯ n)\n            (Fin.take (↑i + 1 + 1) ⋯ pSpec) i_1)\n          (ProtocolSpec.FullTranscript.append\n            (∑ i_2, n (Fin.castLE ⋯ (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (↑i + 1) i_1) i_2)))\n            (n (Fin.castLE ⋯ i_1.succ))\n            (ProtocolSpec.compose (↑i_1)\n              (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (↑i + 1) i_1)\n                (Fin.take (↑i + 1 + 1) ⋯ n))\n              (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (↑i + 1) i_1)\n                (Fin.take (↑i + 1 + 1) ⋯ pSpec)))\n            (pSpec (Fin.castLE ⋯ i_1.succ)) acc (T (Fin.castLE ⋯ i_1.succ))))\n      (T (Fin.castLE ⋯ 0)) =\n    @dcast₂ ℕ ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast₂\n      (∑ i_1, n (Fin.castLE ⋯ i_1) + n i.succ) (∑ i_1, n (Fin.castLE ⋯ i_1))\n      (ProtocolSpec.append (∑ i_1, n (Fin.castLE ⋯ i_1)) (n i.succ)\n        (ProtocolSpec.compose (↑i) (Fin.take (↑i + 1) ⋯ n) (Fin.take (↑i + 1) ⋯ pSpec)) (pSpec i.succ))\n      (ProtocolSpec.compose (↑i + 1) (Fin.take (↑i + 1 + 1) ⋯ n) (Fin.take (↑i + 1 + 1) ⋯ pSpec)) ⋯ ⋯\n      (ProtocolSpec.FullTranscript.append (∑ i_1, n (Fin.castLE ⋯ i_1)) (n i.succ)\n        (ProtocolSpec.compose (↑i) (Fin.take (↑i + 1) ⋯ n) (Fin.take (↑i + 1) ⋯ pSpec)) (pSpec i.succ)\n        (@Fin.dfoldl (↑i)\n          (fun i_1 =>\n            FullTranscript\n              (ProtocolSpec.compose (↑i_1)\n                (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (↑i) i_1) (Fin.take (↑i + 1) ⋯ n))\n                (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_38 (↑i) i_1)\n                  (Fin.take (↑i + 1) ⋯ pSpec))))\n          (fun i_1 acc =>\n            @dcast₂ ℕ ProtocolSpec (@FullTranscript) ProtocolSpec.instDepCast ProtocolSpec.FullTranscript.instDepCast₂\n              (∑ i_2, n (Fin.castLE ⋯ (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (↑i) i_1) i_2)) +\n                n (Fin.castLE ⋯ i_1.succ))\n              (∑ i_2, n (Fin.castLE ⋯ (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_40 (↑i) i_1) i_2)))\n              (ProtocolSpec.append\n                (∑ i_2, n (Fin.castLE ⋯ (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (↑i) i_1) i_2)))\n                (n (Fin.castLE ⋯ i_1.succ))\n                (ProtocolSpec.compose (↑i_1)\n                  (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (↑i) i_1) (Fin.take (↑i + 1) ⋯ n))\n                  (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (↑i) i_1)\n                    (Fin.take (↑i + 1) ⋯ pSpec)))\n                (pSpec (Fin.castLE ⋯ i_1.succ)))\n              (ProtocolSpec.compose (↑i_1 + 1)\n                (Fin.take (↑i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (↑i) i_1)\n                  (Fin.take (↑i + 1) ⋯ n))\n                (Fin.take (↑i_1 + 1 + 1) (ProtocolSpec.FullTranscript.compose._proof_40 (↑i) i_1)\n                  (Fin.take (↑i + 1) ⋯ pSpec)))\n              (ProtocolSpec.FullTranscript.compose._proof_41 (↑i) (Fin.take (↑i + 1) ⋯ n) i_1)\n              (ProtocolSpec.FullTranscript.compose._proof_44 (↑i) (Fin.take (↑i + 1) ⋯ n) (Fin.take (↑i + 1) ⋯ pSpec)\n                i_1)\n              (ProtocolSpec.FullTranscript.append\n                (∑ i_2, n (Fin.castLE ⋯ (Fin.castLE (ProtocolSpec.FullTranscript.compose._proof_39 (↑i) i_1) i_2)))\n                (n (Fin.castLE ⋯ i_1.succ))\n                (ProtocolSpec.compose (↑i_1)\n                  (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (↑i) i_1) (Fin.take (↑i + 1) ⋯ n))\n                  (Fin.take (↑i_1 + 1) (ProtocolSpec.FullTranscript.compose._proof_39 (↑i) i_1)\n                    (Fin.take (↑i + 1) ⋯ pSpec)))\n                (pSpec (Fin.castLE ⋯ i_1.succ)) acc (T (Fin.castLE ⋯ i_1.succ))))\n          (T (Fin.castLE ⋯ 0)))\n        (T i.succ))",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/OracleReduction/Composition/Sequential/ProtocolSpec.lean#L354"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-05-25T11:02:32+07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "b8d96f5baaa1e60b8ffe347bc2537f7eb05aa5e4cb84b44d25cd98b94b013a43"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 492,
        "start_column": 2,
        "end_line": 492,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\ninst✝ : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\nstmt : Sumcheck.Spec.Statement R n i.castSucc × ((i : Fin 1) → Sumcheck.Spec.OracleStatement R inst✝¹ n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, ↥(degreeLE R ↑deg)), (Direction.V_to_P, R)]\nx : getType (Sumcheck.Spec.pSpec R inst✝¹ deg) 0\nhp_i : ↑(transcript 0) ∈ degreeLE R ↑deg\nhEq : transcript 0 = ⟨↑(transcript 0), hp_i⟩\n⊢ (do\n      let a ←\n        ((OptionT.run (List.mapM (fun i => liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run ∘ fun evals => do\n                    if evals.sum = Sumcheck.Spec.Statement.target R n i.castSucc stmt.1 then pure () else failure\n                    (fun a =>\n                          Sumcheck.Spec.Statement.mk R n i.succ a\n                            (Fin.snoc (Sumcheck.Spec.Statement.challenges R n i.castSucc stmt.1) (transcript 1))) <$>\n                        liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (transcript 1)))).mapM\n            fun {α} => (OracleInterface.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a =>\n            (a, fun i_1 =>\n              @Prod.snd (Sumcheck.Spec.Statement R n i.castSucc)\n                ((i : Fin 1) → Sumcheck.Spec.OracleStatement R inst✝¹ n deg i) stmt i_1)) <$>\n          a.getM) =\n    (fun a =>\n        (Sumcheck.Spec.Statement.mk R n i.succ (Polynomial.eval (transcript 1) ↑(transcript 0))\n            (Fin.snoc (Sumcheck.Spec.Statement.challenges R n i.castSucc stmt.1) (transcript 1)),\n          stmt.2)) <$>\n      if ∑ x, Polynomial.eval (D x) ↑(transcript 0) = Sumcheck.Spec.Statement.target R n i.castSucc stmt.1 then pure ()\n      else failure",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Sumcheck/Basic.lean#L492"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "69c2d3a1610bfbd423bbce92118f995a7741ec117b6a93f0e46b37fe001f47b4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 510,
        "start_column": 57,
        "end_line": 510,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → Sumcheck.Spec.OracleStatement R inst✝³ n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast (Sumcheck.Spec.relation._proof_12 n i.castSucc)))\n        ↑(@oStmt 0) =\n    target\n⊢ ({ prover := Sumcheck.Spec.prover R inst✝³ n deg m D ι oSpec i,\n                verifier :=\n                  Sumcheck.Spec.oracleVerifier R inst✝³ n deg m D ι oSpec inst✝² i }.toReduction.prover.sendMessage\n        ⟨0, ⋯⟩\n        ({ prover := Sumcheck.Spec.prover R inst✝³ n deg m D ι oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst✝³ n deg m D ι oSpec inst✝²\n                        i }.toReduction.prover.toProverIn.input\n          (Sumcheck.Spec.Statement R n i.castSucc × ((i : Fin 1) → Sumcheck.Spec.OracleStatement R inst✝³ n deg i)) Unit\n          ({ prover := Sumcheck.Spec.prover R inst✝³ n deg m D ι oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst✝³ n deg m D ι oSpec inst✝² i }.toReduction.prover.PrvState\n            0)\n          (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt) witIn✝)).neverFails ∧\n    ∀ (a : Polynomial R) (b : a ∈ degreeLE R ↑deg)\n      (b_1 :\n        { prover := Sumcheck.Spec.prover R inst✝³ n deg m D ι oSpec i,\n                  verifier :=\n                    Sumcheck.Spec.oracleVerifier R inst✝³ n deg m D ι oSpec inst✝² i }.toReduction.prover.PrvState\n          1),\n      (⟨a, b⟩, b_1) ∈\n          ({ prover := Sumcheck.Spec.prover R inst✝³ n deg m D ι oSpec i,\n                      verifier :=\n                        Sumcheck.Spec.oracleVerifier R inst✝³ n deg m D ι oSpec inst✝²\n                          i }.toReduction.prover.sendMessage\n              ⟨0, ⋯⟩\n              ({ prover := Sumcheck.Spec.prover R inst✝³ n deg m D ι oSpec i,\n                          verifier :=\n                            Sumcheck.Spec.oracleVerifier R inst✝³ n deg m D ι oSpec inst✝²\n                              i }.toReduction.prover.toProverIn.input\n                (Sumcheck.Spec.Statement R n i.castSucc ×\n                  ((i : Fin 1) → Sumcheck.Spec.OracleStatement R inst✝³ n deg i))\n                Unit\n                ({ prover := Sumcheck.Spec.prover R inst✝³ n deg m D ι oSpec i,\n                          verifier :=\n                            Sumcheck.Spec.oracleVerifier R inst✝³ n deg m D ι oSpec inst✝²\n                              i }.toReduction.prover.PrvState\n                  0)\n                (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt) witIn✝)).support →\n        ∀ (x : R),\n          (Verifier.run (Sumcheck.Spec.Statement.mk R n i.castSucc target challenge, oStmt)\n              (Transcript.snoc 2 (Sumcheck.Spec.pSpec R inst✝³ deg) 1 x\n                (Transcript.snoc 2 (Sumcheck.Spec.pSpec R inst✝³ deg) 0 ⟨a, b⟩\n                  (@default (Transcript 0 (Sumcheck.Spec.pSpec R inst✝³ deg)) Unique.instInhabited)))\n              { prover := Sumcheck.Spec.prover R inst✝³ n deg m D ι oSpec i,\n                    verifier :=\n                      Sumcheck.Spec.oracleVerifier R inst✝³ n deg m D ι oSpec inst✝²\n                        i }.toReduction.verifier).neverFails",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Sumcheck/Basic.lean#L510"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "bd27c335d58009434fe23c618d52cc452d2675184e479d5ccd45fbb29c2fb20c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ArkLib",
        "branch": "main",
        "commit": "9d662561bb9d399be7d834dd8eda52165ab3e99b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 643,
        "start_column": 42,
        "end_line": 643,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\nn deg m : ℕ\nD : Fin m ↪ R\ninst✝ : VCVCompatible R\n⊢ OracleReduction.perfectCompleteness (Sumcheck.Spec.Combined.relIn R inst✝¹ n deg m D)\n    (Sumcheck.Spec.Combined.relOut R inst✝¹ n deg) (Sumcheck.Spec.Combined.reduction R inst✝¹ n deg)",
        "url": "https://github.com/Verified-zkEVM/ArkLib/blob/9d662561bb9d399be7d834dd8eda52165ab3e99b/ArkLib/ProofSystem/Sumcheck/Basic.lean#L643"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-05-25T07:38:28.983857+00:00"
      },
      "id": "22c0ee49ff6df8cae6b641795737c14a708010a775d00e0f3adf591684793ce9"
    }
  ]
}