{
  "repos": [
    {
      "remote_url": "https://github.com/0art0/lean-slides",
      "last_time_visited": "2025-04-22T03:00:42.729081+00:00",
      "remote_heads_hash": "ea1fca1fe87f"
    },
    {
      "remote_url": "https://github.com/0art0/kimina",
      "last_time_visited": "2025-04-22T03:00:43.231470+00:00",
      "remote_heads_hash": "ba10e4d794e2"
    },
    {
      "remote_url": "https://github.com/abdoo8080/lean-cvc5",
      "last_time_visited": "2025-04-26T03:00:43.264242+00:00",
      "remote_heads_hash": "2ed962c5c9b8"
    },
    {
      "remote_url": "https://github.com/acmepjz/md4lean",
      "last_time_visited": "2025-04-22T03:00:44.271527+00:00",
      "remote_heads_hash": "78f0fe311a3f"
    },
    {
      "remote_url": "https://github.com/adamtopaz/NodeGraph",
      "last_time_visited": "2025-04-22T03:00:44.798511+00:00",
      "remote_heads_hash": "ccd524ebf6b4"
    },
    {
      "remote_url": "https://github.com/adamtopaz/lean_extras",
      "last_time_visited": "2025-04-22T03:00:45.440234+00:00",
      "remote_heads_hash": "6b9cfc280153"
    },
    {
      "remote_url": "https://github.com/adomani/advents",
      "last_time_visited": "2025-04-22T03:00:46.024121+00:00",
      "remote_heads_hash": "c4eb517ab2cb"
    },
    {
      "remote_url": "https://github.com/AdrienChampion/safeIdx",
      "last_time_visited": "2025-04-22T03:00:46.941856+00:00",
      "remote_heads_hash": "f362cca5ed0c"
    },
    {
      "remote_url": "https://github.com/ah1112/synthetic_euclid_4",
      "last_time_visited": "2025-04-22T03:00:47.515754+00:00",
      "remote_heads_hash": "ffe525d762dd"
    },
    {
      "remote_url": "https://github.com/alexf91/lean4-ctypes",
      "last_time_visited": "2025-04-22T03:00:48.105105+00:00",
      "remote_heads_hash": "4034301ddd2f"
    },
    {
      "remote_url": "https://github.com/alexjbest/leaff",
      "last_time_visited": "2025-04-22T03:00:48.651017+00:00",
      "remote_heads_hash": "4dc694ebc489"
    },
    {
      "remote_url": "https://github.com/alexkeizer/QpfTypes",
      "last_time_visited": "2025-04-22T03:00:49.225286+00:00",
      "remote_heads_hash": "e872072f74fd"
    },
    {
      "remote_url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "last_time_visited": "2025-04-22T03:00:49.885183+00:00",
      "remote_heads_hash": "79e0a27fa876"
    },
    {
      "remote_url": "https://github.com/alok/lean-inf",
      "last_time_visited": "2025-04-22T03:12:52.492166+00:00",
      "remote_heads_hash": "590910f95db9"
    },
    {
      "remote_url": "https://github.com/alok/AsciiPlot",
      "last_time_visited": "2025-04-22T03:12:53.102637+00:00",
      "remote_heads_hash": "b3900aad52ab"
    },
    {
      "remote_url": "https://github.com/ammkrn/timelib",
      "last_time_visited": "2025-04-22T03:12:53.584485+00:00",
      "remote_heads_hash": "40bbd08a1411"
    },
    {
      "remote_url": "https://github.com/ammkrn/printiest",
      "last_time_visited": "2025-04-22T03:12:54.145265+00:00",
      "remote_heads_hash": "4a58b9aba192"
    },
    {
      "remote_url": "https://github.com/andrejbauer/partial-combinatory-algebras",
      "last_time_visited": "2025-04-22T03:12:54.642449+00:00",
      "remote_heads_hash": "136c83911bf8"
    },
    {
      "remote_url": "https://github.com/anlucia/ChromaticPolynomial",
      "last_time_visited": "2025-04-22T03:12:55.172006+00:00",
      "remote_heads_hash": "ea3ff45e09d2"
    },
    {
      "remote_url": "https://github.com/anoma/juvix-lean",
      "last_time_visited": "2025-04-22T03:12:55.717475+00:00",
      "remote_heads_hash": "194798fe5c8d"
    },
    {
      "remote_url": "https://github.com/apnelson1/Matroid",
      "last_time_visited": "2025-04-27T03:00:46.679426+00:00",
      "remote_heads_hash": "839368b49dfe"
    },
    {
      "remote_url": "https://github.com/arademaker/delphin",
      "last_time_visited": "2025-04-22T03:20:40.355263+00:00",
      "remote_heads_hash": "9a189fa3cc01"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/yatima",
      "last_time_visited": "2025-04-22T03:20:40.971546+00:00",
      "remote_heads_hash": "27bd4dd3b298"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Wasm.lean",
      "last_time_visited": "2025-04-22T03:20:41.724481+00:00",
      "remote_heads_hash": "9723673e436f"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/RustFFI.lean",
      "last_time_visited": "2025-04-22T03:20:42.299176+00:00",
      "remote_heads_hash": "1494787a26c1"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Megaparsec.lean",
      "last_time_visited": "2025-04-22T03:20:42.881315+00:00",
      "remote_heads_hash": "b3fcd8401935"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/LSpec",
      "last_time_visited": "2025-04-22T03:20:43.454274+00:00",
      "remote_heads_hash": "a32710bb1221"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Blake3.lean",
      "last_time_visited": "2025-04-22T03:20:44.005096+00:00",
      "remote_heads_hash": "151fd9d4bfe2"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/NumLean",
      "last_time_visited": "2025-04-22T03:20:44.524750+00:00",
      "remote_heads_hash": "c95d37ba3c8c"
    },
    {
      "remote_url": "https://github.com/ATOMSLab/LeanLJ",
      "last_time_visited": "2025-04-26T03:00:51.529845+00:00",
      "remote_heads_hash": "534fc1ed5144"
    },
    {
      "remote_url": "https://github.com/atrieu/lean-cryptolib",
      "last_time_visited": "2025-04-22T03:20:46.271912+00:00",
      "remote_heads_hash": "af280c966902"
    },
    {
      "remote_url": "https://github.com/austinletson/use-lean-standard-action-with-bare-project",
      "last_time_visited": "2025-04-22T03:20:46.754765+00:00",
      "remote_heads_hash": "840d70a94256"
    },
    {
      "remote_url": "https://github.com/avigad/LeanSudoku",
      "last_time_visited": "2025-04-22T03:20:47.236625+00:00",
      "remote_heads_hash": "cb5ac28c9e23"
    },
    {
      "remote_url": "https://github.com/awodey/joyal",
      "last_time_visited": "2025-04-22T03:20:47.935154+00:00",
      "remote_heads_hash": "a616ad08ef80"
    },
    {
      "remote_url": "https://github.com/axiomed/http",
      "last_time_visited": "2025-04-22T03:20:48.458947+00:00",
      "remote_heads_hash": "b9eedf58de6b"
    },
    {
      "remote_url": "https://github.com/bergmannjg/time",
      "last_time_visited": "2025-04-22T03:20:49.025682+00:00",
      "remote_heads_hash": "a188d26ad6bd"
    },
    {
      "remote_url": "https://github.com/bergmannjg/regex",
      "last_time_visited": "2025-04-22T03:20:49.551843+00:00",
      "remote_heads_hash": "b8c4594aa5df"
    },
    {
      "remote_url": "https://github.com/bergmannjg/leanCurl",
      "last_time_visited": "2025-04-22T03:20:50.109952+00:00",
      "remote_heads_hash": "ff0a6479d879"
    },
    {
      "remote_url": "https://github.com/Bergschaf/Localic-Caratheodory-Extensions",
      "last_time_visited": "2025-04-22T03:20:50.683465+00:00",
      "remote_heads_hash": "ac8eee60c8c4"
    },
    {
      "remote_url": "https://github.com/Bergschaf/lean-banach-tarski",
      "last_time_visited": "2025-04-22T03:20:52.135020+00:00",
      "remote_heads_hash": "f48bdebe8bf5"
    },
    {
      "remote_url": "https://github.com/Bergschaf/banach-tarski",
      "last_time_visited": "2025-04-22T03:20:52.766143+00:00",
      "remote_heads_hash": "16e9b5d0a40f"
    },
    {
      "remote_url": "https://github.com/BoltonBailey/formal-snarks-project",
      "last_time_visited": "2025-04-22T03:20:53.945437+00:00",
      "remote_heads_hash": "8c4e3059ad64"
    },
    {
      "remote_url": "https://github.com/BRonen/sqlite3-lean4",
      "last_time_visited": "2025-04-22T03:20:54.488529+00:00",
      "remote_heads_hash": "a37e6d54423a"
    },
    {
      "remote_url": "https://github.com/cmu-l3/llmlean",
      "last_time_visited": "2025-04-22T03:20:54.963113+00:00",
      "remote_heads_hash": "04624fcb53e2"
    },
    {
      "remote_url": "https://github.com/dagurtomas/LeanCondensed",
      "last_time_visited": "2025-04-22T03:20:55.624573+00:00",
      "remote_heads_hash": "a70a25121b16"
    },
    {
      "remote_url": "https://github.com/Deducteam/lean2dk",
      "last_time_visited": "2025-04-26T03:00:55.732280+00:00",
      "remote_heads_hash": "d267fda913df"
    },
    {
      "remote_url": "https://github.com/djvelleman/HTPILeanPackage",
      "last_time_visited": "2025-04-22T03:20:56.707110+00:00",
      "remote_heads_hash": "77cb90320f24"
    },
    {
      "remote_url": "https://github.com/draperlaboratory/ELFSage",
      "last_time_visited": "2025-04-22T03:20:57.246013+00:00",
      "remote_heads_hash": "56692d17d705"
    },
    {
      "remote_url": "https://github.com/dtumad/VCV-io",
      "last_time_visited": "2025-04-27T03:00:54.184084+00:00",
      "remote_heads_hash": "a5cec3d4bcb5"
    },
    {
      "remote_url": "https://github.com/dupuisf/BibtexQuery",
      "last_time_visited": "2025-04-22T03:34:29.625492+00:00",
      "remote_heads_hash": "ff993a7036b7"
    },
    {
      "remote_url": "https://github.com/dwrensha/tryAtEachStep",
      "last_time_visited": "2025-04-22T03:34:30.213665+00:00",
      "remote_heads_hash": "bd22accb361e"
    },
    {
      "remote_url": "https://github.com/dwrensha/lean4-maze",
      "last_time_visited": "2025-04-22T03:34:30.713065+00:00",
      "remote_heads_hash": "da00a1ae7422"
    },
    {
      "remote_url": "https://github.com/dwrensha/compfiles",
      "last_time_visited": "2025-04-27T03:11:11.107337+00:00",
      "remote_heads_hash": "f0860e3ad54e"
    },
    {
      "remote_url": "https://github.com/dwrensha/Chess.lean",
      "last_time_visited": "2025-04-22T03:34:33.398092+00:00",
      "remote_heads_hash": "f046a40be392"
    },
    {
      "remote_url": "https://github.com/dwrensha/animate-lean-proofs",
      "last_time_visited": "2025-04-22T03:34:33.907868+00:00",
      "remote_heads_hash": "7a8d1d4f58a9"
    },
    {
      "remote_url": "https://github.com/ElifUskuplu/Stlc_deBruijn",
      "last_time_visited": "2025-04-22T03:34:34.643864+00:00",
      "remote_heads_hash": "b80b39af1eda"
    },
    {
      "remote_url": "https://github.com/emilyriehl/infinity-cosmos",
      "last_time_visited": "2025-04-22T03:34:35.381406+00:00",
      "remote_heads_hash": "e4af335c6b6a"
    },
    {
      "remote_url": "https://github.com/eric-wieser/lean-matrix-cookbook",
      "last_time_visited": "2025-04-22T03:34:36.101045+00:00",
      "remote_heads_hash": "a4f9f9349dac"
    },
    {
      "remote_url": "https://github.com/fgdorais/lean4-unicode-basic",
      "last_time_visited": "2025-04-27T03:11:14.392979+00:00",
      "remote_heads_hash": "1313a84ab468"
    },
    {
      "remote_url": "https://github.com/fgdorais/lean4-parser",
      "last_time_visited": "2025-04-22T03:34:41.614022+00:00",
      "remote_heads_hash": "a128d0356c0c"
    },
    {
      "remote_url": "https://github.com/fgdorais/extra4",
      "last_time_visited": "2025-04-26T03:26:17.273363+00:00",
      "remote_heads_hash": "1b7542458cef"
    },
    {
      "remote_url": "https://github.com/fgdorais/algebra4",
      "last_time_visited": "2025-04-26T03:26:18.347737+00:00",
      "remote_heads_hash": "c4369853c23a"
    },
    {
      "remote_url": "https://github.com/forked-from-1kasper/ground_zero",
      "last_time_visited": "2025-04-22T03:34:44.091203+00:00",
      "remote_heads_hash": "f259deeaa740"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Incompleteness",
      "last_time_visited": "2025-04-22T03:34:44.673350+00:00",
      "remote_heads_hash": "aa43d4d432c4"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Foundation",
      "last_time_visited": "2025-04-27T03:11:20.192067+00:00",
      "remote_heads_hash": "9059df2d029a"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Arithmetization",
      "last_time_visited": "2025-04-22T03:34:46.360786+00:00",
      "remote_heads_hash": "d0d6f3b5214a"
    },
    {
      "remote_url": "https://github.com/FormalSAT/trestle",
      "last_time_visited": "2025-04-22T03:34:47.104176+00:00",
      "remote_heads_hash": "96a7fcf51e38"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/LeanCourse24",
      "last_time_visited": "2025-04-22T03:38:09.387773+00:00",
      "remote_heads_hash": "9ec29a82bdef"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/carleson",
      "last_time_visited": "2025-04-26T03:45:38.718999+00:00",
      "remote_heads_hash": "ab58ab1e9481"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/BonnAnalysis",
      "last_time_visited": "2025-04-22T03:38:11.040146+00:00",
      "remote_heads_hash": "a346ac04dd45"
    },
    {
      "remote_url": "https://github.com/FR-vdash-bot/Algorithm",
      "last_time_visited": "2025-04-22T03:38:11.661910+00:00",
      "remote_heads_hash": "731cbd0bc431"
    },
    {
      "remote_url": "https://github.com/frenzymath/jixia",
      "last_time_visited": "2025-04-22T03:38:12.226287+00:00",
      "remote_heads_hash": "c1db5239415c"
    },
    {
      "remote_url": "https://github.com/funexists/raylean",
      "last_time_visited": "2025-04-22T03:38:12.735085+00:00",
      "remote_heads_hash": "72a50b820b10"
    },
    {
      "remote_url": "https://github.com/FWuermse/lean-postgres",
      "last_time_visited": "2025-04-22T03:38:13.574508+00:00",
      "remote_heads_hash": "32be1086f64b"
    },
    {
      "remote_url": "https://github.com/GasStationManager/LeanTool",
      "last_time_visited": "2025-04-23T03:48:30.326321+00:00",
      "remote_heads_hash": "00005e3e8936"
    },
    {
      "remote_url": "https://github.com/GasStationManager/FormalizeWithTest",
      "last_time_visited": "2025-04-22T03:38:14.590769+00:00",
      "remote_heads_hash": "c9bc0ed602e4"
    },
    {
      "remote_url": "https://github.com/GasStationManager/CodeProofTheArena",
      "last_time_visited": "2025-04-22T03:38:15.104435+00:00",
      "remote_heads_hash": "6eaeef733792"
    },
    {
      "remote_url": "https://github.com/gdncc/Cryptography",
      "last_time_visited": "2025-04-22T03:38:15.610480+00:00",
      "remote_heads_hash": "624b9e463546"
    },
    {
      "remote_url": "https://github.com/girving/interval",
      "last_time_visited": "2025-04-27T03:47:32.270752+00:00",
      "remote_heads_hash": "6aeaa065e6e7"
    },
    {
      "remote_url": "https://github.com/goens/lost-pop-lean",
      "last_time_visited": "2025-04-22T03:38:16.946007+00:00",
      "remote_heads_hash": "8035a1ab2a5a"
    },
    {
      "remote_url": "https://github.com/google-deepmind/debate",
      "last_time_visited": "2025-04-22T03:38:17.492303+00:00",
      "remote_heads_hash": "5a9708e14c57"
    },
    {
      "remote_url": "https://github.com/gsierra99/ExFormMathL4",
      "last_time_visited": "2025-04-22T03:38:18.069028+00:00",
      "remote_heads_hash": "18bdfe18ef1b"
    },
    {
      "remote_url": "https://github.com/Hagb/lean-groebner",
      "last_time_visited": "2025-04-22T03:38:18.641120+00:00",
      "remote_heads_hash": "8a6f9e6a9967"
    },
    {
      "remote_url": "https://github.com/HannahSantos/FMCn_Lean",
      "last_time_visited": "2025-04-22T03:38:19.130404+00:00",
      "remote_heads_hash": "245f1abf4da5"
    },
    {
      "remote_url": "https://github.com/haruhisa-enomoto/mathlib4-all-tactics",
      "last_time_visited": "2025-04-22T03:38:19.642601+00:00",
      "remote_heads_hash": "c0aa438185da"
    },
    {
      "remote_url": "https://github.com/HEPLean/PhysLean",
      "last_time_visited": "2025-04-27T03:47:34.848309+00:00",
      "remote_heads_hash": "9d24a9062e2f"
    },
    {
      "remote_url": "https://github.com/hhu-adam/lean-i18n",
      "last_time_visited": "2025-04-22T03:57:18.936463+00:00",
      "remote_heads_hash": "0f73c0dadeae"
    },
    {
      "remote_url": "https://github.com/hhu-adam/Robo",
      "last_time_visited": "2025-04-26T04:06:05.873965+00:00",
      "remote_heads_hash": "0e7e0d47e2d7"
    },
    {
      "remote_url": "https://github.com/igrep/lean-workshop",
      "last_time_visited": "2025-04-23T04:08:29.130070+00:00",
      "remote_heads_hash": "93ba21786a7a"
    },
    {
      "remote_url": "https://github.com/imbrem/discretion",
      "last_time_visited": "2025-04-26T04:08:35.459471+00:00",
      "remote_heads_hash": "31c8e57cf4ac"
    },
    {
      "remote_url": "https://github.com/imbrem/debruijn-ssa",
      "last_time_visited": "2025-04-22T03:57:23.661381+00:00",
      "remote_heads_hash": "333a657f701e"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/M1F-explained",
      "last_time_visited": "2025-04-22T03:57:24.273852+00:00",
      "remote_heads_hash": "3110da3d860a"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/IUM",
      "last_time_visited": "2025-04-22T03:57:24.753263+00:00",
      "remote_heads_hash": "a4cc0b92642f"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/formalising-mathematics-2024",
      "last_time_visited": "2025-04-22T03:57:25.314808+00:00",
      "remote_heads_hash": "e7cfe4f5ab5b"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/FLT",
      "last_time_visited": "2025-04-27T03:47:38.863436+00:00",
      "remote_heads_hash": "d67a22d61c0b"
    },
    {
      "remote_url": "https://github.com/Ivan-Sergeyev/seymour",
      "last_time_visited": "2025-04-27T03:47:43.469625+00:00",
      "remote_heads_hash": "dab7bc16645b"
    },
    {
      "remote_url": "https://github.com/ivankobe/FactorizationSystems",
      "last_time_visited": "2025-04-22T03:57:27.424022+00:00",
      "remote_heads_hash": "edb00f932869"
    },
    {
      "remote_url": "https://github.com/Izzimach/EffSpec-lean",
      "last_time_visited": "2025-04-22T03:57:28.061568+00:00",
      "remote_heads_hash": "562e30665420"
    },
    {
      "remote_url": "https://github.com/jaalonso/Calculemus2_es",
      "last_time_visited": "2025-04-22T03:57:28.889749+00:00",
      "remote_heads_hash": "515249923b37"
    },
    {
      "remote_url": "https://github.com/jaalonso/Calculemus2",
      "last_time_visited": "2025-04-22T03:57:29.571257+00:00",
      "remote_heads_hash": "ecf1df8ce6b3"
    },
    {
      "remote_url": "https://github.com/JadAbouHawili/KnightsAndKnaves-Lean4Game",
      "last_time_visited": "2025-04-26T04:16:22.883631+00:00",
      "remote_heads_hash": "e1f685fed335"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/LeanColls",
      "last_time_visited": "2025-04-22T03:57:31.121867+00:00",
      "remote_heads_hash": "1c812dd36af8"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/http",
      "last_time_visited": "2025-04-22T03:57:37.179527+00:00",
      "remote_heads_hash": "533140b90c9c"
    },
    {
      "remote_url": "https://github.com/jeswr/RDF.lean",
      "last_time_visited": "2025-04-22T03:57:37.683108+00:00",
      "remote_heads_hash": "a9f36adc4a2f"
    },
    {
      "remote_url": "https://github.com/joehendrix/lean-crypto",
      "last_time_visited": "2025-04-22T03:57:38.199524+00:00",
      "remote_heads_hash": "3a6516ecfb15"
    },
    {
      "remote_url": "https://github.com/jsm28/AperiodicMonotilesLean",
      "last_time_visited": "2025-04-22T03:57:39.205187+00:00",
      "remote_heads_hash": "9edd7af2f762"
    },
    {
      "remote_url": "https://github.com/katydid/regex-deriv-reproving-agda-in-lean",
      "last_time_visited": "2025-04-22T03:57:39.730055+00:00",
      "remote_heads_hash": "2ca59eba6863"
    },
    {
      "remote_url": "https://github.com/katydid/regex-deriv-lean",
      "last_time_visited": "2025-04-22T03:57:40.316922+00:00",
      "remote_heads_hash": "32f3cca0b2f8"
    },
    {
      "remote_url": "https://github.com/kebekus/ProjectVD",
      "last_time_visited": "2025-04-27T03:55:29.984339+00:00",
      "remote_heads_hash": "9b4c9f3d2e7c"
    },
    {
      "remote_url": "https://github.com/keilambda/eocia-lean",
      "last_time_visited": "2025-04-22T03:57:42.301923+00:00",
      "remote_heads_hash": "52b63bb55762"
    },
    {
      "remote_url": "https://github.com/kim-em/lean-training-data",
      "last_time_visited": "2025-04-22T03:57:42.717821+00:00",
      "remote_heads_hash": "7108932d8b3e"
    },
    {
      "remote_url": "https://github.com/KislyjKisel/Raylib.lean",
      "last_time_visited": "2025-04-22T03:57:43.309842+00:00",
      "remote_heads_hash": "5340227f3bd7"
    },
    {
      "remote_url": "https://github.com/KislyjKisel/lean-pod",
      "last_time_visited": "2025-04-22T03:57:43.932954+00:00",
      "remote_heads_hash": "0e4008b19fa0"
    },
    {
      "remote_url": "https://github.com/kkaunda/spgf",
      "last_time_visited": "2025-04-22T03:57:44.459208+00:00",
      "remote_heads_hash": "d044f65aa55f"
    },
    {
      "remote_url": "https://github.com/kmill/lean4-raytracer",
      "last_time_visited": "2025-04-22T03:57:45.042766+00:00",
      "remote_heads_hash": "a93cae6611b5"
    },
    {
      "remote_url": "https://github.com/kmill/LeanTeX-mathlib",
      "last_time_visited": "2025-04-22T03:57:46.566789+00:00",
      "remote_heads_hash": "7eeb12426a64"
    },
    {
      "remote_url": "https://github.com/kmill/LeanTeX",
      "last_time_visited": "2025-04-22T03:57:47.071095+00:00",
      "remote_heads_hash": "f2b67cb68de9"
    },
    {
      "remote_url": "https://github.com/knowsys/CertifyingDatalog",
      "last_time_visited": "2025-04-22T03:57:47.931952+00:00",
      "remote_heads_hash": "78df03fcc80f"
    },
    {
      "remote_url": "https://github.com/kovach/etch",
      "last_time_visited": "2025-04-22T03:57:57.125899+00:00",
      "remote_heads_hash": "4191c72dce05"
    },
    {
      "remote_url": "https://github.com/lean-dojo/LeanCopilot",
      "last_time_visited": "2025-04-22T03:57:58.731311+00:00",
      "remote_heads_hash": "5b8e872772f7"
    },
    {
      "remote_url": "https://github.com/lean-ja/reference-manual-ja",
      "last_time_visited": "2025-04-22T03:57:59.366688+00:00",
      "remote_heads_hash": "87e7e8a81be1"
    },
    {
      "remote_url": "https://github.com/lean-ja/lean99",
      "last_time_visited": "2025-04-22T03:58:01.270195+00:00",
      "remote_heads_hash": "d458dfc3b5c8"
    },
    {
      "remote_url": "https://github.com/lean-ja/lean-by-example",
      "last_time_visited": "2025-04-22T03:58:01.761016+00:00",
      "remote_heads_hash": "f0229358b5da"
    },
    {
      "remote_url": "https://github.com/lean-machines-central/lean-machines",
      "last_time_visited": "2025-04-26T04:18:10.100566+00:00",
      "remote_heads_hash": "8f2264a208ff"
    },
    {
      "remote_url": "https://github.com/lean-machines-central/lean-machines-examples",
      "last_time_visited": "2025-04-22T03:58:04.460795+00:00",
      "remote_heads_hash": "693936d31735"
    },
    {
      "remote_url": "https://github.com/leanprover-community/tutorials4",
      "last_time_visited": "2025-04-22T03:58:05.023133+00:00",
      "remote_heads_hash": "d2deab6affd4"
    },
    {
      "remote_url": "https://github.com/leanprover-community/sphere-eversion",
      "last_time_visited": "2025-04-22T03:58:05.723239+00:00",
      "remote_heads_hash": "7a1aaaededfd"
    },
    {
      "remote_url": "https://github.com/leanprover-community/quote4",
      "last_time_visited": "2025-04-22T03:58:07.244105+00:00",
      "remote_heads_hash": "f1cec0d144d0"
    },
    {
      "remote_url": "https://github.com/leanprover-community/ProofWidgets4",
      "last_time_visited": "2025-04-23T04:11:13.718031+00:00",
      "remote_heads_hash": "10d94d1b33e2"
    },
    {
      "remote_url": "https://github.com/leanprover-community/plausible",
      "last_time_visited": "2025-04-22T03:58:08.449537+00:00",
      "remote_heads_hash": "5b8e5e3beaa9"
    },
    {
      "remote_url": "https://github.com/leanprover-community/mathport",
      "last_time_visited": "2025-04-22T03:58:08.973250+00:00",
      "remote_heads_hash": "f1a810136ef9"
    },
    {
      "remote_url": "https://github.com/leanprover-community/mathlib4",
      "last_time_visited": "2025-04-27T03:55:35.657709+00:00",
      "remote_heads_hash": "08a57e27b000"
    },
    {
      "remote_url": "https://github.com/leanprover-community/llm",
      "last_time_visited": "2025-04-22T04:15:26.518727+00:00",
      "remote_heads_hash": "d239306b7ab7"
    },
    {
      "remote_url": "https://github.com/leanprover-community/LeanSearchClient",
      "last_time_visited": "2025-04-22T04:15:27.065639+00:00",
      "remote_heads_hash": "0674ee6a0314"
    },
    {
      "remote_url": "https://github.com/leanprover-community/lean4-metaprogramming-book",
      "last_time_visited": "2025-04-22T04:15:27.562747+00:00",
      "remote_heads_hash": "d44060733757"
    },
    {
      "remote_url": "https://github.com/leanprover-community/iris-lean",
      "last_time_visited": "2025-04-22T04:15:28.074180+00:00",
      "remote_heads_hash": "84a452297995"
    },
    {
      "remote_url": "https://github.com/leanprover-community/import-graph",
      "last_time_visited": "2025-04-22T04:15:28.629786+00:00",
      "remote_heads_hash": "a97730530fe1"
    },
    {
      "remote_url": "https://github.com/leanprover-community/NNG4",
      "last_time_visited": "2025-04-22T04:15:29.186606+00:00",
      "remote_heads_hash": "6c6fa024917e"
    },
    {
      "remote_url": "https://github.com/leanprover-community/flt-regular",
      "last_time_visited": "2025-04-26T05:12:06.428251+00:00",
      "remote_heads_hash": "959a5927388e"
    },
    {
      "remote_url": "https://github.com/leanprover-community/duper",
      "last_time_visited": "2025-04-27T04:08:40.026260+00:00",
      "remote_heads_hash": "0b49c499d51b"
    },
    {
      "remote_url": "https://github.com/leanprover-community/con-nf",
      "last_time_visited": "2025-04-22T04:15:31.168230+00:00",
      "remote_heads_hash": "b4e65531e4fe"
    },
    {
      "remote_url": "https://github.com/leanprover-community/batteries",
      "last_time_visited": "2025-04-27T04:19:37.866862+00:00",
      "remote_heads_hash": "aa882ab4d54f"
    },
    {
      "remote_url": "https://github.com/leanprover-community/lean-auto",
      "last_time_visited": "2025-04-26T05:25:01.455419+00:00",
      "remote_heads_hash": "770f5ae6d199"
    },
    {
      "remote_url": "https://github.com/leanprover-community/aesop",
      "last_time_visited": "2025-04-22T04:23:40.245565+00:00",
      "remote_heads_hash": "672607b115e4"
    },
    {
      "remote_url": "https://github.com/leanprover/verso",
      "last_time_visited": "2025-04-26T05:32:15.551760+00:00",
      "remote_heads_hash": "9709e8aa1b32"
    },
    {
      "remote_url": "https://github.com/leanprover/reference-manual",
      "last_time_visited": "2025-04-26T05:32:18.724439+00:00",
      "remote_heads_hash": "a17042ea1589"
    },
    {
      "remote_url": "https://github.com/leanprover/TensorLib",
      "last_time_visited": "2025-04-22T04:23:46.755204+00:00",
      "remote_heads_hash": "9ed93e3dd73c"
    },
    {
      "remote_url": "https://github.com/leanprover/subverso",
      "last_time_visited": "2025-04-26T05:32:39.961592+00:00",
      "remote_heads_hash": "29e3cc83c478"
    },
    {
      "remote_url": "https://github.com/leanprover/SHerLOC",
      "last_time_visited": "2025-04-22T04:23:47.786520+00:00",
      "remote_heads_hash": "8db31b4878a6"
    },
    {
      "remote_url": "https://github.com/leanprover/SampCert",
      "last_time_visited": "2025-04-22T04:23:48.248601+00:00",
      "remote_heads_hash": "88112051b414"
    },
    {
      "remote_url": "https://github.com/leanprover/LNSym",
      "last_time_visited": "2025-04-22T04:23:48.818064+00:00",
      "remote_heads_hash": "57b8e43d83f5"
    },
    {
      "remote_url": "https://github.com/leanprover/leansat",
      "last_time_visited": "2025-04-22T04:24:13.711241+00:00",
      "remote_heads_hash": "1b9c393441a9"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4export",
      "last_time_visited": "2025-04-22T04:24:14.280478+00:00",
      "remote_heads_hash": "8fde9a477129"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4checker",
      "last_time_visited": "2025-04-22T04:24:15.023373+00:00",
      "remote_heads_hash": "f4e994ff1c98"
    },
    {
      "remote_url": "https://github.com/leanprover/KLR",
      "last_time_visited": "2025-04-27T04:21:22.169966+00:00",
      "remote_heads_hash": "8565fd3fad1a"
    },
    {
      "remote_url": "https://github.com/leanprover/doc-gen4",
      "last_time_visited": "2025-04-22T04:27:52.862430+00:00",
      "remote_heads_hash": "b11bb6fc0eeb"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4-cli",
      "last_time_visited": "2025-04-22T04:27:53.430821+00:00",
      "remote_heads_hash": "81485c108a0e"
    },
    {
      "remote_url": "https://github.com/lecopivo/SciLean",
      "last_time_visited": "2025-04-22T04:27:53.949818+00:00",
      "remote_heads_hash": "d123fd93d8f8"
    },
    {
      "remote_url": "https://github.com/lecopivo/LeanBLAS",
      "last_time_visited": "2025-04-22T04:27:55.488028+00:00",
      "remote_heads_hash": "0d414cf850d5"
    },
    {
      "remote_url": "https://github.com/lecopivo/lean4-karray",
      "last_time_visited": "2025-04-22T04:27:56.062273+00:00",
      "remote_heads_hash": "1277b66d931f"
    },
    {
      "remote_url": "https://github.com/lf-lang/reactor-model",
      "last_time_visited": "2025-04-22T04:27:56.574119+00:00",
      "remote_heads_hash": "43ecefc264f0"
    },
    {
      "remote_url": "https://github.com/lindy-labs/corelib_verification",
      "last_time_visited": "2025-04-26T05:38:20.599297+00:00",
      "remote_heads_hash": "d6e776ee6bc0"
    },
    {
      "remote_url": "https://github.com/lindy-labs/aegis",
      "last_time_visited": "2025-04-23T04:37:32.173511+00:00",
      "remote_heads_hash": "2889b11ca8f9"
    },
    {
      "remote_url": "https://github.com/loganrjmurphy/LeanEuclid",
      "last_time_visited": "2025-04-22T04:27:58.488495+00:00",
      "remote_heads_hash": "63d340883186"
    },
    {
      "remote_url": "https://github.com/m4lvin/lean4-pdl",
      "last_time_visited": "2025-04-23T04:37:33.597991+00:00",
      "remote_heads_hash": "c672f8a8301a"
    },
    {
      "remote_url": "https://github.com/madvorak/vcsp",
      "last_time_visited": "2025-04-22T04:39:08.022523+00:00",
      "remote_heads_hash": "bb3afa1c77cc"
    },
    {
      "remote_url": "https://github.com/madvorak/read-lean",
      "last_time_visited": "2025-04-22T04:39:08.649145+00:00",
      "remote_heads_hash": "14f55738d01a"
    },
    {
      "remote_url": "https://github.com/madvorak/duality",
      "last_time_visited": "2025-04-26T05:38:23.251502+00:00",
      "remote_heads_hash": "cd27cdaacdb5"
    },
    {
      "remote_url": "https://github.com/Maokami/vqc_in_lean",
      "last_time_visited": "2025-04-22T04:39:09.963788+00:00",
      "remote_heads_hash": "31f759a86b91"
    },
    {
      "remote_url": "https://github.com/marcusrossel/lean-snakebird",
      "last_time_visited": "2025-04-22T04:39:10.484414+00:00",
      "remote_heads_hash": "613f0a2c6dd3"
    },
    {
      "remote_url": "https://github.com/marcusrossel/lean-egg",
      "last_time_visited": "2025-04-23T04:48:52.899710+00:00",
      "remote_heads_hash": "c6007b26951a"
    },
    {
      "remote_url": "https://github.com/math-xmum/gametheory",
      "last_time_visited": "2025-04-22T04:39:11.883253+00:00",
      "remote_heads_hash": "186d87952f5b"
    },
    {
      "remote_url": "https://github.com/mhuisi/Uniq",
      "last_time_visited": "2025-04-22T04:39:12.401545+00:00",
      "remote_heads_hash": "8632f707f342"
    },
    {
      "remote_url": "https://github.com/MichaelStollBayreuth/Weights",
      "last_time_visited": "2025-04-22T04:39:13.050518+00:00",
      "remote_heads_hash": "cab50a1177cf"
    },
    {
      "remote_url": "https://github.com/MichaelStollBayreuth/EulerProducts",
      "last_time_visited": "2025-04-22T04:39:13.531255+00:00",
      "remote_heads_hash": "a475080c281b"
    },
    {
      "remote_url": "https://github.com/mo271/FormalBook",
      "last_time_visited": "2025-04-22T04:39:13.929192+00:00",
      "remote_heads_hash": "205f79a11375"
    },
    {
      "remote_url": "https://github.com/model-checking/rust-lean-models",
      "last_time_visited": "2025-04-22T04:39:14.467552+00:00",
      "remote_heads_hash": "9acadaa1b951"
    },
    {
      "remote_url": "https://github.com/morganfshirley/CommComp",
      "last_time_visited": "2025-04-22T04:39:15.081172+00:00",
      "remote_heads_hash": "bb6b1df5fd9e"
    },
    {
      "remote_url": "https://github.com/mortarsanjaya/IMOSLLean4",
      "last_time_visited": "2025-04-22T04:39:15.615309+00:00",
      "remote_heads_hash": "cd24d3f3c273"
    },
    {
      "remote_url": "https://github.com/NethermindEth/risczero-fv",
      "last_time_visited": "2025-04-22T04:39:16.467577+00:00",
      "remote_heads_hash": "be4562d9e9c0"
    },
    {
      "remote_url": "https://github.com/NethermindEth/EVMYulLean",
      "last_time_visited": "2025-04-22T04:39:17.528082+00:00",
      "remote_heads_hash": "2d3177845d1b"
    },
    {
      "remote_url": "https://github.com/niklasmohrin/lean-seminar-2023",
      "last_time_visited": "2025-04-22T04:39:18.262269+00:00",
      "remote_heads_hash": "11e47f92bf1d"
    },
    {
      "remote_url": "https://github.com/nomeata/loogle",
      "last_time_visited": "2025-04-22T04:39:18.768235+00:00",
      "remote_heads_hash": "7681188b64c3"
    },
    {
      "remote_url": "https://github.com/nomeata/lean-calcify",
      "last_time_visited": "2025-04-22T04:39:19.302154+00:00",
      "remote_heads_hash": "9b5c02bf8403"
    },
    {
      "remote_url": "https://github.com/NUS-Math-Formalization/CalculusSkeleton",
      "last_time_visited": "2025-04-22T04:39:19.738010+00:00",
      "remote_heads_hash": "77b97786a779"
    },
    {
      "remote_url": "https://github.com/objectionary/proof",
      "last_time_visited": "2025-04-22T04:39:20.353795+00:00",
      "remote_heads_hash": "3c07a6860913"
    },
    {
      "remote_url": "https://github.com/opencompl/lean-mlir",
      "last_time_visited": "2025-04-27T04:25:19.684486+00:00",
      "remote_heads_hash": "3c456a0d0506"
    },
    {
      "remote_url": "https://github.com/optsuite/optlib",
      "last_time_visited": "2025-04-22T04:39:51.377771+00:00",
      "remote_heads_hash": "bd52ad3a2cec"
    },
    {
      "remote_url": "https://github.com/or4nge19/NeuralNetworks",
      "last_time_visited": "2025-04-22T04:39:51.962360+00:00",
      "remote_heads_hash": "60bec0958ed3"
    },
    {
      "remote_url": "https://github.com/pandaman64/lean-regex",
      "last_time_visited": "2025-04-27T04:25:43.686993+00:00",
      "remote_heads_hash": "c6a0d31ff709"
    },
    {
      "remote_url": "https://github.com/Paper-Proof/paperproof",
      "last_time_visited": "2025-04-22T04:39:53.111979+00:00",
      "remote_heads_hash": "69f0d23a0693"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/verbose-lean4",
      "last_time_visited": "2025-04-26T05:39:04.877811+00:00",
      "remote_heads_hash": "aae5ac1f49aa"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/GlimpseOfLean",
      "last_time_visited": "2025-04-26T05:42:41.826165+00:00",
      "remote_heads_hash": "8ce6d529b093"
    },
    {
      "remote_url": "https://github.com/paulch42/lean-spec",
      "last_time_visited": "2025-04-22T04:40:01.326108+00:00",
      "remote_heads_hash": "8264d464e45c"
    },
    {
      "remote_url": "https://github.com/pawelsberg/lean-directory-browser",
      "last_time_visited": "2025-04-22T04:40:01.858431+00:00",
      "remote_heads_hash": "e740683950be"
    },
    {
      "remote_url": "https://github.com/PeterKementzey/graph-library-for-lean4",
      "last_time_visited": "2025-04-22T04:40:02.386612+00:00",
      "remote_heads_hash": "0eb4fa24abc1"
    },
    {
      "remote_url": "https://github.com/pimpale/llm.lean",
      "last_time_visited": "2025-04-22T04:40:02.873162+00:00",
      "remote_heads_hash": "5875eed27aef"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanProject",
      "last_time_visited": "2025-04-22T04:40:03.350990+00:00",
      "remote_heads_hash": "ff6b956197ec"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanInVienna2024",
      "last_time_visited": "2025-04-22T04:40:03.872361+00:00",
      "remote_heads_hash": "bfa3f74922c2"
    },
    {
      "remote_url": "https://github.com/proofs-and-programs/proofs-and-programs-25",
      "last_time_visited": "2025-04-26T05:42:44.689302+00:00",
      "remote_heads_hash": "4d396e1dce8b"
    },
    {
      "remote_url": "https://github.com/provables/special-numbers",
      "last_time_visited": "2025-04-22T04:40:05.015305+00:00",
      "remote_heads_hash": "3ff028720537"
    },
    {
      "remote_url": "https://github.com/quangvdao/ZKLib-deprecated",
      "last_time_visited": "2025-04-22T04:40:22.240620+00:00",
      "remote_heads_hash": "6f178ea20246"
    },
    {
      "remote_url": "https://github.com/rahul3613/ProofNet-lean4",
      "last_time_visited": "2025-04-22T04:40:22.833337+00:00",
      "remote_heads_hash": "62462040cf28"
    },
    {
      "remote_url": "https://github.com/rahul3613/miniF2F-lean4",
      "last_time_visited": "2025-04-22T04:40:23.713396+00:00",
      "remote_heads_hash": "ed3336e45e16"
    },
    {
      "remote_url": "https://github.com/rami3l/PLFaLean",
      "last_time_visited": "2025-04-22T04:40:24.339284+00:00",
      "remote_heads_hash": "64870ad853f0"
    },
    {
      "remote_url": "https://github.com/reilabs/proven-zk",
      "last_time_visited": "2025-04-22T04:40:24.905579+00:00",
      "remote_heads_hash": "89dfce5717eb"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/testing-lower-bounds",
      "last_time_visited": "2025-04-22T04:40:25.422127+00:00",
      "remote_heads_hash": "fccb394cbbf7"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/kolmogorov_extension4",
      "last_time_visited": "2025-04-22T04:40:26.125755+00:00",
      "remote_heads_hash": "5e5e07d89ae7"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/CLT",
      "last_time_visited": "2025-04-27T04:25:48.491345+00:00",
      "remote_heads_hash": "3c73ae76415b"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/demontrer2025",
      "last_time_visited": "2025-04-22T04:40:27.248882+00:00",
      "remote_heads_hash": "bd4089796258"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/LFTCM2024",
      "last_time_visited": "2025-04-22T04:40:28.046459+00:00",
      "remote_heads_hash": "1508422fc709"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/flt3",
      "last_time_visited": "2025-04-22T04:40:28.635538+00:00",
      "remote_heads_hash": "70b51e008451"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/kaplanski4",
      "last_time_visited": "2025-04-22T04:40:29.155957+00:00",
      "remote_heads_hash": "b88c997ee624"
    },
    {
      "remote_url": "https://github.com/risc0/risc0-lean4",
      "last_time_visited": "2025-04-22T04:40:29.669788+00:00",
      "remote_heads_hash": "76fff39fd5ca"
    },
    {
      "remote_url": "https://github.com/Seasawher/mk-exercise",
      "last_time_visited": "2025-04-22T04:40:30.412582+00:00",
      "remote_heads_hash": "fe2286bc7c85"
    },
    {
      "remote_url": "https://github.com/Seasawher/mdgen",
      "last_time_visited": "2025-04-22T04:40:30.964935+00:00",
      "remote_heads_hash": "035325c4499d"
    },
    {
      "remote_url": "https://github.com/Seasawher/mathlib4-help",
      "last_time_visited": "2025-04-27T04:25:51.502627+00:00",
      "remote_heads_hash": "6decce20b7ea"
    },
    {
      "remote_url": "https://github.com/Seasawher/lean-book",
      "last_time_visited": "2025-04-22T04:40:33.197861+00:00",
      "remote_heads_hash": "f5a57bff0f45"
    },
    {
      "remote_url": "https://github.com/Seasawher/import-all",
      "last_time_visited": "2025-04-22T04:40:33.718234+00:00",
      "remote_heads_hash": "5cfb15f55ac8"
    },
    {
      "remote_url": "https://github.com/Shreyas4991/DGAlgorithms",
      "last_time_visited": "2025-04-23T04:53:48.912160+00:00",
      "remote_heads_hash": "f8e6e81245a0"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/Saturn",
      "last_time_visited": "2025-04-22T04:40:34.723611+00:00",
      "remote_heads_hash": "3f2346688f39"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/Polylean",
      "last_time_visited": "2025-04-23T04:53:50.334144+00:00",
      "remote_heads_hash": "dd3cef356d86"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/proofs-and-programs-2023",
      "last_time_visited": "2025-04-22T04:40:35.920750+00:00",
      "remote_heads_hash": "f50f15d7d0b0"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/MetaExamples",
      "last_time_visited": "2025-04-22T04:40:36.587131+00:00",
      "remote_heads_hash": "21673a31a16b"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanLion",
      "last_time_visited": "2025-04-22T04:40:37.086082+00:00",
      "remote_heads_hash": "9506b2acf8a3"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanAideTools",
      "last_time_visited": "2025-04-22T04:40:37.597468+00:00",
      "remote_heads_hash": "9555b8513464"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanAide",
      "last_time_visited": "2025-04-22T04:40:38.154831+00:00",
      "remote_heads_hash": "eb2c967d8047"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/lean-loris",
      "last_time_visited": "2025-04-22T04:41:06.310505+00:00",
      "remote_heads_hash": "1e336dd1a8f1"
    },
    {
      "remote_url": "https://github.com/sinhp/LeanFibredCategories",
      "last_time_visited": "2025-04-22T04:41:06.994923+00:00",
      "remote_heads_hash": "cb5cdf9d5b6e"
    },
    {
      "remote_url": "https://github.com/starkware-libs/formal-proofs",
      "last_time_visited": "2025-04-22T04:41:07.575144+00:00",
      "remote_heads_hash": "e7128b1e4414"
    },
    {
      "remote_url": "https://github.com/sven-manthe/A-formalization-of-Borel-determinacy-in-Lean",
      "last_time_visited": "2025-04-22T04:41:08.162713+00:00",
      "remote_heads_hash": "5cfc842b0804"
    },
    {
      "remote_url": "https://github.com/T-Brick/lean-wasm",
      "last_time_visited": "2025-04-22T04:41:08.693952+00:00",
      "remote_heads_hash": "b88e6c28788e"
    },
    {
      "remote_url": "https://github.com/T-Brick/lean2wasm",
      "last_time_visited": "2025-04-22T04:41:09.207437+00:00",
      "remote_heads_hash": "3aa558e05c14"
    },
    {
      "remote_url": "https://github.com/teorth/pfr",
      "last_time_visited": "2025-04-22T04:41:09.692802+00:00",
      "remote_heads_hash": "01e12304c4e8"
    },
    {
      "remote_url": "https://github.com/teorth/expdb",
      "last_time_visited": "2025-04-22T04:41:11.714189+00:00",
      "remote_heads_hash": "f344a09ba88a"
    },
    {
      "remote_url": "https://github.com/teorth/equational_theories",
      "last_time_visited": "2025-04-26T05:42:57.087992+00:00",
      "remote_heads_hash": "fd4dc0c2a458"
    },
    {
      "remote_url": "https://github.com/Timeroot/Lean-QuantumInfo",
      "last_time_visited": "2025-04-22T04:41:16.991796+00:00",
      "remote_heads_hash": "7a073c31ea15"
    },
    {
      "remote_url": "https://github.com/Timeroot/ComputableReal",
      "last_time_visited": "2025-04-22T04:41:17.517532+00:00",
      "remote_heads_hash": "8abf2e84860e"
    },
    {
      "remote_url": "https://github.com/todbeibrot/Lean-Oscar",
      "last_time_visited": "2025-04-22T04:41:18.013668+00:00",
      "remote_heads_hash": "5be3ae253c94"
    },
    {
      "remote_url": "https://github.com/Trequetrum/lean4game-logic",
      "last_time_visited": "2025-04-22T04:41:18.586334+00:00",
      "remote_heads_hash": "eebd9da88e9d"
    },
    {
      "remote_url": "https://github.com/tydeu/lean4-alloy",
      "last_time_visited": "2025-04-22T04:41:19.125144+00:00",
      "remote_heads_hash": "607e2d5fe13b"
    },
    {
      "remote_url": "https://github.com/ufmg-smite/lean-smt",
      "last_time_visited": "2025-04-22T04:41:19.658066+00:00",
      "remote_heads_hash": "38596c368e5e"
    },
    {
      "remote_url": "https://github.com/VCA-EPFL/leanses",
      "last_time_visited": "2025-04-22T04:41:20.353247+00:00",
      "remote_heads_hash": "4a086d674a6c"
    },
    {
      "remote_url": "https://github.com/VCA-EPFL/dataflow-rewriter",
      "last_time_visited": "2025-04-26T05:43:16.535280+00:00",
      "remote_heads_hash": "815feb6db1f1"
    },
    {
      "remote_url": "https://github.com/verified-optimization/CvxLean",
      "last_time_visited": "2025-04-22T04:41:21.490624+00:00",
      "remote_heads_hash": "7a4249e9e921"
    },
    {
      "remote_url": "https://github.com/Verified-zkEVM/ZKLib",
      "last_time_visited": "2025-04-26T05:43:19.406153+00:00",
      "remote_heads_hash": "541306a5c1a7"
    },
    {
      "remote_url": "https://github.com/Verified-zkEVM/clean",
      "last_time_visited": "2025-04-27T04:25:58.742098+00:00",
      "remote_heads_hash": "c14071371c67"
    },
    {
      "remote_url": "https://github.com/verse-lab/veil",
      "last_time_visited": "2025-04-26T06:17:00.036163+00:00",
      "remote_heads_hash": "7a47d5e4ddfd"
    },
    {
      "remote_url": "https://github.com/verse-lab/lean-ssr",
      "last_time_visited": "2025-04-22T04:47:34.304707+00:00",
      "remote_heads_hash": "90c340f9e5c7"
    },
    {
      "remote_url": "https://github.com/vihdzp/rubik-lean4",
      "last_time_visited": "2025-04-22T04:47:34.757983+00:00",
      "remote_heads_hash": "1fc48ff90e62"
    },
    {
      "remote_url": "https://github.com/vihdzp/combinatorial-games",
      "last_time_visited": "2025-04-22T04:47:35.289898+00:00",
      "remote_heads_hash": "f521d632a4bd"
    },
    {
      "remote_url": "https://github.com/vltanh/lean4-analysis-tao",
      "last_time_visited": "2025-04-22T04:47:35.791988+00:00",
      "remote_heads_hash": "57996e1217a9"
    },
    {
      "remote_url": "https://github.com/wellecks/ntptutorial",
      "last_time_visited": "2025-04-22T04:47:36.172086+00:00",
      "remote_heads_hash": "ecbb7c378fae"
    },
    {
      "remote_url": "https://github.com/wellecks/llmstep",
      "last_time_visited": "2025-04-22T04:47:36.983950+00:00",
      "remote_heads_hash": "164bd714fab9"
    },
    {
      "remote_url": "https://github.com/wupr/order-p-q",
      "last_time_visited": "2025-04-22T04:47:37.699941+00:00",
      "remote_heads_hash": "b0999047d697"
    },
    {
      "remote_url": "https://github.com/Xiyou-Wu/RiemannianGeometry",
      "last_time_visited": "2025-04-22T04:47:38.265196+00:00",
      "remote_heads_hash": "711e79694735"
    },
    {
      "remote_url": "https://github.com/YaelDillies/Toric",
      "last_time_visited": "2025-04-27T04:32:38.034125+00:00",
      "remote_heads_hash": "db397272e965"
    },
    {
      "remote_url": "https://github.com/YaelDillies/LeanCamCombi",
      "last_time_visited": "2025-04-22T04:47:39.393970+00:00",
      "remote_heads_hash": "e0017197ebf0"
    },
    {
      "remote_url": "https://github.com/YaelDillies/LeanAPAP",
      "last_time_visited": "2025-04-22T04:47:40.057667+00:00",
      "remote_heads_hash": "15c646db28ea"
    },
    {
      "remote_url": "https://github.com/YaelDillies/ChandraFurstLipton",
      "last_time_visited": "2025-04-22T04:47:40.838164+00:00",
      "remote_heads_hash": "c8b483fa1113"
    },
    {
      "remote_url": "https://github.com/yangky11/miniF2F-lean4",
      "last_time_visited": "2025-04-22T04:47:41.340051+00:00",
      "remote_heads_hash": "f520a26cc363"
    },
    {
      "remote_url": "https://github.com/yangky11/lean4-example",
      "last_time_visited": "2025-04-22T04:47:41.916602+00:00",
      "remote_heads_hash": "7e60684c8a6d"
    },
    {
      "remote_url": "https://github.com/YnirPaz/PCF-Theory",
      "last_time_visited": "2025-04-22T04:47:42.439839+00:00",
      "remote_heads_hash": "7b0d1c8f2732"
    },
    {
      "remote_url": "https://github.com/yuma-mizuno/lean-math-workshop",
      "last_time_visited": "2025-04-22T04:47:42.957143+00:00",
      "remote_heads_hash": "21fbc4ec8b2a"
    }
  ],
  "sorries": [
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/Wiener.lean",
        "start_line": 2275,
        "start_column": 61,
        "end_line": 2275,
        "end_column": 66
      },
      "debug_info": {
        "goal": "A x : ℝ\nG : ℂ → ℂ\nf : ℕ → ℝ\nhpos : 0 ≤ f\nhG : ContinuousOn G {s | 1 ≤ s.re}\nhG' : EqOn G (fun s => LSeries (fun n => ↑(f n)) s - ↑A / (s - 1)) {s | 1 < s.re}\nhf : ∀ (σ' : ℝ), 1 < σ' → Summable (nterm (fun n => ↑(f n)) σ')\nψ : CS 2 ℂ\nhψpos : ∀ (y : ℝ), 0 ≤ (𝓕 ψ.toFun y).re ∧ (𝓕 ψ.toFun y).im = 0\nhx : 1 ≤ x\n⊢ ∑' (n : ℕ), ↑(f n) / ↑n * 𝓕 ψ.toFun (1 / (2 * π) * Real.log (↑n / x)) -\n      ↑A * ∫ (u : ℝ) in Ici (-Real.log x), 𝓕 ψ.toFun (u / (2 * π)) =\n    ∫ (t : ℝ), G (1 + ↑t * I) * ψ.toFun t * ↑x ^ (↑t * I)",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2275"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-04-04T12:17:01-07:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "bf42e60cb656be3afbf004c04698b3eaef26c35ce22b8517b85496962752fa3e"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/Wiener.lean",
        "start_line": 2297,
        "start_column": 90,
        "end_line": 2297,
        "end_column": 95
      },
      "debug_info": {
        "goal": "A : ℝ\nG : ℂ → ℂ\nf : ℕ → ℝ\nhpos : 0 ≤ f\nhG : ContinuousOn G {s | 1 ≤ s.re}\nhG' : EqOn G (fun s => LSeries (fun n => ↑(f n)) s - ↑A / (s - 1)) {s | 1 < s.re}\nhf : ∀ (σ' : ℝ), 1 < σ' → Summable (nterm (fun n => ↑(f n)) σ')\nψ : CS 2 ℂ\nhψpos : ∀ (y : ℝ), 0 ≤ (𝓕 ψ.toFun y).re ∧ (𝓕 ψ.toFun y).im = 0\n⊢ ∃ B, ∀ (x : ℝ), 0 < x → ‖∑' (n : ℕ), ↑(f n) / ↑n * 𝓕 ψ.toFun (1 / (2 * π) * Real.log (↑n / x))‖ ≤ B",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2297"
      },
      "metadata": {
        "blame_email_hash": "4d01d7c10d46",
        "blame_date": "2024-04-16T02:15:35+02:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "520457e1f0d2e7250f0878b0209d6145b18befc38cc01b64f39f34a1e7dc7d0f"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/Wiener.lean",
        "start_line": 2315,
        "start_column": 2,
        "end_line": 2315,
        "end_column": 7
      },
      "debug_info": {
        "goal": "A : ℝ\nG : ℂ → ℂ\nf : ℕ → ℝ\nhpos : 0 ≤ f\nhf : ∀ (σ' : ℝ), 1 < σ' → Summable (nterm (fun n => ↑(f n)) σ')\nhG : ContinuousOn G {s | 1 ≤ s.re}\nhG' : EqOn G (fun s => LSeries (fun n => ↑(f n)) s - ↑A / (s - 1)) {s | 1 < s.re}\n⊢ cheby fun n => ↑(f n)",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2315"
      },
      "metadata": {
        "blame_email_hash": "4d01d7c10d46",
        "blame_date": "2024-04-16T02:15:35+02:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "b95d2c7a770490b019b59c2ded7e2de30f5e5f9b2c1006481198e3b0cc5605f3"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 328,
        "start_column": 2,
        "end_line": 328,
        "end_column": 7
      },
      "debug_info": {
        "goal": "SmoothingF : ℝ → ℝ\ndiffSmoothingF : ContDiff ℝ 1 SmoothingF\nsuppSmoothingF : support SmoothingF ⊆ Icc (1 / 2) 2\nSmoothingFnonneg : ∀ x > 0, 0 ≤ SmoothingF x\nmass_one : ∫ (x : ℝ) in Ioi 0, SmoothingF x / x = 1\nX✝ : ℝ\nC : ℝ := sorry\nCpos : 0 < C\nX : ℝ\nX_ge_C : C < X\nε : ℝ\nεpos : 0 < ε\nε_lt_one : ε < 1\n⊢ ‖↑(∑' (n : ℕ), Λ n * Smooth1 SmoothingF ε (↑n / X)) - ↑((Finset.range ⌊X⌋₊).sum ⇑Λ)‖ ≤ C * ε * X * Real.log X",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L328"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2024-03-11T23:23:22-04:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "5f3104a917032b249932ce6f08c0c08e464ff200ddc7419e5587a268f0caa950"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 319,
        "start_column": 23,
        "end_line": 319,
        "end_column": 28
      },
      "debug_info": {
        "goal": "SmoothingF : ℝ → ℝ\ndiffSmoothingF : ContDiff ℝ 1 SmoothingF\nsuppSmoothingF : support SmoothingF ⊆ Icc (1 / 2) 2\nSmoothingFnonneg : ∀ x > 0, 0 ≤ SmoothingF x\nmass_one : ∫ (x : ℝ) in Ioi 0, SmoothingF x / x = 1\nX : ℝ\nC : ℝ := sorry\n⊢ 0 < C",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L319"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-14T14:09:55-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "d31421907a8b6b41381cf2b924520747406162ce8610f001d46fc402352275bb"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 365,
        "start_column": 2,
        "end_line": 365,
        "end_column": 7
      },
      "debug_info": {
        "goal": "SmoothingF : ℝ → ℝ\nε : ℝ\nε_pos : 0 < ε\nX σ₀ : ℝ\nσ₀_pos : 0 < σ₀\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF ε X) (Icc σ₀ 2 ×ℂ univ \\ {1})\nsuppSmoothingF : support SmoothingF ⊆ Icc (1 / 2) 2\nSmoothingFnonneg : ∀ x > 0, 0 ≤ SmoothingF x\nmass_one : ∫ (x : ℝ) in Ioi 0, SmoothingF x / x = 1\n⊢ Integrable (fun t => SmoothedChebyshevIntegrand SmoothingF ε X (2 + ↑t * I)) volume",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L365"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-28T10:57:09-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "1e012fa8e721c16a5a5609079fc52308969208b5e434f92efa975840c2832c11"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 399,
        "start_column": 2,
        "end_line": 399,
        "end_column": 7
      },
      "debug_info": {
        "goal": "SmoothingF : ℝ → ℝ\nε : ℝ\nε_pos : 0 < ε\nX T : ℝ\nT_pos : 0 < T\nσ₀ : ℝ\nσ₀_pos : 0 < σ₀\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF ε X) (Icc σ₀ 2 ×ℂ univ \\ {1})\nsuppSmoothingF : support SmoothingF ⊆ Icc (1 / 2) 2\nSmoothingFnonneg : ∀ x > 0, 0 ≤ SmoothingF x\nmass_one : ∫ (x : ℝ) in Ioi 0, SmoothingF x / x = 1\n⊢ (1 / (2 * ↑π * I)) •\n      ((I • ∫ (t : ℝ) in Iic (-T), SmoothedChebyshevIntegrand SmoothingF ε X (↑2 + ↑t * I)) +\n          VIntegral (SmoothedChebyshevIntegrand SmoothingF ε X) 2 (-T) T +\n        I • ∫ (t : ℝ) in Ici T, SmoothedChebyshevIntegrand SmoothingF ε X (↑2 + ↑t * I)) =\n    𝓜 (fun x => ↑(Smooth1 SmoothingF ε x)) 1 * ↑X +\n      1 / (2 * ↑π * I) *\n        (((((I * ∫ (t : ℝ) in Iic (-T), SmoothedChebyshevIntegrand SmoothingF ε X (2 + ↑t * I)) -\n                ∫ (s : ℝ) in Icc σ₀ 2, SmoothedChebyshevIntegrand SmoothingF ε X (↑s - ↑T * I)) +\n              I * ∫ (t : ℝ) in Icc (-T) T, SmoothedChebyshevIntegrand SmoothingF ε X (↑σ₀ + ↑t * I)) +\n            ∫ (s : ℝ) in Icc σ₀ 2, SmoothedChebyshevIntegrand SmoothingF ε X (↑s + ↑T * I)) +\n          I * ∫ (t : ℝ) in Ici T, SmoothedChebyshevIntegrand SmoothingF ε X (2 + ↑t * I))",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L399"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-10T12:59:29-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "8a5f497557d4896ce8c37874eca4b8585364a3abd8ceb30f6ee6171d8482ad06"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 511,
        "start_column": 2,
        "end_line": 511,
        "end_column": 7
      },
      "debug_info": {
        "goal": "c : ℝ := sorry\ncpos : 0 < c\nC : ℝ := sorry\nX₀ : ℝ := sorry\nX : ℝ\nX_ge_X₀ : X ≥ X₀\n⊢ ‖(ChebyshevPsi - id) X‖ ≤ C * ‖X * rexp (-c * Real.log X ^ (1 / 10))‖",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L511"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2024-03-11T23:23:22-04:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "06d286d38a1822df79fb6cecfe97f52dcda8255daa248e6e5fdc68bffcf5f982"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 501,
        "start_column": 23,
        "end_line": 501,
        "end_column": 28
      },
      "debug_info": {
        "goal": "c : ℝ := sorry\n⊢ 0 < c",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-14T15:25:09-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "7abbc3ed8d442ac777ee7b24e56250ba81752a871d4e15f84b9af0dfdd5cdc40"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/Consequences.lean",
        "start_line": 1843,
        "start_column": 2,
        "end_line": 1843,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ∃ c, (c =o[atTop] fun x => 1) ∧ ∀ (n : ℕ), ↑(nth Nat.Prime n) = (1 + c n) * ↑n * log ↑n",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L1843"
      },
      "metadata": {
        "blame_email_hash": "11451cd2f124",
        "blame_date": "2024-02-19T02:44:41-08:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "854705ad4af4af94ae067b9a2008bd912742cbed7e7b331468ef90c00e9a103d"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/Consequences.lean",
        "start_line": 2574,
        "start_column": 81,
        "end_line": 2574,
        "end_column": 86
      },
      "debug_info": {
        "goal": "⊢ (fun x => ∑ n ∈ range ⌊x⌋₊, μ n) =o[atTop] fun x => x",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2574"
      },
      "metadata": {
        "blame_email_hash": "5ecb8fcfe98c",
        "blame_date": "2025-02-06T17:41:08+01:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "4c6a0455a8b34b52a7f64e32b417e8316186eaa3044d52e3d6bb7f5dd6b6c930"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/Consequences.lean",
        "start_line": 2610,
        "start_column": 2,
        "end_line": 2610,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ (fun x => ∑ n ∈ range ⌊x⌋₊, (-1) ^ Ω n) =o[atTop] fun x => x",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2610"
      },
      "metadata": {
        "blame_email_hash": "11451cd2f124",
        "blame_date": "2024-02-19T02:44:41-08:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "c7459a88ec8bad35d847133968a3043cc0982421b5b59fe3e1dd7365c8a117a2"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/Consequences.lean",
        "start_line": 2634,
        "start_column": 98,
        "end_line": 2634,
        "end_column": 103
      },
      "debug_info": {
        "goal": "⊢ (fun x => ∑ n ∈ range ⌊x⌋₊, ↑(μ n) / ↑n) =o[atTop] fun x => 1",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2634"
      },
      "metadata": {
        "blame_email_hash": "5ecb8fcfe98c",
        "blame_date": "2025-02-06T17:41:08+01:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "66776fc89f5135769ea9e5f5bfb90ce7fba07bcf07c1a95cc8a671b1390a8799"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 47,
        "start_column": 28,
        "end_line": 47,
        "end_column": 33
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\n⊢ M.rk {e} ≤ 1",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-10T13:43:44-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "7e49c2cd31977f777678b7f90d7c8ed2a923bbdf546d7a170623287651e6f794"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 48,
        "start_column": 67,
        "end_line": 48,
        "end_column": 72
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\n⊢ ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "4d380fc1f5e7c0f5dd8e1497baae67b170c08b8c81fae8f69c43b80558c9ed60"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 56,
        "start_column": 6,
        "end_line": 56,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\n⊢ insert e (M.E \\ insert e Y) = M.E \\ Y",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1f19e98e4f46add55bc42e71e4596abda6b53d1dd8d161ab678ecdb9b1d2a9ed"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 57,
        "start_column": 4,
        "end_line": 57,
        "end_column": 9
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhins : insert e (M.E \\ insert e Y) = M.E \\ Y\n⊢ ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "82a5aef37a1937633cfa8f0ad86dfac1410727f0e846396cb884875cca33f6c3"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 59,
        "start_column": 4,
        "end_line": 59,
        "end_column": 9
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhconEY : ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))\n⊢ ↑M.rank - 1 = ↑((M ／ {e}).rk (M.E \\ {e}))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L59"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1eeaf815d12cc344fae058d523a5c29135db1883beadb3587fbe8072b3955987"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 64,
        "start_column": 41,
        "end_line": 64,
        "end_column": 46
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhconEY : ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))\nhconE : ↑M.rank - 1 = ↑((M ／ {e}).rk (M.E \\ {e}))\n⊢ ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) ≤ ↑(M.rk X) + ↑(M.rk (insert e Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L64"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "36e20e542d0f74e33d886f6dc192f542b74a0706047a72b9fa4ca7f47c414b68"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 66,
        "start_column": 57,
        "end_line": 66,
        "end_column": 62
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhconEY : ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))\nhconE : ↑M.rank - 1 = ↑((M ／ {e}).rk (M.E \\ {e}))\nhsub1 : ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) ≤ ↑(M.rk X) + ↑(M.rk (insert e Y))\n⊢ ↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e}))) ≤ ↑(M.rk (M.E \\ insert e X)) + ↑(M.rk (M.E \\ Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "038e52d203f014e6f5700c346914cbd1febdf9d28b1ecb168ad29c8d3501da7e"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 68,
        "start_column": 59,
        "end_line": 68,
        "end_column": 64
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhconEY : ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))\nhconE : ↑M.rank - 1 = ↑((M ／ {e}).rk (M.E \\ {e}))\nhsub1 : ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) ≤ ↑(M.rk X) + ↑(M.rk (insert e Y))\nhsub2 : ↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e}))) ≤ ↑(M.rk (M.E \\ insert e X)) + ↑(M.rk (M.E \\ Y))\n⊢ ↑(M ＼ {e}).rank ≤ ↑M.rank",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "06517ef4d807e887f53e54fdc32bca0b946c8fa7457c71cc61b07f0089b6db3c"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 74,
        "start_column": 4,
        "end_line": 74,
        "end_column": 9
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhconEY : ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))\nhconE : ↑M.rank - 1 = ↑((M ／ {e}).rk (M.E \\ {e}))\nhsub1 : ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) ≤ ↑(M.rk X) + ↑(M.rk (insert e Y))\nhsub2 : ↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e}))) ≤ ↑(M.rk (M.E \\ insert e X)) + ↑(M.rk (M.E \\ Y))\nhneed : ↑(M ＼ {e}).rank ≤ ↑M.rank\n⊢ ↑(M.conn (X ∩ Y)) + ↑(M.conn (X ∪ Y ∪ {e})) =\n    ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) + (↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e})))) - 2 * ↑M.rank",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "e32b01760d1fbf1799648be510c2d1f04b9de5adf0ba4400d944ff0aecbcd8a4"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 79,
        "start_column": 56,
        "end_line": 79,
        "end_column": 61
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhconEY : ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))\nhconE : ↑M.rank - 1 = ↑((M ／ {e}).rk (M.E \\ {e}))\nhsub1 : ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) ≤ ↑(M.rk X) + ↑(M.rk (insert e Y))\nhsub2 : ↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e}))) ≤ ↑(M.rk (M.E \\ insert e X)) + ↑(M.rk (M.E \\ Y))\nhneed : ↑(M ＼ {e}).rank ≤ ↑M.rank\nhf :\n  ↑(M.conn (X ∩ Y)) + ↑(M.conn (X ∪ Y ∪ {e})) =\n    ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) + (↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e})))) - 2 * ↑M.rank\n⊢ (M ＼ {e}).E \\ X = M.E \\ insert e X",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "13413f22e316f27c537b695a3be6e5d0986da27454087f401c640e21ba8d21b5"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 80,
        "start_column": 58,
        "end_line": 80,
        "end_column": 63
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhconEY : ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))\nhconE : ↑M.rank - 1 = ↑((M ／ {e}).rk (M.E \\ {e}))\nhsub1 : ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) ≤ ↑(M.rk X) + ↑(M.rk (insert e Y))\nhsub2 : ↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e}))) ≤ ↑(M.rk (M.E \\ insert e X)) + ↑(M.rk (M.E \\ Y))\nhneed : ↑(M ＼ {e}).rank ≤ ↑M.rank\nhf :\n  ↑(M.conn (X ∩ Y)) + ↑(M.conn (X ∪ Y ∪ {e})) =\n    ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) + (↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e})))) - 2 * ↑M.rank\nhdelx : (M ＼ {e}).E \\ X = M.E \\ insert e X\n⊢ (M ／ {e}).E \\ Y = M.E \\ insert e Y",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "5fbf178f9925daa46cbf154f103fa3e8900a3dc0c04afbd4a034e8ffd19f3d6a"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Exercises/DRp.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nM : Matroid α\ninst✝ : M.RankFinite\nX Y : Set α\ne : α\nhe : e ∈ M.E\nheX : e ∉ X\nheY : e ∉ Y\nthis : M.rk {e} ≤ 1\nhconY : ↑(M.rk (insert e Y)) - 1 = ↑((M ／ {e}).rk Y)\nhconEY : ↑(M.rk (M.E \\ Y)) - 1 = ↑((M ／ {e}).rk (M.E \\ insert e Y))\nhconE : ↑M.rank - 1 = ↑((M ／ {e}).rk (M.E \\ {e}))\nhsub1 : ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) ≤ ↑(M.rk X) + ↑(M.rk (insert e Y))\nhsub2 : ↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e}))) ≤ ↑(M.rk (M.E \\ insert e X)) + ↑(M.rk (M.E \\ Y))\nhneed : ↑(M ＼ {e}).rank ≤ ↑M.rank\nhf :\n  ↑(M.conn (X ∩ Y)) + ↑(M.conn (X ∪ Y ∪ {e})) =\n    ↑(M.rk (X ∪ Y ∪ {e})) + ↑(M.rk (X ∩ Y)) + (↑(M.rk (M.E \\ (X ∩ Y))) + ↑(M.rk (M.E \\ (X ∪ Y ∪ {e})))) - 2 * ↑M.rank\nhdelx : (M ＼ {e}).E \\ X = M.E \\ insert e X\nhconYh : (M ／ {e}).E \\ Y = M.E \\ insert e Y\nhrkcon : (M ／ {e}).rk (M.E \\ {e}) = (M ／ {e}).rank\n⊢ ↑(M.conn (X ∩ Y)) + ↑(M.conn (X ∪ Y ∪ {e})) ≤ ↑((M ＼ {e}).conn X) + ↑((M ／ {e}).conn Y) + 1",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "39ede7a35df3b33bcbe6f287f9795bbaed1fd9441221b3034f9aa05a6d5cd133"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Representation/Dual.lean",
        "start_line": 46,
        "start_column": 2,
        "end_line": 46,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h.refine_2\nα : Type u_1\n𝔽 : Type u_5\nB : Set α\ninst✝² : DivisionRing 𝔽\nM : Matroid α\ninst✝¹ : M.Finitary\ninst✝ : DecidableEq α\nhB : M.IsBase B\nhM : M.Representable 𝔽\nv : M.Rep 𝔽 (↑B →₀ 𝔽)\nhv : v.IsStandard\nI : Set α\nhIE : I ⊆ M.E\n⊢ LinearIndepOn 𝔽 (⇑v) I ↔\n    LinearIndepOn 𝔽 (Sum.elim (fun x => Pi.single x 1) fun x y => (v ↑x) y) (⇑(Embedding.sumSet ⋯) ⁻¹' I) ∧ I ⊆ B ∪ M.E",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/Dual.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-02-20T08:00:16-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "94543c4e0b78ce48948edfa702a294ecbfad85b7bbca708c6cfb6b4ea3b136bf"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Representation/CycleSpace'.lean",
        "start_line": 34,
        "start_column": 4,
        "end_line": 34,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refine_2.refine_1\nα : Type u_1\nW : Type u_3\n𝔽 : Type u_5\nM : Matroid α\ninst✝² : Field 𝔽\ninst✝¹ : AddCommGroup W\ninst✝ : Module 𝔽 W\nv : M.Rep 𝔽 W\nx : α →₀ 𝔽\nx✝ : (Finsupp.linearCombination 𝔽 ⇑v) x = 0 ∧ ↑x.support ⊆ M.E\nh : (Finsupp.linearCombination 𝔽 ⇑v) x = 0\nh' : ↑x.support ⊆ M.E\n⊢ (Finsupp.linearCombination 𝔽 fun i => v ↑i) ((Finsupp.supportedEquivFinsupp M.E) ⟨x, h'⟩) = 0",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "d45e93b2b659071f1815c327498fdb6d48d6d2bcc3ed28dcf726a251e5e2759a"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Representation/CycleSpace'.lean",
        "start_line": 36,
        "start_column": 2,
        "end_line": 36,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case refine_2.refine_2\nα : Type u_1\nW : Type u_3\n𝔽 : Type u_5\nM : Matroid α\ninst✝² : Field 𝔽\ninst✝¹ : AddCommGroup W\ninst✝ : Module 𝔽 W\nv : M.Rep 𝔽 W\nx : α →₀ 𝔽\nx✝ : (Finsupp.linearCombination 𝔽 ⇑v) x = 0 ∧ ↑x.support ⊆ M.E\nh : (Finsupp.linearCombination 𝔽 ⇑v) x = 0\nh' : ↑x.support ⊆ M.E\n⊢ Finsupp.embDomain (Embedding.subtype M.E) ((Finsupp.supportedEquivFinsupp M.E) ⟨x, h'⟩) = x",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1bed17dc72c8b8adf02f3b4206952c7dd36f4631de2837dd1ec90fdfa6468464"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Matroid/Representation/CycleSpace'.lean",
        "start_line": 51,
        "start_column": 2,
        "end_line": 51,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nW : Type u_3\nW' : Type u_4\n𝔽 : Type u_5\nM : Matroid α\ninst✝⁴ : Field 𝔽\ninst✝³ : AddCommGroup W\ninst✝² : Module 𝔽 W\ninst✝¹ : AddCommGroup W'\ninst✝ : Module 𝔽 W'\nv : M.Rep 𝔽 W\nφ : W →ₗ[𝔽] W'\nhφ : Disjoint (span 𝔽 (range ⇑v)) (LinearMap.ker φ)\n⊢ (v.comp φ hφ).subtypeCycleSpace = v.subtypeCycleSpace",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L51"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "411122fc73792ac9d3e0831dd013087871bcedef5d7096e29235921c2589da4a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "8eaae19a6fb47bce0fd524bce75c1e361fbaefa5790485e2f22926c158a8c1e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cce8cbe613cdf9e50328fc14876589861f817f8d982ace4919b1d75549af7fe3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "03fbbc0d1e9f117d5942af6852c90e66aa506b3e8ec477ce19ed73f4dec66e22"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a9b216147bd4fd11b6b0a82a1c020b5c1ce96c5cea743ecc22070f4614a159a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "ad14805154f954720dc6018921922f6ce18b37615b02c5ef9d30ad69ad1472ce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b1c32a76a23ad2cd764affec2af46b2dd0c42217044e36f76ff2a704da69562e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2e17f198f3292f292c8cf373030c741c1c4ff1a5ac0fe75310236c2e431df4f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d5e488b24e4505431f74b283ed58533569640e067d2d945cd6d90943266da643"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "7ad3b18a17e87d243fa8df74f81d9ceb10a625ed3cd248cc7faf72a6077fbc73"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 39,
        "start_column": 2,
        "end_line": 39,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "53956532054bc99201ba437206ebf187e6e07d99352953f4ab64712c7ef6826d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b9f0618fe64d776dc3240dfdb90578b19fe10db23a72bae010bd261614031c5c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b81a761929b7a89b694c13d092ed2f731ae07d175153ef34a7510aab98768512"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 56,
        "start_column": 2,
        "end_line": 56,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ℝ≥0∞\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a08d22d212a80c097babbd7d76df05ef7b580fc1ce36e3fb60068609807666c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e62b91f406213124dce9d248afa9880ff4f8d7117acba968a07008f5c921aabf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 84,
        "start_column": 2,
        "end_line": 84,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d44a64645ba21b9cf2a44e4e037e5b0aaaff48b431e0a3b591e850e259bdd3f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 92,
        "start_column": 2,
        "end_line": 92,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "5793adecd9eea81a25f868fbd31367f1f36efc62e6b7b1ea17d90002cee133ca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e3f2b3db2636b8c86a773fea2faeebc9f1c41189f8ea472fbb860b081ace31b3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2ded7307ec4e2152a717c8e5fe0b46e80839bc7b21835288f600278841966384"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b9ce334c219eebe5a9fcf2c58b39a44758fdb7affdddc33d2eeadbddc3f0db28"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 120,
        "start_column": 2,
        "end_line": 120,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L120"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c574581a4dc0c3c6f65adc6121f229671787f9042fe2a15ebb46c56b86be6761"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f91690706add6c6062bbd00a5b636fafe6042b277df7c1ef8500957932cda7e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 2,
        "end_line": 132,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f9175e77e579e2d226801254c9993049998d20a91a9afdd58a56b2c96a8472fa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 139,
        "start_column": 2,
        "end_line": 139,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f4f7592801bf8ed761c2c2ae0c454778dec5399371f526860db7c87fed31687e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cd305b9506ac1fee5913e45b32e2a7eba66cac21946fd78e587b29fb903a33d5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 159,
        "start_column": 2,
        "end_line": 159,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L159"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "1093e1d4bff43282a9775a32b83bf26968dcaf06059e8f891c016fd4e716cced"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0ffd5b8bdda81cf678b104d8a503876ba4f12c1448515c5f6e6ba91cb97ceaa8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0f3b97dafe8321f7b13f9d79c28f5251222c418d1362122acfc70a4f3dd1b24c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 176,
        "start_column": 2,
        "end_line": 176,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L176"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a184ebca71fe8e9e6a58487dd90a5cacf6791a5f18023f46ae371742c894dfb6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 329,
        "start_column": 10,
        "end_line": 329,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L329"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "16b6cbfbee47e581b383792c31994107a889517790cdbd5598dbe131a79a1049"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 331,
        "start_column": 53,
        "end_line": 331,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L331"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c993dc049ce01ee6b3c138815950ce273bc66240e6577b8d69fa1db2f61f8d0c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 414,
        "start_column": 6,
        "end_line": 414,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [⊥|main.fork qb js i cf] = 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L414"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a16b9954ff9136b68fefb29909b5c93e9df63eac17839a4168555c5612730fae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 416,
        "start_column": 6,
        "end_line": 416,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork qb js i cf] ≤ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L416"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "56d19462c929c6adede21f66e8929a31c134b816ad9d4d653777a10f2c55bce3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 418,
        "start_column": 6,
        "end_line": 418,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L418"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2d03d97795242b234a6b06cc2987dbb955f025d4aa8f1faf12be3094903c3dfa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 420,
        "start_column": 6,
        "end_line": 420,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h ≤\n    1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L420"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b498fe6a42fd85c6eac6a3f5be95e319d29a3f3349783630c2b471092adde799"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 422,
        "start_column": 6,
        "end_line": 422,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h ≤ 1 - acc ^ 2 / ↑q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L422"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a3791503bf84fd084b8160df8576a186f7efdc814aed4a9493e9501f3e130b26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 424,
        "start_column": 6,
        "end_line": 424,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - acc ^ 2 / ↑q + acc / h = 1 - acc * (acc / ↑q - h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L424"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e293c6dd2939d5486ae707cb3d6f59b460caba49a62947336c4366982888db6b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 435,
        "start_column": 2,
        "end_line": 435,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L435"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "712ceb90c1c8dc45626335e5a5e513ed9b2bd721cfa1a9bf864e47ee2ca720b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "27e4b4580471e5542f54d8a2839f3c81d540f486c5b0adac62d63868a4b698c8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c619432707a668be4754021127ca06719fc6d0848e97aaeb75b915e2c52916a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f59947f2e417d84d8fa0b347b7442fd4c4214cf28d8198ee89c1a5fc6c9f0492"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "688b94e5a94f593c58edcee9629ba176f02fe2f78d54f80e5f3c71c31e5ef702"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "95662e9793f98bc703ae2eb48083abeea58a0f821e4cc2ef203ff15778d418d6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "83db22206cd25b249890d03b1e1c7b35e5cd9d4a3f7d64671968026bf9e153e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "3e2977636af8c4cdf98ce8bca149a07d9f8bf0513ea4cb05b869333df6363c18"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "6a3fb8dceb9f3b649e553cea80adb8f969dacd08d7aa79daf84b5c9d4345c0e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "59a34f50dd8e096c7258b9114cfe592d46f9797b7bdad39acd45a5b67ca31123"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "11d5ac846c2b330f0e8fa4162b453bfe21f5b4990ae414731307e93712575e89"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "054894bd214ef6ff718dd17221c535c6ed85f46168ee47cf2b9740307005b7bf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (generateSeed spec qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cbc96af2f56ac240e8ceb7d8748009aff036f8df4d82237400a6becd7aab0525"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "ae1001e3623c20a5405dd5462d10e5796b092c6463642ea971b2075ce0f5214b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (generateSeed spec qc js)\n⊢ [=seed|generateSeed spec qc js] = (↑(finSupport (generateSeed spec qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "bc7315ae6fa1eef4dfd05e317d23a56fcdf91990891e7bdefef82c825dcbb730"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b3d925a01835bedf4afe1f2f55ad8e31bd938a6bee38cc6b17396d3db397e63d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "7fa8ffe50d68f98a4a7b04087e7fa5981551de7d4f74c5b6a268e195eee6c700"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2f99bd997c6b2576e4775e0c8103a8e1fe6adf5fa80c3d7f9cb48151ea1d6c64"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "413b9c1db0639ec2348a30906aaf1401bdeaa9b027d09cc42e6950adfd62c2ec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a66e78fac6c30c0e7a99ed92c3d5a8b30eb06e082158f7b4101a2c38ff61c219"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d612e0a4de2163d4a2125ed0763ccf1c07dbbd3bfceb136f04fd47da4bda9af1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a4eef5eee7cd505049d00e7e7c9b9b7974c87a027bca8ba6528d178bf0efa515"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c1f26e966d882c57214106f06eca3fc6070590926984b59ec67129b0bd9ad90e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "8c058b60ba7ea8ae990f0e878c5bebd9e66b6ae2a74d7947867d67301fdb71c0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "68a8196f6c063a22fbd8aa4d5f9164a618ccb2fd7d1d7a47d5f753be79651df0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 303,
        "start_column": 4,
        "end_line": 303,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/List.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c61f0f7a1230681e8eb884dc09e6df77e93c68b7094d7b0cc3b9bd5980310f22"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "57c920922353569e3d1bcd57372abd9ac49353af171709fca7ad487fc09a5e19"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "405467e59cb4a1ea4324f3ad94e692818fb0594500ff8b2ade5beb2b24e98ba8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2356e725e04cc1fbfd6016019f5cb484638bf54c2496167845d3f6783ba0f945"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0d1b151256424e087c10cd6a39e46b8c63da45e120cb65d695afdbac443c9e11"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "570cc1a99199656cba58b29492a5b3de1ddb98804b237328eebe82f368182c26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f1d96497869c853707c56b8b5c0cbef75bdf335186fb36603cb08112bbb4e7af"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "9bde54a4252dc1abe04b09b78e990c1fdd9cf2d482e42c1f29810d8d178951c1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "464ef9f36f85181dd8b8cbb1de6839588d884b2d62f887f2dedbc3b562addf54"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "fbbda320e0e4490c3c9e8d350641d03e678e576bca8ef874bdde4b2dedc957b9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b521175a10f7241d154d6e21bfeb5d218e9ba2571825bd4d008aae8287da02c6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b1210416d185fc86a58fa960d4a4f5b13808a9a6a34e928b09f98491e123b66d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c9a0eff34bfdc486d9b894336a0427071034c9da0e523cc874bcf72b7d72dbc9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "759b881a342c065fe4f4f3b630a2705a3557b432754bfd2aeccbd8e67071efce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "9593771f911a18e56ee841424e2dab9737f1ba2bc6cb57d81b9fda3f1c3a753e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "dfd6c6f127737dc833ddd318e8f4b22dd329ca088794e4cb209e020bff3bfdd5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:18:45-04:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "07445e03a223d2d2257c76f8655c6ba7094bd12bfc423fe6bee60751c8aa5b63"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "e5ae49fdadd634a92d2a67c50946de3995cd10d5780a936269bab80487648e10"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a50e8ab662053bfaaafa4a904c6063678d4b0617e0b467daca29e4cee009f35c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "7b5525fda45516893d8f41bc0eb53b6f3920c40ddef9585346fd9d406983f79b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u_1\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "96d0723dd5f3f37a12d285aa9fd3edaed53565385510b5d9df646d9bbf2756a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [fun x =>\n      match x with\n      | (x₁, x₂) => cf x₁ = some s ∧ cf x₂ = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ecac5f817ee499679c284454c37c64e9693b2179d1c2398755b8821b68c7f4f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "264d7b4b5ec9679a41adf364641636d7c5edbf39fa52cca6f2096d769ba46cef"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] ≥\n    [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "725acac07cc999fbb119078114e6e60234719f935cf5294967c97e7ceb18c9e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)] =\n    [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "61249e4e60957e885c687292bfa9bfcba093fb62519a7b641d52ea83fbfb3dd7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h ≥\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c0d497af32a661c559c4c9a0c890ff7ba1cc31ffe657123592b57b009e5a98da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [⊥|main.fork' qb js i cf] = 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "08faaac70476f4e09e1cafe584c69abe7b189a63c025e107e6272fe014351635"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] ≤ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a77f440670c23823b3da6f49a28b3c07305168e3b905fd8f196be59daacb20e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "09a8109520c9b0bcc96c5681d9b0d64e2d0a17b40671bf959a6b52e60f1b2827"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h ≤\n    1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "df7cdc06e0b7a0d4d2b131dc6de7d4ffaca789de4f1d3a3434fb3a92c1e0596a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h ≤ 1 - acc ^ 2 / ↑q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "d952b728a7ad3141898d33769696a85a622c3576e55dd174e4ee5d3a6335625d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - acc ^ 2 / ↑q + acc / h = 1 - acc * (acc / ↑q - h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ae1109246077326a19672f784559e90ad1bba51d0cad06e720cf8b09b3d8acce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork' qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "cd1157c5b3cba6d7139ac66725cb3a2eed8e2cfa1481688eeccd12ba3bfe4da2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c86317e50cd03e2233534bcb12f96ff07b3be5baec0bb1585e46d3e444739cc7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "7884c8de1338b0317c9309dacbbeadda3a76ca6f0fc5bda48ed9d46a7b862357"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c2163c982743fab32d74e90be3d38a9f42143109bf50e793fa9071eb58f27f65"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "bdddbc833433409f4449eb49859674ad17b2cfd321407be98bad6b39a22c8273"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "41aa623d8480ed28c9eb2e4655e3046551fccfd5c6bb778a7fe1bf741458a3d1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "2dc80265b7106b913001eb573c29c0aa9c1a48bc65a79ffbb35364948a3fa0bc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c396ed454ad67178e0d885e1db3f39f4f62fd77dbdbf90bf586b163abb7d4b92"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "baca9da13f9ff831c3f07ec05a7ff93418bdbc131d57817a452d02d3e606b7a0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "0e7d20f04b3e77b8333b33b2dd76da46bfd1729d6e094a1dd7ae247f320f9848"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c753ada5293f1d409225a2cd13e6ede5f089a64a5116c42c82b7be3d18514185"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a2ac2eb371d75ceafd50ed54992d1f87075f4e89017985d3287923f64f53e13e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "101e065b6ec0ad08ac152291c8ab4b5a3f2508210fc699f81bb1b48587dbdc60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "4bc4174c73defcfbdfbd1bfa40f38acfaba4ef548c4204ec3827f4a27fd9686f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "88b5d50d1dbf202a6aa4c2349fdb229ba5623ad795638e2d668c329d0554fb6f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "0333360592c255fa13e814831800a258b0956902f229410b5ac1a1f369c3ae36"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "259f0f1f75bc2ca58ac165f8050d19f64bb5d286b7ca1fbe6d993494069a2394"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "08d1c0bc44125572805737b92bffaeab3202e0aaef42513fda45a2c70da1d0c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c7656b21fdceebcf49f1e5fe3ead4ee5c95d45ce8c5eaf08dcb1fd54c6038da1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ca00ba0f64c280bac9fcb6d0bcb034fc419480deb33867baa06fa8011c232978"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "97df2c2813870f833b02f5d68f4dc872b3e860fdc9411f6c92760647a38584a5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "e997379989eb5d364c5a0b584c809ac6f902e673f2eec606a82cf7e148b1475c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a33e808fd2e85ddd57d4cb1d727ee3b1d80427d3b7811e8bb339ab9dc5fe2952"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "67b2929d31224faf24729653e61d1823ceeea2b73a03b5de17cb7cdc345d2f5d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b1db7422be13b685dccc9516e05d49d0a17a982be7fa01d69188c983ed54d469"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "13d6502d7b2315268ce45c06dffaa1c8f3e8605cbac38c357862d3c62a0cbfe8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "1dc26895be8c52f687d953388656641fb01a99ca27062157e56a7ec9f7c61ff9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "5edf89545fc18a638becead230211566beebb95a69cb73f74bba9ffc874e313f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "6ca960d4aace0716234dae4c507271ebffaf17508aabca222640fe58698a8680"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "511286fa625484351de10a705784cc81ae907b66770066655e213e60907dff80"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case pos.h\np χ m : ℕ\nv : Vector (Fin (2 * χ + 1)) m\nhne : NeZero p\nh : p > 2 * χ\ni : Fin m\nn0 : ¬χ = 0\nhv : ↑χ ≤ v[↑i]\n⊢ ↑(Fin.castLE h v[↑i] - ↑χ) ≤ χ",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-21T12:14:18-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "af80a21e62b0b3e540d50be733d073e623f86f48a5b1ab73dd44a9b9be76037d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 258,
        "start_column": 4,
        "end_line": 258,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\np χ m : ℕ\nv : Vector (Fin (2 * χ + 1)) m\nhne : NeZero p\nh : p > 2 * χ\ni : Fin m\nn0 : ¬χ = 0\nhv : ¬v[i] ≥ ↑χ\n⊢ Fin_Bound (Fin.castLE h v[↑i] - ↑χ) χ",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L258"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-21T12:14:18-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5294bcdd3122d94509dc14a6b4fae0ebb0aac63658011079649f228428bd61e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 307,
        "start_column": 6,
        "end_line": 307,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case false.left\nn m χ p : ℕ\nherr : p > 2 * χ\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * χ + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m → Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n⊢ p / 4 ≤ ↑(-((Vector.map (fun t => Fin.castLE herr t - ↑χ) e).get ⬝ᵥ rv) - ↑(p / 2))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L307"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d3a58ce2c2a141ad79acecbe79ad1e7b1db3135df08a358fb9eb3b4581d786fa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 308,
        "start_column": 6,
        "end_line": 308,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case false.right\nn m χ p : ℕ\nherr : p > 2 * χ\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * χ + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m → Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n⊢ ↑(s.get ⬝ᵥ A.mulVec rv -\n        (s.get ⬝ᵥ A.mulVec rv + (Vector.map (fun t => Fin.castLE herr t - ↑χ) e).get ⬝ᵥ rv + ↑(p / 2))) ≤\n    3 * p / 4",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L308"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "77f52dc126d35dcb818f416a73b593271df203889f1553f4b76579a3aa7d3d67"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 309,
        "start_column": 4,
        "end_line": 309,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case true\nn m χ p : ℕ\nherr : p > 2 * χ\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * χ + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m → Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n⊢ ↑(-((Vector.map (fun t => Fin.castLE herr t - ↑χ) e).get ⬝ᵥ rv)) < p / 4 ∨\n    3 * p / 4 < ↑(-((Vector.map (fun t => Fin.castLE herr t - ↑χ) e).get ⬝ᵥ rv))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L309"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b4e53af90cf6a6b65733746a7bf8f07faa9f5e0322743458904e2850c359c6fd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d759ec3ff839fc8a444ccfb084ed4b8618b3ddabc0a28ca70fcf0069bfee0de5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "39e96ee559bd512b0fd1e98d97e877c34b8ed945d212706a9205aee0165374f4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2e5f4d4fdf95a34df1a6ec63cfdd9252e1e86fa3ff8d4fd13670c3b4e8304ba2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1029e755136c36fc60f6a8605f9240492251eadb85f099ed5b6f33f4748f00cb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "G P : Type\ninst✝⁵ : SelectableType G\ninst✝⁴ : SelectableType P\ninst✝³ : AddCommGroup G\ninst✝² : Group P\ninst✝¹ : AddTorsor G P\ninst✝ : DecidableEq P\nthis : ∀ (msg x : P) (g₁ g₂ : G), msg * (g₂ +ᵥ g₁ +ᵥ x) / (g₁ +ᵥ g₂ +ᵥ x) = msg\n⊢ neverFails ((fun a => ()) <$> ($ᵗG))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/HHS_Elgamal.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "70331fb5e129cb4ed26d8b772794f8c84ebac31e4fd87b50cef3edd88aa1d07b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b793ad592d1c0730bdea9f2a61f70ddff185181f603cd4b0f128b4020cb64c60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "4c3ea9d3c5e10f7c9dfbb1a95f5ad0fbbc7076e7ebee3eb0361c7edf57b5a85a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 127,
        "start_column": 88,
        "end_line": 127,
        "end_column": 93
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nq : spec.OracleQuery α\n⊢ (liftM q).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L127"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c861879dd3bb3ea4bba88215c0c02907c71d01a12f78568d3fcfb0214d644d9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 132,
        "start_column": 60,
        "end_line": 132,
        "end_column": 65
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\nq : spec.OracleQuery α\noa : α → OracleComp spec β\n⊢ (liftM q >>= oa).neverFails ↔ ∀ (x : α), (oa x).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "fc418150934fef5aae714deb4e466af256347a488f0fb9bb1ba3f18d7335aaa3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀ x ∈ (snd <$> (simulateQ countingOracle oa).run <|> pure 0).support, x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "de8c1d3cfc1161aa30213e0db9c55767eea728312d255e1e5d00bd2e6fda1905"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "06ddd0929caa7062a5daf6d21a439a383a8237b1ede4d602b7a7bf8f839584e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "7578686b62856172d426796f32f6b616bcc4239331af31529e5b8871aa62e4db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u_1\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2c80a5c7b32d4cde94f63d5bcdb8b14b31c91ab55764b60ce4e284fe609e57c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [fun x =>\n      match x with\n      | (x₁, x₂) => cf x₁ = some s ∧ cf x₂ = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b2bc750909e3f4a80907f814b4c8a698d2ddad61f3067695264e2877a44f5089"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3e168a4968d1743db9071df284e576dd11d259e649847b33d95d378b428ec315"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] ≥\n    [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3f335e23b703544a8f9403dae234e8cbbf0ce41e9a0168e599b36cfc47fced1d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)] =\n    [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5245d51fa99eb973409ec5292d6cf0d12ac0af4c56adeff99219d624b5470463"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h ≥\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d8523447162babfd3ad7e422546f518dab2221e361a2bb1240993c86c78befe2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [⊥|main.fork' qb js i cf] = 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b340ba5825ab41b1e77d199e30c86a38a61b03fa18b77337788568fe70e3c3e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] ≤ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a98773868c63dad1cbad70464c6593459c35b2b0320bda70cc63b3a99a671c62"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c8a64e5dfdfc9b94362a2217cc28c2e86b892507f235b563edae0169b4416459"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h ≤\n    1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "4ad0620f9cf20f6c4b865f209d14e812d77ef9dbe2d7c37e27ad9bf6b3982ef8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h ≤ 1 - acc ^ 2 / ↑q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "aff16cd1edac0f32071539208555910b64d1e3901a852afe7656813e92e827c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - acc ^ 2 / ↑q + acc / h = 1 - acc * (acc / ↑q - h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1f688c669cb8c48c075eeac9bb90b9e843a8ad16050120ccd8f8267015310cfc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork' qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2418ed1624a8e66ea2b20e2a208189b5da417d3f1328f297a639a7e16b9a80eb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "97aeb9e5c4f83493b4f02950445cec7ed251cc9fe39404edb3e076c797b7c069"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1ecdc368fb879dc5f9455150f5ab5f8965f82358d20d089cd022dfdb2b006688"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e81eb973d2c2a86334358f55b91d85a98e3bbbdf5f16fd56132fcc3243538b00"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "8ec06b9bbce6347774d93ae411ec1a518e1c5429e68888c844bd354da7e0636c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "86b879f150c6bd23b102c75a96a4a00b4ab2cf153063f645b6baeef69ea3aab6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e720bd17eb414a86cf6905c1c87b8bae59b0693cf14ed8847d0bc932860da084"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "051f33bc70f1e6bc7b1033155e091281621e1dde6e1192eedd19351abaaefd5f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm : ℕ\ninst✝ : SelectableType α\nx y : Matrix (Fin 0) (Fin m) α\n⊢ (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2652d13923f1a4e9b6ced53cf8a7b744364064b900d9fffc12578ac4a805e159"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : SelectableType α\nm : ℕ\nih :\n  ∀ (x y : Matrix (Fin m) (Fin m✝) α),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m✝) α\n⊢ [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c99abda0a6581a5fa036c1a6caec7b75366a612454a3477239b25fe7a6473191"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : SelectableType α\nm : ℕ\nih :\n  [⊥|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n⊢ ∀ (x : Vector α m✝),\n    neverFails\n      (Fin.cons x.get <$>\n        Nat.rec (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            Fin.cons top.get <$> ihn)\n          m)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a5442637e769d45375677177aa33a5c0c9a62e22b78432a56805071b1db1588e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "9fad12416ef37ae5f038d8bd9ffcc90d15dfd965968cbe8935deab9143ec23e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "88d748c02149ca3ce3c574b5c63a44b1a7efe860e9469f30f4aa26c081fe108d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "487b8988b357f9905c9281ddea459876481282a070b881092a9bddb178c8a092"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "68eb423f465b34c186603ce518ba94f494f285707d909cbd65dc22e480745d46"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e4a43a64a1013ca454545156396e0b9310780fd80675e5962dee3cec00b3876d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "9647b3f0e6c87c5dc74e1fa026fb8649ca25d4927b3e6da067a339b2aa3c9153"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "83b1d75861d2063b82bfd247c33dd757324c4a975befbe44412c960ad5007c28"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a81382801feb60b20183a20fa1d67be4ffbdb611d65cfa0ac53dd42db9ec9001"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "776e044513d87ff8267d39244c43887e211221a6c51d1230aaed3aa1d3cdb7b3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "72a71440c3574467c120dea728560e132c1e945a1586f3373a9f0daf765b7367"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3bc8d8e8df2418ff5ea7b2d5c861d2143e33dad9eafd729fb4ac7fe070f088b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1cc0599c962dccab309df070738ef11b298fa1c2e71913b7f1fe11e2bab8b8bd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5199d4a1695e2eb43c24ed755eb5df83417330cc01d5388637b527238b55225d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e306d97df1423ac0f1293a4d45bccc631e70f35cea5600c8d1fb396be0e58720"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "acf49e57bc530a740c8172fd2fa9ec6e32c3b51ddd7d0ea49fc1c60256ac9b08"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "64c0c9800277d0ed008843f3eebda11300efc514d1b302e8a75fdfd3811c1444"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "35c7ac15b96645bd1b60dac3bcb6c94cdf8da00a9a320efe9dd81c679e041da5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "bc4585f1f67862be2be952da4feaffd9e7ea16bd3c858cedf937b02aea796c23"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3567bafe685954c8ea749d95239813d633ab904102161efdadd6baa77b6d9b63"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a881ac9f2913e39de5e84e1e3682a127118174fee7b46d982bfb7e0c305622e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3a19cd6b439041f17ec09580a61e4a96ef3414ec4926aa73268924813605cbbc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b0344e5cea1d7a6315b3ab41113f2a8c03e74d3cb3976846b36922ea962c5d4d"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lintsimp.lean",
        "start_line": 37,
        "start_column": 64,
        "end_line": 37,
        "end_column": 69
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝ : Mul α\na x y : αᵐᵒᵖ\n⊢ SemiconjBy a.unop y.unop x.unop ↔ SemiconjBy a x y",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lintsimp.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "8a7dcd08b95f",
        "blame_date": "2022-12-18T15:51:52-05:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "fad15d300a3f6046664fe6934ff4f955311261103402fe05a7081f02cc9f2b55"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lintunused.lean",
        "start_line": 7,
        "start_column": 2,
        "end_line": 7,
        "end_column": 7
      },
      "debug_info": {
        "goal": "h : 1 = 1\n⊢ True",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lintunused.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-08T02:17:31+02:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "ce5d2f09f7f0ca5994740d3dec48da1a983bb4ad946d671132b63fcf458e7bf5"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 23,
        "start_column": 2,
        "end_line": 24,
        "end_column": 5
      },
      "debug_info": {
        "goal": "⊢ 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lint_unreachableTactic.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "3ff163f60db5f07cec68b6c10904be4f75c4dba100353cf27e9814851e79eee8"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 31,
        "start_column": 33,
        "end_line": 31,
        "end_column": 38
      },
      "debug_info": {
        "goal": "aa : Nat\n⊢ aa = 0 → t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lint_unreachableTactic.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "d4cdb8fb54c40434ee2115e05afbae83c4d3d5d22952a0e43f007443bb10e06b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a b : Formula⦄, a ≈ b → (~a) ≈ (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2eb1f4f5b0d46887dbe591c2c24e1021b9dd7a7e50ebcc3382f21060f51d6a83"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a₁ a₂ : Formula⦄, a₁ ≈ a₂ → ∀ ⦃b₁ b₂ : Formula⦄, b₁ ≈ b₂ → a₁⋀b₁ ≈ a₂⋀b₂",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "b2dfcac6663f023bf2e51df32e14cb636ed87bc438a576d119787f4e5736a83d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 344,
        "start_column": 99,
        "end_line": 344,
        "end_column": 104
      },
      "debug_info": {
        "goal": "α : Type\nn : ℕ\nys : List.Vector α n.succ\n⊢ ys.head = ys.get 0",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L344"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f09f3df4a3f3533b4de3d740b4ada74ec61110eda112a6569642a294865eaa6f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 380,
        "start_column": 12,
        "end_line": 380,
        "end_column": 17
      },
      "debug_info": {
        "goal": "a✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\nHist✝ : History\nX✝ : Sequent\na✝ : Tableau Hist✝ X✝\na : PathIn (tabAt PathIn.nil).snd.snd\n⊢ (PathIn.nil.append a).rewind 1 = PathIn.nil",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L380"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "a02b8c73bade425a256f0c17c83da4d67e9170c467636f275b2b4b01383fa490"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 384,
        "start_column": 4,
        "end_line": 384,
        "end_column": 9
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nHist0 : History\nX0 : Sequent\nnrep : ¬rep Hist0 X0\nnbas : ¬X0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) → Y ∈ endNodesOf lt → Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y ∈ endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : ∀ {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\n⊢ ¬1 = Fin.last (List.length ((tail.append a).toHistory ++ [X0]))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "0f6776ba54cdfb52feed34fcda3058810dcacf35cd715839e9770ba79d9fa439"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 387,
        "start_column": 2,
        "end_line": 387,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nHist0 : History\nX0 : Sequent\nnrep : ¬rep Hist0 X0\nnbas : ¬X0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) → Y ∈ endNodesOf lt → Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y ∈ endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : ∀ {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\nh : ¬1 = Fin.last (List.length (PathIn.loc Y_in (tail.append a)).toHistory)\n⊢ (tail.append a).rewind ⟨1, ⋯⟩ = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L387"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "67ea8bd016c83b2fc80b12044c0b36f1fc40ab10a3e4de5807de30596156d90c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 389,
        "start_column": 118,
        "end_line": 389,
        "end_column": 123
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nY : History\nZ X0 : Sequent\nnrep : ¬rep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : ∀ {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\n⊢ ¬1 = Fin.last (List.length (tail.append a).pdl.toHistory)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L389"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e4d2eda764455934a4a1becbfb9961ea06cd289a6d6e104d115fb8fbe0ee0532"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 392,
        "start_column": 2,
        "end_line": 392,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nY : History\nZ X0 : Sequent\nnrep : ¬rep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : ∀ {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\nh : ¬1 = Fin.last (List.length (tail.append a).pdl.toHistory)\n⊢ (tail.append a).rewind ⟨1, ⋯⟩ = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L392"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "3e54535ce70293ca2a65eb321265ba24d8c34238fe2602221dbee9b12ef7bb03"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 464,
        "start_column": 15,
        "end_line": 464,
        "end_column": 20
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\n⊢ (b.rewind m).rewind ↑0 = b.rewind m",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "cbc890b2924f2b7103045caa85de6f4cad802f47ccf6a425091be8d212f7d6c8"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 465,
        "start_column": 20,
        "end_line": 465,
        "end_column": 25
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\nk : Fin (List.length b.toHistory)\nih : (b.rewind m).rewind ↑↑k.castSucc = b.rewind (m + k.castSucc)\n⊢ (b.rewind m).rewind ↑↑k.succ = b.rewind (m + k.succ)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L465"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "89f76e43ebeb97ad4e4260d83502df4c605e31328f27b31bc2ce40328511981e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 479,
        "start_column": 30,
        "end_line": 479,
        "end_column": 35
      },
      "debug_info": {
        "goal": "case h\na✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\na b✝ c b : PathIn tab\na_c : Relation.TransGen edge a c\nc_b : c ⋖_ b\nih : ∃ k, c.rewind k = a\nk : Fin (List.length c.toHistory + 1)\nc_re_k_is_a : c.rewind k = a\nb_re_1_is_c : b.rewind 1 = c\nb_re_is_a : (b.rewind 1).rewind ↑↑k = a\n⊢ b.rewind (↑↑k + 1) = (b.rewind 1).rewind ↑↑k",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L479"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "5d5949551498af93931672702de5648c858e9a820928d594210a716bcd42be4a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 490,
        "start_column": 22,
        "end_line": 490,
        "end_column": 27
      },
      "debug_info": {
        "goal": "case h.left\na✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\na✝ b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na : PathIn tab\na_b : a ⋖_ b\nb_re_1_is_a : (c.rewind k').rewind 1 = a\n⊢ c.rewind ↑↑k'.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L490"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "caef7f0ed063e54119dcf7c3d2501b173886a7cb1a97952a261e182c234f7f58"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 495,
        "start_column": 24,
        "end_line": 495,
        "end_column": 29
      },
      "debug_info": {
        "goal": "case h.right.right\na✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\na✝ b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\na : PathIn tab\na_b : a ⋖_ b\nb_re_1_is_a : b.rewind 1 = a\nk'_val : ℕ\nk'_hyp : k'_val < List.length c.toHistory + 1\nc_re_k'_is_b : c.rewind ⟨k'_val, k'_hyp⟩ = b\n⊢ ⟨k'_val, k'_hyp⟩ ≤ ↑(k'_val + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L495"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8fe46da029cf912882dd6f22b30f07bfdf128d47b0bb198bedf833906c444a6a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 502,
        "start_column": 29,
        "end_line": 502,
        "end_column": 34
      },
      "debug_info": {
        "goal": "case h.left\na✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\na✝ b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a ⋖_ d\nd_b : Relation.TransGen edge d b\nih : ∃ k k', c.rewind k = d ∧ c.rewind k' = b ∧ k' ≤ k\nn n' : Fin (List.length c.toHistory + 1)\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' ≤ n\nd_re_1_is_a : (c.rewind n).rewind 1 = a\n⊢ c.rewind ↑↑n.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L502"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f2da169f12a90bac16b0cd9889226be339abf2d3d23f4794002a959fb1ea6fc3"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 506,
        "start_column": 31,
        "end_line": 506,
        "end_column": 36
      },
      "debug_info": {
        "goal": "case h.right.right\na✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\na✝ b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a ⋖_ d\nd_b : Relation.TransGen edge d b\nn n' : Fin (List.length c.toHistory + 1)\nih : ∃ k, c.rewind k = d ∧ ∃ x, c.rewind x = b ∧ x ≤ k\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' ≤ n\n⊢ n' ≤ ↑(↑n + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L506"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4ea80749c19fc1d3fb381e92b44c78445104c8d96e1cbfab6a5b864571cef28e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 510,
        "start_column": 11,
        "end_line": 510,
        "end_column": 16
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nt : PathIn tab\nlpr : LoadedPathRepeat (tabAt t).fst (tabAt t).snd.fst\nh : (tabAt t).snd.snd = Tableau.lrep lpr\n⊢ ∀ k ≤ ↑↑↑lpr, (nodeAt (t.rewind k)).isLoaded = true",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L510"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "c1b0141060c9cb1e3fd8cfd90ff44061761388586c9427380c16f6e92a2b0ede"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 532,
        "start_column": 77,
        "end_line": 532,
        "end_column": 82
      },
      "debug_info": {
        "goal": "a : Sequent\ntab : Tableau [] a\nt l c : PathIn tab\nt_free : (nodeAt t).isFree = true\nt_above_l : t < l\nl_hearts_c : l ♥ c\nlpr : LoadedPathRepeat (tabAt l).fst (tabAt l).snd.fst\ntabAt_l_def : (tabAt l).snd.snd = Tableau.lrep lpr\nc_def : c = companionOf l lpr tabAt_l_def\nhyp : ¬t < c\nc_above_l : c < l\ncomp_leq_t : c ≤ t\ncomp_lt_t : c < t\nk k' : Fin (List.length l.toHistory + 1)\ndef_c : l.rewind k = c\ndef_t : l.rewind k' = t\nk'_lt_k : k' ≤ k\n⊢ ↑↑↑lpr = k",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L532"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4ad273f4309c97939dd61c8fc78d2f99499acaccbac787c59bcd8621a2fb2b45"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 833,
        "start_column": 10,
        "end_line": 833,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ sorry ∈ endNodesOf (next (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ⋯)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L833"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8fc89ec685ce3a3f05ae2e48703a28c3b120e7d161085ff07e9e689acd824443"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 834,
        "start_column": 10,
        "end_line": 834,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ (M, v)⊨sorry ∧\n    (sorry.isFree = true ∨\n      ∃ F γ,\n        (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side sorry ∧\n          relateSeq M γ v w ∧\n            (∀ f ∈ F, evaluate M v f) ∧\n              (F, γ) ∈ H α ∧ (sorry.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L834"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e3aff06fbf13bff66171729ab264586f3d872d22eb6ef2556618e2b4901171c0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 837,
        "start_column": 8,
        "end_line": 837,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nα' : Program\nφ : Formula\nα'_not_atomic : ¬α'.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α'⌋AnyFormula.normal φ)) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α'⌋AnyFormula.normal φ) (LoadRule.dia' α'_not_atomic)) (L, R, O)\n⊢ ∃ Y,\n    (∃ l, (∃ a, ∃ (h : a ∈ B), endNodesOf (next a ⋯) = l) ∧ Y ∈ l) ∧\n      (M, v)⊨Y ∧\n        (Y.isFree = true ∨\n          ∃ F γ,\n            (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n              relateSeq M γ v w ∧\n                (∀ f ∈ F, evaluate M v f) ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L837"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "7c45da9f3544c38c02882922f28e16c56902ff5fcf9a7a864874330597700b26"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 841,
        "start_column": 6,
        "end_line": 841,
        "end_column": 11
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nlocRulTru : ∀ (w : W), (M, w)⊨(L, R, O) ↔ ∃ Ci ∈ B, (M, w)⊨Ci\nress✝ : List (List Formula × Option NegLoadFormula)\nχ✝ : LoadFormula\nlrule✝ : LoadRule (~'χ✝) ress✝\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inr (~'χ✝)) ⊆ O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR χ✝ lrule✝) (L, R, O)\n⊢ ∃\n    Y ∈\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk ∅ ∅ (some (Sum.inr (~'χ✝))) (LocalRule.loadedR χ✝ lrule✝) precons)\n          next),\n    (M, v)⊨Y ∧\n      (Y.isFree = true ∨\n        ∃ F γ,\n          (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n            relateSeq M γ v w ∧ (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L841"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "d41057ab3c0bffc6baa57f8cc076038203a9243943fff3e7affd21f50010be2e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 965,
        "start_column": 2,
        "end_line": 965,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nv_α_w : relate M α v w\nw_nξ : (M, w)⊨~''ξ\n⊢ ∃ s,\n    t ◃⁺ s ∧\n      satisfiable (nodeAt s) ∧\n        (¬s ≡ᶜ t ∨ (~''ξ).in_side side (nodeAt s) ∧ (M, w)⊨nodeAt s ∧ ((nodeAt s).without (~''ξ)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L965"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "81f9e8e4ed12782c0b53cc60ac8f11717c13d026f5811f837f38100b8762b2a6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1143,
        "start_column": 16,
        "end_line": 1143,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : ∀ f ∈ F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nh✝ : ¬δ = []\nws : List.Vector W δ.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin δ.length\nsk : PathIn tab\nt_sk : t ◃⁺ sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[↑k])⊨nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ))).isFree = true\na✝ : ℕ\nnegLoad_in : (~''(AnyFormula.loaded (⌊·a✝⌋ξ))).in_side side (nodeAt t)\nv_α_w : M.Rel a✝ v w\nFδ_in_H : (F, δ) ∈ H (·a✝)\nws_rel : ∀ (i : Fin δ.length), relate M δ[↑i] (ws.get i.castSucc) (ws.get i.succ)\nthis : δ[↑k] = ·a✝\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1143"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "a3763bd90f3c4f0aa9c1e075b527bcc1776e6e0c0a1ae97f6e13b07c1de8e559"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1147,
        "start_column": 16,
        "end_line": 1147,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : ∀ f ∈ F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nh✝ : ¬δ = []\nws : List.Vector W δ.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin δ.length\nsk : PathIn tab\nt_sk : t ◃⁺ sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[↑k])⊨nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ))).isFree = true\na✝ : Program\nnegLoad_in : (~''(AnyFormula.loaded (⌊∗a✝⌋ξ))).in_side side (nodeAt t)\nv_α_w : Relation.ReflTransGen (relate M a✝) v w\nFδ_in_H : (F, δ) ∈ H (∗a✝)\nws_rel : ∀ (i : Fin δ.length), relate M δ[↑i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram δ[↑k] ≤ 1 + lengthOfProgram a✝\n⊢ lengthOfProgram δ[↑k] < 1 + lengthOfProgram a✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1147"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "9927bc3e61bd5ed0f338ee59caccd85921241b8affaeb8dd11bec26d5cbcbda6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1485,
        "start_column": 6,
        "end_line": 1485,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nv_α_w : relate M α v w\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\nIH :\n  t = s →\n    ∃ s_1,\n      s ◃⁺ s_1 ∧\n        (satisfiable (nodeAt s_1) ∧ ¬s_1 ≡ᶜ s ∨\n          (~''ξ).in_side side (nodeAt s_1) ∧ (M, w)⊨nodeAt s_1 ∧ ((nodeAt s_1).without (~''ξ)).isFree = true)\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.lrep lpr⟩⟩\n⊢ (tabAt t).snd.snd = Tableau.lrep (⋯ ▸ lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1485"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "b2f35a29ae272387a60e9c12c5bd78d7b32397cb37a10f45029d380bc4bf0345"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18
      },
      "debug_info": {
        "goal": "⊢ ∀ (p next : Sequent ⊕ Sequent × Formula × Rule), next ∈ sorry p → sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e30a965cf401eb1028ac5b1fb8997193d7d37018dd5c9bb09c819983e3cc58d6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Prover\nh : winning (Sum.inl X) s\n⊢ Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "59892c331bd01cfd235b15fa9269bb702cec9e28e7ca37b09491a50d8b533f28"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Builder\nh : winning (Sum.inl X) s\n⊢ ∃ WS mg, X.toFinset ∈ WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "61c7dfb82a42f1f366ce20164c288f3a3eb2f785e71f33aca2ba9a1bcba8b7da"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\nτ : Formula\nτ_in : τ ∈ testsOfProgram α\nψ_in : (~τ) ∈ L\nx_in_voc_ψ : x ∈ τ.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1a16853574c0e1389689b0c0374a730b619a6c9afc41e84b788fff2055198a42"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\na : ℕ\nδ : List Program\nψ_in : (⌈·a⌉⌈⌈δ⌉⌉φ) ∈ L\nright✝ : ·a ∈ subprograms α ∧ ∀ a ∈ δ, a ∈ subprograms α\nx_in_voc_ψ : x = Sum.inr a ∨ x ∈ δ.pvoc ∪ φ.voc\n⊢ x ∈ α.voc ∨ x ∈ φ.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8c02b15417d4a37888580c91065d5571ba92a9d9f306db59ed2c1100e56474d2"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nFs : List Formula\nδ : List Program\nin_H : (Fs, δ) ∈ H α\nthis : ∀ (α : Program) {Fs : List Formula} {δ : List Program}, (Fs, δ) ∈ H α → δ = [] ∨ ∃ a δ', δ = ·a :: δ'\nα' : Program\nα'_in : α' ∈ δ\nx_in : x ∈ α'.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1f7887a7ba8fd6e935a44fde9f08c54839cd8807713ea7dfc96f720d19a7112d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : ℕ ⊕ ℕ\nress : List (List Formula × Option NegLoadFormula)\nχ : LoadFormula\nlrule : LoadRule (~'χ) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) ∈ ress\nφ : Formula\nφ_in_L : φ ∈ L\nbla : x ∈ φ.voc\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2f67f0c83af93f117e68b68a6d9654afea689965a78d23a9a599275dd119ce54"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.1.fvoc ⊆ Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e8e3f108eef90eeb184755549356b0f73a5a9c6260ae089b20dd83a062c86744"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.2.voc ⊆ Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "beda03ebbb337d47d56c7affe0efe5b2a6b35dcad867d8a2187f88d35ce44e2b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L ∧ Rcond.Subperm R ∧ Ocond ⊆ O\ncL cR : List Formula\ncO : Olf\nx : ℕ ⊕ ℕ\nx_in_voc_C :\n  (x ∈ Vocab.fromList (List.map Formula.voc cL) ∨ x ∈ Vocab.fromList (List.map Formula.voc cO.toForms)) ∧\n    (x ∈ Vocab.fromList (List.map Formula.voc cR) ∨ x ∈ Vocab.fromList (List.map Formula.voc cO.toForms))\nthis : ∀ res ∈ ress, res.1.fvoc ⊆ Lcond.fvoc\nC_in : (cL, cR, cO) ∈ applyLocalRule lrule (L, R, O)\n⊢ x ∈ jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "044738aad1cad1d72bab8ea33683b8ea3d840fe795c80ceb2227dc209c8ed6b4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | ⟨c, cinC⟩ => ↑(subθs c cinC))\n    C.attach\nL_and_nθ_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2e4cefd4a86039f9b10c90587298f8c8e5d99a7080dd92612bf47e7797ba1965"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | ⟨c, cinC⟩ => ↑(subθs c cinC))\n    C.attach\nR_and_θ_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f88b9bad6db0a65e5b0c6dd5f76d1de8b4bb5df2a6a7b55f5c50c30c3b7c68cd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | ⟨c, cinC⟩ => ↑(subθs c cinC))\n    C.attach\nL_and_nθ_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "889557d15eb5a5f2d6cb022a223bad71c7dab516cbc30ae1462714f49b6e54a1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | ⟨c, cinC⟩ => ↑(subθs c cinC))\n    C.attach\nR_and_θ_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4269b0f1ecae19445160d255c776e287efe72c0e09da2d9bb0dc934a80a75b10"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈∗a⌉~⌈a⌉p)⋀(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1bc471d2a3c8fd428d044fb82a40f15f692f1163edc09e129246b2131fa21e8a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈a⌉⌈∗a⌉p)⋀(~⌈a⌉⌈∗a⌉q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "458d78feeb071e03f1374427eafe699fc50756ba31558c703318b3337fc40a56"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Examples/Add32LawfulCircuit.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "6ec9da772fad80566ff1f014d301a32759843a78d4d5adf775914464ce663742"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 65,
        "start_column": 18,
        "end_line": 65,
        "end_column": 23
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Soundness (F p) assumptions (spec off)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Rotation64/Rotation64.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-01T17:43:17+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "f61fe6bdef37c610032e5497845579abfa0c4a975398c88c7e5dfdf814859601"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 66,
        "start_column": 21,
        "end_line": 66,
        "end_column": 26
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Completeness (F p) U64 assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Rotation64/Rotation64.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-02-27T17:02:29+01:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "b793bbdc2299fb8ad97fcdddd9201d6f29cad9ebe681454fbb8ea91e8106d678"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[↑4]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[↑3])) ∧\n            (eval env state_var[1]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[↑4])) ∧\n        (eval env state_var[2]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[↑3]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaD.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "548cd88bbe76aa22401be64ebdbb5051b01b9ec2ad67477579247de82ffeac27"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaXor.lean",
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var Inputs (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : Inputs (F p)\nh_assumptions : assumptions state\nh_input : { state := eval env state_var.state, d := eval env state_var.d } = state\n⊢ (((((((((((((((((((((((((eval env state_var.state[0]).is_normalized ∧ (eval env state_var.d[0]).is_normalized) ∧\n                                                  (eval env state_var.state[1]).is_normalized ∧\n                                                    (eval env state_var.d[0]).is_normalized) ∧\n                                                (eval env state_var.state[2]).is_normalized ∧\n                                                  (eval env state_var.d[0]).is_normalized) ∧\n                                              (eval env state_var.state[↑3]).is_normalized ∧\n                                                (eval env state_var.d[0]).is_normalized) ∧\n                                            (eval env state_var.state[↑4]).is_normalized ∧\n                                              (eval env state_var.d[0]).is_normalized) ∧\n                                          (eval env state_var.state[↑5]).is_normalized ∧\n                                            (eval env state_var.d[1]).is_normalized) ∧\n                                        (eval env state_var.state[↑6]).is_normalized ∧\n                                          (eval env state_var.d[1]).is_normalized) ∧\n                                      (eval env state_var.state[↑7]).is_normalized ∧\n                                        (eval env state_var.d[1]).is_normalized) ∧\n                                    (eval env state_var.state[↑8]).is_normalized ∧\n                                      (eval env state_var.d[1]).is_normalized) ∧\n                                  (eval env state_var.state[↑9]).is_normalized ∧\n                                    (eval env state_var.d[1]).is_normalized) ∧\n                                (eval env state_var.state[↑10]).is_normalized ∧\n                                  (eval env state_var.d[2]).is_normalized) ∧\n                              (eval env state_var.state[↑11]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                            (eval env state_var.state[↑12]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                          (eval env state_var.state[↑13]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                        (eval env state_var.state[↑14]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                      (eval env state_var.state[↑15]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                    (eval env state_var.state[↑16]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                  (eval env state_var.state[↑17]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                (eval env state_var.state[↑18]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n              (eval env state_var.state[↑19]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n            (eval env state_var.state[↑20]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n          (eval env state_var.state[↑21]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n        (eval env state_var.state[↑22]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n      (eval env state_var.state[↑23]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n    (eval env state_var.state[↑24]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaXor.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T16:27:02+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "1bdcdd008daf8da2529448af21e4c551e8408c741910c34999b888a8e84d7885"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaC.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env : env.uses_local_witnesses_completeness ((theta_c state_var).operations i0)\nstate : KeccakState (F p)\nh_assumptions : ∀ (i : Fin 25), state[i].is_normalized\nh_input : Vector.map (eval env) state_var = state\ns : ∀ (i : Fin 25), (eval env state_var[↑i]).is_normalized = True\n⊢ ((((((((((((((eval env (var_from_offset U64 i0)).is_normalized ∧\n                              (eval env (var_from_offset U64 (i0 + 8))).is_normalized) ∧\n                            (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                          (eval env (var_from_offset U64 (i0 + 32))).is_normalized) ∧\n                        (eval env (var_from_offset U64 (i0 + 40))).is_normalized) ∧\n                      (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n                    (eval env (var_from_offset U64 (i0 + 64))).is_normalized) ∧\n                  (eval env (var_from_offset U64 (i0 + 72))).is_normalized) ∧\n                (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n              (eval env (var_from_offset U64 (i0 + 96))).is_normalized) ∧\n            (eval env (var_from_offset U64 (i0 + 104))).is_normalized) ∧\n          (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n        (eval env (var_from_offset U64 (i0 + 128))).is_normalized) ∧\n      (eval env (var_from_offset U64 (i0 + 136))).is_normalized) ∧\n    (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaC.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-03T17:31:42+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "1cc1a51d335fc9901192033089f368517f40bfedbbb1eab49bcad52de58dbdb9"
    },
    {
      "repo": {
        "remote": "https://github.com/Deducteam/lean2dk",
        "branch": "module-output",
        "commit": "c489425d61a930194a1aafdb4fc1487ead07b118",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "fixtures/Temp.lean",
        "start_line": 21,
        "start_column": 2,
        "end_line": 21,
        "end_column": 7
      },
      "debug_info": {
        "goal": "A : Type u\nU V : A → Type v\nhAUBV : ((a : A) → U a) = ((a : A) → V a)\n⊢ U = V",
        "url": "https://github.com/Deducteam/lean2dk/blob/c489425d61a930194a1aafdb4fc1487ead07b118/fixtures/Temp.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "3dade9baec16",
        "blame_date": "2024-05-02T19:15:48+02:00",
        "inclusion_date": "2025-04-23T03:00:55.107492+00:00"
      },
      "id": "24ee8953c7f8ddc974cc35ec19033c1b9b44004d9a11dc9754ce16403658ea55"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "e6b03e9a1ea88017a3eb2841df5c36a97d741584d3e92416fde8438b296d34cb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "7686aa6cd3c03bb8d0ad23b098f4a2afcb491b24169fdd36d4c10597d93077a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "86ba38664f3f4fa44f60982b6de8c6532af202bf3c2ae5686ed4d67d96cc300a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "618985386d468d0eb597c55ecd2ee50c7fee9cf05c6769e9ce35cd685ecad483"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "aecb058722e10ee568a33f3465519c23273ae1bcac0fc3a6dd133b416163fa1e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "b39edab4d2d7bd9c27873abfbd799e1bc7836778134115ca8ea59dd3523fa759"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "0f71a88d2b6e5541935cf1773df6c5b7ca2f08bd6f12efd095b1076c17cd65fb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f4ae0b116a385038259714bd8324a841d6c85e8131aa68fbc0ac145fbb651577"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "fdd10dd8d590951c0956dceee2077f47359cfe9ac317e3c8d098d40859bd0ed2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 39,
        "start_column": 2,
        "end_line": 39,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "e8e2adc083a44dc14de7ce8ba5baf74b9949f4abdda429d184e2ac8a4e195209"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "659f2a83b2ab78da914a97d0749c93e99b8d616d98108cfe07422fd4cf02a7a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "59b922e7c8df5577b131a5fcd48440e6ef4f6e10379756451e267a2239987a78"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 56,
        "start_column": 2,
        "end_line": 56,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ℝ≥0∞\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "5cb20691119a6cfcd554df6265169c3437e5036975f8cfd2656333a834e30170"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "cecb892de6268a35c3dd0bfafdb01c094212bea6539dcc25ef8a020db459db2e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 84,
        "start_column": 2,
        "end_line": 84,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "378e7a5f689a029a63774b442206eb1196288603337271218d822ccb17b67fbd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 92,
        "start_column": 2,
        "end_line": 92,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "d3ec865fe2dcaee1170d4d57e2a4e83e17416213cafd79f7c89636a66406da7f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f8e77ea852da1383dac9a3768a1a57267f11c83d1f869cdedff5c65071786273"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "d47ffd5fc77bdd52a24cac8031eafe4c81e3914b88be8841241d5473de245850"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "176b772f347d4b69c6d57da896af46968cdd044cf9b00ecfad65e9119684283d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 120,
        "start_column": 2,
        "end_line": 120,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L120"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "29c6aa662cc693bdf6744f7c03215dec79a32800865c2d63bd7b3624dd6d0cb9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "34523be2e92d872b37eca7c51fa5395da11a4344d5f7008517a46cd747376813"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 2,
        "end_line": 132,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "cb523e7f925950102e8405332927cee7dff01479ec7db13d41b5a77f662e63c5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 139,
        "start_column": 2,
        "end_line": 139,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "a8b69aa0f42e8b1936cb56e08dbb074cf98481f4c34011b220cbc5dce534194f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "ecc5d7a4a5087a49fdcc25c24118a0d448de37688ab7d5900fd9e9cf8310b5da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 159,
        "start_column": 2,
        "end_line": 159,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L159"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "60fa5bc0e39f10116df2425a32c35de26de18cb39ed64f27e97e5a44b32287ca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "fac8f12500e7669d213352070cf918f470f6170b7a19bf0f8a79104ca4620ec1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "2d2c1057ee4dcc5f375a338e405f5bbfdec186e2cf31f812a0353e38d73fab33"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 176,
        "start_column": 2,
        "end_line": 176,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L176"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "fe851569705d051b9012e7bb421fce3e6b61abfaef5b17775e92d435f0fb8b14"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 232,
        "start_column": 2,
        "end_line": 232,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "3e2bac3895a24a97e95eb5497f22692c388c0deefbaa7547e0c762d5291d7a5b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 236,
        "start_column": 2,
        "end_line": 236,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L236"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "41bc0c0b5b50f00399011570c8e95455ebddbc2c55da4bb90f26dc093783c4f2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 240,
        "start_column": 2,
        "end_line": 240,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ cf x₁ = cf x₂",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L240"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "8ecf8eebdad441b04b9ab3bbb1364c4b72214a7943d28cf3f83a1c30a5429e61"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 244,
        "start_column": 2,
        "end_line": 244,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L244"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "e1a3b12afdbcb9f382b637b12fa3a1fa08508c493714e3d80464f0f5266525c0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 248,
        "start_column": 2,
        "end_line": 248,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "a0cb64447148ecf9ddbacdecba21e6f4ca10f68d8f64641d6b584f93f4b7744c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 259,
        "start_column": 2,
        "end_line": 259,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "a6806fcde61c1fd97f1a264e9c09a7fb525d4ae9480975e1f69c097cf5a380c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 362,
        "start_column": 10,
        "end_line": 362,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L362"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "9e51a981514a3560ebc38f53f8dcd07d350b528d3fe1576658fd9dc480927fba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 364,
        "start_column": 53,
        "end_line": 364,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L364"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "17a78cc88338d25ea51519d3698bee930190b740546d6e04b6e769b0bd2b07db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 464,
        "start_column": 6,
        "end_line": 464,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ ∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h ≤\n    ∑ s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "165cc55f949501e6d769c1e2d593e142618a11d86e9d0921fbace5a6353f8286"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 466,
        "start_column": 6,
        "end_line": 466,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h) =\n    1 - ∑ s, [=some s|cf <$> main] ^ 2 + ∑ s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L466"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "d32b9ffdae32cfae2e5d1a18eb9a3eed4c193d378dd2a6f71301245196df1e1a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 486,
        "start_column": 8,
        "end_line": 486,
        "end_column": 13
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ acc * h⁻¹ + (1 - acc ^ 2 * (↑q)⁻¹) = 1 - (acc ^ 2 * (↑q)⁻¹ - acc * h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L486"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "6b1009e745b6c7c1bde2727d9a4963ad185fffef3e0a26190b37b7c6d8dc37b6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "275120196218ca161f90c08aba520048788c34f4791209384ca31a8b59bbeeb1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f50645f2ede54ddb78403d4024c825d5d07e47cf7f154254637bfb7038945f94"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "dd590514568d76eb53d57908a3e4ed1271ef14655b21badabd881f9ba79a806d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "a58976bcb6cee5fd69fc3f508fa852a7df1c0c0c253822f618242473ba82cec5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "3ad59f06cd97be2f9ac3dce345ff11050814ff38597e641ca8b8f654f23c7459"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "b1066c8374af9cb8dcc1985b6835d08b1a17d9e5ca3e0426b63ddc99b458e598"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f4622d1aec2dc4c748f8a79da37e45397468611d88a094412779d92fcb3410a1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "048803923c68b8f5fd37c8369b2cf41c7f56acca31901e65434f55038f268ee2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "ac06d3443945f92dce14ee886df070cae22243f869e11d5f8f41dabf18e10dff"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "97aa051d8e2fc4c9d7a7e771b0d711210ea83630e2e2fb963beb24602a4acd26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f5fa788823da7bfb1769ccb0d02e1685b498973f3e9f11fbbea3c64038767b56"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (generateSeed spec qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "b228fc238d148d789a994826e7590dc08f1a9177533dd2a920dde43178aea1bc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "878ef450387448930021976f0d6f6869f55472f1ee2bcb0cd36c0dbe5d2458c7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (generateSeed spec qc js)\n⊢ [=seed|generateSeed spec qc js] = (↑(finSupport (generateSeed spec qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "8e96c33f3943a188e16aa73dc351f2ea0709f0d5902a5ead8f913ffb30671ae6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 233,
        "start_column": 2,
        "end_line": 233,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝¹ : spec.FiniteRange\ninst✝ : Fintype β\noa : OracleComp spec α\nf : α → β\n⊢ [⊥|oa] = 1 - ∑ y, [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L233"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "ac4a5074ceec8edf47a0a9a817bbb38b5433e5107f1bd8abdaefb12d245a580f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 725,
        "start_column": 83,
        "end_line": 725,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "39afbde7bdb5e4286ce0cdb02e3ccb01c2232275a72757a6a2a567d10045c471"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 731,
        "start_column": 73,
        "end_line": 731,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L731"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "4738335beb4b0c90d08ac806d63e307278cc6d8de1131e2bee4ca6efb55586e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 69,
        "end_line": 736,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "5623c4485b75327953256efec6672f40ca3b1b10173309d6bddcd53f6e3dda0c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 740,
        "start_column": 59,
        "end_line": 740,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L740"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "8d6e4902aaca4fdea14705812817c7aae3a212abdcfed4f2e2747147d375d8d5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "c679b9edecf8a891b19fe060dc4ee919f2e196ad3849243ffe2acf8eb2089aa1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "71c05dad055be141c26d333f248d31cdfb286d36b59fb657fa5ce74a8f00b735"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "73bf5e74c51b6e08ab4dd535a5af6aa09ef72d55cce0142e59ec0823fe7d28e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "de8c552c87297e6e0b66f3706ef560b549fdbc8e6894960cf81fc7529d0311d4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f681cbe64848d10909389d477bda5209969535850850972afddaf288542f856d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "bf02304d67e9873a7ab6d021dd3db74bdd7b8cf285c4c62443d16b80bede8da9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 303,
        "start_column": 4,
        "end_line": 303,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/List.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "ca29bbb36df413400c19bd3a7eadbe4709b728f9968497aebd9ac2792bf47728"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "7e0adb2e379cbb4aba288d4655e8cb194517205975a0c67337616fce4b2e19e6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "0cf06351a45949dc61558816cde0e97c1c70538ec686c86de60d275b60fb75af"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "90f44e33b7b4755be51a42b4efca30c273059916c25bda53de2bedf29c02aa2b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "76f02a76b0e59aa3a19494b5a6d73fef262a33702ef8e53cc4f32b830eeedcde"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "19e3fc9bd5817961529b0d74c2345783e3fa49bb462916ab97d4acc2df3a0325"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "18bb3ddba781644dd3a9aff290e150af753a2be8f92f6a66a3007b4ebff361b1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "8f302fdde91e9b2f8d2c090264981fbd7d776ce58f5f96fba829221b5c51ff73"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "4b0534e596512e78757d367ff9737d91a3e764bedd4dc5dc683a6755aa2fb316"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "d2072712f67632fdb2c7871fe2282db3eafb44fc806b0e11952c236216769f59"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "d803812ef88c8468b5923baeb72811ba9e4ce853037bb25f4c69c05a54e0e579"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "45b1dc2b02f67aefcbc932dec258a4837dd97c0d34378506f40c5efe98c83829"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "36e171c460dc3c767125269c5a7ad9bb153208d0bb2e5be681f0ce4c4efe30a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "ff39eb1413e18535b06933e76cffda7eb4089f889947b3f55fe76355d850b821"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "9f235152aadec330def84617bf52a83056fd66466e58eb6e4ab8fd6aa45d7ab7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "d3679d609b17b286a4b35ec7b732f8845f26651f2dc6960c3fc1e636b5a49ec3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:30:34-04:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "c77d54a68a74cfef9bc96070e5fed88c41a2fa1a701b51be78cd2bd04bc65b0e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "e212732c9b97c513911f66a76b7fc775aec6869eb5ce8cb40af551e9e10579e2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "efdf3e512c5adf97ae27cc2e9702dc1c0865ef9ad9eceef4d7652f8b95d2b7db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "39f6747ea88e28c471d90b5434e0e4655463a2689ec6b6fa4a9be5e34d9fde59"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u_1\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "a7c051e63def742c0658d661f071828cf540bc327bf350541ec607ffdda9eff9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [fun x =>\n      match x with\n      | (x₁, x₂) => cf x₁ = some s ∧ cf x₂ = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "2201676bef37726703af8ebadab2f1f26773579b96320f13c91c0dbedf6017da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "17ebd5943ec463c26a62aaf9ebd4fb74eb4ccbfc5b0e9c7f21f56a1a35e6783d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] ≥\n    [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "99147732da27150ea67f0f18697f5d1628f90429ce687eca97492d498705e376"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)] =\n    [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "447ba43ec2eb60e9d3c583c65bd5560ef818eccec6ac96c041148f80893c820a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h ≥\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "facc2d812bdda701eb9aebf25a75962ea057c8d75e7435232f7b64c64ec77451"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [⊥|main.fork' qb js i cf] = 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "f233604b798b55ceec3ada3429adc47f16676e27e9e3c2dd782380635af378e4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] ≤ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "175324adff29e49cfc0b269030dbc7754f8dc83ed9d9318b0348bd3fe374bbaf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "01541763fb74b703625776f01d717c8b2b997b4577b60276fd59e50236abad48"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h ≤\n    1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "c4259a4b36674217f60969a29ecddac7320fcabe3c824c7080ec07785a2e319a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h ≤ 1 - acc ^ 2 / ↑q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "e6b78cc9621ffe93fc581fd6b98e691733223a665b8fbe13b00c58049fcc195f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - acc ^ 2 / ↑q + acc / h = 1 - acc * (acc / ↑q - h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "03ca88176363e4874f5d7667019648c4678c7e94635c254bfef7b659056616e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork' qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "1ebbdc34ee4bdb46149b1f5efb242e0ca34d5a898ff35b081e86faa5af65864d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "dd62fc44047ccb2681af0b79074a17e2fe5bac937a0dc9bff082933eb0eb2c97"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "cfd5ca7db15940f8c3d04de86812aa5ad4ed65b2950274699400564af8ce7a9e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "345d541e03721122d43ae1255ccc4434c89f83ad37e5bdd98682a0ef2307b888"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "602092c9059d463046441e512da72efde5d64ecf9da059bffca7d58481b7d85b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "fca9337e1b9fbeb7648612fda17d513d78486d9bec21f3863f0ef515dad95852"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "9877ade2853d73702cf6dd1fc65a2d05eac3d0ababae06141f3b4c0c99b21d81"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "db20b8227700ae4602e754012b770f8ce4bebf939de3e25ff81d9ae6d19bf44b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "7439da5b5b62909a52c3724dc078868fa8982b110ce595767be396ae93bd04de"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "4aaa843def5f1660c6838d9a45cd999e65f5e6d0900ad40820f6ce0d837e2c2f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "8c4fe997f1b41f6bdf3ccd840cb2667d22c2aa38bfada3f73f04fa6ff2b54ffb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "2f91b4971c23292b16d7f8d69b001ac6616371d9e43e761e6d77e03279df4682"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "020af47d9b823b3d3b92de0f0409cf73a695e782408f41436bd168503d29a468"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "9c35daa7217ca8cba030ac3de4c58cf437164ae8ea89cb1aeab1a476ee1859c8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "19ec004f64f5f3e30f6bca0958bddfb92629b0045459cbbbcd41e5c71a888b21"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "4e7aadf9b875fbf22de54d6cb2e2421d042c19773c808cd7f8d04260ae8566ab"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "d767364ae17204aceee87b2bb2b6af02e29cb5b6bc8a2ace45aae64ab4d44870"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "4a5064c0089fd85c85e603c635832feed813fa00d2fdb1598995dbae2d37609c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "d4ada68760710569bcb109834955244ca837afb64719e24532f04108c1df21dd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "8c7abc06334349a6dde06dc9e61e147ed09592833118bdb7926671e59cc324ae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "68d5330b114e143decdb1ab79fe9c5b656aae20fdd717f8c239407e0b65fc8b8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "9661bf9f3b9e1109c0581fd40f20aed72184e78e93eb312fdaf2dd8b6995e92a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "1f30206a84b9251f67efbb9a91ada4ba3132ca1e27213af69d8d0c05a219b981"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "a4ad91b9f626ee321a0fa2e57d80b9e30d2cf75f8c0020c128fec631022a278a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "67680ec4487bd6a8ab3f00cea7a6b3cae41aa9f35841d65d54f4f5d3a4855d27"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "34771cc22547c121fd229a9799b4a2380b092415cf5e4908c550422f71b70fc2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "a0f904f4bf4ae77020ce386f7f41ae1a710f4e43455468a01cdc20d95158f746"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "6364983057eb5bbfda649f9c5ff59232ac35fcb23e30ebcc1d2da459f7d2ad61"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "231c16b361f09d64becb037de77412ca3865156dcdbf02a64557301e52ba9b31"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "5db0d7be82455dfc931fbe229183907444a558f21e573300472c38a0b1b99aad"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "9d3227f18d2878b60dad8a509fedebd60d851538c4411db7364e3a33fc164dbc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "d7c78f0a132cb71ff3139f13a59ed16881ccb1248de5a5f28d8880834b2ee017"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "2d64ea32a4771f5ba92fbe4ed04f521b7bf9adab8821d212fad0956ce4468dcb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "f29008736f7c3b6df4d2194d3018d7b21913acdd48ad3dd92cff1dd44e58964b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "4f1e94c6510cb5e3da31a7e32275354dd3f519577e724e4bcec1cd69862b882a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "f86475c96cb7cf492016fa558498c231bcd664745e7a83048a961617c928d95a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:18:45-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "ad83693ff67d645543db05b8e722aeec437e87c16c431d166abedf53f4236e41"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "203c42ee052abb549784809080b63691497372f72387d8651b5709c580f00a0d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "5376d371cb5b3695115070af3954c41659f2d8ce25254ef248cafee6b8721bfe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "c6c6a8457a712b7d04721350654b495f98888935c9ad55be9b279f511ae306da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u_1\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "7f345f9abc919481e1c7623d01f99eb9cf24ff3dc6fa2b0df4dddc4e01a618cc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [fun x =>\n      match x with\n      | (x₁, x₂) => cf x₁ = some s ∧ cf x₂ = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "1f29405825f5297676255698d08730370369e4b6d0bfca1f0c6ba365c14fe364"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "39b52f32af94b1f379b1e4d0efceea5db4460d44f3736a1f19be15b5dd952498"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] ≥\n    [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "856fd0f15ed7a45f1be347b8d66cd987cd8d5a66824ba4891a477b9476b5985e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)] =\n    [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "5ffad4d718c9e519c1e98de4bba09c862771f204a940ba1b43d491b2ed9b41cc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h ≥\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "5008ffe7975e97a7b48bdea7b365eb75adb948dc5d03e5825891272573805c4c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [⊥|main.fork' qb js i cf] = 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "49962eac545bf187cb8ff3fa6eb69fcf93c76b0c9cb59688dd8f6ee0ceee8ef3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] ≤ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "3fe6471254afab3267b98120c7c58a25c5b2f545fffce81b5b3b5e87e7b1c14f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "2842b135cfdf19a2e57473294da7c7dfe1fe55af5ceb38d27def23d422986054"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h ≤\n    1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "700c789ab9006366d6455bb80ba66457aa6e6ba2dd92b6b8d62f9027126d7366"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h ≤ 1 - acc ^ 2 / ↑q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "d6da0615fb5bbfb46127f1e5bd8f3e59343b701a7edd8fa964974161716c8d96"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - acc ^ 2 / ↑q + acc / h = 1 - acc * (acc / ↑q - h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "1a9c67ec913d094fefb83b7750e4093ccb74bd05e2fc00b20bed761c6ef51b0b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork' qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "1d570a98ebe351b06be23a6127f96f44a473009b2c7c65c209daea1ce1c32ed7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b7b0f1a722e04408db5b9df5d013229912a9b3df59d95e0611dae5b38f6b222a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "efd9423129d264f0de02520bc4247aaba746e6b5482700a5516b04138cd7dc95"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "0ed143ee8f7c056dcc8a9df59e36f0315abec92497b9d57b88aa2c53272d62b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "c8c48bcf8e6ec9702991af5741d33eb83085629fa0c687ca6aa9cb925504efca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "225527407898525faa6b64e736874eb31515103a12eabfe5d9e48834e653f88c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "d51e2f4db6ee5c1d5b9227e93280a668b31570e7809440925971b6015ada61e8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "341a022c77fd4c25b8dce3182b02b8991af1fec5d2e6e0d7529a5deb346dd6ba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "86f0e2889799b00addd1acc30a822a1a1e6da621187cf8b5cc7f98a84e3d70fe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "765ebc6b0e1a98adb9a27c7ce31bc4643e00845ec527f8ff2f50e59537aeddac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "25a0f66a22a1e9d651dc8902ea8b12b56b66b52f890c508c8bd6caccd9dd4d97"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "5e8fc5ce0ad758c4f7578cc77b8a18a1f39d55e1ea9b04ad19c1b0b307bb91b2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "0a84073e2b06e93c7cbcb73f644b6e258f23f51782dd21db126b2d44c608a7dc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "bc1de32d41ba38d0fb058d683baac839c1091524c114f2f0dccdc50da1ea4b85"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b8ace97713b6e754ce3e7f797fe448d9b34282a569f9967333d49536be36175d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "dbbb7a9d3f63cb16b3f7af523d86fb3afdb9e6f0de4f6ecaf0258e088d680baa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "d4cb47400bd26294c1d2d77bc77968fb8cc9d33f2c7b9a71dc3c852977867f43"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "10c7bf9f63f2c7be44cb0472d94ade9f4ca7016601f9eab6a719ac3bbc934771"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "55bcdb23fdb495cfc7fde18a2bd193829e0e5797d263e46ecc18a224620b2f9e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "74a663e2e162b7fd60794850b641ba9df23f6677c39e1ad92c54b4c883df0aeb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "666215cb5b1ef7a12b0dc1158405da9742a8cdb520af651b2850877ad91350d2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b44a6959d6546f7bea0177fff9b2551c50ac293387709d918d70059641f828fb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "779cb3a0bd2bab9c9400806d6236aeedce0a9dbd2334520e570c46e3d925ba15"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 234,
        "start_column": 8,
        "end_line": 234,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case mk.mk.inl.h.e_4\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : PUnit.{(max ?u.16581 ?u.16582) + 1}\nf : PEmpty.{(max ?u.16581 ?u.16582) + 1} → WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inl a) f) → α\n⊢ HEq (fun x => g FreePos.here) g",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "4b50622c3a8c930b037641d5a929c1fd72d6fc37d0b95fc10db1ff5c0222e6eb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 237,
        "start_column": 18,
        "end_line": 237,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.mk.inr.h.e_3.h.e_f.h\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : P.A\nf : P.B a → WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inr a) f) → α\nx : P.B a\n⊢ (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n        (fun a x ih =>\n          ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n            match p with\n            | FreePos.there b tail => (ih b).snd tail⟩)\n        (freeToFreeMAux (f x) fun tail => g (FreePos.there x tail))).fst =\n    f x",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L237"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "7cd3422d55309a5254adf74309d0587401f1ae8811f13442117cc507bb600a6d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 238,
        "start_column": 8,
        "end_line": 238,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case mk.mk.inr.h.e_4\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : P.A\nf : P.B a → WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inr a) f) → α\n⊢ HEq\n    (fun p =>\n      match p with\n      | FreePos.there b tail =>\n        (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n              (fun a x ih =>\n                ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                  match p with\n                  | FreePos.there b tail => (ih b).snd tail⟩)\n              (freeToFreeMAux (f b) fun tail => g (FreePos.there b tail))).snd\n          tail)\n    g",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L238"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "0af4558305baa2ddfbd61bd4292c152dc400f361c86e6354fcb1fb1871e73347"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 248,
        "start_column": 20,
        "end_line": 248,
        "end_column": 25
      },
      "debug_info": {
        "goal": "case roll.h.inl.h_1\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : P.A\nr : P.B a → P.FreeM α\nx : P.B a\nc : (1 + P).W\nd : P.FreePos c → α\ne : A 1\na✝ : (1 + P).A\nf✝¹ : (1 + P).B a✝ → WType (1 + P).B\ng✝¹ : P.FreePos (WType.mk a✝ f✝¹) → α\nf✝ : (1 + P).B (Sum.inl PUnit.unit) → WType (1 + P).B\ng✝ : P.FreePos (WType.mk (Sum.inl PUnit.unit) f✝) → α\nheq✝ : e = PUnit.unit\nh :\n  (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n        (fun a x ih =>\n          ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n            match p with\n            | FreePos.there b tail => (ih b).snd tail⟩)\n        (r x)).fst =\n    WType.mk (Sum.inl e) f✝\nh' :\n  HEq\n    (fun tail =>\n      (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n            (fun a x ih =>\n              ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                match p with\n                | FreePos.there b tail => (ih b).snd tail⟩)\n            (r x)).snd\n        tail)\n    g✝\n⊢ FreeM.pure (g✝ FreePos.here) = r x",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "54425b96f0cd03a6b4b556238a93535630be1bb282987fb50997ba49b1263b90"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 263,
        "start_column": 10,
        "end_line": 263,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case roll.h.inr.roll\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : P.A\nr : P.B a → P.FreeM α\nx : P.B a\nc : (1 + P).W\nd : P.FreePos c → α\ne : P.A\nf : (1 + P).B (Sum.inr e) → WType (1 + P).B\ng : P.FreePos (WType.mk (Sum.inr e) f) → α\ny : P.A\nr' : P.B y → P.FreeM α\nh' :\n  HEq\n    (fun tail =>\n      match tail with\n      | FreePos.there b tail =>\n        (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n              (fun a x ih =>\n                ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                  match p with\n                  | FreePos.there b tail => (ih b).snd tail⟩)\n              (r' b)).snd\n          tail)\n    g\nhrx : r x = FreeM.roll y r'\nh :\n  (WType.mk (Sum.inr y) fun b =>\n      (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n          (fun a x ih =>\n            ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n              match p with\n              | FreePos.there b tail => (ih b).snd tail⟩)\n          (r' b)).fst) =\n    WType.mk (Sum.inr e) f\nh1 : Sum.inr y = Sum.inr e\nh2 :\n  HEq\n    (fun b =>\n      (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n          (fun a x ih =>\n            ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n              match p with\n              | FreePos.there b tail => (ih b).snd tail⟩)\n          (r' b)).fst)\n    f\nh1' : y = e\n⊢ HEq\n    (fun b =>\n      match f b, fun tail => g (FreePos.there b tail) with\n      | WType.mk a f, g =>\n        match a, f, g with\n        | Sum.inl PUnit.unit, f, g => FreeM.pure (g FreePos.here)\n        | Sum.inr a, f, g => FreeM.roll a fun b => freeToFreeMAux (f b) fun tail => g (FreePos.there b tail))\n    r'",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L263"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b64c23513038457ea54242cd0a6f68a2c3b0344e046b5c4ba87368dcce1b51a7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b335b52e779bb1f4ff9742144cd380083fd697b43ee9c74dc61b474540b27b60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "8b4500e3db7703d789187bf85c3a2c01120e5d11e43cb8c5ffc9e13d5b8b1a8a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "6a3f165f4ce67f326313e9582936c75ebb7994831345a3af5cfcc9a00b091757"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "c9fb15960bc65112c621293998c65488b0da96bfbc3a3e6b8cb3c8a49bb9303f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "7055bcf08fba56409f95d0e51100a2519bade26b7c33f94299a4769b15b5b8c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "261f12547e626d4eba2826a238be67b6253b853da94096acbdf9caed317b88f1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "429349f993361f8aa1d5a97800362f060bc3aa977675956a6014b94ef03ca360"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "83098dbf2af39f3dd3a9f187388f1931d790f27adbf38acf4604d1741979b878"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "4626cec4cff418c35b3bbeb75ab24d1cc7362223d0d549ff7d26560c543147a9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "eb7ddc59889e0aad8df49333d25192ded6aa215627f48d64a28609584605258d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "e428b27b698d008a781546104fc1f508a5c51dafecee30201549421045337c03"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "87c776dd373a0280ca148f159c22bf9eff86e199c89ac52f7a5dae02dfd875f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "56ed2a4be31f4d8d1a3079512954965d54deea3d1d56913c6a4d44ff100e7672"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:30:34-04:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "bf447d8d1a7591590c6e0c167b5f8dc1aa9d17e25982502375ffe45330fd9a1d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "1eb42660f35771548b419190b9a1da120cd08ae944e92a069c2b6910a7f1f363"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "59c3048abb9e7edc27dbc573d9310f6a6a83a2a944af074430720bbfe583c535"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "361b12ce137ec6c1fd9846ad743fb4af4e50e51551aef09418d4acdab42d767a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u_1\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "8264aac2e1718b23b24d7d7a3b25757649a018c4a6664ec9b2201a0fa94217e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [fun x =>\n      match x with\n      | (x₁, x₂) => cf x₁ = some s ∧ cf x₂ = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "d9e1175d3ca0a4b93f8b8e9fd7bb93657f0d14e863978d42479c43fbc75b6680"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "98b712f3feccbf9b14d9f957890c3bf7659a633f5222c574459ab9161d6eca8f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] ≥\n    [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "89a166aff30d8cec1c2c1f8dda314a5d9ad8fa0afa645d1abc18b00734aca814"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)] =\n    [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "a36d6b490ebc6e2e87743d02f44911cebefb48b79405919b48b1f7c71a8c2258"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h ≥\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "376fb4b78a83a938b9b84e781bd0ba30cfeab561097dd4c3de598805660424a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [⊥|main.fork' qb js i cf] = 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "7ef9679c5df973fb513b2f7b759cedc4505e3f56860ab9e3c77a7d8506b6b91c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] ≤ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "cc89b503229373c706351b8e38a88f922176737852b5a296e5eb4b40e9bc7b01"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "424a2ddf329ee8561b09e4d5184666cfe9d6dd4615f146f5fd1cc1f099d88c0a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h ≤\n    1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "0cf002d3eb3ec882207f823502949e1125cd774abc49f85924c99b18300328d0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h ≤ 1 - acc ^ 2 / ↑q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "4b9d26349de85f20e0ca2ef46f9c1928ed97a61137b94e1775f791a487c944ac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - acc ^ 2 / ↑q + acc / h = 1 - acc * (acc / ↑q - h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "3c5381b76ffbc234ea02198d96fb771702851e7d4a47bf529e67d1d46f0e1498"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork' qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "3f9ad7ccde262eda7c44b656e0072cdb6d9d9633156d155436c38e40efa0f3c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "23a1c2a9f493cc78f3e3e5a670e51f191599c29293f18b7b64b76e38276a3303"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "e51efe0e472842f172c3fb39cabec9a4c2ed34c7e7edbf4bf89dde0f77ede27e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "252f8110ce484dfd0117377fc7aa0c1ea2454324e8cf6553cbffdefa7ae18306"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "843249f95c3be1a18ab570cf07e21c66fb24687d031cbdf10d00a60e2811974c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "aa48b3723270200577520f42e38d13cafecab0a5189a470fe2b226bfa4f01edd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "9184b9bbc35b3dd62740204c074135dd053e7dcb18d011cf7e53b53bd4f77926"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "1c00322a53ddcd33dbed6ab27030520550b4114f37371c816d2b58ef62c5a162"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "bc645bc2d29e4eabd7e173525002d8891457cb3c138a9b4f790560b35432c1c7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "94fbfb2cdc955b110163ca3130958c9378b37cfadc36a9568464f86de6886d88"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "dbeaded251aa7b2372300d500e680341914ec9d65a5baacf1ad28d84ab698796"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "71a8ec56d548aafa8ac82623541556314fb28dd210466e6a8a01594b557912c1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "3440b7994171e83db3d50991bddbeb408e0d9a0a8fd97a76d15cdd4da3353d46"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "a3941e55c4d0e4e131e0e124d079c097c55b7c55ff98ce687c5bc4732a236e62"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "3a5a9c8d32549429a1378b06759b77799a7d113d9b3e20bb03dfcbc26b8086f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "54e19d441bd19392a0ec3eb14cfcb313e9cc433b305cbe7575d3482770dded91"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "88e16e4fab32d56118e6415ff49deda847971e4afae59c5fa22dbb849f190b9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "632a5b5c68ead47e51af61457288358011677abac3f8c1af089f96b89298e671"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "8a34ea1a61e55b5c2b9f13b6bd885c653a7f3995ed3f8e7f019d1dfa285ed99c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "03a29159ed8ff17ea5cdd06c4128e880f6b327aa0519c9ee1b59cc59c65ce1b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "4b0445349b3604f87aa6a8d011673d36aa56fe01f5a5810a164da128430c01ab"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "368850b9df5aa3f6eb588fb3039907610023bc3e4f1159b381304da6291f3621"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "c4f0c00a9d91c092f866c0f16f90034a586a4cf089fc00b53581648bf0c23ba7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "381f17442da4c06f49fc0119b8578ed308cbeaad285674f93232b53e22e303ae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "930aabbf83c78809b4d27f1c37bcb3e8b882fc07f88fcc98527a305c907d0015"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "1c23722d77a6a39296c9200f2d3f65c40e410751346ab7a018864a32f403bd65"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "ba2641e2fa4d8654d44366fe45514c628630044066e3338fc3773be53db01463"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "2fecb26b2bc00b8be45608ceba2c927f1be317f7a90d74a06e19c9be814f71a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "e4a140bd421d28c555972e04d2247768cf7734faa4ac12319e7e688baf8641cd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "5e33956c96b56b65d6fd17ff836c853d323c1adc19e8f8df53dff7deecb42cd3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 341,
        "start_column": 6,
        "end_line": 341,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case false.left\nn m χ p : ℕ\nherr : p > 2 * χ\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * χ + 1)) m\nr : Vector (Fin 2) m\nrv : Vector (Fin p) m\nh1 : Vector.map (Fin.castLE hp2) r = rv\npne0 : NeZero p\nerr : Vector (Fin p) m\nh2 : Vector.map (fun t => Fin.castLE herr t - ↑χ) e = err\nmask : Fin p\nh3 : -(err.get ⬝ᵥ rv.get) = mask\nmask_bound : Fin_Bound mask (χ * 2 * m)\n⊢ p / 4 ≤ ↑(mask - ↑(p / 2))",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/Regev.lean#L341"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "115d06b862eefa964a056e266c4fd7a4c8b919d30c4ac027c4e21075963c0111"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 342,
        "start_column": 6,
        "end_line": 342,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case false.right\nn m χ p : ℕ\nherr : p > 2 * χ\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * χ + 1)) m\nr : Vector (Fin 2) m\nrv : Vector (Fin p) m\nh1 : Vector.map (Fin.castLE hp2) r = rv\npne0 : NeZero p\nerr : Vector (Fin p) m\nh2 : Vector.map (fun t => Fin.castLE herr t - ↑χ) e = err\nmask : Fin p\nh3 : -(err.get ⬝ᵥ rv.get) = mask\nmask_bound : Fin_Bound mask (χ * 2 * m)\n⊢ ↑(mask - ↑(p / 2)) ≤ p * 3 / 4",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/Regev.lean#L342"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "cc93efd77b3171f03471f147e41e525d251b6f010cbae122a0d21f58be1c9afb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/Regev.lean",
        "start_line": 344,
        "start_column": 4,
        "end_line": 344,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case true\nn m χ p : ℕ\nherr : p > 2 * χ\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * χ + 1)) m\nr : Vector (Fin 2) m\nrv : Vector (Fin p) m\nh1 : Vector.map (Fin.castLE hp2) r = rv\npne0 : NeZero p\nerr : Vector (Fin p) m\nh2 : Vector.map (fun t => Fin.castLE herr t - ↑χ) e = err\nmask : Fin p\nh3 : -(err.get ⬝ᵥ rv.get) = mask\nmask_bound : Fin_Bound mask (χ * 2 * m)\n⊢ ↑mask < p / 4 ∨ 3 * p / 4 < ↑mask",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/Regev.lean#L344"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-22T01:08:46-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "1cc7d9c402b1bd25a3e1c610c34a8062909f6caadaa910d8cde1ceed5f65776c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "4e2dbf29900c0d548c0f5e6292b000e6d4371a24490d45af61606cdb7fc16b84"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "f00879d766c590def018ede0600f8c219684d836a129fcde79aa00576bed86ad"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "4ed87bc068f8c72f9784ef2181fb3d8761535c40afdfab7d0863b53281c11606"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "854694ddbb498663ded6bc4112ed013bde972cc9eeb980d9618f91bea267517e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "G P : Type\ninst✝⁵ : SelectableType G\ninst✝⁴ : SelectableType P\ninst✝³ : AddCommGroup G\ninst✝² : Group P\ninst✝¹ : AddTorsor G P\ninst✝ : DecidableEq P\nthis : ∀ (msg x : P) (g₁ g₂ : G), msg * (g₂ +ᵥ g₁ +ᵥ x) / (g₁ +ᵥ g₂ +ᵥ x) = msg\n⊢ neverFails ((fun a => ()) <$> ($ᵗG))",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/HHS_Elgamal.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "fa8c96e8b3e4ea0e411c9395eb6c3136ee36bd7f36fc695680cb756ee86d8d7f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "5cdeb42013bec0627138016506eda8f01acf52bf32d4ad8d07dc8dc83c41c0df"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "8d9890ce5f98657d0e4c39b3e1d8c09f9742cf67627c6ab39708d8a7555b5c2e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 127,
        "start_column": 88,
        "end_line": 127,
        "end_column": 93
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nq : spec.OracleQuery α\n⊢ (liftM q).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Traversal.lean#L127"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "5d84daba3ae3b1890b6e92bc1397cea3058de1453f8b6f26ba378c5d66b4dd6d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 132,
        "start_column": 60,
        "end_line": 132,
        "end_column": 65
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\nq : spec.OracleQuery α\noa : α → OracleComp spec β\n⊢ (liftM q >>= oa).neverFails ↔ ∀ (x : α), (oa x).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Traversal.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "6aae7a63220ab2f90ca59f57ec2e846b284a54459b7b931ed3b93f5bb5a33aca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀ x ∈ (snd <$> (simulateQ countingOracle oa).run <|> pure 0).support, x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "7c5f310fae2b9adc48daa35398583ed30857ae68e347435519b74bb27b1ce78c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "75bbb2c4427f397627e029a7f3a96570e458775d6f99af51c8809966fff24a32"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "db8ab08370e9a3f2f5fb401c68d87af25763917f69dd254808073817dc38ec3c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u_1\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "75c2c647dd8cc16c1fee4c43f995aae4ecc00f2223f5a997253d07336ecd5d4b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [fun x =>\n      match x with\n      | (x₁, x₂) => cf x₁ = some s ∧ cf x₂ = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "bfe94435f4f8dcbac79f9f5b9bdd44de7ca6b20420a93e99f0032caf4115003d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "2315a3d8fc8e59e9d3871e1dccb0f7be47518bed6cbbd512cccd246e753dc8be"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] ≥\n    [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "df4a1c0ee0421132e086b6e5fc6d97c4c147d2d92c8984f39fbb3a8fed0f16fa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)] =\n    [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "f680425b46f716c95b5328d32ec8f92db8fdc16b81f88df24a364c5a43218244"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h ≥\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "c6528a322907230b9e794c0c99a6227fad0eb292ef932a68856c4ec209306fa2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [⊥|main.fork' qb js i cf] = 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "38a43b5feab3250170f56a61b0664448da2090bbf52dc9d3369a7e9ea929a870"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] ≤ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "2e921d16dace740b1aaa2217e4d7c58e32947a817881168e9b9c05039fc83904"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "493085cfe3194ca3413eb561f960769bfee7ea29693bea87875c3272be38cd79"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h ≤\n    1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "ea677bf0887f5faef47ca04dceacf945f21cdd7ef69133239ac3e90dbc2aa6f2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h ≤ 1 - acc ^ 2 / ↑q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "9ff400a6ade4e0d974b4b058e8307a4483184902a347b3993b1fc2b6c9f0b415"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - acc ^ 2 / ↑q + acc / h = 1 - acc * (acc / ↑q - h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "90a3c4ec3d8fc55559c09037a92cb797c613516e3ee1e9c0aa78b15a87cfb7a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork' qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "0a31d3594e8bf33dddf69cfd59eae7f1c14250da58482f6ec6007dc36d944ee5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "daba05ddc2e817b0f6caae7fe78b6f8b7752e6c427f0c117e6cac09b22fe3ae8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "c007482d915bf06be2a28378cc0f64e882df25db986d705178a337a5f1ed6c2f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "4f591485152f6c863afb7fe7a044e99d784bcab774734bf6dcaddaceb23b2f79"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "43a8d14854e09defdd9cc5693a903d0199e03f9a30729fc7bb9aee2b2778a65c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "9060bcfa9e8ccc70d109e04bc0fdafb190e259ce044cfd8001ef8012cce828a7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "a989a271a3829cc0db9ba386c0f5db265d06e12c30367212c3bdf34be1487e53"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "a9ef383432ae7e7ea4eee1ec2067836afacec44c89de7fa178828b2c525d0755"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm : ℕ\ninst✝ : SelectableType α\nx y : Matrix (Fin 0) (Fin m) α\n⊢ (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "eb3ccb8f464c36e0f90b9e3fcd212f395ad8bc28a3fce928486c89f78d9d33c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : SelectableType α\nm : ℕ\nih :\n  ∀ (x y : Matrix (Fin m) (Fin m✝) α),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m✝) α\n⊢ [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "3cdadcbcf9a386394a0e70ffc45a91a6ef7e0381a70b3cc6d2f24bdfd86c5757"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : SelectableType α\nm : ℕ\nih :\n  [⊥|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n⊢ ∀ (x : Vector α m✝),\n    neverFails\n      (Fin.cons x.get <$>\n        Nat.rec (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            Fin.cons top.get <$> ihn)\n          m)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "37c86e394c4c0fb47d5b1e04bdfd3debb706d26ccf27de1fbc88d9a245f3ece5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "f6377af3e8c200c624dcf264f2ca0bc9d39d4ac93364153581510b68eb190d96"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "41e9292e0b51280c8e4a31f587c4854734f469a53a442290e2bf2b085356a0a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "6602464d6c2730a5cce3973a06be13cf8e89b85f06a757eb9f8aed6a586f8b9a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "e1ff7dcfc65c51924c1f55afd3304b92ebf48c9f620b0b644afdeb5212cd8a6b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "e603940228637fa42dd0e440ff753d2d9a540cc71997adfa83bcd4681eacc8f1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "2fb5f50d95fff67ae81c9ab4058275404571808f7fadb4fde13701c1cf52bb76"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "711079b954d08db862569dea19cd4523871357e460eecf8a782d97fa807d4fcf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "9625bca9072a59b6e58d3934de1c0b49d957f9b2fb58868825b8cfc2c3dd7373"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "5abd0fc8d779178d8aec0be025e1b323b577b964f526e31a0edf7ebc8a4b3b6d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "a1c0805359e4f4ee9ebe4088b3c867958c98f2f1e2f21eccb03a84ba9566e902"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "95a31b8457d67034be504df84d713aae0af7e11be265de0613531e306d0bc1f6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "f912fe2983db942ab163a7bda71511d2ea0d1c6e861db48fa942b7bcc97c734f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "8751d626b2f9a09c08a848a3699715da34859524940e7cd8179d70624dbc8098"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "536902f74887316e576c839005b5d5103ed6d85346cedd8e0d0f32dfa5a3cf90"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "656784daf874a7689d55754e826e601c134ac3b6b87fc26bc206929a9cbf3456"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "180a41530ce2bb15007c139d2d224dd201acca9b62628892404320b40939229e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "18928d0e50a7f5d03115c03bdd576876d600a2c5644909ec885f8a5571b7451d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "6faf5344b603aae66bbeb9555f7384e16afeb38c2f90a401e4e30822c0ea9b9a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "6b00f5f3bea1319dab5dc38ea5f81a09b7207effb595849f88e73de07da56d48"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "a5a382e859edf00562b930444b20baf06a90c0574a3266468a2672b1c90ea283"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "99f5830a307d103daed6950eb4ccd3cf3ce944ab3abaa87ce4130b7d9ae1ec6a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "e5750786b63e07da351efe39f20705b271cb189d646c8abce0971293833ad98e"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Hilbert/NNFormula.lean",
        "start_line": 232,
        "start_column": 8,
        "end_line": 232,
        "end_column": 13
      },
      "debug_info": {
        "goal": "φ : NNFormula ℕ\n⊢ ∃ ψ, ψ.isModalCNF ∧ Hilbert.K ⊢! φ.toFormula ⭤ ψ.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Hilbert/NNFormula.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "cd8925a7578e3fd1ec23a50fdbcff59ac504775be5f40a2f0bb5a8bcafdeb831"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Hilbert/NNFormula.lean",
        "start_line": 236,
        "start_column": 8,
        "end_line": 236,
        "end_column": 13
      },
      "debug_info": {
        "goal": "φ : NNFormula ℕ\n⊢ ∃ ψ, ψ.isModalDNF ∧ Hilbert.K ⊢! φ.toFormula ⭤ ψ.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Hilbert/NNFormula.lean#L236"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "54bf4cc9ab075278febe5d0fef9724b59c5a45d1dfef24ea9c1f88689cba363d"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 27,
        "start_column": 25,
        "end_line": 27,
        "end_column": 30
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\n⊢ γ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "c084bca3f9aef533d553839211b6de4a8ea7457e2c6d432e1753bc9ff51542fa"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 28,
        "start_column": 33,
        "end_line": 28,
        "end_column": 38
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\n⊢ γ ∉ Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "5a9e77f9f729eb29d4651099c2c81a099e62c84c2830efdc83fbdb262ce38896"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 31,
        "start_column": 4,
        "end_line": 31,
        "end_column": 9
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\n⊢ ∃ δ ∈ Γ, (↑δ).toFormula ∈ L ∧ (↑δ).toFormula ∉ Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "e740fd040672f4fcc10fb7e988d599db5f1ead9edcb14a8d7a814401234a6125"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 36,
        "start_column": 4,
        "end_line": 36,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.intro\nL : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis✝ : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nξ : NNFormula ℕ\nproperty✝ : (□ξ).isPrebox ∨ (□ξ).isPredia ∨ (□ξ).degree = 0\nhψ₁ : ⟨□ξ, property✝⟩ ∈ Δ\nhψ₂ : (↑⟨□ξ, property✝⟩).isPrebox\nthis : □ξ.toFormula ∈ Logic.Ver\n⊢ False",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "e1695b651db01d4616a427a74792e55d9e56ac21c422b8ff8f290aa9d5bc09df"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 38,
        "start_column": 49,
        "end_line": 38,
        "end_column": 54
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nhΔ₁ : ∀ ψ ∈ Δ, ¬(↑ψ).isPrebox\n⊢ ∃ Γ, φ ⭤ ⋀Γ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "66b5348e6f514ec8d2637a4e75d6ab34c5f893ca51c1539eaf969400d5829746"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 40,
        "start_column": 2,
        "end_line": 40,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.mk.intro.intro.intro\nL : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : ¬Hilbert.Ver ⊢! φ\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis✝ : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nhΔ₁ : ∀ ψ ∈ Δ, ¬(↑ψ).isPrebox\nthis : ∃ Γ, φ ⭤ ⋀Γ ∈ L\n⊢ ∃ ψ, ◇ψ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "d99d0ab55f542c45bea9e7da4c087dcf5af53c6b1fabf50cd0e172f68541ec1e"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean",
        "start_line": 42,
        "start_column": 4,
        "end_line": 42,
        "end_column": 9
      },
      "debug_info": {
        "goal": "⊢ ∀ {φ : Formula ℕ}, Grz.miniCanonicalFrame Hilbert.GrzPoint3 φ ∈ FrameClass.finite_connected_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "dd3f2d1ee7c1622bf78398bb7c1c810959b5c4333709085d0bffec78dff32d6d"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GLPoint3.lean",
        "start_line": 33,
        "start_column": 101,
        "end_line": 33,
        "end_column": 106
      },
      "debug_info": {
        "goal": "⊢ Complete Hilbert.GLPoint3 FrameClass.finite_strict_linear_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Kripke/Hilbert/GLPoint3.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-17T22:57:50+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "03647850b20caa42bd4ed5ddabbb952322a5f7028761c7554b4abab16ac6679c"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean",
        "start_line": 35,
        "start_column": 4,
        "end_line": 35,
        "end_column": 9
      },
      "debug_info": {
        "goal": "⊢ ∀ {φ : Formula ℕ}, Grz.miniCanonicalFrame Hilbert.GrzPoint2 φ ∈ FrameClass.finite_confluent_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "aef4460638c4224f5bc131ecac102afb659413de0bfa3d3f43ff930ec172b25d"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "jnlindsay/feat/restricted-Lorentz-group",
        "commit": "fb8055bcc098d7a6f87175ddb0ed2803cf67282f",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PhysLean/Relativity/Lorentz/Group/Restricted.lean",
        "start_line": 52,
        "start_column": 14,
        "end_line": 52,
        "end_column": 19
      },
      "debug_info": {
        "goal": "d : ℕ\nx✝ : ↑(𝓛 d)\n⊢ x✝ ∈ { carrier := Restricted d, mul_mem' := ⋯, one_mem' := ⋯ }.carrier →\n    x✝⁻¹ ∈ { carrier := Restricted d, mul_mem' := ⋯, one_mem' := ⋯ }.carrier",
        "url": "https://github.com/HEPLean/PhysLean/blob/fb8055bcc098d7a6f87175ddb0ed2803cf67282f/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "f5ab4f28bed3",
        "blame_date": "2025-04-23T00:56:21+10:00",
        "inclusion_date": "2025-04-23T03:48:35.976628+00:00"
      },
      "id": "273751bcf52c7f4d050c0db836fa78aee7dea568c9d237f00561c0ff3936272e"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "mariainesdff/isup_lemmas",
        "commit": "9171df48f3adfe318101adbbbae9771dff90a0e2",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/Analysis/SpecialFunctions/Pow/NNReal.lean",
        "start_line": 455,
        "start_column": 33,
        "end_line": 455,
        "end_column": 38
      },
      "debug_info": {
        "goal": "ι : Sort u_1\ninst✝ : Nonempty ι\nf : ι → ℝ\nhf : ∀ (i : ι), 0 ≤ f i\nn : ℕ\nhn : n ≠ 0\nhf_bdd : ∀ (x : ℝ), ∃ y ∈ Set.range f, x < y\nx : ℝ\na : ι\nhax : x ^ (1 / ↑n) < f a\n⊢ 0 < ↑n",
        "url": "https://github.com/leanprover-community/mathlib4/blob/9171df48f3adfe318101adbbbae9771dff90a0e2/Mathlib/Analysis/SpecialFunctions/Pow/NNReal.lean#L455"
      },
      "metadata": {
        "blame_email_hash": "b2f50b2f722a",
        "blame_date": "2025-04-22T17:56:46+02:00",
        "inclusion_date": "2025-04-23T04:26:06.448018+00:00"
      },
      "id": "be413472e395f4ada0f788c69719eae4047ed10b0ea6fe684e77bd040a5d13ac"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "8b2c6bb629570ca44d5217890c2218e202eb9160",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lintsimp.lean",
        "start_line": 37,
        "start_column": 64,
        "end_line": 37,
        "end_column": 69
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝ : Mul α\na x y : αᵐᵒᵖ\n⊢ SemiconjBy a.unop y.unop x.unop ↔ SemiconjBy a x y",
        "url": "https://github.com/leanprover-community/batteries/blob/8b2c6bb629570ca44d5217890c2218e202eb9160/BatteriesTest/lintsimp.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "8a7dcd08b95f",
        "blame_date": "2022-12-18T15:51:52-05:00",
        "inclusion_date": "2025-04-23T04:31:39.975158+00:00"
      },
      "id": "ac65a26000d288f420f51a6446c65564a1fd01d81b3ca09bf6b956eff2609859"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "8b2c6bb629570ca44d5217890c2218e202eb9160",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lintunused.lean",
        "start_line": 7,
        "start_column": 2,
        "end_line": 7,
        "end_column": 7
      },
      "debug_info": {
        "goal": "h : 1 = 1\n⊢ True",
        "url": "https://github.com/leanprover-community/batteries/blob/8b2c6bb629570ca44d5217890c2218e202eb9160/BatteriesTest/lintunused.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-08T02:17:31+02:00",
        "inclusion_date": "2025-04-23T04:31:39.975158+00:00"
      },
      "id": "9a8f972018ef15e61bb9d42c8edae501b7240b6742bc5712461b1fb4b848f8da"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "8b2c6bb629570ca44d5217890c2218e202eb9160",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 23,
        "start_column": 2,
        "end_line": 24,
        "end_column": 5
      },
      "debug_info": {
        "goal": "⊢ 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/8b2c6bb629570ca44d5217890c2218e202eb9160/BatteriesTest/lint_unreachableTactic.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-23T04:31:39.975158+00:00"
      },
      "id": "71518fe1bc1f2d2fb32d6236546c9c48b7dd928b58a9fdbde75ca7bbacaffa6f"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "8b2c6bb629570ca44d5217890c2218e202eb9160",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 31,
        "start_column": 33,
        "end_line": 31,
        "end_column": 38
      },
      "debug_info": {
        "goal": "aa : Nat\n⊢ aa = 0 → t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/8b2c6bb629570ca44d5217890c2218e202eb9160/BatteriesTest/lint_unreachableTactic.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-23T04:31:39.975158+00:00"
      },
      "id": "ab0df0e3f6765e87b2db3473f012b3a1ac87f28999a6fbf74b51aa82421eec90"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a b : Formula⦄, a ≈ b → (~a) ≈ (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "bf244fa66a289f770e799652c37b4cd6ee410aa32272a63c8456cd9f560ff620"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/SemQuot.lean",
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ ∀ ⦃a₁ a₂ : Formula⦄, a₁ ≈ a₂ → ∀ ⦃b₁ b₂ : Formula⦄, b₁ ≈ b₂ → a₁⋀b₁ ≈ a₂⋀b₂",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "ca4c81edb1a073afbbee68af5e3087cf94d8da3bed1b1ab8b5de08fed18f6a01"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 344,
        "start_column": 99,
        "end_line": 344,
        "end_column": 104
      },
      "debug_info": {
        "goal": "α : Type\nn : ℕ\nys : List.Vector α n.succ\n⊢ ys.head = ys.get 0",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L344"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "a6e87c7fedcecdcd2204c776ee27f93d7b26f10d1755b0aac044be8e7c4b062d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 380,
        "start_column": 12,
        "end_line": 380,
        "end_column": 17
      },
      "debug_info": {
        "goal": "a✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\nHist✝ : History\nX✝ : Sequent\na✝ : Tableau Hist✝ X✝\na : PathIn (tabAt PathIn.nil).snd.snd\n⊢ (PathIn.nil.append a).rewind 1 = PathIn.nil",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L380"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "dbe3278e09f29a33a2b1127f9dd717e6517d4377ef7ab350608c796c19876b32"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 384,
        "start_column": 4,
        "end_line": 384,
        "end_column": 9
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nHist0 : History\nX0 : Sequent\nnrep : ¬rep Hist0 X0\nnbas : ¬X0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) → Y ∈ endNodesOf lt → Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y ∈ endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : ∀ {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\n⊢ ¬1 = Fin.last (List.length ((tail.append a).toHistory ++ [X0]))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "4b6e36fe8faaa8dbd8582562490a37bcb9c8cba89e3c5cd232ffac72fa392752"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 387,
        "start_column": 2,
        "end_line": 387,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nHist0 : History\nX0 : Sequent\nnrep : ¬rep Hist0 X0\nnbas : ¬X0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) → Y ∈ endNodesOf lt → Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y ∈ endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : ∀ {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\nh : ¬1 = Fin.last (List.length (PathIn.loc Y_in (tail.append a)).toHistory)\n⊢ (tail.append a).rewind ⟨1, ⋯⟩ = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L387"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "6922c62a455b6645b32e9927480d154dbdf74523bdcbeefc72f7c9d2b689d2b9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 389,
        "start_column": 118,
        "end_line": 389,
        "end_column": 123
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nY : History\nZ X0 : Sequent\nnrep : ¬rep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : ∀ {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\n⊢ ¬1 = Fin.last (List.length (tail.append a).pdl.toHistory)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L389"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "07d108df630c12efde3b8811670570255828851c87870a4780b50b51d49cf57d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 392,
        "start_column": 2,
        "end_line": 392,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nY : History\nZ X0 : Sequent\nnrep : ¬rep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : ∀ {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\nh : ¬1 = Fin.last (List.length (tail.append a).pdl.toHistory)\n⊢ (tail.append a).rewind ⟨1, ⋯⟩ = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L392"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "4b29784b5ea2c683c2c4a899c795a505de9d01128a6606f2f7dcdb20a010d879"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 464,
        "start_column": 15,
        "end_line": 464,
        "end_column": 20
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\n⊢ (b.rewind m).rewind ↑0 = b.rewind m",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "c0bd90da615643ab7a35ee71c3bae423a91cbe9df8dd9c00d732930a2cf5fb68"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 465,
        "start_column": 20,
        "end_line": 465,
        "end_column": 25
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\nk : Fin (List.length b.toHistory)\nih : (b.rewind m).rewind ↑↑k.castSucc = b.rewind (m + k.castSucc)\n⊢ (b.rewind m).rewind ↑↑k.succ = b.rewind (m + k.succ)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L465"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "41bb965bd45d738f6b6556cf6e7880ae76939c60b96e09f9176afdaf6bc56bb9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 480,
        "start_column": 30,
        "end_line": 480,
        "end_column": 35
      },
      "debug_info": {
        "goal": "case h\na✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\na b✝ c b : PathIn tab\na_c : Relation.TransGen edge a c\nc_b : c ⋖_ b\nih : ∃ k, c.rewind k = a\nk : Fin (List.length c.toHistory + 1)\nc_re_k_is_a : c.rewind k = a\nb_re_1_is_c : b.rewind 1 = c\nb_re_is_a : (b.rewind 1).rewind ↑↑k = a\n⊢ b.rewind (↑↑k + 1) = (b.rewind 1).rewind ↑↑k",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L480"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "c021780b75ffa39e4f2f63996e165022c2974f6f0d3f90cb8a10d980a7f3d781"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 492,
        "start_column": 22,
        "end_line": 492,
        "end_column": 27
      },
      "debug_info": {
        "goal": "case h.left\na✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\na✝ b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na : PathIn tab\na_b : a ⋖_ b\nb_re_1_is_a : (c.rewind k').rewind 1 = a\n⊢ c.rewind ↑↑k'.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L492"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "02fcb99deeb293ea8a6598ce5e9dcf750d4129ccebe4b92ba017e73a2506ad16"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 497,
        "start_column": 24,
        "end_line": 497,
        "end_column": 29
      },
      "debug_info": {
        "goal": "case h.right.right\na✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\na✝ b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\na : PathIn tab\na_b : a ⋖_ b\nb_re_1_is_a : b.rewind 1 = a\nk'_val : ℕ\nk'_hyp : k'_val < List.length c.toHistory + 1\nc_re_k'_is_b : c.rewind ⟨k'_val, k'_hyp⟩ = b\n⊢ ⟨k'_val, k'_hyp⟩ ≤ ↑(k'_val + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "d0e9c5e469d9b055692f5b223f450dec70824369db4961e06ada4a6eb290c42f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 504,
        "start_column": 29,
        "end_line": 504,
        "end_column": 34
      },
      "debug_info": {
        "goal": "case h.left\na✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\na✝ b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a ⋖_ d\nd_b : Relation.TransGen edge d b\nih : ∃ k k', c.rewind k = d ∧ c.rewind k' = b ∧ k' ≤ k\nn n' : Fin (List.length c.toHistory + 1)\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' ≤ n\nd_re_1_is_a : (c.rewind n).rewind 1 = a\n⊢ c.rewind ↑↑n.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L504"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "ebcf54c2f1328bdaf9b1e42e017430e1a4e5fc23e13a4972b3fd721c64a30171"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 508,
        "start_column": 31,
        "end_line": 508,
        "end_column": 36
      },
      "debug_info": {
        "goal": "case h.right.right\na✝² : History\na✝¹ : Sequent\ntab : Tableau a✝² a✝¹\na✝ b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a ⋖_ d\nd_b : Relation.TransGen edge d b\nn n' : Fin (List.length c.toHistory + 1)\nih : ∃ k, c.rewind k = d ∧ ∃ x, c.rewind x = b ∧ x ≤ k\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' ≤ n\n⊢ n' ≤ ↑(↑n + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L508"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "21c2b168a8bcb7b9081037d9c0f68c31ca5583f196e54129b4ba8b86ccb678f5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 533,
        "start_column": 0,
        "end_line": 533,
        "end_column": 5
      },
      "debug_info": {
        "goal": "a✝¹ : History\na✝ : Sequent\ntab : Tableau a✝¹ a✝\nc t : PathIn tab\nk k' : Fin (List.length t.toHistory + 1)\nh1 : t.rewind k = c\nh2 : t.rewind k' = c\n⊢ ↑k = ↑k'",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L533"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-22T18:20:05+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "873b4a963741f49575148f3e512767be00c4ad0cb3b7715be283c52e9cfc3ab1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 564,
        "start_column": 46,
        "end_line": 564,
        "end_column": 51
      },
      "debug_info": {
        "goal": "a : Sequent\ntab : Tableau [] a\nt l c : PathIn tab\nt_free : (nodeAt t).isFree = true\nt_above_l : t < l\nl_hearts_c : l ♥ c\nlpr : LoadedPathRepeat (tabAt l).fst (tabAt l).snd.fst\ntabAt_l_def : (tabAt l).snd.snd = Tableau.lrep lpr\nc_def : c = l.rewind (⋯ ▸ ↑lpr).succ\nhyp : ¬t < c\nc_above_l : c < l\ncomp_leq_t : c ≤ t\ncomp_lt_t : c < t\nk k' : Fin (List.length l.toHistory + 1)\ndef_c : l.rewind k = c\ndef_t : l.rewind k' = t\nk'_lt_k : ↑k' ≤ ↑k\nthis : ↑(cast ⋯ ↑lpr) + 1 = ↑k\n⊢ ↑(cast ⋯ ↑lpr) = ↑↑lpr",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L564"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-22T18:20:05+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "e84f790fa31759e2d1afb071932a3b953a262f5e69e16d5f60ff5bc4224c88d7"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 864,
        "start_column": 10,
        "end_line": 864,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ sorry ∈ endNodesOf (next (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ⋯)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L864"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "78c237ba5920400fa3047b79d10548f27b9c81b4d91f0982e2457087da0d59b4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 865,
        "start_column": 10,
        "end_line": 865,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nχ' : LoadFormula\nw_nξ : (M, w)⊨~''(AnyFormula.loaded χ')\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋AnyFormula.loaded χ'))).in_side side (L, R, O)\nα'_not_atomic : ¬α.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α⌋AnyFormula.loaded χ')) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α⌋AnyFormula.loaded χ') (LoadRule.dia α'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'⌊⌊δ⌋⌋χ'))) ∈ B\n⊢ (M, v)⊨sorry ∧\n    (sorry.isFree = true ∨\n      ∃ F γ,\n        (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ'))).in_side side sorry ∧\n          relateSeq M γ v w ∧\n            (∀ f ∈ F, evaluate M v f) ∧\n              (F, γ) ∈ H α ∧ (sorry.without (~''(AnyFormula.loadBoxes γ (AnyFormula.loaded χ')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L865"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "d43a320ac459688b63abbd55c93486aa53aa9d3d4560f84cd6e7c18b0da5e5f5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 868,
        "start_column": 8,
        "end_line": 868,
        "end_column": 13
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (∀ f ∈ F, evaluate M v f) ∧\n                        (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nF : List Formula\nδ : List Program\n_in_H : (F, δ) ∈ H α\nv_F : ∀ f ∈ F, evaluate M v f\nv_δ_w : relateSeq M δ v w\nα' : Program\nφ : Formula\nα'_not_atomic : ¬α'.isAtomic\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inl (~'⌊α'⌋AnyFormula.normal φ)) ⊆ O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (⌊α'⌋AnyFormula.normal φ) (LoadRule.dia' α'_not_atomic)) (L, R, O)\n⊢ ∃ Y,\n    (∃ l, (∃ a, ∃ (h : a ∈ B), endNodesOf (next a ⋯) = l) ∧ Y ∈ l) ∧\n      (M, v)⊨Y ∧\n        (Y.isFree = true ∨\n          ∃ F γ,\n            (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n              relateSeq M γ v w ∧\n                (∀ f ∈ F, evaluate M v f) ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L868"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "6598185278b14802c0cee8023aa7b10a997edb495eca395a5cfd96b14b511aa3"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 872,
        "start_column": 6,
        "end_line": 872,
        "end_column": 11
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\nB : List Sequent\nnext : (Y : Sequent) → Y ∈ B → LocalTableau Y\nIH :\n  ∀ (Y : Sequent) (a : Y ∈ B) (α : Program),\n    relate M α v w →\n      (M, v)⊨Y →\n        (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side Y →\n          ∃ Y_1 ∈ endNodesOf (next Y a),\n            (M, v)⊨Y_1 ∧\n              (Y_1.isFree = true ∨\n                ∃ F γ,\n                  (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y_1 ∧\n                    relateSeq M γ v w ∧\n                      (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y_1.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)\nα : Program\nv_α_w : relate M α v w\nL R : List Formula\nO : Olf\nv_t : (M, v)⊨(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (L, R, O)\nlocRulTru : ∀ (w : W), (M, w)⊨(L, R, O) ↔ ∃ Ci ∈ B, (M, w)⊨Ci\nress✝ : List (List Formula × Option NegLoadFormula)\nχ✝ : LoadFormula\nlrule✝ : LoadRule (~'χ✝) ress✝\nprecons : ∅.Subperm L ∧ ∅.Subperm R ∧ some (Sum.inr (~'χ✝)) ⊆ O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR χ✝ lrule✝) (L, R, O)\n⊢ ∃\n    Y ∈\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk ∅ ∅ (some (Sum.inr (~'χ✝))) (LocalRule.loadedR χ✝ lrule✝) precons)\n          next),\n    (M, v)⊨Y ∧\n      (Y.isFree = true ∨\n        ∃ F γ,\n          (~''(AnyFormula.loadBoxes γ ξ)).in_side side Y ∧\n            relateSeq M γ v w ∧ (M, v)⊨F ∧ (F, γ) ∈ H α ∧ (Y.without (~''(AnyFormula.loadBoxes γ ξ))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L872"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "42ac1da21c13d5abb6a2284a2b95b6efc71e2bd91e779e6464b4f87091b2751f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nv_α_w : relate M α v w\nw_nξ : (M, w)⊨~''ξ\n⊢ ∃ s,\n    t ◃⁺ s ∧\n      satisfiable (nodeAt s) ∧\n        (¬s ≡ᶜ t ∨ (~''ξ).in_side side (nodeAt s) ∧ (M, w)⊨nodeAt s ∧ ((nodeAt s).without (~''ξ)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "c13397dcc805e5042421604c17670f8639652316309ecf2a1183570223a1ee53"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1174,
        "start_column": 16,
        "end_line": 1174,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : ∀ f ∈ F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nh✝ : ¬δ = []\nws : List.Vector W δ.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin δ.length\nsk : PathIn tab\nt_sk : t ◃⁺ sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[↑k])⊨nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ))).isFree = true\na✝ : ℕ\nnegLoad_in : (~''(AnyFormula.loaded (⌊·a✝⌋ξ))).in_side side (nodeAt t)\nv_α_w : M.Rel a✝ v w\nFδ_in_H : (F, δ) ∈ H (·a✝)\nws_rel : ∀ (i : Fin δ.length), relate M δ[↑i] (ws.get i.castSucc) (ws.get i.succ)\nthis : δ[↑k] = ·a✝\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L1174"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "37f7f963bad281debc1b1ba7e8d137f4564b4ce13bc2967f3b69e0a720ec3432"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1178,
        "start_column": 16,
        "end_line": 1178,
        "end_column": 21
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nnbas : ¬Z.basic\nltZ : LocalTableau Z\nnrep : ¬rep Hist Z\nnext : (Y : Sequent) → Y ∈ endNodesOf ltZ → Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.loc nrep nbas ltZ next⟩⟩\nY : Sequent\nY_in : Y ∈ endNodesOf ltZ\nw_Y : (M, v)⊨Y\nt_to_s1 : PathIn (tabAt t).snd.snd := ⋯ ▸ PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t ⋖_ s1\ntabAt_s_def : tabAt s1 = ⟨Z :: Hist, ⟨Y, next Y Y_in⟩⟩\nv_s1 : (M, v)⊨nodeAt s1\nF : List Formula\nδ : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes δ ξ)).in_side side Y\nv_seq_w : relateSeq M δ v w\nv_F : ∀ f ∈ F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes δ ξ))).isFree = true\nh✝ : ¬δ = []\nws : List.Vector W δ.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin δ.length\nsk : PathIn tab\nt_sk : t ◃⁺ sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[↑k])⊨nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (↑k) δ) ξ))).isFree = true\na✝ : Program\nnegLoad_in : (~''(AnyFormula.loaded (⌊∗a✝⌋ξ))).in_side side (nodeAt t)\nv_α_w : Relation.ReflTransGen (relate M a✝) v w\nFδ_in_H : (F, δ) ∈ H (∗a✝)\nws_rel : ∀ (i : Fin δ.length), relate M δ[↑i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram δ[↑k] ≤ 1 + lengthOfProgram a✝\n⊢ lengthOfProgram δ[↑k] < 1 + lengthOfProgram a✝",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L1178"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "93710b47c33f90e87112d464867e22a0e2038cbdff93e51e558dfb01b96461db"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/Soundness.lean",
        "start_line": 1516,
        "start_column": 6,
        "end_line": 1516,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)⊨nodeAt t\nξ : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (⌊α⌋ξ))).in_side side (nodeAt t)\nv_α_w : relate M α v w\nw_nξ : (M, w)⊨~''ξ\ns : PathIn tab\nIH :\n  t = s →\n    ∃ s_1,\n      s ◃⁺ s_1 ∧\n        (satisfiable (nodeAt s_1) ∧ ¬s_1 ≡ᶜ s ∨\n          (~''ξ).in_side side (nodeAt s_1) ∧ (M, w)⊨nodeAt s_1 ∧ ((nodeAt s_1).without (~''ξ)).isFree = true)\ns_t0 : s ⋖_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = ⟨Hist, ⟨Z, Tableau.lrep lpr⟩⟩\n⊢ (tabAt t).snd.snd = Tableau.lrep (⋯ ▸ lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L1516"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "3db65f106c86ab029b4fb5408b486dbff274c930a545524c665dbb89ebbdaa7a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18
      },
      "debug_info": {
        "goal": "⊢ ∀ (p next : Sequent ⊕ Sequent × Formula × Rule), next ∈ sorry p → sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "d33dbf525963efe4f931af302e1666e781949c071f5c9da516961cf0a431166f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Prover\nh : winning (Sum.inl X) s\n⊢ Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "5ce7333f085e51a12544a414e812953ff007d73265deea8d34ad5d6af59b8433"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauGame.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Builder\nh : winning (Sum.inl X) s\n⊢ ∃ WS mg, X.toFinset ∈ WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "3b5e7f08cd8d134fe113c502032ea8f65c851581b844900ae226e45393952516"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\nτ : Formula\nτ_in : τ ∈ testsOfProgram α\nψ_in : (~τ) ∈ L\nx_in_voc_ψ : x ∈ τ.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "76118658e28be607a4eb68cf4b24b0a5ed677f8b7a2692a9ea7c488cf5482004"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nL : List Formula\nL_in : L ∈ unfoldBox α φ\na : ℕ\nδ : List Program\nψ_in : (⌈·a⌉⌈⌈δ⌉⌉φ) ∈ L\nright✝ : ·a ∈ subprograms α ∧ ∀ a ∈ δ, a ∈ subprograms α\nx_in_voc_ψ : x = Sum.inr a ∨ x ∈ δ.pvoc ∪ φ.voc\n⊢ x ∈ α.voc ∨ x ∈ φ.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "b9ebb2f6bf3b1160d368092f5ae45832b164f4350dd4114d2a38063e26de6a31"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : ℕ ⊕ ℕ\nα : Program\nφ : Formula\nFs : List Formula\nδ : List Program\nin_H : (Fs, δ) ∈ H α\nthis : ∀ (α : Program) {Fs : List Formula} {δ : List Program}, (Fs, δ) ∈ H α → δ = [] ∨ ∃ a δ', δ = ·a :: δ'\nα' : Program\nα'_in : α' ∈ δ\nx_in : x ∈ α'.voc\n⊢ x ∈ α.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "7930328dd56ac5a0ce696ca02781143e0f0f95cd0c440f7a50e75b588d60dfe0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : ℕ ⊕ ℕ\nress : List (List Formula × Option NegLoadFormula)\nχ : LoadFormula\nlrule : LoadRule (~'χ) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) ∈ ress\nφ : Formula\nφ_in_L : φ ∈ L\nbla : x ∈ φ.voc\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "f754d9a019611c964350735056c090c586a24248ddc8e6379675d02b8cf0dd40"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.1.fvoc ⊆ Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "f4305abbb7c12aaa275e651a8ba5a4279dbedff4bbed306b7078ade1fbd1a63a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n⊢ ∀ res ∈ ress, res.2.2.voc ⊆ Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "b3d5b608ba7a2dc927f796c41d32c64bafecb7a7cef4cbae2f6a38fd7d3cd614"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L ∧ Rcond.Subperm R ∧ Ocond ⊆ O\ncL cR : List Formula\ncO : Olf\nx : ℕ ⊕ ℕ\nx_in_voc_C :\n  (x ∈ Vocab.fromList (List.map Formula.voc cL) ∨ x ∈ Vocab.fromList (List.map Formula.voc cO.toForms)) ∧\n    (x ∈ Vocab.fromList (List.map Formula.voc cR) ∨ x ∈ Vocab.fromList (List.map Formula.voc cO.toForms))\nthis : ∀ res ∈ ress, res.1.fvoc ⊆ Lcond.fvoc\nC_in : (cL, cR, cO) ∈ applyLocalRule lrule (L, R, O)\n⊢ x ∈ jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "065e69c1c744bdb1f7e522e56b1d9ebf948332b1f17cc783e2cd0e589e6d4dd9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | ⟨c, cinC⟩ => ↑(subθs c cinC))\n    C.attach\nL_and_nθ_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "d6ad9ed86b84bda63b0e879573d7b49c4c19efae68c6c81141512541bf808c42"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nLcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Lcond ress✝\nprecondProof : Lcond.Subperm L ∧ ∅.Subperm R ∧ none ⊆ o\nrule : LocalRule (Lcond, ∅, none) (List.map (fun res => (res, ∅, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond ∅ none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | ⟨c, cinC⟩ => ↑(subθs c cinC))\n    C.attach\nR_and_θ_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "94107f9eef0118106124c05e646fae7c15e4a0d50efa5d83a02c50d3d480347e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | ⟨c, cinC⟩ => ↑(subθs c cinC))\n    C.attach\nL_and_nθ_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "2a2625acf2ca2aef00f70a1d2a3ec859b26758e5fdaf7565d87ead1c5daf70a5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/PartInterpolation.lean",
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsubθs : (c : Sequent) → c ∈ C → PartInterpolant c\nRcond : List Formula\nress✝ : List (List Formula)\norule : OneSidedLocalRule Rcond ress✝\nprecondProof : ∅.Subperm L ∧ Rcond.Subperm R ∧ none ⊆ o\nrule : LocalRule (∅, Rcond, none) (List.map (fun res => (∅, res, none)) ress✝)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk ∅ Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | ⟨c, cinC⟩ => ↑(subθs c cinC))\n    C.attach\nR_and_θ_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n⊢ False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "293ae2d2ac32d3507fc34328e356bd1549e82110f4f03ced052d75fce75b97b0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈∗a⌉~⌈a⌉p)⋀(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "b07d7ce6002ec454c6ef833225b2e003b4624ac4fad36758febbeba35a0a708d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Pdl/TableauExamples.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ ¬provable (~(⌈a⌉⌈∗a⌉p)⋀(~⌈a⌉⌈∗a⌉q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "1a93a96117c8a61542e2dc3abbf005e9d9c433f7b569e61dc6e2b5e18ded6f8c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 60,
        "start_column": 9,
        "end_line": 60,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\n⊢ ∀ (i : ιₛᵢ ⊕ Unit),\n    (OStatement ⊕ᵥ fun x => WitEquiv) i =\n      match (⋯.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "5d4df24f59bd07f72a0648fe55601ce37aa0399e16df3618443fdc24a7af23da"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 78,
        "start_column": 2,
        "end_line": 78,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝² : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝¹ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\nrelIn : Statement × ((i : ιₛᵢ) → OStatement i) → Witness → Prop\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "2e61cc3a3c233104a792acd6e119f57fd1958d0534216783124f88baa8e5fcbc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 138,
        "start_column": 9,
        "end_line": 138,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝¹ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\n⊢ ∀ (i : ιₛᵢ ⊕ ιₛᵢ),\n    (OStatement ⊕ᵥ OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "93ba09b2d337817d388c188e4336f817e87a73d7a2c16a53547656e5e7bce21a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝² : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4ddc7c464908d16439a92b833b7dedfdec02df06b046194e05a423596e44c68a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 255,
        "start_column": 2,
        "end_line": 255,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nOStatement : Type\ninst✝² : ToOracle OStatement\ninst✝¹ : VCVCompatible (Query OStatement)\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L255"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "9ab89baca680ddef1c75d80464f1868236672bcfcc0b3f8181fd1e4f7377e5f7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let a ← (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ← Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "c8aa6d09dcf9ac82e98b94842d3e619b8cf09bce062bbb6330f277d1cd342c15"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst✝ : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let __discr ←\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => a.1)) <$>\n            (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++ₒ [pSpec.Challenge]ₒ)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ←\n      (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | ⟨0, isLt⟩ => __discr.1).liftComp\n        (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "98992c8fa435d058999c933bcb98b066d8c8eeb75f316802cacb5ac4a93b98a6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ (do\n      let _ ← liftM (query 0 ())\n      (fun a => (0, ↑a)) <$> liftM (query 1 ())) =\n    do\n    let y ← liftM (query 1 ())\n    (fun a => (0, ↑y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "8c8a5581bf05aeb32ed9ba5a218a353bf66c227f798c8a1b3623ec36f1066093"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n⊢ (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a)))) none =\n    ∑' (a : Fin 2), 2⁻¹ * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a_1 => (0, ↑a)))) none",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "78f75ea3d39c3be2042b085fc844f1b6a36d2c4ebf99ab02b4cfe1605adbca08"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : ℕ\n⊢ (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a => (0, ↑y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "12f497ece82b32f449525098cdc8284634d1569710c9245856a5c37c2525bce7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : ℕ) → unifSpec.domain i → Fin (i + 1)\n⊢ (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun x => (fun a => (0, ↑a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun y => (fun a => (0, ↑y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4842b06c6593be761ad667d22371efbd901fd4d498b5fa7066e427df3c091b77"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/ToOracle.lean",
        "start_line": 299,
        "start_column": 2,
        "end_line": 299,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝⁵ : CommRing R\nd : ℕ\ninst✝⁴ : Fintype R\ninst✝³ : DecidableEq R\ninst✝² : IsDomain R\nσ : Type\ninst✝¹ : Fintype σ\ninst✝ : DecidableEq σ\na : R[X σ]\nha : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s a = 0 → ∀ (i : σ), s i ≤ d\nb : R[X σ]\nhb : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s b = 0 → ∀ (i : σ), s i ≤ d\nhNe : ¬a = b\n⊢ {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card ≤ Fintype.card σ * d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/ToOracle.lean#L299"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4f04b10b73766868566661fdeb0252d80c1db0047b39c74b01f459372dbe30a8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/ToOracle.lean",
        "start_line": 338,
        "start_column": 2,
        "end_line": 338,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nR : Type\ninst✝ : CommSemiring R\nm : ℕ\nD : Fin m ↪ R\np : R[X]\n⊢ ∃ x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {α} =>\n          (statelessOracle spec [fun x => R[X]]ₒ fun i q => oracle p q).impl) =\n        pure x ∧\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/ToOracle.lean#L338"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "da4fbe98a9c83fdb938486658d54dadb2e687e170ff3510f61b7e8d00bdad135"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).1.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "588e0c45075889fdf51eda2b0e54ae4d5c82c058d80a331e2324f3552a2fa3dd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).2.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "82f96af48388437665a476367bf24dc967db14ff1708fa94a969aaf77a4734f6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pEven ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "b3f2a595f7672e8fa666c9ae06723fd628fe44683ad1ad988de4838b722ace4b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pOdd ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "abcc36cac72a0d013126eb11e42abac29e1553ef0842fe199da36d7b4243aa0b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\nα : Type\ninst✝² : DecidableEq α\ninst✝¹ : Inhabited α\ninst✝ : Fintype α\nhash : α × α → α\nn : ℕ\nih :\n  ∀ (leaves : List.Vector α (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function α hash)\n        (do\n          let cache ← buildMerkleTree α n leaves\n          let proof : List.Vector α n := generateProof α i cache\n          verifyProof α i leaves[i] (getRoot α cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector α (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n⊢ ((((Option.elimM (OptionT.run (buildMerkleTree α (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run ∘ fun cache =>\n                verifyProof α i (leaves.get i) (getRoot α cache) (generateProof α i cache))).mapM\n          fun {α_1} q =>\n          match α_1, q with\n          | .((spec α).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "aee9ff835614bf8abf948aee4b2140fda1db4dbe139cdfcb35736a1e16ff055f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\n⊢ ‖C‖₀' ≠ ⊤",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "a1728b0d61fd930ba7ce8c25a12e23c78e56197710f4570bc5e5af1281970ef7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\nthis : ‖C‖₀' ≠ ⊤\n⊢ ENat.toNat (Finset.image (fun x => Δ₀(↑x.1, ↑x.2)) {p | ¬p.1 = p.2}).min =\n    sInf {d | ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d}",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "956aa6ab1f206002ecd6b412ac1ac0028ebc0a7a28cbebc54b14ef5e195b8281"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₁.intro.intro.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nv : n → R\nhv : v ∈ C\nhuv : ¬u = v\nhDist : Δ₀(u, v) ≤ d\n⊢ ∃ u ∈ C, ¬u = 0 ∧ ‖u‖₀ ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f6fd6527e34e48553a8f546f24f347ff9fb2cce5f3c1451eb77e1c2fce1c3e1b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₂.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nhNorm : ¬u = 0\nhDist : ‖u‖₀ ≤ d\n⊢ ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "3619ff734188a1dcffc313b765048ecb413653dd6d9726ae3364186f920a64b4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 269,
        "start_column": 67,
        "end_line": 269,
        "end_column": 72
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : Finite R\nC : Set (n → R)\n⊢ card ↑C ≤ card R ^ (card n - ‖C‖₀ + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "fb6616774204db654c2dd25b1955832adc923d9abb4a68b38d47cfe5016ad640"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 275,
        "start_column": 65,
        "end_line": 275,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝³ : Fintype n\nR : Type u_2\ninst✝² : DecidableEq R\ninst✝¹ : Finite R\ninst✝ : DivisionRing R\nC : Submodule R (n → R)\n⊢ Module.finrank R ↥C ≤ card n - ‖C.carrier‖₀ + 1",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L275"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7f048c220b7b0cef4149b20aab480bf452ff840b66f95bd59960fa1ae22271d2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "396718cbcadd7eabc5bbd84678d1ba2fb715609a3e6f7582032a3b88a3f8642a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "32105894d870ba533403d4ce0ff2fc18e1d19b3a581bcec869bda5857c5bbfd7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\np q : MlPoly R n\n⊢ (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "46d0db5e655367a1474829453e043b8ef43e022a9a79defcd2b16d205838d300"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : CommSemiring R\nn : ℕ\nS : Type u_2\ninst✝ : CommSemiring S\nf : R →+* S\np : MlPoly R n\nx : Vector S n\n⊢ p.eval₂ f x = MvPolynomial.eval₂ f x.get ↑p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "daf7c545d9cfebcb844bb2d2dc299f1a52697eb8fc57758c3043aebe70b7b32e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "b5f920efbdf4770ad0517053d16f4a153938fcd598955aa581973d70ebd57cea"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ (cons a b).get ⬝ᵥ (cons c d).get = a * c + b.get ⬝ᵥ d.get",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "829b10519740fe44b57a4a35dbce753276f3bdefad35f9d5c051c2eafecebf67"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f9357ff3031d3c60e97cc3739373e3c961745132a82226bb61915a7ceb310ba7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "df29b143e5a7f10fbee1017f8b8617aedd10b81423f9fb5836c888ccbd94891b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4639d1cd194a0a80c2a04aa729307c0c7f6a83e3d7d70e7731fe6be81a697b80"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "8c9ed73bf52f4721c2adb0deafe6f4b8f1d10d6b43a2df726dc4f17f3fa2cfee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (n_1 : ℕ) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "33df7afab80ccb56868c08a40c49e72618d78874ef78550c4f296fa8f9fc711a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "82dc9953b87601cf62c938e7d32229e01f54f22d15756089e1f4695a5cd5ef82"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (b : MlPoly R n), 1 • b = b",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "6cf19280364cf21eb9ae2fe8b622c0af9b16f358bcbed9ebb9cd19dfb6b1ec8b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (x : MlPoly R n), 0 • x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "08841a1ddbd15600b4c7f709b471815049958a4870b8c922fb5bfb3a9d003b2e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 374,
        "start_column": 43,
        "end_line": 374,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : ℕ\nα : Fin n → Sort u\nl : List ℕ\nn' : ℕ\nl' : List ℕ\nmotive : Fin (n' :: l').sum → Sort u_1\ncases : (n : ℕ) → (h : n ∈ n' :: l') → (i : Fin n) → motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : ¬↑i < n'\n⊢ ↑i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L374"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T14:25:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "30762fbcc2315411bc9162129b52a5a4ed06b6304d8da8001636a8cae16064e1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 402,
        "start_column": 16,
        "end_line": 402,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case ind\nn✝ n : ℕ\nIH : ∀ m < n, ∀ {a : Fin m → ℕ}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n → ℕ\n⊢ (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L402"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "72dc1fa95ed95e97fcb995bc9136b54c822b9f20c953d5781ca89f40bb1ba532"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 497,
        "start_column": 32,
        "end_line": 497,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "56a132db0b97dd3815bf22c111e5a9d1ac4fcbdaae98a225198afadfb5edb95f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 499,
        "start_column": 35,
        "end_line": 499,
        "end_column": 40
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L499"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "97f7e51076126a7643b1db9a1c9f345f145a698cd341cc36edd766ae87aa4988"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 501,
        "start_column": 36,
        "end_line": 501,
        "end_column": 41
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4b6f1b3e33fde11d74f2d61f485b58351b496e2f688cb5b968a3344d01a5847e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 557,
        "start_column": 4,
        "end_line": 557,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List ℕ\nj a : ℕ\nl' : List ℕ\nh : j < a + l'.sum\n⊢ ∃ n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L557"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "1c405951bad9823c467a940187562ecef8cd77f7d4461978f4366949ef63697d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 569,
        "start_column": 80,
        "end_line": 569,
        "end_column": 85
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝² : AddMonoid α\ninst✝¹ : Preorder α\ninst✝ : DecidableRel fun x1 x2 => x1 < x2\nl : List ℕ\nj : Fin l.sum\n⊢ l.findSumIdx ↑j < l.length",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L569"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "b13a3e6b2ee9069820edcc903dad39083887dc538087d8bea550c4421f72ad0c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nunit : α\nl l' : List α\nm n n' : ℕ\nh : n ≤ m\nh' : n' ≤ m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n ⊔ l.length = n' ⊔ l'.length\n⊢ l ++ replicate (n - l.length + (m - n' ⊔ l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' ⊔ l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Operations.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "a1ff2e0cc92e2b29f204e48ddd7679c87d50b2a5258e4d03388e95a25c5af172"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10
      },
      "debug_info": {
        "goal": "α : Type u_1\nl₁ l₂ : List α\nunit : α\n⊢ (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l₁.matchSize l₂ unit) ↔\n    ∀ (i : ℕ), l₁.getD i unit = l₂.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Operations.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f62e82e54dc16ca69946f0d6034766cf1c75ebaaa2d3d585b85eb460806eefdb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\na : Array α\nn : ℕ\nunit : α\ni : ℕ\nh✝ : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n⊢ { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Operations.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "58045e68e312ce6f1d1d14900a74bf76d9c5ff0a65e1471eafb25cabb6a854e2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80
      },
      "debug_info": {
        "goal": "α : Type u_1\np : α → Bool\nas : Array α\nh : (popWhile p as).size > 0\n⊢ ¬p ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Operations.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "e94a851dc4cd38d83db0dda34ce1696d19086139b7c5da976a76872b6514179f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nσ : Type u_3\nσ₁ : Type u_4\nσ₂ : Type u_5\nx : σ₁ → R\nf : σ → σ₁ ⊕ σ₂\np : R[X σ]\nb : σ₁ →₀ ℕ\nh : ¬coeff b ((sumToIter R σ₁ σ₂) ((rename f) p)) = 0\n⊢ (coeff b ((sumToIter R σ₁ σ₂) ((rename f) p))).degrees ≤ Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f7a70b6887d57b34997b76bda5c3bb57e6ff9de7573de3801f528b731cec74bf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\nh : n > 0\nD : Fin (n - 1) → Finset R\np : R[X Fin n]\n⊢ ((sumExceptFirst' n h D) p).degree ≤ ↑(degreeOf ⟨0, h⟩ p)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "9d5ff0206b5328ab2315f42e4f60402adf0773fb658f479d64e72fe7d0fb7783"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝⁴ : DecidableEq σ\ninst✝³ : Fintype σ\nR : Type u_2\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : DecidableEq R\np : R[X σ]\nhp : p ≠ 0\nS : σ → Finset R\n⊢ ↑(#({x ∈ p.vars.pi S | (eval (extendDomain x)) p = 0})) / ∏ i ∈ p.vars, ↑(#(S i)) ≤\n    ∑ i ∈ p.vars, ↑(degreeOf i p) / ↑(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "ea439d43ebacf0398f68b12c4bed9752515f01b4584f503e8058f9db4384d0b7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝³ : DecidableEq σ\ninst✝² : Fintype σ\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\np q : R[X σ]\nS : σ → Finset R\nhDegree : ∀ (i : σ), degreeOf i p < #(S i)\nhEval : ∀ x ∈ piFinset fun i => S i, (eval x) p = (eval x) q\n⊢ p = q",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f713392e6588b4cb8ad053be7d1c9dfeab77369de3f633464e2982480ee5268c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 95,
        "start_column": 16,
        "end_line": 95,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case succ\nk : ℕ\na✝ : k > 0 → AdjoinRoot (poly k) = Field k\nk_pos : k + 1 > 0\n⊢ AdjoinRoot (poly (k + 1)) = Field (k + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/BinaryTowerField/Basic.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-30T10:53:02+05:30",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "c5bbffff593d90cfdcfce4b17250243c40727503e5252df02bf288393b0e9cd5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 115,
        "start_column": 59,
        "end_line": 115,
        "end_column": 64
      },
      "debug_info": {
        "goal": "n : ℕ\n⊢ Irreducible (poly n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/BinaryTowerField/Basic.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2024-06-18T17:58:42-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "0a4bba0d58ecc200825bad1ce08a7bfc86890854ed5243f1cf4875d290275884"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 197,
        "start_column": 21,
        "end_line": 197,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.LeftInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic-old.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7957f8d41dbbf751d4da7cb1459834a0fa21148b0f18321b3c314a1224877401"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 198,
        "start_column": 22,
        "end_line": 198,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic-old.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "d13db5742317df7c8b1c5e834890803f3a976abac32bd19680124e1c93e94b85"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 199,
        "start_column": 21,
        "end_line": 199,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x *\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic-old.lean#L199"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "bf4f68018c5dde3a0d4e66e6f2fe247a1c76b1891cbf2fc3218a6bc92e0afeb8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 200,
        "start_column": 21,
        "end_line": 200,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x +\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic-old.lean#L200"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7e556243a01c83772ea2af8a7e758caa0d413bc2b1fb2a9ef2a8f53c8fc71b4f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q : UniPoly Q\ni : ℕ\nhi : i < Array.size (p.add_raw q)\n⊢ (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "06cf5b31c6793d2a2c36ea801a235bcb282ff43e974bae97b4e94042c50e84c8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n⊢ p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "2de25791984e6ffc390d8f252aedef026df64746dc8f48220735e18da7845a33"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : Ring R\ninst✝ : BEq R\np : UniPoly R\n⊢ (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) ∈ TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "eba78afa797e766704f57ff0db5ac4f1a7f72fc7764ac25f1c4de483fc5221c6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "57a44e6e03990af4cdad6c1ac74811aae3b567ded229d4b43cb91a66b243a8bc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "6892d9b6a4eb19922d472351a6a6c3facc5a25a525bf9d3fce7c357d0a28434e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "c0fd0cac045a68b6aa837cf848a968afc6baa16ec10a61142bd90217200c67bb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 254,
        "start_column": 2,
        "end_line": 254,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h\nm n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nT : pSpec₁.FullTranscript\nT' : pSpec₂.FullTranscript\ni : Fin m\n⊢ _root_.cast ⋯ (T i) = (⋯ ▸ T) i",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L254"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T12:49:22-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "5d230483943f04980bd6656cc5c35a7e620f02b2ba1efbed71fde4a6bb2db3aa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 556,
        "start_column": 55,
        "end_line": 556,
        "end_column": 60
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\n⊢ (compose 0 (fun x => n) fun x => pSpec) = pSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L556"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T18:57:31+07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "aff7f956babe47f93326d5ff9ebd864e358041e9d5adbb1f99a09d6239981536"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 572,
        "start_column": 2,
        "end_line": 572,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ni : Fin m\n⊢ compose (↑i + 1) (Fin.take (↑i + 2) ⋯ n) (Fin.take (↑i + 2) ⋯ pSpec) =\n    cast ⋯ (compose (↑i) (Fin.take (↑i + 1) ⋯ n) (Fin.take (↑i + 1) ⋯ pSpec) ++ₚ pSpec i.succ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "66dbed3933c0bedce9903536e7aa88269e2a6c11537f903e72701602782f79b1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 699,
        "start_column": 2,
        "end_line": 699,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nOₘ₁ : (i : pSpec₁.MessageIndex) → ToOracle (pSpec₁.Message i)\nOₘ₂ : (i : pSpec₂.MessageIndex) → ToOracle (pSpec₂.Message i)\ninst✝² : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝¹ : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\ninst✝ : oSpec.DecidableEq\nP₁ : Prover pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nP₂ : Prover pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\nstmt : Stmt₁\nwit : Wit₁\n⊢ run stmt wit (P₁.append P₂) = do\n    let __discr ← liftM (run stmt wit P₁)\n    match __discr with\n      | (stmt₂, wit₂, transcript₁) => do\n        let __discr ← liftM (run stmt₂ wit₂ P₂)\n        match __discr with\n          | (stmt₃, wit₃, transcript₂) => pure (stmt₃, wit₃, transcript₁ ++ₜ transcript₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L699"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "c0d6a73c744b50c7e7d4e51fc0a1c7e4a6a43c41476c12286f75f8b451bd203e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 725,
        "start_column": 89,
        "end_line": 725,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : ℕ\nι : Type\ninst✝⁴ : DecidableEq ι\noSpec : OracleSpec ι\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\ninst✝³ : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝² : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nrel₁ : Stmt₁ → Wit₁ → Prop\nrel₂ : Stmt₂ → Wit₂ → Prop\nrel₃ : Stmt₃ → Wit₃ → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR₁ : Reduction pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nR₂ : Reduction pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\ncompletenessError₁ completenessError₂ : ℝ≥0\nh₁ : completeness rel₁ rel₂ R₁ completenessError₁\nh₂ : completeness rel₂ rel₃ R₂ completenessError₂\n⊢ completeness rel₁ rel₃ (R₁.append R₂) (completenessError₁ + completenessError₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "83f7199f23fc3c32dca7f2f30b1a15a76a104eeeb01ede8e699fcd2200c8012c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 752,
        "start_column": 38,
        "end_line": 752,
        "end_column": 43
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nm : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ninst✝² : (i : Fin (m + 1)) → (j : (pSpec i).ChallengeIndex) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 2) → Type\nrel : (i : Fin (m + 2)) → Stmt i → Wit i → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR : (i : Fin (m + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1) → ℝ≥0\nh : ∀ (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n⊢ completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (∑ i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L752"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "448bc439a43e13ac40bc378c0ceddb4a4acd41e36522fb909b035e4f34d62991"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2.1).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2 a)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "14ad786f7fcad3f9af133626bf90077d630cb626d769318e0014032b2b952ff1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "499ac94efa0b7e1b1296899a004caffcb259f39165b9a48f4f4e0298145616a2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let __discr ← Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7e50a7342623d7de7d3e8a47e4ac53ad1aa144720ecb4a3d773f91811d9a65a1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\ncompletenessError : ℝ≥0\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn →\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run stmtIn witIn R] ≥\n        1 - ↑completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] ≥\n    1 - ↑completenessError\nx✝ : (StmtOut' × WitOut') × StmtOut' × pSpec.FullTranscript\na✝ : x✝ ∈ (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x✝.2.1 x✝.1.2 ∧ x✝.1.1 = x✝.2.1\n⊢ ((fun x => relOut x.2.1 x.1.2 ∧ x.1.1 = x.2.1) ∘ fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x✝",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "15ec5a295ab296484c9eff2903c7b7625b55096cb179297cfa5fbec8a2f514bd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : ℝ≥0\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  ∀ (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    ∀ stmtIn ∉ langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut ∉ langOut'|run stmtIn witIn { prover := prover, verifier := V }] ≤\n        ↑soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn ∉ langIn\n⊢ [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut ∉\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] ≤\n    ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "bf74392b5f624df2965ce7f083d69b040fe15b9f5d3ec7ab8dec8484acf8c0a8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\nsoundnessError : ℝ≥0\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          ¬relIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) ∧\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] ≤\n      ↑soundnessError\n⊢ ∃ extractor,\n    ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            ¬relIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) ∧\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] ≤\n        ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "a93108078d342d2a8832dcf5493a267b95b436dd399fb9a5e098dc75336248f2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x✝³ : StmtIn\nx✝² : Unit\nx✝¹ : StmtOut'\nx✝ : Unit\np q : ℤ[X]\nt : ℤ\nf : ℤ[X]\nt' r : ℤ\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n⊢ eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7fad2f3d519483d6ea8ef6584126487510c2b449634557f1e6632dc3b477d32e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 361,
        "start_column": 2,
        "end_line": 361,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : ℝ≥0\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        ¬relIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) ∧\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] ≤\n      ↑knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : ∀ (x : WitIn), ¬relIn stmtIn x\n⊢ [fun x => ∀ (x_1 : WitOut), ¬relOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] ≤\n    ↑knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Security/Basic.lean#L361"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "6a43644c581530951fb80b56bca5eb409d6e2426ad6da8350cf7d7ecab4f5ebe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn StmtOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction langIn langOut verifier\nrbrSoundnessError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrSoundness langIn langOut verifier stateFunction rbrSoundnessError →\n    soundness langIn langOut verifier (∑ i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Security/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "9cab4619f10a86d3721d23019cbbdf28eefa929b4258a2fd6ab1efcde7596ae6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 393,
        "start_column": 2,
        "end_line": 393,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier stateFunction rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Security/Basic.lean#L393"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "2f1c6a00e7bfef9ac713d5b745d9c1f94caa60b8c2719a75915af1ad5e4a2b10"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 403,
        "start_column": 82,
        "end_line": 403,
        "end_column": 87
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    knowledgeSoundness relIn relOut verifier (∑ i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Security/Basic.lean#L403"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "45f122d9685eb2ae1cec9bad5f9b8dfc9e3d9f9273360a35c22cf18f7f87b97b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 496,
        "start_column": 2,
        "end_line": 496,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\ninst✝ : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, ↥R⦃≤ ↑deg⦄[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : ↑(transcript 0) ∈ R⦃≤ ↑deg⦄[X]\nhEq : transcript 0 = ⟨↑(transcript 0), hp_i⟩\n⊢ (do\n      let a ←\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run ∘ fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (transcript 1)))).mapM\n            fun {α} => (ToOracle.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) ↑(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if ∑ x, Polynomial.eval (D x) ↑(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L496"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7c291f97b2fa6c71b676e18c92667ced0e575e167febb6ad63341fb7dad14518"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 514,
        "start_column": 57,
        "end_line": 514,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ (do\n      let x ←\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                ⟨0, ⋯⟩\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn✝)).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)\n      let a ← liftM (query (Sum.inr ⟨1, ⋯⟩) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  ⟨1, ⋯⟩ x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L514"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f9acead5475620f79d7aaf4879f66ae322642065586262fd147a5f3ff1e397af"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 523,
        "start_column": 2,
        "end_line": 523,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) → OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) ∈\n        (run ({ target := target, challenges := challenge }, oStmt) witIn✝\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support →\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | ⟨poly, property⟩ =>\n            ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x ∘ Fin.cast ⋯)) poly =\n              target) ∧\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L523"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "2859b3b9bc45cdd972473a933816e8355d9b2ef6148f7139e0f8bca55c4e3611"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 572,
        "start_column": 4,
        "end_line": 572,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R✝ : Type\ninst✝⁵ : CommSemiring R✝\nn✝ deg✝ m✝ : ℕ\nD✝ : Fin m✝ ↪ R✝\nι✝ : Type\noSpec✝ : OracleSpec ι✝\ninst✝⁴ : VCVCompatible R✝\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni✝ : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  ¬relation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i),\n    (a, b) ∈ (Verifier.run stmt tr (verifier R n deg D oSpec i)).support →\n      ∀ (x : Unit), ¬relation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "9d03a1b0fa87b2b7566a04d497db4accf89073858580e3485a996812078a80ed"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 647,
        "start_column": 42,
        "end_line": 647,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\nn deg m : ℕ\nD : Fin m ↪ R\ninst✝ : VCVCompatible R\n⊢ OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L647"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "26285d94215e1d88e506bb722bbb3aaa693a8ba4a5336ca747a9ec742f4e0e29"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 60,
        "start_column": 9,
        "end_line": 60,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\n⊢ ∀ (i : ιₛᵢ ⊕ Unit),\n    (OStatement ⊕ᵥ fun x => WitEquiv) i =\n      match (⋯.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "5d3fb12cca86fafe84f05304159ebd200b1a57d3c48b22fa289303dddaeb8ee9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 78,
        "start_column": 2,
        "end_line": 78,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝² : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝¹ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\nrelIn : Statement × ((i : ιₛᵢ) → OStatement i) → Witness → Prop\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "302e345791054383ae89bd5108f33b90f3ac683331585b5965214afe9de99474"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 138,
        "start_column": 9,
        "end_line": 138,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝¹ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\n⊢ ∀ (i : ιₛᵢ ⊕ ιₛᵢ),\n    (OStatement ⊕ᵥ OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "107e00cde2b59097bf5b6e8103382f1e22058d4bcc938858b955d09904dba06b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝² : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "e9a5df19722272415619254ade5268ccb3f7d88b10edc81b8b5c53162817d283"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 255,
        "start_column": 2,
        "end_line": 255,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nOStatement : Type\ninst✝² : ToOracle OStatement\ninst✝¹ : VCVCompatible (Query OStatement)\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L255"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7b19e2712671b63d1782e564c604b6cca09c454894de244e94e138e50bfa2349"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let a ← (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ← Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "98677f00ad5f7638d9dc25c16d21f6580375654febec44dce847c1d401a002b6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst✝ : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let __discr ←\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => a.1)) <$>\n            (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++ₒ [pSpec.Challenge]ₒ)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ←\n      (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | ⟨0, isLt⟩ => __discr.1).liftComp\n        (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "b8d6835d1aa945b4bd086c1a0e1ecea7dae75a7eed3e59a758892fe78ec65af4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ (do\n      let _ ← liftM (query 0 ())\n      (fun a => (0, ↑a)) <$> liftM (query 1 ())) =\n    do\n    let y ← liftM (query 1 ())\n    (fun a => (0, ↑y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "935d1c05ea74eacdc7d9c756431f2f5d43c502d1d43e360b411bc6fa98cada20"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n⊢ (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a)))) none =\n    ∑' (a : Fin 2), 2⁻¹ * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a_1 => (0, ↑a)))) none",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "53962b6cb0ef97a03b94d27342641ea15d561645015e577f54d811a7124ebdec"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : ℕ\n⊢ (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a => (0, ↑y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "21ba941e377ae8143564f8de7db64392d62136f0ac71f688e9e3292a3a4c3eba"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : ℕ) → unifSpec.domain i → Fin (i + 1)\n⊢ (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun x => (fun a => (0, ↑a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun y => (fun a => (0, ↑y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "9effab30b90f800af5a09504ea4ff33d971d509600e24824d7cbc26224bcf5f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/ToOracle.lean",
        "start_line": 299,
        "start_column": 2,
        "end_line": 299,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝⁵ : CommRing R\nd : ℕ\ninst✝⁴ : Fintype R\ninst✝³ : DecidableEq R\ninst✝² : IsDomain R\nσ : Type\ninst✝¹ : Fintype σ\ninst✝ : DecidableEq σ\na : R[X σ]\nha : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s a = 0 → ∀ (i : σ), s i ≤ d\nb : R[X σ]\nhb : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s b = 0 → ∀ (i : σ), s i ≤ d\nhNe : ¬a = b\n⊢ {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card ≤ Fintype.card σ * d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/ToOracle.lean#L299"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "8e7f51041b4cab45892fb64755253a705812677f00d2df82c35d78bc6be9f6d0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/ToOracle.lean",
        "start_line": 338,
        "start_column": 2,
        "end_line": 338,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nR : Type\ninst✝ : CommSemiring R\nm : ℕ\nD : Fin m ↪ R\np : R[X]\n⊢ ∃ x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {α} =>\n          (statelessOracle spec [fun x => R[X]]ₒ fun i q => oracle p q).impl) =\n        pure x ∧\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/ToOracle.lean#L338"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "e5f74fee5e95c32a6edc52361fdf0b0179a6e42aca2d4f9b270b21481ba5661f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).1.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "a703e53c750447a212007aa5ab5f9cbe5a66efe0df331878ac2b6840ab23642e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).2.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "cf2652389ef0e9f05cad145134403186910641811462f1929ad8a55a51105165"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pEven ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "87979fca5d96b3d4ba3fbeb4d8e8487cea2dec983cf76e715102b684b64c0601"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pOdd ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7b4d1486f17aa778015fb6c48dc6481f6a346c9956e79aae1bd22fab87bb7988"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\nα : Type\ninst✝² : DecidableEq α\ninst✝¹ : Inhabited α\ninst✝ : Fintype α\nhash : α × α → α\nn : ℕ\nih :\n  ∀ (leaves : List.Vector α (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function α hash)\n        (do\n          let cache ← buildMerkleTree α n leaves\n          let proof : List.Vector α n := generateProof α i cache\n          verifyProof α i leaves[i] (getRoot α cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector α (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n⊢ ((((Option.elimM (OptionT.run (buildMerkleTree α (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run ∘ fun cache =>\n                verifyProof α i (leaves.get i) (getRoot α cache) (generateProof α i cache))).mapM\n          fun {α_1} q =>\n          match α_1, q with\n          | .((spec α).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c346cfbcd68a8c54fd449a38c578af4d8cfc9260165ad89174c251d19ee23da5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\n⊢ ‖C‖₀' ≠ ⊤",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "56937a902854dc2d02d821da5c3bc1456e71f6a25ad514d21660def776e011cf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\nthis : ‖C‖₀' ≠ ⊤\n⊢ ENat.toNat (Finset.image (fun x => Δ₀(↑x.1, ↑x.2)) {p | ¬p.1 = p.2}).min =\n    sInf {d | ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d}",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "0801320237c929f8193ee6a4f49ce10e60cf0b8c35703faee0d04603dd77fb1b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₁.intro.intro.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nv : n → R\nhv : v ∈ C\nhuv : ¬u = v\nhDist : Δ₀(u, v) ≤ d\n⊢ ∃ u ∈ C, ¬u = 0 ∧ ‖u‖₀ ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "fb2a19cecd25c8e250de638fd46fb255f5184aa0e604fafaaf00949a8129ffbf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₂.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nhNorm : ¬u = 0\nhDist : ‖u‖₀ ≤ d\n⊢ ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "4d434198a358939429692e0845997d1923f226b1f7a7fdf23792d21b41882c7f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 269,
        "start_column": 67,
        "end_line": 269,
        "end_column": 72
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : Finite R\nC : Set (n → R)\n⊢ card ↑C ≤ card R ^ (card n - ‖C‖₀ + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "9cf56f4a61c205dd3e11d11bb859c6d72c51da757bdb0c7112e9eb534d6b7862"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 275,
        "start_column": 65,
        "end_line": 275,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝³ : Fintype n\nR : Type u_2\ninst✝² : DecidableEq R\ninst✝¹ : Finite R\ninst✝ : DivisionRing R\nC : Submodule R (n → R)\n⊢ Module.finrank R ↥C ≤ card n - ‖C.carrier‖₀ + 1",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L275"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "1e3764a232da52aa94c53642ed3080d652cd301fcd85ed839370aa040787a0f7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "eb5a09117a3fd64b8d3228a9091d925a7613e9d25d5b1ed641ba047e2e00cbd8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "4ef9527b4ad5fbb7bb9e1a1bd4f0990b438425d5cf1dff55d33daaa1e0c4c88f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\np q : MlPoly R n\n⊢ (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "d1cc4f31772d838ac04ad0f3b48b9fb4d77f3d99feab4fc6aef27f8374dd991d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : CommSemiring R\nn : ℕ\nS : Type u_2\ninst✝ : CommSemiring S\nf : R →+* S\np : MlPoly R n\nx : Vector S n\n⊢ p.eval₂ f x = MvPolynomial.eval₂ f x.get ↑p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "0dd882e9ff7025e6a1ff5982a50e8d9c1d924e5dbc23ab8f117dda22f0656f6e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "fd9d92014cb9f49d94e99cc039357603464cc0e2fe080041ae5de3efa5b8157e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ (cons a b).get ⬝ᵥ (cons c d).get = a * c + b.get ⬝ᵥ d.get",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "91f716023e783accde97061e40fa7f5a2dcba84ed98edb1f352c782a94f1c4e9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7928aab0b6ab5122f147a21b192756c6ad41733a01b91c73f58fcdcffdc336b8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "9a2bbd6f60548bc6f483c0a98c8a9da678e910a03e617a47d3d6d8c329faa743"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "ce7858bdebe8638ebd1d3361df680069007e3d99bdaf3d6f1ac19f94e719126a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "89a3d0b951ffab7f6d623df935213cde196aa83f89d0022e23d5e577639b353e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (n_1 : ℕ) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "762a316b640b98860a9762ba5005855e7b685013d3617f8a5672f95657aa6b4f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c1f74a9a34d6e0a27a5227261c7a9a3dbc84d45b5903b5028a1703a57cd9be94"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (b : MlPoly R n), 1 • b = b",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "3442b282729fa73be1400a61696d655987731f53723c17478023e8735eeeec2b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (x : MlPoly R n), 0 • x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "2e33607cac6e5d1d5503d059975e3628dae28b492d67667f17e4688657759e83"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 374,
        "start_column": 43,
        "end_line": 374,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : ℕ\nα : Fin n → Sort u\nl : List ℕ\nn' : ℕ\nl' : List ℕ\nmotive : Fin (n' :: l').sum → Sort u_1\ncases : (n : ℕ) → (h : n ∈ n' :: l') → (i : Fin n) → motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : ¬↑i < n'\n⊢ ↑i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L374"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T14:25:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "4949ae30e59038f40c0c05bb9b8197890b046b5706aef06f09936745b77b4566"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 402,
        "start_column": 16,
        "end_line": 402,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case ind\nn✝ n : ℕ\nIH : ∀ m < n, ∀ {a : Fin m → ℕ}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n → ℕ\n⊢ (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L402"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "bf7a75da7e33d2e887d4cbd90ac2d66b5c1f7e86dee4e62cb714632c43b16868"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 497,
        "start_column": 32,
        "end_line": 497,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c2a8e53074037ef139cefe4b5981fa2eda8ab6a42980438bc5945e3aa6460b09"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 499,
        "start_column": 35,
        "end_line": 499,
        "end_column": 40
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L499"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "a63b28cd7160ac80d2b44cd45b19e4515b09b6cd90797f39ac4f79ab22b40115"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 501,
        "start_column": 36,
        "end_line": 501,
        "end_column": 41
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "dcb63f28c3aae96b5071cf51ffa647cd2345db6eba8764fa2f7a7685408ac456"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 557,
        "start_column": 4,
        "end_line": 557,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List ℕ\nj a : ℕ\nl' : List ℕ\nh : j < a + l'.sum\n⊢ ∃ n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L557"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "44ee9b2d5888fcbf16eefac50d2c6442c820b505ffcfd079178c5cc74a2596e8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 569,
        "start_column": 80,
        "end_line": 569,
        "end_column": 85
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝² : AddMonoid α\ninst✝¹ : Preorder α\ninst✝ : DecidableRel fun x1 x2 => x1 < x2\nl : List ℕ\nj : Fin l.sum\n⊢ l.findSumIdx ↑j < l.length",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L569"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "6198a86319b28f64c3f9f5ebd71723a3db10cd262207ad9fd38c6619c748a8be"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nunit : α\nl l' : List α\nm n n' : ℕ\nh : n ≤ m\nh' : n' ≤ m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n ⊔ l.length = n' ⊔ l'.length\n⊢ l ++ replicate (n - l.length + (m - n' ⊔ l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' ⊔ l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Operations.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "599b812c8519bcc001e1cd19b0a49117fb9518ef797f5550a7016fd4b6bc11ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10
      },
      "debug_info": {
        "goal": "α : Type u_1\nl₁ l₂ : List α\nunit : α\n⊢ (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l₁.matchSize l₂ unit) ↔\n    ∀ (i : ℕ), l₁.getD i unit = l₂.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Operations.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "3e4085a39f77edf149c49559416fca6ef0f62b27a15596131c760115083507d2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\na : Array α\nn : ℕ\nunit : α\ni : ℕ\nh✝ : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n⊢ { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Operations.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "163a57167a1fa39f731b9d886fc7445d93e0c3303fd57e693eb08c49a27820d6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80
      },
      "debug_info": {
        "goal": "α : Type u_1\np : α → Bool\nas : Array α\nh : (popWhile p as).size > 0\n⊢ ¬p ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Operations.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "d05ac1f0216837ec7ced1464ff02364ba10966ab9d6e56c4e6cbbd61bf63f317"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nσ : Type u_3\nσ₁ : Type u_4\nσ₂ : Type u_5\nx : σ₁ → R\nf : σ → σ₁ ⊕ σ₂\np : R[X σ]\nb : σ₁ →₀ ℕ\nh : ¬coeff b ((sumToIter R σ₁ σ₂) ((rename f) p)) = 0\n⊢ (coeff b ((sumToIter R σ₁ σ₂) ((rename f) p))).degrees ≤ Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "64c9da6739bc9d81df8d8dfdd2347fe2d24cbc51189b6e9799bf2f71e111d560"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\nh : n > 0\nD : Fin (n - 1) → Finset R\np : R[X Fin n]\n⊢ ((sumExceptFirst' n h D) p).degree ≤ ↑(degreeOf ⟨0, h⟩ p)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "8335a811616ac7d3d07568f9512c089725873b13a7caa4de29001b821048e5bc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝⁴ : DecidableEq σ\ninst✝³ : Fintype σ\nR : Type u_2\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : DecidableEq R\np : R[X σ]\nhp : p ≠ 0\nS : σ → Finset R\n⊢ ↑(#({x ∈ p.vars.pi S | (eval (extendDomain x)) p = 0})) / ∏ i ∈ p.vars, ↑(#(S i)) ≤\n    ∑ i ∈ p.vars, ↑(degreeOf i p) / ↑(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "56589b8dc89a6db311718dba5e6f5473d335d98d25365147bce5971b56a3bab6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝³ : DecidableEq σ\ninst✝² : Fintype σ\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\np q : R[X σ]\nS : σ → Finset R\nhDegree : ∀ (i : σ), degreeOf i p < #(S i)\nhEval : ∀ x ∈ piFinset fun i => S i, (eval x) p = (eval x) q\n⊢ p = q",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c3233be394500d2e64138d2cb71acfa12de8c3479e313e0a9f4f05747b9c4708"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 95,
        "start_column": 16,
        "end_line": 95,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case succ\nk : ℕ\na✝ : k > 0 → AdjoinRoot (poly k) = Field k\nk_pos : k + 1 > 0\n⊢ AdjoinRoot (poly (k + 1)) = Field (k + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/BinaryTowerField/Basic.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-30T10:53:02+05:30",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "bead3c4311c808cc607bb4bdfa28b0ce9be2e79b3e3f802ada56444430de7097"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 115,
        "start_column": 59,
        "end_line": 115,
        "end_column": 64
      },
      "debug_info": {
        "goal": "n : ℕ\n⊢ Irreducible (poly n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/BinaryTowerField/Basic.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2024-06-18T17:58:42-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "8acc721784ed7d8c44c98cf56b43303286d6cd7625de85146c4132a0411cead6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 197,
        "start_column": 21,
        "end_line": 197,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.LeftInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic-old.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "0074cf312960c0a425a4862af07a3ca3c73c6a27b50de9f8ccdc41493d9e4183"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 198,
        "start_column": 22,
        "end_line": 198,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic-old.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "1a067838c7ce25171a96df556c21efdec6852fc3e1cb27ab162e8a5774d8de43"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 199,
        "start_column": 21,
        "end_line": 199,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x *\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic-old.lean#L199"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "e78db15faca6367a65061c619725eb5e7283be8b71758cb2880df9011bcab68c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 200,
        "start_column": 21,
        "end_line": 200,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x +\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic-old.lean#L200"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "ebee468117542527d30822eaadc8c3dc8939cc35bb862c66fde128d83580cd95"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q : UniPoly Q\ni : ℕ\nhi : i < Array.size (p.add_raw q)\n⊢ (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7cdf46777192e68e5b9e6d9f3219b7e10f7085e57d8f6eb09fdfdf86f793740b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n⊢ p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "bfaff599d4b35668aa7350224d66500a2309f45b557cca5617d425564dc86f48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : Ring R\ninst✝ : BEq R\np : UniPoly R\n⊢ (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) ∈ TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "a5a00e44344d804dd53e58cd381637cbda36c858c5450576b4e0bd481208d858"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "99e112725fe6638078603a4b6aa7c36933c08d9cfab2fe149bc5f442360eaf3d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "91633df4d322a25a6b65b522dd137c1e621b01cb3250b87b2fc0d80a9536a9d5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7459b3d43c397b6da387cb38a04b9f566aba13065d8e3cfefce9f5cf53d3e8a2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 254,
        "start_column": 2,
        "end_line": 254,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h\nm n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nT : pSpec₁.FullTranscript\nT' : pSpec₂.FullTranscript\ni : Fin m\n⊢ _root_.cast ⋯ (T i) = (⋯ ▸ T) i",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L254"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T12:49:22-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "e07eb43f03b20fbee7e87ff259a0cd0416aa0e8a27fb8eb314bcf9bf95bb8a9b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 556,
        "start_column": 55,
        "end_line": 556,
        "end_column": 60
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\n⊢ (compose 0 (fun x => n) fun x => pSpec) = pSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L556"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T18:57:31+07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "daf806eae1da1fd808559458ec14bd85c66930faecadfc917bb485f4547da119"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 572,
        "start_column": 2,
        "end_line": 572,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ni : Fin m\n⊢ compose (↑i + 1) (Fin.take (↑i + 2) ⋯ n) (Fin.take (↑i + 2) ⋯ pSpec) =\n    cast ⋯ (compose (↑i) (Fin.take (↑i + 1) ⋯ n) (Fin.take (↑i + 1) ⋯ pSpec) ++ₚ pSpec i.succ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "5f40a87bb6b26e732effa52fb8d52a4c2bd3f92e6f542adfeceddaff9ef67715"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 699,
        "start_column": 2,
        "end_line": 699,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nOₘ₁ : (i : pSpec₁.MessageIndex) → ToOracle (pSpec₁.Message i)\nOₘ₂ : (i : pSpec₂.MessageIndex) → ToOracle (pSpec₂.Message i)\ninst✝² : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝¹ : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\ninst✝ : oSpec.DecidableEq\nP₁ : Prover pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nP₂ : Prover pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\nstmt : Stmt₁\nwit : Wit₁\n⊢ run stmt wit (P₁.append P₂) = do\n    let __discr ← liftM (run stmt wit P₁)\n    match __discr with\n      | (stmt₂, wit₂, transcript₁) => do\n        let __discr ← liftM (run stmt₂ wit₂ P₂)\n        match __discr with\n          | (stmt₃, wit₃, transcript₂) => pure (stmt₃, wit₃, transcript₁ ++ₜ transcript₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L699"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "350ae262f2a4131d5c90ff8d7dc05bb7990ad35c3c1dff25f878171732d94788"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 725,
        "start_column": 89,
        "end_line": 725,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : ℕ\nι : Type\ninst✝⁴ : DecidableEq ι\noSpec : OracleSpec ι\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\ninst✝³ : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝² : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nrel₁ : Stmt₁ → Wit₁ → Prop\nrel₂ : Stmt₂ → Wit₂ → Prop\nrel₃ : Stmt₃ → Wit₃ → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR₁ : Reduction pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nR₂ : Reduction pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\ncompletenessError₁ completenessError₂ : ℝ≥0\nh₁ : completeness rel₁ rel₂ R₁ completenessError₁\nh₂ : completeness rel₂ rel₃ R₂ completenessError₂\n⊢ completeness rel₁ rel₃ (R₁.append R₂) (completenessError₁ + completenessError₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c36fa54cd25700718daf5ac8de2d75ba764240da87d46c8a7b608f61bc56da54"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 752,
        "start_column": 38,
        "end_line": 752,
        "end_column": 43
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nm : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ninst✝² : (i : Fin (m + 1)) → (j : (pSpec i).ChallengeIndex) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 2) → Type\nrel : (i : Fin (m + 2)) → Stmt i → Wit i → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR : (i : Fin (m + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1) → ℝ≥0\nh : ∀ (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n⊢ completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (∑ i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L752"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "3b2ca99ce7bb935eb1dce6cf62a24dd8838f688ff88e073d0e6b7af947126b69"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2.1).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2 a)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "2874ccbcfdd6755081b92391ff739cdcf0d9152ad0ed4e1ebfc4472a723170ca"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "6e2bb4f3999a00f10182b4e11bc7de04b518b3615a01f31fcaf9468c35cf71f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let __discr ← Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "f8a0a8b2dd7a1c86691d9b6977d4fceb64786529440db08ebdac52704a1d1c4b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\ncompletenessError : ℝ≥0\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn →\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run stmtIn witIn R] ≥\n        1 - ↑completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] ≥\n    1 - ↑completenessError\nx✝ : (StmtOut' × WitOut') × StmtOut' × pSpec.FullTranscript\na✝ : x✝ ∈ (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x✝.2.1 x✝.1.2 ∧ x✝.1.1 = x✝.2.1\n⊢ ((fun x => relOut x.2.1 x.1.2 ∧ x.1.1 = x.2.1) ∘ fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x✝",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "02bc36169c0b69aa48f7a8edb63d3423dc3d28570c432c00af1edc49730f84a5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : ℝ≥0\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  ∀ (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    ∀ stmtIn ∉ langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut ∉ langOut'|run stmtIn witIn { prover := prover, verifier := V }] ≤\n        ↑soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn ∉ langIn\n⊢ [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut ∉\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] ≤\n    ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "cf970cae25f82786a5b2ecc3f5df674cb9a9e36f7d0ac5950f3923c8f2061c89"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\nsoundnessError : ℝ≥0\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          ¬relIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) ∧\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] ≤\n      ↑soundnessError\n⊢ ∃ extractor,\n    ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            ¬relIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) ∧\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] ≤\n        ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "b53dee42c163fd6290783ad8114c6408e1aab873f72925401e600f603811f2e8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x✝³ : StmtIn\nx✝² : Unit\nx✝¹ : StmtOut'\nx✝ : Unit\np q : ℤ[X]\nt : ℤ\nf : ℤ[X]\nt' r : ℤ\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n⊢ eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "4f806b7f63505f4344c750c7ea92bb2341fce020992e13e9bbe1def52ff4feee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 361,
        "start_column": 2,
        "end_line": 361,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : ℝ≥0\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        ¬relIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) ∧\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] ≤\n      ↑knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : ∀ (x : WitIn), ¬relIn stmtIn x\n⊢ [fun x => ∀ (x_1 : WitOut), ¬relOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] ≤\n    ↑knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Security/Basic.lean#L361"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c7f2f9d10297e4f686fe84aa948523dbd36538d68a840d300f6215da662c86b0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn StmtOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction langIn langOut verifier\nrbrSoundnessError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrSoundness langIn langOut verifier stateFunction rbrSoundnessError →\n    soundness langIn langOut verifier (∑ i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Security/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7e53bb3ca520f385875bcebabbd2dae59a23aed3af3cf938567f0b8bb52e31f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 393,
        "start_column": 2,
        "end_line": 393,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier stateFunction rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Security/Basic.lean#L393"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "179e44fb7cdd7c73b80c74070e8f66221f9d6d50066dd5a3d214ece27dadc74a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 403,
        "start_column": 82,
        "end_line": 403,
        "end_column": 87
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    knowledgeSoundness relIn relOut verifier (∑ i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Security/Basic.lean#L403"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "5ecf274c7b94d8cceb371732ac887e58f963eac7db45f532cef5512f0eb9a01c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 496,
        "start_column": 2,
        "end_line": 496,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\ninst✝ : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, ↥R⦃≤ ↑deg⦄[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : ↑(transcript 0) ∈ R⦃≤ ↑deg⦄[X]\nhEq : transcript 0 = ⟨↑(transcript 0), hp_i⟩\n⊢ (do\n      let a ←\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run ∘ fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (transcript 1)))).mapM\n            fun {α} => (ToOracle.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) ↑(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if ∑ x, Polynomial.eval (D x) ↑(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L496"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "5a758683c6ddeb333d6ba73228d2493e7b71475c2c7f54a674f82bcd8b3acd1b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 514,
        "start_column": 57,
        "end_line": 514,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ (do\n      let x ←\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                ⟨0, ⋯⟩\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn✝)).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)\n      let a ← liftM (query (Sum.inr ⟨1, ⋯⟩) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  ⟨1, ⋯⟩ x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L514"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c2963acfdbed9f50ca622b582bf1710d203975609cbd3edaa8ee8d01f865dc57"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 523,
        "start_column": 2,
        "end_line": 523,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) → OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) ∈\n        (run ({ target := target, challenges := challenge }, oStmt) witIn✝\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support →\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | ⟨poly, property⟩ =>\n            ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x ∘ Fin.cast ⋯)) poly =\n              target) ∧\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L523"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "0feba0658b6a43a5417758a47c0d8837e87e0c86a06dd94a290841c777680efd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 572,
        "start_column": 4,
        "end_line": 572,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R✝ : Type\ninst✝⁵ : CommSemiring R✝\nn✝ deg✝ m✝ : ℕ\nD✝ : Fin m✝ ↪ R✝\nι✝ : Type\noSpec✝ : OracleSpec ι✝\ninst✝⁴ : VCVCompatible R✝\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni✝ : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  ¬relation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i),\n    (a, b) ∈ (Verifier.run stmt tr (verifier R n deg D oSpec i)).support →\n      ∀ (x : Unit), ¬relation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "8f560d5c9559d35fe91627efab22fc4dae1498889b75687000254b1953b2917f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 647,
        "start_column": 42,
        "end_line": 647,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\nn deg m : ℕ\nD : Fin m ↪ R\ninst✝ : VCVCompatible R\n⊢ OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L647"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "86ebbb9272de41a6f56a734158e5dbb9bff7ff225181c29fd94e934042ffb6f8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "e7058cd034863388e0936f9d8fb1e3bc312903bf2eaf0c3e921c60ac2314a8b3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Circuit/Loops.lean",
        "start_line": 92,
        "start_column": 4,
        "end_line": 92,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n m : ℕ\nF : Type\ninst✝¹ : Field F\nα β : Type\ncircuit : α → Circuit F β\ninst✝ : Nonempty β\nxs : Vector α m\nlawful : ConstantLawfulCircuits circuit\nops : OperationsList F\n⊢ (Vector.mapM circuit xs ops).1 =\n    (fun n =>\n        Vector.mapIdx\n          (fun i x => ConstantLawfulCircuits.output circuit x (n + ConstantLawfulCircuits.local_length circuit * i)) xs)\n      ops.offset",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Circuit/Loops.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T13:03:36+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "196beb1e650dd2db705afeab682dfcab7103c77a9e4c02a2084d0fde265069f1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Circuit/Loops.lean",
        "start_line": 94,
        "start_column": 4,
        "end_line": 94,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n m : ℕ\nF : Type\ninst✝¹ : Field F\nα β : Type\ncircuit : α → Circuit F β\ninst✝ : Nonempty β\nxs : Vector α m\nlawful : ConstantLawfulCircuits circuit\nops : OperationsList F\n⊢ (Vector.mapM circuit xs ops).2.offset = (fun n => n + ConstantLawfulCircuits.local_length circuit * m) ops.offset",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Circuit/Loops.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T13:03:36+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "278cb9fb6890b3dfb415bd9af36b9743a125909755ed881afece4884f0c59536"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Circuit/Loops.lean",
        "start_line": 96,
        "start_column": 4,
        "end_line": 96,
        "end_column": 9
      },
      "debug_info": {
        "goal": "n m : ℕ\nF : Type\ninst✝¹ : Field F\nα β : Type\ncircuit : α → Circuit F β\ninst✝ : Nonempty β\nxs : Vector α m\nlawful : ConstantLawfulCircuits circuit\nops : OperationsList F\n⊢ (Vector.mapM circuit xs ops).2 =\n    { offset := (fun n => n + ConstantLawfulCircuits.local_length circuit * m) ops.offset,\n      withLength :=\n        ops.withLength ++\n          (fun n =>\n              let k := ConstantLawfulCircuits.local_length circuit;\n              ⋯.mpr\n                (Vector.induct (OperationsFrom.empty n)\n                  (fun {n_1} a as a_1 =>\n                    id (⋯.mpr (⋯.mpr (⋯.mpr (a_1 ++ ConstantLawfulCircuits.operations a (n + k * n_1))))))\n                  xs))\n            ops.offset }",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Circuit/Loops.lean#L96"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T13:03:36+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "ced25223878686f6fb1df836c8633b6ab53497e19b4165da73dcb47ed021bc40"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 65,
        "start_column": 18,
        "end_line": 65,
        "end_column": 23
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Soundness (F p) assumptions (spec off)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Rotation64/Rotation64.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-01T17:43:17+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "ff64695be4a522675b3a55296703581c0542b1e0654821c7ddbb2dde6e855dad"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 66,
        "start_column": 21,
        "end_line": 66,
        "end_column": 26
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Completeness (F p) U64 assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Rotation64/Rotation64.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-02-27T17:02:29+01:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "808d6952a88f2964d144135dfc392e8e01995c81b279b55892c14acf7031ea05"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[↑4]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[↑3])) ∧\n            (eval env state_var[1]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[↑4])) ∧\n        (eval env state_var[2]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[↑3]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Keccak/ThetaD.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "3bb56c268600170b762174f7ab3b313c598180a8dbc53bd4fd3c5d66f6cd99bd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/Chi.lean",
        "start_line": 103,
        "start_column": 2,
        "end_line": 103,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni✝ : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env :\n  env.uses_local_witnesses_completeness\n    (Vector.mapM\n          (fun i =>\n            (StateT.modifyGet fun ops =>\n                  (not64_bytewise state_var.toArray[↑(i + 5)],\n                    { offset := ops.offset + 0,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ main := fun x => StateT.pure (not64_bytewise x), local_length := fun x => 0,\n                                local_length_eq := ⋯, output := fun x x_1 => not64_bytewise x, output_eq := ⋯,\n                                initial_offset_eq := ⋯, assumptions := fun x => x.is_normalized,\n                                spec := fun x z => z.value = not64 x.value ∧ z.is_normalized, soundness := ⋯,\n                                completeness := ⋯ }.to_subcircuit\n                            ops.offset state_var.toArray[↑(i + 5)]) })).bind\n              fun state_not =>\n              (StateT.modifyGet fun ops =>\n                    (var_from_offset U64 ops.offset,\n                      { offset := ops.offset + 8,\n                        withLength :=\n                          ops.withLength.subcircuit\n                            ({ toElaboratedCircuit := And.And64.elaborated, assumptions := And.And64.assumptions,\n                                  spec := And.And64.spec, soundness := ⋯, completeness := ⋯ }.to_subcircuit\n                              ops.offset { x := state_not, y := state_var.toArray[↑(i + 10)] }) })).bind\n                fun state_and =>\n                StateT.modifyGet fun ops =>\n                  (var_from_offset U64 ops.offset,\n                    { offset := ops.offset + 8,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ toElaboratedCircuit := Xor.elaborated, assumptions := Xor.assumptions, spec := Xor.spec,\n                                soundness := ⋯, completeness := ⋯ }.to_subcircuit\n                            ops.offset { x := state_var.toArray[↑i], y := state_and }) }))\n          (Vector.finRange 25) { offset := i✝, withLength := Operations.empty i✝ }).2.withLength\nstate : KeccakState (F p)\nh_input : eval env state_var = state\nstate_norm : ∀ (i : Fin 25), state[↑i].is_normalized\ni : Fin 25\n⊢ ((eval env state_var[↑(i + 5)]).is_normalized ∧\n      (eval env (not64_bytewise state_var[↑(i + 5)])).is_normalized ∧ (eval env state_var[↑(i + 10)]).is_normalized) ∧\n    (eval env state_var[↑i]).is_normalized ∧ (eval env (var_from_offset U64 (i✝ + ↑i * 16))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Keccak/Chi.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T15:53:10+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "598e0ec9fb85d12a34ac3a869e4acedd3aa10369b43f43ce89e532830751e1c0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaXor.lean",
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var Inputs (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : Inputs (F p)\nh_assumptions : assumptions state\nh_input : { state := eval env state_var.state, d := eval env state_var.d } = state\n⊢ (((((((((((((((((((((((((eval env state_var.state[0]).is_normalized ∧ (eval env state_var.d[0]).is_normalized) ∧\n                                                  (eval env state_var.state[1]).is_normalized ∧\n                                                    (eval env state_var.d[0]).is_normalized) ∧\n                                                (eval env state_var.state[2]).is_normalized ∧\n                                                  (eval env state_var.d[0]).is_normalized) ∧\n                                              (eval env state_var.state[↑3]).is_normalized ∧\n                                                (eval env state_var.d[0]).is_normalized) ∧\n                                            (eval env state_var.state[↑4]).is_normalized ∧\n                                              (eval env state_var.d[0]).is_normalized) ∧\n                                          (eval env state_var.state[↑5]).is_normalized ∧\n                                            (eval env state_var.d[1]).is_normalized) ∧\n                                        (eval env state_var.state[↑6]).is_normalized ∧\n                                          (eval env state_var.d[1]).is_normalized) ∧\n                                      (eval env state_var.state[↑7]).is_normalized ∧\n                                        (eval env state_var.d[1]).is_normalized) ∧\n                                    (eval env state_var.state[↑8]).is_normalized ∧\n                                      (eval env state_var.d[1]).is_normalized) ∧\n                                  (eval env state_var.state[↑9]).is_normalized ∧\n                                    (eval env state_var.d[1]).is_normalized) ∧\n                                (eval env state_var.state[↑10]).is_normalized ∧\n                                  (eval env state_var.d[2]).is_normalized) ∧\n                              (eval env state_var.state[↑11]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                            (eval env state_var.state[↑12]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                          (eval env state_var.state[↑13]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                        (eval env state_var.state[↑14]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                      (eval env state_var.state[↑15]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                    (eval env state_var.state[↑16]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                  (eval env state_var.state[↑17]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                (eval env state_var.state[↑18]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n              (eval env state_var.state[↑19]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n            (eval env state_var.state[↑20]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n          (eval env state_var.state[↑21]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n        (eval env state_var.state[↑22]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n      (eval env state_var.state[↑23]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n    (eval env state_var.state[↑24]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Keccak/ThetaXor.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T16:27:02+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "60bf78cd2f446bcc6e4e88a27bf71b7a193099812914aec2ea35513ebd6a358e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaC.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env : env.uses_local_witnesses_completeness ((theta_c state_var).operations i0)\nstate : KeccakState (F p)\nh_assumptions : ∀ (i : Fin 25), state[i].is_normalized\nh_input : Vector.map (eval env) state_var = state\ns : ∀ (i : Fin 25), (eval env state_var[↑i]).is_normalized = True\n⊢ ((((((((((((((eval env (var_from_offset U64 i0)).is_normalized ∧\n                              (eval env (var_from_offset U64 (i0 + 8))).is_normalized) ∧\n                            (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                          (eval env (var_from_offset U64 (i0 + 32))).is_normalized) ∧\n                        (eval env (var_from_offset U64 (i0 + 40))).is_normalized) ∧\n                      (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n                    (eval env (var_from_offset U64 (i0 + 64))).is_normalized) ∧\n                  (eval env (var_from_offset U64 (i0 + 72))).is_normalized) ∧\n                (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n              (eval env (var_from_offset U64 (i0 + 96))).is_normalized) ∧\n            (eval env (var_from_offset U64 (i0 + 104))).is_normalized) ∧\n          (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n        (eval env (var_from_offset U64 (i0 + 128))).is_normalized) ∧\n      (eval env (var_from_offset U64 (i0 + 136))).is_normalized) ∧\n    (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Keccak/ThetaC.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-03T17:31:42+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "2d1e2b75dc2de7c2ff67d30f62fca91099f8f91854623210aa0242f590f35908"
    },
    {
      "repo": {
        "remote": "https://github.com/Deducteam/lean2dk",
        "branch": "main",
        "commit": "96ef70fdd079e471aefa32988025f157e70b4713",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "fixtures/Temp.lean",
        "start_line": 21,
        "start_column": 2,
        "end_line": 21,
        "end_column": 7
      },
      "debug_info": {
        "goal": "A : Type u\nU V : A → Type v\nhAUBV : ((a : A) → U a) = ((a : A) → V a)\n⊢ U = V",
        "url": "https://github.com/Deducteam/lean2dk/blob/96ef70fdd079e471aefa32988025f157e70b4713/fixtures/Temp.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "3dade9baec16",
        "blame_date": "2024-05-02T19:15:48+02:00",
        "inclusion_date": "2025-04-26T03:00:56.088446+00:00"
      },
      "id": "e7d9ae29ce5bab381fa6279d4a9080d9132a7ac09b0edfac70aff96882e4ef85"
    },
    {
      "repo": {
        "remote": "https://github.com/Deducteam/lean2dk",
        "branch": "module-output",
        "commit": "75c16669bb3bcf9ba1782d4157f6d184a14de1e3",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "fixtures/Temp.lean",
        "start_line": 21,
        "start_column": 2,
        "end_line": 21,
        "end_column": 7
      },
      "debug_info": {
        "goal": "A : Type u\nU V : A → Type v\nhAUBV : ((a : A) → U a) = ((a : A) → V a)\n⊢ U = V",
        "url": "https://github.com/Deducteam/lean2dk/blob/75c16669bb3bcf9ba1782d4157f6d184a14de1e3/fixtures/Temp.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "3dade9baec16",
        "blame_date": "2024-05-02T19:15:48+02:00",
        "inclusion_date": "2025-04-26T03:07:27.259193+00:00"
      },
      "id": "81c9a840010c89028f4fbd4636fb8a8db1e3e437bdabdf8af5ca4911325168a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "430bc3a11b5d0f2abf3549f187d10c38cf149a95ee12a53ba0e364f68c84e493"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "af843082e1eedddf01dfa709ae5271781dc3f933a548391f7c73681a73fc9522"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "9a9698adabb39df7c7578ab3bdea9d639c78517bd7fd0069b5698a4c820c4677"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "37f74c7b9f7aeee8d74f6f0b921be34fa6881a36b3d86c1206fb600d3768dd9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\ninst✝ : spec.FiniteRange\nα β γ δ ε : Type\noa : OracleComp spec α\nob : OracleComp spec β\noc : OracleComp spec γ\nod : OracleComp spec δ\noe : α → β → γ → δ → OracleComp spec ε\nz : ε\n⊢ [=z|do\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      let d ← od\n      oe a b c d] =\n    [=z|do\n      let d ← od\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "ecffa2958b98d58da86c239363083cc31e08602742d7bacd646a5afe88c26802"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\noa : Bool → ProbComp α\nx : α\n⊢ [=x|$ᵗBool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "8a21feb9268558a99ea8c69fe8ed48e97316776784820fd770e48fa548711ba6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₁ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * (c +ᵥ g₁ +ᵥ x)) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "d7eafaca8fafcda10fa840dd08434d97d6d2b5c23bc54392eb36e4cd88a29ee9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₂ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let y ← $ᵗP\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * y) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "6ccfcd94803dfd18299f13f6f59661f7b083ba4012bf384d5edbec5c4b39259f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "9a2cd9ed2abada4a2fbb755d85660516e0475043e30228ad9fad1801353f1a9e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "046052f9d34c9407a34c59e3c3f0d04957b9f39d4b759673e568136815a5e150"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "44e0ef752bd243b87d094f6ca6cf34f064d004dc29e7638e0caec73763c6ef3b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "29a890fb118d686ace7fe399c7f04aba61b9169160a8f8b964935747c7fbf559"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "74bfca40ada9efcb6fb44db52a027fcbead21fc440fce7e44b754117e9501bbf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "8c64e5ffbd540be62d0e6c902691b61555a0fc88ec46956d89e62acb24410989"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "01d69d004c683ba437f58bf4c0c792c24ba950c3160d07f866256e2695318860"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "574334a1afd3e103e5cf651276554e4292bd1a93afc87116da5ac63f1eb22b92"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "cf3d03fc20c095a8322a854b7b67e1f61fe4c12c2ac4d9486163638284691f54"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "cfdd870328c25763341c4cbaad9152415b0a873998f304195aeb908fc371ce30"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "807b8f14f0017c101acda1587c4a0b663b31ac5184539c72c0ae234e6e7f55e0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "be8d389867cd5ae1ac17391263c7a7d37e00378a785b2961b9cdd3bfe59aedba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "081fb34d7b3bb77f8166bde9e901429aa91e3cb603fbbd87b4bda4cb3fa148b6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "892a46e15105f24d78fdb671ff49eab2a9236dff0963be43b8b78595d0028009"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "1de278a5cb1bc53d53a155434593a8f5dd01200e3bd208ad1ec51c8e36eb3e03"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "12e596115db25195c2f0721d31d9efcb8224378bf56c5f416a6ffb77fe8691bf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ cf x₁ = cf x₂",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "356aad8ab24269416e83705ad14bf23b8fc36a962b7d2b540941e31f8670abc7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "ed71373fc3af376f52b8fac1c921319705f01f1005964e2df9068062c2fd7bf4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "2f77eada93fc9bc32f2bb282e65017e6e4314cff3510751e8500b99f5781cfcc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "c09a95fa11becaa91510e05495e537c797ab09d6e1018e8532c58baced6647af"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "700c265badf1c873222cb92e0c5b55f91bab7f5fdba151428fbdb9aef63d95a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "c92b82f715a9c0a71b3ba0e468284e5f975166506dd578f00d04de774573a815"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ ∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h ≤\n    ∑ s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "1a362b8b5f6163c0f2f85886fa2f4617c774aa92ffa03de43a79b011d5f51314"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h) =\n    1 - ∑ s, [=some s|cf <$> main] ^ 2 + ∑ s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "3678e71e6877d6ce506280b7ef79ae4d7c1441d5a592aa9fd2d33dc210661645"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ acc * h⁻¹ + (1 - acc ^ 2 * (↑q)⁻¹) = 1 - (acc ^ 2 * (↑q)⁻¹ - acc * h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "954e1de5b2551bebfee661bc8a5187db9c9a545fd2e0476ec7ff2418bf47449e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "b8aeb7b0acd09ef644647ae697d58ad014e401dc6d286eb3087e6c2879163e7c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "d3ffa87d559c7f679f996b63ebaea0701469fa35ca2f06962f06e0c81bb4f218"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/AsymmEncAlg.lean",
        "start_line": 111,
        "start_column": 2,
        "end_line": 111,
        "end_column": 7
      },
      "debug_info": {
        "goal": "M PK SK C : Type\ninst✝¹ : DecidableEq M\ninst✝ : DecidableEq C\nencAlg : AsymmEncAlg ProbComp M PK SK C\nadversary : encAlg.IND_CPA_adversary\n⊢ [=()|IND_CPA_experiment adversary] =\n    [=()|do\n          let __discr ← encAlg.keygen\n          match __discr with\n            | (pk, _sk) => do\n              let b ← (simulateQ (encAlg.IND_CPA_queryImpl' pk true) (adversary pk)).run' ∅\n              guard (b = true)] /\n        ↑2 +\n      [=()|do\n          let __discr ← encAlg.keygen\n          match __discr with\n            | (pk, _sk) => do\n              let b ← (simulateQ (encAlg.IND_CPA_queryImpl' pk false) (adversary pk)).run' ∅\n              guard ¬b = true] /\n        2",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/CryptoFoundations/AsymmEncAlg.lean#L111"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "91933b5a5ef6782b7e2dbbd75e574f622de52bd35227470b14d3bbdb7bb2de02"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "30f492bedea45f72b0eea4923eb916f90efe3ec0761986836e03ed09ccd26f8c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "7f683ef64c6577849b3b69421cbe89872d14da52c5e1d10f67cc46a34a0c3211"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "a213c38b96181429985255ade270c672f34229ff2730a29d57ce7c4d7158bb04"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "37a0d94367b0636822e03ce7869c4666baa8d146d7b5b249558a45ff9ee82fec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "ad650b3c6c74f33523cd886269b1d26fe745ca0d41a9ecd7ad7709c96c9c9fc8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "930913c9350afe2b50025a20a85858f65f7deac1ba5f4c3daa3a180ddc3bc346"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "dab9da90fd3ef46852b8d4de2ffa593beb91dc5644914e947c689eac6a383cbe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "7a043f0367dc1afd1ed15ce0dd79252331465dd2aab72ca0bc45361ff9521398"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "61a63292803a07f5517385fa7ae5d6c1870bb2c9ac0f171c25674f3121cc635d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (generateSeed spec qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "63717a331aa286b9ca505b005735e458507a10b4bbc5b58a10570249bdeaed9f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "78f67a820a94fac1a6eb9d17f5965d1ea2e9c16194ec32fdcbbf9ede52fc3ef5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (generateSeed spec qc js)\n⊢ [=seed|generateSeed spec qc js] = (↑(finSupport (generateSeed spec qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "87b51b5d5750fc9912886508b8e8a0adbe62b4a12dae549493ee6b984afe00ba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "b3db1f2326aa231c1840beec71c941778405cbf4fe92090352496a84db5c1af7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "0b4a3a73fc0a47430c028b86daf740c0b19984742cb4fafa943618ec242fc5f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "ea2fc168bc209e568d2d1618e2337df68dbeefdb7540255391e140d56963b6e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "6e878d6e389a9f7ddace471823704f28562217f6a2f7508368bc36dbab008e08"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "4d48105f016ec9f71b57f22b71d00725d596652c605792bfff3be05e7065b730"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ℝ≥0∞\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "39296b475093666f53efbb71d7348b8aefa63ab35a7b195f9ff1df38650fe9f1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "dc812d0c204251412a69a15d106a4bf25a7494842e8bc1a2f8215efdb9533401"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "58f104a9006ccaf590cfd735166be19f5d559d974ca123078e8e3e3d49790011"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "a49bdc3157af55ddeae40396beba6fb6ef12ba2974a757cb187c01d2b6e8e2ef"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T13:17:24-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "ad39329710dad934ab9803ebaab6ab168acf71b84a7c674df7eef01aa31114ec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 233,
        "start_column": 2,
        "end_line": 233,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝¹ : spec.FiniteRange\ninst✝ : Fintype β\noa : OracleComp spec α\nf : α → β\n⊢ [⊥|oa] = 1 - ∑ y, [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/EvalDist.lean#L233"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "719d97279e4571ada94086bdc19e615ec21d138273412c5436c44207bd3b58e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 725,
        "start_column": 83,
        "end_line": 725,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/EvalDist.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "1ba50f304d243e1e36043f21c261279832d54b0b7b7c484fe552adf36899cf4c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 731,
        "start_column": 73,
        "end_line": 731,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/EvalDist.lean#L731"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "f2df94e09bd56d415240d462b1e005ba5fef7de06475effa729ea3e07bab26fd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 69,
        "end_line": 736,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "01f33b6c408908c6a774d40df62c3dcc50a07e376ffa0794b5c1a7925e38627e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 740,
        "start_column": 59,
        "end_line": 740,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/EvalDist.lean#L740"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "0187c5a44d432b7a277287bfe628ba754d9a3771e0d39a4655e4449123be60c7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "733abf104f0a898e7b6496df91b03c2e5a409870ba72156515869cc4277dee9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "eb614aa2cb5d92113b52deacf5f9aa29c8a90ec90b49dada39ef8c27b3517a56"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "27c3b4979a56da75e9bf21f2d7a8154fcdd07f9443ef6bdfd0fa36a3d2706953"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "eb97127241620981e23925e1b023312e9c3c0865ae14211b6e20163eb2de6bc0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "36da4ab31b1442117c91ee00d26b637be30690df94705d888468a64096f2efb5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "114209177055a0927715c6bb09755e9b9ad6142a30be559a72565a441faebdc3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 303,
        "start_column": 4,
        "end_line": 303,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/DistSemantics/List.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "77455369bff855353af357dce59b9b4b92ea485ae2740147d1175fbf91a38b98"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "4f36190538c1d51eab867810a5a03e9fe3584a942b4fedbafb54cc95e37ef782"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "1e4dacc77b43ab67af181e81865268a2323faef3521d11277b189980fbd12b9d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "0495b77d8e20f46880ba83da8c19769920b075cb3752c247cd00638310bef226"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "478e8d122865094635341eceb12e9dfb497cb1894670d310beb88c8658834d56"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "11652478512614fbd88371eb9787bf66e079554e026e3d5bbba8304280f17e40"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "2a075d2fc8e937bac6d260eacc2339bc08faf76db1df04fdf8809557e39e9a24"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "3316ef816a9d755f458364803f283df06ee5f7604b4489126a00551c11b1b4f7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "a45ff46fac223f023743e3982d170d769d5a4fbe1938a5ae9023466d8ca12c89"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "e4dba3f0b1b744a3b010593e0b76be2051b167b7",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/e4dba3f0b1b744a3b010593e0b76be2051b167b7/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:07:31.642716+00:00"
      },
      "id": "9d8655ee5eff988f665375142eb27ffe400aef795f45959df1f3fde10d3d2357"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "82657ec14576acfa1333c8d44a56340c0eb47cb2a56551a4808ba638b99c80c1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "8536920df2831f50bd07ad655e7dd91554b745cdb154606d5501c93aba5822de"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "e11e0db91f1f312d25cdd0abac57380dfaf031ab8f3e1d656170d8fd9e3e6207"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d90e396f85b94f4849ad3aee7c4764da97deca887e3646de35828c55552951e6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\ninst✝ : spec.FiniteRange\nα β γ δ ε : Type\noa : OracleComp spec α\nob : OracleComp spec β\noc : OracleComp spec γ\nod : OracleComp spec δ\noe : α → β → γ → δ → OracleComp spec ε\nz : ε\n⊢ [=z|do\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      let d ← od\n      oe a b c d] =\n    [=z|do\n      let d ← od\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T10:47:42-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "8d065b105937ebcd636feff4769677e823efd94b37ddcd3c39033c5c3f058641"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\noa : Bool → ProbComp α\nx : α\n⊢ [=x|$ᵗBool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T10:47:42-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "065e24239858ea04eda15ed270ab2870067eba0a7ba3e565c64c345a5f6ae1bd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₁ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * (c +ᵥ g₁ +ᵥ x)) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T10:47:42-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "50bfd9f196b249125ed4e00d0f19f16efda4ef7c3025cbda542fff11fda4fd90"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₂ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let y ← $ᵗP\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * y) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T10:47:42-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "1268bcad28f0d483af8c4afcbca2a86071e17472a362319440d1159c133571aa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "7a3b6fdd18d97b81156bd8b3c90a415826984b5c525efd364c4be3d25d51760a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "11d9dec07e5c83d30c9f24cc3a9b334a3078f2509a243746242072a61e5558f3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "2771c982d4fd8e566bc731ea5b2406bfbf2c799832e1d0aadb94c034a9631aa9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "e3dbd360a51694070957f49929e788197db4d4a00526445012ec6780adf96cea"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "c6ac6b69d60001e1f38bdbba734f365ec2b84e989c2a3ab889880fdeaf9f994a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "fce9679aed462288c85fdcb38b0e09120f62fe35dddbdf897483d39d74ca6e00"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "8d4ef78b7f7210cae1f4cdd3bc6acc517addac16a7c66b2c32803ac0a7688ea5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "938c1e284f6e68085a8a9dacd55c3e4082345c3a373e5039a0afe304fda2ebcf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "9e92080ce4dbcf03dd396948c30834be54774c3351e34ea37ad8245638705beb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "4346d91a05c07c34d6de10c4c958984d76201c565273f681836598bda4253a52"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "feefc902ab611c438658a6e542c3ab4a8c26a8624b2cb791a06c2a59e6225bab"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "bfbeb4c575c74a8fe780ae2586ab1d062deb4c7b914cb7ae379f727394410629"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "b2e73f95f87d819f23e27fc3a11fb975b637fdab3b52f0dbf83a47bce5b909bb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "b10a75370b8cc277a08d3f31e70faaa66bd21cdcd5250ac06d897890ef2c78e0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "9f851df52c0d010a405367e425f0546de449a5209c362b6c2a2352f3749f560d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "75340c621802d8ba55c3db63635efbaa6c4cebf0960dc1d0a7cbf82a32be2bce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ cf x₁ = cf x₂",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "8cb41eab8f5f25b90cd0e13c5708f30da1d740dd4456fae3c2fe7f468caad8b4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "ead630da1222b24f61aa3b4cff020d2559d6b512265449b53822dcbbe691c4ba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "369189a6343f95b14c832b3ace14036b1d9e816ea2a429243e34df34f2fb0d1a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "ebb2e6455ae154f51b421b7ac95b5f8f91f281b1201be4ca4d231d8d5683237d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "953e86e070852902be14b582d657cbad94cf8a733aa189bff96bd84ce688078e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d1d64ba23600ff4a5b6e62b497591baec0a65f5c96afd5c05ff3e94f8fa36f3b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ ∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h ≤\n    ∑ s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d4a23eb19f0ba838393cb139e9c8c5de715374700d31e7569610c44d8e6d3233"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h) =\n    1 - ∑ s, [=some s|cf <$> main] ^ 2 + ∑ s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "20191061d99a25a85e61e3cb371e3b4c1f58f7e907bf245bc5f027604176fede"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ acc * h⁻¹ + (1 - acc ^ 2 * (↑q)⁻¹) = 1 - (acc ^ 2 * (↑q)⁻¹ - acc * h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "8514f183f86e85b2e0b84bbc4db5e64039586e64b4c655ae24b3f6d7c0aa4106"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "5f00e43290b3c96218a8fff3baf4f4b65822d889702f9f86e43af9f27757a906"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "9a564d444c8a554e5ae86e10f8c4dbeac57bad1d011ed4a2aab5390b6d56820c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/AsymmEncAlg.lean",
        "start_line": 111,
        "start_column": 2,
        "end_line": 111,
        "end_column": 7
      },
      "debug_info": {
        "goal": "M PK SK C : Type\ninst✝¹ : DecidableEq M\ninst✝ : DecidableEq C\nencAlg : AsymmEncAlg ProbComp M PK SK C\nadversary : encAlg.IND_CPA_adversary\n⊢ [=()|IND_CPA_experiment adversary] =\n    [=()|do\n          let __discr ← encAlg.keygen\n          match __discr with\n            | (pk, _sk) => do\n              let b ← (simulateQ (encAlg.IND_CPA_queryImpl' pk true) (adversary pk)).run' ∅\n              guard (b = true)] /\n        ↑2 +\n      [=()|do\n          let __discr ← encAlg.keygen\n          match __discr with\n            | (pk, _sk) => do\n              let b ← (simulateQ (encAlg.IND_CPA_queryImpl' pk false) (adversary pk)).run' ∅\n              guard ¬b = true] /\n        2",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/CryptoFoundations/AsymmEncAlg.lean#L111"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T10:47:42-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "9953879c4a9b59730000b7077c62094ecc5b774aa5ada9a7527ef74ec2726430"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "1717c044833faf3c82e92d8e1995fa3acc3a4b092dbcd3f4341fcae129c891b9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "76f452f01778d6e201b680685694699df2a59173d40259d84fd0152f3a5993c5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "c08d319d9476a074f356526ce4223ea5f3525bd6eda9bc5ae0fd0f24892d177a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "e175739d5cd707ccb181d74e4665e2e6db610b6d517459763a7241d0105e6755"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "bac6d3a272e4d7c0a60ad55cb41c88bf151b03b2129689174088422299b98fd2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "1263aa997e8b5397e34a05f95eba875c06c52d06563ea2b26f2dd40c9e913203"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "933ef6f8e7622db0e3d01be97ad0680ff489eef42b4043809dc11f0de47b41ca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "01b79dcd3ed6f8225944ed33eb813d27fae3ae8438f86ec1a2191e53a401b91f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d57d87ee1c1d0fe0e18b91e98b394d093dd89b3a410b3fbee7c881cd7d3a9c39"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (generateSeed spec qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "bb91ebeac7ad6439982fe4404525efd9b4d5c685f7ffa146baf543fdb296437c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "50f405b7308e08558e6a25fe69ddfb48733621e59fa534c1a2be68e71b0e595d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (generateSeed spec qc js)\n⊢ [=seed|generateSeed spec qc js] = (↑(finSupport (generateSeed spec qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "27fd7296977a05c08f2f48788fb939bba53a6b1a62bfe373b71f828b889275de"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "daa87dbcbb1b6e2972eadc6d4f7bbe20463fd15b7eacc75ceea38a44b2b761df"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "a026d908f1c88aa49fd061369aaf42b6f5a5060402bede5441fb9af99fe8f930"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "7ab41cf903655fab6b840de1477aa7fc84afb9baacd47e2445beee1de95cda66"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d10fa22dd01e663909bac498a420ddd6db8a863f63926737d21bb5001a8d10a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "9c01ce18ba9f35257c48469a59c237b004d05474bbd75c9e99f5a7dde81bf09e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ℝ≥0∞\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "39af14556d81c856e41789bea91df2f994c5d2fda2902c4f0c5a345f200b1015"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "dfe6ac12f8899e0e0f0a27149c125fb28f7641850cb4408116fa2284fc797057"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "b6b79651f8b7d3fa19c2944fcaa28370cf1bf8d442e87091155bfd2cfe45c5f0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "3c584fcd17aa7a5af16c33c4eacda4c5ebb773d5091e4c1cd128b5185328f9aa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T07:27:48-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "42beeee55050cba3837a22e6a36326a13a98fc0c07a00f628e5c576bdee3bfa8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 233,
        "start_column": 2,
        "end_line": 233,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝¹ : spec.FiniteRange\ninst✝ : Fintype β\noa : OracleComp spec α\nf : α → β\n⊢ [⊥|oa] = 1 - ∑ y, [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/EvalDist.lean#L233"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "da6c0d4af6cfa8b3b26a9e754881cc1c07db04bd5a6288082ae0bda34e75736d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 725,
        "start_column": 83,
        "end_line": 725,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/EvalDist.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "596035f67660640e4e44ff1c1a150ad316934809b06e37e251c1e870743141aa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 731,
        "start_column": 73,
        "end_line": 731,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/EvalDist.lean#L731"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "566474bf02a7147127e33a5046f504df4392f8bd3f1c96eb65dd1c38192fd3bb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 69,
        "end_line": 736,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "57af833fabb5455e7e852e07c3f29b2ab003ee0cd747bc1ede3525e45edef40d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 740,
        "start_column": 59,
        "end_line": 740,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/EvalDist.lean#L740"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "6051dab48f630d23cd8590413d157649531085d12c43ca8dd933020f239b16ac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "f536a727fb09891d3fb2e951e36e65a87b5e814652aab664ffbdb6f8f9bbce2f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d137d3a912d4454670b8ae9d8bb708960a33a3f54bd65bb956faba94726ea81d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d7ed4d750add2d06ef8cc5437f58b9e88deacf0bc7b3de37f479157080937b8d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "7874dfd73ce7564c64b9434edb18e62302c4e9ae14cb8a6eddc0890438a778e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "fba7e854a2e13b84719b99ed5a01261551f7bd97ebf317155978b2a208af3f8b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d69d7ec111ee587018969867ccbfea7d14b0328fc50dd7a2bbe993145044e2a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 303,
        "start_column": 4,
        "end_line": 303,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/DistSemantics/List.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "fbcc2c45f68ffff109389460ab8f00bb3d9a3e810a5928f8ec5a6bd30c0aec2f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "1f554e7e2dc1206c439f2178fcb924518412b827635c401dbbd5b038c751fcc1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "a731863ce653db4eed740ab35b91469f14d483d7ae18007be4c7754b685dee3e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "af288e75b5a8979f930fa67404ea5796a49d2a5c61af47b7fb427df96f053aa5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "185d7f0553244013a90bf76452e9324e357d9406e0fe6d37e6c942b4984496fc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "04296fb9a611a8ebbb31f9ec822f23cd2557bbee94bd258117844251391c8096"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "ecbbb599a0219a42c651a77193437ea57dd4c7b6fd6e84855c3bb8e03238d797"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "799b2a112007088b7026af230f3876679ca08b54732aa697b0920cfc462eacf7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "d13ecae1cb855cc79bc611704b1295a77b53499e556a5fc529567006c0d1b136"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "ind-cpa-elg",
        "commit": "75a13252d299c1fb375e8a7b12838a22917548c4",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/75a13252d299c1fb375e8a7b12838a22917548c4/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:13:55.892772+00:00"
      },
      "id": "6ec93d3d27caad4d9208e3575baa7b2dba699c0f0dc0d19603054ce22d1b1bf4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "0c4bc8b23cebcdb1ba4ae3bf3607ab62767527a67e63ba90f554f88f9d775ae6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "a517e9ddaa689affc15974616e4b5aaafb45adbcc93c72ebbe7046d6344df13f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "bc1561379a34844582affd9811262d6b42a593f7e652907729230e5b97329cda"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "ccbd89afc0821255273403fe4d889ad699c75a004d31be25e7679e9de72d5c08"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\ninst✝ : spec.FiniteRange\nα β γ δ ε : Type\noa : OracleComp spec α\nob : OracleComp spec β\noc : OracleComp spec γ\nod : OracleComp spec δ\noe : α → β → γ → δ → OracleComp spec ε\nz : ε\n⊢ [=z|do\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      let d ← od\n      oe a b c d] =\n    [=z|do\n      let d ← od\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "35d95dee3f015192338131a6c62deb023f4423cae753d4cb889852277a4aa094"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\noa : Bool → ProbComp α\nx : α\n⊢ [=x|$ᵗBool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "a5b5ca8d02af62fc80c24f4fc76b14bac27d07b2b70c16b58d8859b38135faca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₁ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * (c +ᵥ g₁ +ᵥ x)) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "d2d20b5b938e40e778fec8f03eb62c1505f426735dc97ed5fde2e59a2c29f9de"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₂ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let y ← $ᵗP\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * y) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "5e8c86efdd537a8f78fb4f6cf2be1f28910e11dfe96c40f8360e52e440860a6d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "9d3a97fbfa5f3357cd91d96a95ec41b4ccef9ea2726a247c6f835e063f3c4417"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "be9d8e850341c847f14e313d45e2a9d8534784c6db47b046a05fd06b693d58ac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "3e6842481290377205e46aa0ba3361dc4a70fc89ec1d9d6252588e6db96dc469"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "2ab987d09fa729ca862b1616efc9c2a50f467e4d85f86df2cb731cb0ad6a1f45"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "3f651569a06ca2d7cf1a7c879230edc4396c0ad3db86ebd17280f5a1a55a13ee"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "dc6624119f4bff1f14243ae1fee8142721c4e6c4deb17d7aa7cacd31cf58c6e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "5fbe65da5431769d7842b481645393ec4d5ec89062b383ffd65713ca484c2def"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "a096f44d40d9f0dbe7a7aa66994b88721d08c38b91b5d6613a9e6a0a574702ee"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "5e8ad799ac49c5c02c82efe230607725b1be754f7c12cbf27db8d545c07c9c30"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "49b3e2a053a7e678b478a126cd0d4a5f95025ca4ded657b66961a74bb94e7bca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "91edaac31dd3c8f0d724f591c9100a0cee9db57265f6ac0b9818006515c08fde"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "7b8ee2d6a7ea5e40858edb0d91814915d8c540e749cc6f933ad174fc31ee8d67"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "e24a42b90ab2e187bbbeace2ff4119124fbd0bbc898f61f3241abde273689ef3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "3f4f86fbfe2ffb6449e4b906744d960705282ce162f065b93bf7cf6d1d19c866"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "acba26e6564350727ce136812a3bd9af9423e490ec0a16efee1185d6312f2ca1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "65e60ce0b114d779f3d539d32524f98cf342112a7a03273986e02e074ff17334"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ cf x₁ = cf x₂",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "0dc7cfd92678d4a4c4d269bab3a18a86f5aa73122493c9a20ebad2449783aa8e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "bdeb1cfa6ac33c75600a729d59f3ad3a14eb95cf09bdcb190feb011c5f5034cd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "03d627790800c3b9ab70e04d5d6e458df11a9b842b9ac78233c0e3916f9ba73e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "13417e000230e4ec1874ec89fde82975135840d1d9f01e66abaac7eed1b2dc0b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "51bee2322f252de5a3de69dc841b8a70e8a3e951ad5d341a6b6b14e63578c26b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "c964b5c6894e12274d003b01bb228a49c81163efde01f5b1fcb456ef902e7c4e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ ∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h ≤\n    ∑ s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "ab0b9e4ef0b3fc10f8033ca76a19b989343b442783fc340c9d88a1bd1573f8ed"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h) =\n    1 - ∑ s, [=some s|cf <$> main] ^ 2 + ∑ s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "03dc0c6ddbbdc1d90db8f69378ff264af4e0a0d750dd6dbbb0e49113457775f3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ acc * h⁻¹ + (1 - acc ^ 2 * (↑q)⁻¹) = 1 - (acc ^ 2 * (↑q)⁻¹ - acc * h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "028d45a9f4f1d4f8998c3b47e8b101bfa4949f5ffcbe9edf4afc045dfefecee6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "2ecc7c89a4b23ec444e2f45e9be398a0d9fa72723771bdaf3eb6004c120962b0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "5ef2aab368d70056fe32b11c6b6f6bda9dbc5f4c9d9383295b145dcff10b8670"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/AsymmEncAlg.lean",
        "start_line": 111,
        "start_column": 2,
        "end_line": 111,
        "end_column": 7
      },
      "debug_info": {
        "goal": "M PK SK C : Type\ninst✝¹ : DecidableEq M\ninst✝ : DecidableEq C\nencAlg : AsymmEncAlg ProbComp M PK SK C\nadversary : encAlg.IND_CPA_adversary\n⊢ [=()|IND_CPA_experiment adversary] =\n    [=()|do\n          let __discr ← encAlg.keygen\n          match __discr with\n            | (pk, _sk) => do\n              let b ← (simulateQ (encAlg.IND_CPA_queryImpl' pk true) (adversary pk)).run' ∅\n              guard (b = true)] /\n        ↑2 +\n      [=()|do\n          let __discr ← encAlg.keygen\n          match __discr with\n            | (pk, _sk) => do\n              let b ← (simulateQ (encAlg.IND_CPA_queryImpl' pk false) (adversary pk)).run' ∅\n              guard ¬b = true] /\n        2",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/CryptoFoundations/AsymmEncAlg.lean#L111"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "05d606eb8988fcfa77c3948e643e8984e2f9b902d2e017e365d1d16893e32620"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "fdb0ec74f6c0c07233153e3c694a11f06c2a45cada9dd19dbff9953e7629c673"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "702985d7c7b34388822687d29a207a1832ece4748132c9ef00449572f21ef2c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "b725edb9b24ee729e217299d0a423fbd51a4bde927fb84ba72728e7bd72a9a5c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "b8f3022235d3172ea18b941ce6e24ea1757bd39edd51cfe8bae2de0d5231e0a1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "48ec774063d64dc464be29f385d19b497dc4ee9e26785c143bfc06bb144ad10c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "fe88a07c740e59bc844f2ce1009256a646b2fc628ce9738bc819fcaa3193a8f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "d780e6f36cac836dcdac27993cc67a7598495152872c6d1a7dce5e2ee8a19dbf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "1262fb5e9db7b8db9e49b8225b78db3a314cd8e110d6486e46595be4adec5043"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "b43e6cb59327fb4f5211892dd72bf3e97ea69cda5f6c8eb7ce7c9c56f0a8fb01"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (generateSeed spec qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "91e94d4707c077dc6b0547f8381585f9d9a3d05c158f0ccd4cbfd4536ce58766"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "1c2287672928684a3ed263202f5fca802deb59639616c1a757ade0038982f382"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (generateSeed spec qc js)\n⊢ [=seed|generateSeed spec qc js] = (↑(finSupport (generateSeed spec qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "47c32490d724395ee9bf616ddf4b6442be133b6425df94a4840a48f4d31bd427"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "2d1509c45e0aa7498d1e32d74dd9b37dd93095d654228bdf0e7aecef07fbd401"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "2d413fd53eb2d34fcecf0c64016433c70017794dd064fddabfba54cdedc85bba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "3b275f0b8b697f0a0d9fe76a1c9fc62473943de257de3c95c9103b41228cb825"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "b74e2a2523dc5e2f0a029cfec78042f92dc70456f46faec3646c938ea80155b9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "87b398d6eb35ae9db0dff4bb8f3bf798749fff349c0bfa557af5b1830424c671"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ℝ≥0∞\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "5af3c889217e1282df61cfd83b89c50c79657b8aeb6b0677c5132513627e1c52"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "6b36aaf0612fe04ede6a087114b1049462df40fbe3c2b2ecf7663210efa2fcb3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "6610f1c9c2444ad5419a59f37bfee12e62194efbaa7ea4676cb2d4378fd565b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "b29f02af8f1205d49f9a098fe45ea1c877cdc369617a8ac535a56e2ec2db7bea"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "87d58b595872fdb9b402f9a0774a1fe6d86c417db45d0a154859cd9a35a08a02"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 233,
        "start_column": 2,
        "end_line": 233,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝¹ : spec.FiniteRange\ninst✝ : Fintype β\noa : OracleComp spec α\nf : α → β\n⊢ [⊥|oa] = 1 - ∑ y, [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L233"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "7a3560882b8cc0d3f9a2d866fa688b2fb5b8a06906c8c8584f0885bb743ec221"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 725,
        "start_column": 83,
        "end_line": 725,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "b8ceb7ee3439e463d52372112d8b96faea1973cd1f2a1691c58e6d00d76a5aa4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 731,
        "start_column": 73,
        "end_line": 731,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L731"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "cc498cf00683acdce8b2ae13f60b57cbdea9d8116f0ac25a69e1634787b0cb5e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 69,
        "end_line": 736,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "1a5be9b24cc9a7a57367e78fa2213efbe4f6a4146000f54628e50b1b15696fd7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 740,
        "start_column": 59,
        "end_line": 740,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L740"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "0821947172126c620855c12fd058d8f404af2f90369dd9969beebec550244fc8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "1dc167c814481806a440c8b2b66c319ed66fae8e10468cee96ff3f289cd9ca83"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "8565b4aeecab442aa2fd36ea1906a978a6a19e23640e6ee16793aabc4c370686"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "5d98be28f20d40811e1efe290a6a28ecff7d58c3fb32d27348f9241fa8c15f54"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "2d26277bc922c356019966a06979ea152d8e5546d3ff311f5dd1ae8ad1afb0bb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "9c2427f906186bcb9dc61126419eafb250eca43c59f34174d354671ed11fec28"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "533065b4b0a93dc6c24af86e1106f93602fe9670ebccc80583676bceb6eaf844"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 303,
        "start_column": 4,
        "end_line": 303,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/DistSemantics/List.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "d28a4af9dc7b4d4c0f938d95488f51c8a36c7f370d27486fa86754aa3c19114a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "0971d625f04997789af5064d4d12b04196ae45c2b101a603a0fb83436f224b36"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "9524ad341d72de7bf087a3978797919138856da38b2ca629e59abeaa42f3fadb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "c504b735197e7813a7929a523dc2c704b2de827c4b3def2ef1b876dfbfbd3f90"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "8ada191d5d86ca034af3b9cf40c7cb6fc1b94d05984fae2397d5a8f8e81bebf2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "1f5b911c0d19f9187aa751363ffad589ec0fe55a2f75032b9a19af693a536411"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "c472bc96008d3eaa3a0fa698ef680f3c2f38e29cbb9394ef067cc31a8fda788c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "b5b2a4f1409aad6a4748a0cc0f2e0be52a962d9c5a7d4132e74e8aeddefdb6bf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "201d56bbce67fdc2f49137e5b3d2d6872ddb8becfc79ac0b4c8ab11d3f0a1763"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "dfbeb93e33d058c6203b609144cae7cbf2055fd9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/dfbeb93e33d058c6203b609144cae7cbf2055fd9/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:16:59.722866+00:00"
      },
      "id": "6e66d24bc312c564af3e0444727be101020e9f2a9e001f5297d47d56f34aef88"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "c7f2abbb71aab1d64b32e4d3410a9051086d2c2ca93b2911120d7e44a741b5e3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "4a607b60796d9ab7c219e83337f1fedfd3d9e732c1bf96db37f322abb0019d77"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "cdaca181251fe03370afa5c812eccd41ea9813f577a1568f8ce97408bf3aef27"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "c2ddc416a5efbad2720228f7cb6bf0858c9fe29adf2ed35e563760c27dc99a61"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "411cfc838d7dffca62418158ca37f4b3004812f7d3a8d25713adac0a1981e1cb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "820636b41f3a63fa3f170cfd6ea07e52ca673a45c7f90afc500562eb72d18189"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:18:45-04:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "80e16fae4132eafbdc6c68abfdcf077b80a73755fe96ba4dc3fbcfb95ccd5395"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "fcb0b9ec4e1f3b92a5a5c0f7128a13c1248e05f1d73508d36900a38c9b060c93"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "549b30604401dc2cd069191fb481962c0f5ff6f01c672d8f6af1605156eb9034"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "2abac7c5372734a77d19d6a358159979686f93768a5b04f70e01603dc842dd1e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα β γ : Type\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u_1\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "f9981513091bed7d8de4e51e23156c905d2958b015f106d120a95573d4855a10"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [fun x =>\n      match x with\n      | (x₁, x₂) => cf x₁ = some s ∧ cf x₂ = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "6cec7b99b7e420c40d6f8d58c92c518cfbf26c4439d06d77b302031ed7b71fc9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "0c162d2e633176adb03f5cc662b5357b4e2d2cc22d4b7a500e24fa7ae694136f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      _root_.guard ((seed i)[s + 1]? ≠ some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] ≥\n    [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)]",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "4fd4b17cbec7fb97ebddb8c8e617821af4c2d2064eb153cc42a70b8d58dad9e4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n        let x₂ ← (simulateQ seededOracle main).run seed'\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n        let seed ← liftM (generateSeed spec qb js)\n        let x₁ ← (simulateQ seededOracle main).run seed\n        let u ← liftM ($ᵗspec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x₁)] =\n    [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "63af34e619e2ed9f63a77882cdc835e7fa7725c155efb69d2eed375974eef8d6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [=(some s, some s)|do\n        let shared_seed ← liftM (generateSeed spec (update qb i q) js)\n        let x₁ ← (simulateQ seededOracle main).run shared_seed\n        let x₂ ← (simulateQ seededOracle main).run shared_seed\n        pure (cf x₁, cf x₂)] -\n      [=some s|do\n          let seed ← liftM (generateSeed spec qb js)\n          let x₁ ← (simulateQ seededOracle main).run seed\n          pure (cf x₁)] /\n        h ≥\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "aa16bde767e4edc7490a4ede2bc4de90f08d26f124400521d703a436d4f7f446"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ [⊥|main.fork' qb js i cf] = 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "4677507af059aabce680194893e6045d96a81da813a49e00b4018ae5c08406cd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] ≤ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "8139725ff03d3e4443867ddff6a3533976ac747c5d5debb78cb2870a5c635c8a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "a0fe0f2daaa388f34b590ee12c4f483cff4976e887a67acb2ab54f173f9099b3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - ∑ s, [=s|cf <$> main] ^ 2 - ∑ s, [=s|cf <$> main] / h ≤\n    1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "5fde68146e02c99fd5eab4fe638950b690ded19d4459660890a8da0a02758bff"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=s|cf <$> main]) ^ 2 / ↑q - (∑ s, [=s|cf <$> main]) / h ≤ 1 - acc ^ 2 / ↑q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "db02f6eaf87f980f61625cb2cdcc917be09f80bcb78d1ed29f71735a7d456666"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := 1 - [=none|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - acc ^ 2 / ↑q + acc / h = 1 - acc * (acc / ↑q - h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "5df9656472ff13bc83fe32359648bb1b773770b2f80abab545b735b01580da26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork' qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "bcc30b1792c9c7816340843337d1474e31ae974b387be84f5f72791fa4705210"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "d06aeddcf912ea72060d44962ac2ac5f2d1edf4c4c9c42c08b51fd3628e9beb2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "1649e8920845dfbc30cd9cdf55d29295e79f368fcf0e34fdc8dd15e8234721f0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "6e23ddf77b5d6d6030e69285082d1259e70b4e3de8623ed8b8d163b9b8a7ad0d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "3859cee9c4afb4fefabdcadc851c63d9a327a56744cf5814263958e58613f1d6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "e241acb6267520f0524de363537eadd711fd0332692a5b678caa0ad48c52c96b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "1ccfffb2004c74f99434b87947a0da39c0289241af209174718b954da60047e0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "e30aec84c12e25cfe1409ff04ad96627b2e5c2a99f31b8027a541b7e0b98ab4d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "fbfce308fd8d43615c602b1d08d1fc85241097a3786d5fe8efe1f45ead1238a7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "3ce98a3b11a4422e9bbeddb108bcfcfb892b584e623e75bfb1e6e322e6eea2ff"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "da783341520751909ca6970e3410a4dd132995f3ad1ade9cb0ea06bbf3b3c1dc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "c9b56823e3a2ac1175261af8c9050346edb5e43d452520dc339d7a0ef44240db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "bd3a2e40bfff80fa080acf0f010cbfd7aa53d384dc7039e038cf9a65553fcf57"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "3b43e1ccc2e6cd4076ddb8781f28e8d61038bbd6742c2da861f2101b17a69546"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "e7a160741e8213d8baad8f7cbcf4e87e34993b54bf6d1b1a88254f0cf412b1c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "0400a103db827801cc0534ab59c795ad5385ffdb9e1618292964fbda73df5fba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "13a08c1712749c8920b73c268d82ac6bdd1011c3e0ec457caeadf00e3e511f3e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "9ec85c51035cb3715072602baedd7de03767ae685cff37bc09c32830a7e5b19a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "3c62701678a4cf094668cc17bb98eeddaf406bed84b245ed9582e85f2d7e8b92"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "3ef9c3a88237cc2f4541350dc6d8f7ca338772bca9c62671af4e9a07dac66c97"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "7b07c043ab2bbb84a607512cfd14ee06823bdba151c0f53342c084656f53cad0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "98e7973fa8a17801949091dc2844820ac6e66bd1622b0dfadea42dcf44df0ac7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "a08dc3a14345d4a5e8c00b7652dfbf3ae38ce26ef5b70b64ef69ce6e2bdb2b67"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 234,
        "start_column": 8,
        "end_line": 234,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case mk.mk.inl.h.e_4\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : PUnit.{(max ?u.16581 ?u.16582) + 1}\nf : PEmpty.{(max ?u.16581 ?u.16582) + 1} → WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inl a) f) → α\n⊢ HEq (fun x => g FreePos.here) g",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/PFunctor/Free.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "56b8edfd9ce9b7681029ae687c9b249e2e15db51cc318ae7ac1d939b3c77cb8e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 237,
        "start_column": 18,
        "end_line": 237,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.mk.inr.h.e_3.h.e_f.h\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : P.A\nf : P.B a → WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inr a) f) → α\nx : P.B a\n⊢ (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n        (fun a x ih =>\n          ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n            match p with\n            | FreePos.there b tail => (ih b).snd tail⟩)\n        (freeToFreeMAux (f x) fun tail => g (FreePos.there x tail))).fst =\n    f x",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/PFunctor/Free.lean#L237"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "69dea8c7ff5b78a75936195056cfd1168c56be8db920b9970bf1be9a32720727"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 238,
        "start_column": 8,
        "end_line": 238,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case mk.mk.inr.h.e_4\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : P.A\nf : P.B a → WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inr a) f) → α\n⊢ HEq\n    (fun p =>\n      match p with\n      | FreePos.there b tail =>\n        (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n              (fun a x ih =>\n                ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                  match p with\n                  | FreePos.there b tail => (ih b).snd tail⟩)\n              (freeToFreeMAux (f b) fun tail => g (FreePos.there b tail))).snd\n          tail)\n    g",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/PFunctor/Free.lean#L238"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "002e4909b7201684e7d8ac72abe899947b806625108740bd666e22584ab5c79d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 248,
        "start_column": 20,
        "end_line": 248,
        "end_column": 25
      },
      "debug_info": {
        "goal": "case roll.h.inl.h_1\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : P.A\nr : P.B a → P.FreeM α\nx : P.B a\nc : (1 + P).W\nd : P.FreePos c → α\ne : A 1\na✝ : (1 + P).A\nf✝¹ : (1 + P).B a✝ → WType (1 + P).B\ng✝¹ : P.FreePos (WType.mk a✝ f✝¹) → α\nf✝ : (1 + P).B (Sum.inl PUnit.unit) → WType (1 + P).B\ng✝ : P.FreePos (WType.mk (Sum.inl PUnit.unit) f✝) → α\nheq✝ : e = PUnit.unit\nh :\n  (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n        (fun a x ih =>\n          ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n            match p with\n            | FreePos.there b tail => (ih b).snd tail⟩)\n        (r x)).fst =\n    WType.mk (Sum.inl e) f✝\nh' :\n  HEq\n    (fun tail =>\n      (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n            (fun a x ih =>\n              ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                match p with\n                | FreePos.there b tail => (ih b).snd tail⟩)\n            (r x)).snd\n        tail)\n    g✝\n⊢ FreeM.pure (g✝ FreePos.here) = r x",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/PFunctor/Free.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "2ff6e0ad46e4e6ac2917df820193439e3e630e076092918d2e58d71cf5342705"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/PFunctor/Free.lean",
        "start_line": 263,
        "start_column": 10,
        "end_line": 263,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case roll.h.inr.roll\nP : PFunctor.{max ?u.16582 ?u.16581}\nα : Type (max ?u.16581 ?u.16582)\na : P.A\nr : P.B a → P.FreeM α\nx : P.B a\nc : (1 + P).W\nd : P.FreePos c → α\ne : P.A\nf : (1 + P).B (Sum.inr e) → WType (1 + P).B\ng : P.FreePos (WType.mk (Sum.inr e) f) → α\ny : P.A\nr' : P.B y → P.FreeM α\nh' :\n  HEq\n    (fun tail =>\n      match tail with\n      | FreePos.there b tail =>\n        (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n              (fun a x ih =>\n                ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                  match p with\n                  | FreePos.there b tail => (ih b).snd tail⟩)\n              (r' b)).snd\n          tail)\n    g\nhrx : r x = FreeM.roll y r'\nh :\n  (WType.mk (Sum.inr y) fun b =>\n      (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n          (fun a x ih =>\n            ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n              match p with\n              | FreePos.there b tail => (ih b).snd tail⟩)\n          (r' b)).fst) =\n    WType.mk (Sum.inr e) f\nh1 : Sum.inr y = Sum.inr e\nh2 :\n  HEq\n    (fun b =>\n      (FreeM.construct (fun x => ⟨WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x⟩)\n          (fun a x ih =>\n            ⟨WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n              match p with\n              | FreePos.there b tail => (ih b).snd tail⟩)\n          (r' b)).fst)\n    f\nh1' : y = e\n⊢ HEq\n    (fun b =>\n      match f b, fun tail => g (FreePos.there b tail) with\n      | WType.mk a f, g =>\n        match a, f, g with\n        | Sum.inl PUnit.unit, f, g => FreeM.pure (g FreePos.here)\n        | Sum.inr a, f, g => FreeM.roll a fun b => freeToFreeMAux (f b) fun tail => g (FreePos.there b tail))\n    r'",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/PFunctor/Free.lean#L263"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "4a4d663614cb8d48b434bcc679a604fbe6ff330a2a19735539cc8613824f9629"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "06a8408c48aaef7480f85809a61536cb6f78f65631a51ff3b563f2f2b7021fc0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "b97443f4ec122710c62ebb2508683e7a2429318b10b7452ed6b359b319de2b3d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "ab2698b024f7dc49581027b90babcb06846a282cc59a1a784d948c81b6b72a98"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "1b48631eee3a73388f1453461eed818507f8f63bd64243cbf44dde370e8d099e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "96b9bdc570f9dd34d06dde11927cfefe7833b7d1aa9c444a67ebfc27adaecead"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "f68664efd7c8ade13ba9707dc65cbade3564158bb615c3b7e7a018ea3649495e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "edcef15ff984e1aa705c0ec5db1149e6d6b24b3d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/edcef15ff984e1aa705c0ec5db1149e6d6b24b3d/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-26T03:20:29.189682+00:00"
      },
      "id": "4bd8f7699131500753e0b13d954170a70783a451006b0d5f98b519b3f50a74cc"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Hilbert/NNFormula.lean",
        "start_line": 232,
        "start_column": 8,
        "end_line": 232,
        "end_column": 13
      },
      "debug_info": {
        "goal": "φ : NNFormula ℕ\n⊢ ∃ ψ, ψ.isModalCNF ∧ Hilbert.K ⊢! φ.toFormula ⭤ ψ.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Hilbert/NNFormula.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "2afefa01a2880dc5314f003df9b726830c950a059e71a9672858063be29aaf45"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Hilbert/NNFormula.lean",
        "start_line": 236,
        "start_column": 8,
        "end_line": 236,
        "end_column": 13
      },
      "debug_info": {
        "goal": "φ : NNFormula ℕ\n⊢ ∃ ψ, ψ.isModalDNF ∧ Hilbert.K ⊢! φ.toFormula ⭤ ψ.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Hilbert/NNFormula.lean#L236"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "30dedaa33eb80548e527091c4dc677fa695127fcb65feb10ae346ee2fefae342"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 27,
        "start_column": 25,
        "end_line": 27,
        "end_column": 30
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\n⊢ γ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Maximal/Makinson.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "b742eff567fc4ffa040b0d51aa84ee6fe935528709006a6951ba8e24874263d1"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 28,
        "start_column": 33,
        "end_line": 28,
        "end_column": 38
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\n⊢ γ ∉ Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Maximal/Makinson.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "338db969a1f85596ecd030df77a7234504d6b2371c5ec5b67630d38842a965f5"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 31,
        "start_column": 4,
        "end_line": 31,
        "end_column": 9
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\n⊢ ∃ δ ∈ Γ, (↑δ).toFormula ∈ L ∧ (↑δ).toFormula ∉ Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Maximal/Makinson.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "632a335e64d03edca14a11194f36675fe0b3cb6be23f7cb71ab5c6e768cd0bd4"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 36,
        "start_column": 4,
        "end_line": 36,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.intro\nL : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis✝ : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nξ : NNFormula ℕ\nproperty✝ : (□ξ).isPrebox ∨ (□ξ).isPredia ∨ (□ξ).degree = 0\nhψ₁ : ⟨□ξ, property✝⟩ ∈ Δ\nhψ₂ : (↑⟨□ξ, property✝⟩).isPrebox\nthis : □ξ.toFormula ∈ Logic.Ver\n⊢ False",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Maximal/Makinson.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "d2c2b0221d6deaa19a796fb5a96d0149cb5d7639b03a8f5da0f481fea8221117"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 38,
        "start_column": 49,
        "end_line": 38,
        "end_column": 54
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nhΔ₁ : ∀ ψ ∈ Δ, ¬(↑ψ).isPrebox\n⊢ ∃ Γ, φ ⭤ ⋀Γ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Maximal/Makinson.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "0c5fa3282c66fa9fb4453ff2fa69627bbf5f748c1d948ad1bd71e23d7b6275a5"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 40,
        "start_column": 2,
        "end_line": 40,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.mk.intro.intro.intro\nL : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : ¬Hilbert.Ver ⊢! φ\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis✝ : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nhΔ₁ : ∀ ψ ∈ Δ, ¬(↑ψ).isPrebox\nthis : ∃ Γ, φ ⭤ ⋀Γ ∈ L\n⊢ ∃ ψ, ◇ψ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Maximal/Makinson.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "08352e8cdba6862ef4ec2c15012161ae12076d197c8b39fc028bdae5414adb5d"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Balloon.lean",
        "start_line": 63,
        "start_column": 2,
        "end_line": 63,
        "end_column": 7
      },
      "debug_info": {
        "goal": "φ : Formula ℕ\nM : Model\ninst✝ : IsStrictOrder M.World M.Rel\nx : M.World\nh : ¬x ⊧ □φ\n⊢ ∃ y, x ≺ y ∧ ¬y ⊧ φ ∧ y ⊧ □φ",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Kripke/Balloon.lean#L63"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-04-26T09:19:50+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "389ae47f7e8d6711056aa9a160ec40e81406f31a5b75fd845f47e9f594b591a4"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean",
        "start_line": 42,
        "start_column": 4,
        "end_line": 42,
        "end_column": 9
      },
      "debug_info": {
        "goal": "⊢ ∀ {φ : Formula ℕ}, Grz.miniCanonicalFrame Hilbert.GrzPoint3 φ ∈ FrameClass.finite_connected_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "2b3fffe28e752c67b44f91e39abdf2644a228b68732699e9a070e5bae7a6e802"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GLPoint3.lean",
        "start_line": 33,
        "start_column": 101,
        "end_line": 33,
        "end_column": 106
      },
      "debug_info": {
        "goal": "⊢ Complete Hilbert.GLPoint3 FrameClass.finite_strict_linear_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Kripke/Hilbert/GLPoint3.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-17T22:57:50+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "6543585ed97d6195cac3688dece4a4174ef7992f75b03b00bfc6f382de2c006c"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "fd1067626cac380690283b7045ee2e694d6af463",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean",
        "start_line": 35,
        "start_column": 4,
        "end_line": 35,
        "end_column": 9
      },
      "debug_info": {
        "goal": "⊢ ∀ {φ : Formula ℕ}, Grz.miniCanonicalFrame Hilbert.GrzPoint2 φ ∈ FrameClass.finite_confluent_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/fd1067626cac380690283b7045ee2e694d6af463/Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-26T03:26:20.834929+00:00"
      },
      "id": "a8fb6d35f304be410644b53c15e239a63d1d9d243974a60167fa90bd099734a0"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "jnlindsay/feat/restricted-Lorentz-group-normal-subgroup",
        "commit": "a38e0cd679a8d58ebcd90333db6726db7bf426db",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PhysLean/Relativity/Lorentz/Group/Restricted.lean",
        "start_line": 58,
        "start_column": 14,
        "end_line": 58,
        "end_column": 19
      },
      "debug_info": {
        "goal": "d : ℕ\nΛ O : ↑(𝓛 d)\nhO : IsOrthochronous O\nhΛ : IsOrthochronous Λ\n⊢ IsOrthochronous (Λ * O * Λ⁻¹)",
        "url": "https://github.com/HEPLean/PhysLean/blob/a38e0cd679a8d58ebcd90333db6726db7bf426db/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "f5ab4f28bed3",
        "blame_date": "2025-04-25T23:07:18+10:00",
        "inclusion_date": "2025-04-26T03:45:50.864240+00:00"
      },
      "id": "e8b14d0596dc7d2b24eca913fd858747f7a483f2ab5ea532137447d0e353f4fc"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "jnlindsay/feat/restricted-Lorentz-group-normal-subgroup",
        "commit": "a38e0cd679a8d58ebcd90333db6726db7bf426db",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "PhysLean/Relativity/Lorentz/Group/Restricted.lean",
        "start_line": 59,
        "start_column": 14,
        "end_line": 59,
        "end_column": 19
      },
      "debug_info": {
        "goal": "d : ℕ\nΛ O : ↑(𝓛 d)\nhO : IsOrthochronous O\nhΛ : ¬IsOrthochronous Λ\n⊢ IsOrthochronous (Λ * O * Λ⁻¹)",
        "url": "https://github.com/HEPLean/PhysLean/blob/a38e0cd679a8d58ebcd90333db6726db7bf426db/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L59"
      },
      "metadata": {
        "blame_email_hash": "f5ab4f28bed3",
        "blame_date": "2025-04-25T22:31:36+10:00",
        "inclusion_date": "2025-04-26T03:45:50.864240+00:00"
      },
      "id": "04f7a2edf18274a158e1561ec44037a168f7760b0a2cd73fe73b0691a8f33680"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/HardDirection.lean",
        "start_line": 8,
        "start_column": 2,
        "end_line": 8,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nM : Matroid α\nhM : M.IsRegular\n⊢ M.IsGood",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/HardDirection.lean#L8"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-13T12:19:44+01:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "8fc1574f968041dbb6a2a5e44c5b5d1f80d9a46669ba26f6bd6b63580c903705"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Basic/SubmoduleSpans.lean",
        "start_line": 32,
        "start_column": 21,
        "end_line": 32,
        "end_column": 26
      },
      "debug_info": {
        "goal": "α R : Type\ninst✝ : Ring R\nX Y G I : Set α\nA : Matrix (↑X) (↑Y) R\nhIX : I ⊆ X\nB : Basis (↑G) R ↥(Submodule.span R A.range)\nhAI : LinearIndepOn R A hIX.elem.range\n⊢ Finite ↑G",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Basic/SubmoduleSpans.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-16T18:38:30+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "1871ce2e630474650e64cef28a159977aa43b63e5079eab7afcfcfc30fa8e7bc"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Basic/SubmoduleSpans.lean",
        "start_line": 46,
        "start_column": 21,
        "end_line": 46,
        "end_column": 26
      },
      "debug_info": {
        "goal": "α R : Type\ninst✝ : Ring R\nX Y G I : Set α\nA : Matrix (↑X) (↑Y) R\nhIX : I ⊆ X\nB : Basis (↑G) R ↥(Submodule.span R A.range)\nhBI : LinearIndepOn R (fun x g => (B.repr ⟨A x, ⋯⟩) g) hIX.elem.range\n⊢ Finite ↑G",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Basic/SubmoduleSpans.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-16T18:38:30+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "7eb9a4204131a05c346fc2465064771e0177e9ee2cc8392b399cea2f1089c4b3"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matrix/Pivoting.lean",
        "start_line": 241,
        "start_column": 2,
        "end_line": 241,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nF : Type\ninst✝ : Field F\nk : ℕ\nA : Matrix (Fin k.succ) (Fin k.succ) F\nr c : Fin k.succ\nhArc : A r c ≠ 0\n⊢ ((A.shortTableauPivot r c).submatrix r.succAbove c.succAbove).det = A.det / A r c",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matrix/Pivoting.lean#L241"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-07T18:24:02+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "9774b7ffb88eb2619bf84285529b3afceaf447224b4a4725903e8a424d2a9d87"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 60,
        "start_column": 6,
        "end_line": 60,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.mp\nα : Type\ninst✝ : DecidableEq α\nS₁ S₂ : StandardRepr α Z2\nhXY : S₁.X ⫗ S₂.Y\nhYX : S₁.Y ⫗ S₂.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  I ⊆ (standardRepr1sumComposition hXY hYX).1.X ∪ (standardRepr1sumComposition hXY hYX).1.Y ∧\n    LinearIndepOn Z2 (Matrix.transpose fun x => (standardRepr1sumComposition hXY hYX).1.B.prependId x ∘ Subtype.toSum)\n      (Subtype.val ⁻¹' I)\n⊢ (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => S₁.B.prependId x ∘ Subtype.toSum)\n        (Subtype.val ⁻¹' (I ∩ (S₁.X ∪ S₁.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => S₂.B.prependId x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (S₂.X ∪ S₂.Y)))) ∧\n      I ⊆ S₁.X ∪ S₁.Y ∪ (S₂.X ∪ S₂.Y)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum1.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "2d13a837da47e93b84d0bbdc44d1bd6dc1ab880fa813497ff3e503726d242c50"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 62,
        "start_column": 6,
        "end_line": 62,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case right\nα : Type\ninst✝ : DecidableEq α\nS₁ S₂ : StandardRepr α Z2\nhXY : S₁.X ⫗ S₂.Y\nhYX : S₁.Y ⫗ S₂.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => S₁.B.prependId x ∘ Subtype.toSum)\n        (Subtype.val ⁻¹' (I ∩ (S₁.X ∪ S₁.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => S₂.B.prependId x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (S₂.X ∪ S₂.Y)))) ∧\n      I ⊆ S₁.X ∪ S₁.Y ∪ (S₂.X ∪ S₂.Y)\n⊢ LinearIndepOn Z2 (Matrix.transpose fun x => (standardRepr1sumComposition hXY hYX).1.B.prependId x ∘ Subtype.toSum)\n    (Subtype.val ⁻¹' I)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum1.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "15b246e8ceaa0507a242bae8cc85c6738426e2579ba5a620362edef5478b5ec7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 106,
        "start_column": 2,
        "end_line": 106,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Matrix (Fin 2) (Fin 2) Z2\nhQ : IsUnit Q\n⊢ ∃ f g, Q.submatrix ⇑f ⇑g = 1 ∨ Q.submatrix ⇑f ⇑g = !![1, 1; 0, 1]",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L106"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "d715642be4019a90f5b86c0f6b2bb0fa935f406fecf8325d718a80ed8ad196f5"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 129,
        "start_column": 2,
        "end_line": 129,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ (Matrix.toCanonicalSigning Q hx₀ hx₁ hx' hy₀ hy₁ hy').IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "4aad1767ed89db2b06df6025ac486a742278870e8dd81c4387894052448afc29"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 146,
        "start_column": 2,
        "end_line": 146,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\nhQsub :\n  !![Q ⟨x₀, hx₀⟩ ⟨y₀, hy₀⟩, Q ⟨x₀, hx₀⟩ ⟨y₁, hy₁⟩, Q ⟨x₀, hx₀⟩ ⟨y', hy'⟩;\n        Q ⟨x₁, hx₁⟩ ⟨y₀, hy₀⟩, Q ⟨x₁, hx₁⟩ ⟨y₁, hy₁⟩, Q ⟨x₁, hx₁⟩ ⟨y', hy'⟩;\n        Q ⟨x', hx'⟩ ⟨y₀, hy₀⟩, Q ⟨x', hx'⟩ ⟨y₁, hy₁⟩, Q ⟨x', hx'⟩ ⟨y', hy'⟩].abs =\n    !![1, 0, 1; 0, 1, 1; 1, 1, 0]\n⊢ let Q' := Matrix.toCanonicalSigning Q hx₀ hx₁ hx' hy₀ hy₁ hy';\n  !![Q' ⟨x₀, hx₀⟩ ⟨y₀, hy₀⟩, Q' ⟨x₀, hx₀⟩ ⟨y₁, hy₁⟩, Q' ⟨x₀, hx₀⟩ ⟨y', hy'⟩;\n      Q' ⟨x₁, hx₁⟩ ⟨y₀, hy₀⟩, Q' ⟨x₁, hx₁⟩ ⟨y₁, hy₁⟩, Q' ⟨x₁, hx₁⟩ ⟨y', hy'⟩;\n      Q' ⟨x', hx'⟩ ⟨y₀, hy₀⟩, Q' ⟨x', hx'⟩ ⟨y₁, hy₁⟩, Q' ⟨x', hx'⟩ ⟨y', hy'⟩] =\n    !![1, 0, 1; 0, -1, 1; 1, 1, 0]",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L146"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "f68f176ec4dafbae5dc0fd566b1cf6189b89999ce867ede8d9bf1c1eb554c0b2"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 163,
        "start_column": 2,
        "end_line": 163,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\nhQsub :\n  !![Q ⟨x₀, hx₀⟩ ⟨y₀, hy₀⟩, Q ⟨x₀, hx₀⟩ ⟨y₁, hy₁⟩, Q ⟨x₀, hx₀⟩ ⟨y', hy'⟩;\n        Q ⟨x₁, hx₁⟩ ⟨y₀, hy₀⟩, Q ⟨x₁, hx₁⟩ ⟨y₁, hy₁⟩, Q ⟨x₁, hx₁⟩ ⟨y', hy'⟩;\n        Q ⟨x', hx'⟩ ⟨y₀, hy₀⟩, Q ⟨x', hx'⟩ ⟨y₁, hy₁⟩, Q ⟨x', hx'⟩ ⟨y', hy'⟩].abs =\n    !![1, 1, 1; 0, 1, 1; 1, 1, 0]\n⊢ let Q' := Matrix.toCanonicalSigning Q hx₀ hx₁ hx' hy₀ hy₁ hy';\n  !![Q' ⟨x₀, hx₀⟩ ⟨y₀, hy₀⟩, Q' ⟨x₀, hx₀⟩ ⟨y₁, hy₁⟩, Q' ⟨x₀, hx₀⟩ ⟨y', hy'⟩;\n      Q' ⟨x₁, hx₁⟩ ⟨y₀, hy₀⟩, Q' ⟨x₁, hx₁⟩ ⟨y₁, hy₁⟩, Q' ⟨x₁, hx₁⟩ ⟨y', hy'⟩;\n      Q' ⟨x', hx'⟩ ⟨y₀, hy₀⟩, Q' ⟨x', hx'⟩ ⟨y₁, hy₁⟩, Q' ⟨x', hx'⟩ ⟨y', hy'⟩] =\n    !![1, 1, 1; 0, 1, 1; 1, 1, 0]",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L163"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "57a3e0284c117dd4e46f847b387ee279539b0d3eff450b039446968d06f16944"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 175,
        "start_column": 2,
        "end_line": 175,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ◫ ▮c₀ ◫ (▮c₀) - (▮c₁)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L175"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "9ff8f6882314c3bc3d12d7f7542e85a533ccfdbf1ecaeecd1c0517b6cf223a59"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ◫ ▮c₁ ◫ (▮c₀) - (▮c₁)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "96f7ea8a27b295d43a1653e8efeedf12ec33f0a1e34c0f05a5cded4b6bb7e1d6"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 194,
        "start_column": 2,
        "end_line": 194,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  ∀ (i : ↑(X \\ {x'})), ![c₀ i, c₁ i] ≠ ![1, -1] ∧ ![c₀ i, c₁ i] ≠ ![-1, 1]",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L194"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "fae895ca7e08b30032185005b6328f56c9c422d3c7a99d4fbf604777541b3cfd"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 208,
        "start_column": 2,
        "end_line": 208,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ◫ ▮c₀ ◫ ▮(-c₀) ◫ ▮c₁ ◫ ▮(-c₁) ◫ ▮(c₀ - c₁) ◫ ▮(c₁ - c₀) ◫ ▮0).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L208"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "6521520698a9d3e8d0f81a7ed41d3cbfcdd4c4d25311749e61bd5964e975f4a8"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 222,
        "start_column": 2,
        "end_line": 222,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let d₀ := fun i => Q ⟨x₀, hx₀⟩ (⋯.elem i);\n  let d₁ := fun i => Q ⟨x₁, hx₁⟩ (⋯.elem i);\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ⊟ ▬d₀ ⊟ ▬(-d₀) ⊟ ▬d₁ ⊟ ▬(-d₁) ⊟ ▬(d₀ - d₁) ⊟ ▬(d₁ - d₀) ⊟ ▬0).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L222"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "02b1f2aac6f45c18cc7284fdebd2ea3e13c8e408fff8c1a8c121cf26645b7a6c"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 439,
        "start_column": 2,
        "end_line": 439,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXₗXᵣ : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYₗYᵣ : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun hrXₗ := ⋯;\n  let_fun hrXᵣ := ⋯;\n  let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun hcYₗ := ⋯;\n  let_fun hcYᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fXᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fYₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fXᵣ i) (fYₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  D = (fun x1 x2 => c₀ x1 * r₀ x2) + fun x1 x2 => c₁ x1 * r₁ x2",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L439"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "721fb2d783c98a050eeb29c73fdcc81b20462c2edb7c6136b1f420f4a1a4ee0e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 547,
        "start_column": 2,
        "end_line": 547,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXₗXᵣ : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYₗYᵣ : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun hrXₗ := ⋯;\n  let_fun hrXᵣ := ⋯;\n  let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun hcYₗ := ⋯;\n  let_fun hcYᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fXᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fYₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fXᵣ i) (fYₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  ∀ (i : ↑(Xᵣ \\ {x'})), D i = r₀ ∨ D i = -r₀ ∨ D i = r₁ ∨ D i = -r₁ ∨ D i = r₂ ∨ D i = -r₂ ∨ D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L547"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "da844a0fec159ff4af1d3d59b4eff641ab9c29501685726c1a931063f64a9a01"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 655,
        "start_column": 2,
        "end_line": 655,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXₗXᵣ : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYₗYᵣ : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun hrXₗ := ⋯;\n  let_fun hrXᵣ := ⋯;\n  let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun hcYₗ := ⋯;\n  let_fun hcYᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fXᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fYₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fXᵣ i) (fYₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  ∀ (j : ↑(Yₗ \\ {y'})),\n    (fun x => D x j) = c₀ ∨\n      (fun x => D x j) = -c₀ ∨\n        (fun x => D x j) = c₁ ∨\n          (fun x => D x j) = -c₁ ∨ (fun x => D x j) = c₀ - c₁ ∨ (fun x => D x j) = c₁ - c₀ ∨ (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L655"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "0d9e8a9efc95e2b346e82eadb8d96fddf96ac84a76ffde9aed132c84820d3b51"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 763,
        "start_column": 2,
        "end_line": 763,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXₗXᵣ : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYₗYᵣ : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun hrXₗ := ⋯;\n  let_fun hrXᵣ := ⋯;\n  let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun hcYₗ := ⋯;\n  let_fun hcYᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fXᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fYₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fXᵣ i) (fYₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  (Aᵣ ◫ D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L763"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "1eb28eef860aa1c34ae526e61b0dbd42837166fd0c9e99c22bfcc7c6e83a2b05"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 871,
        "start_column": 2,
        "end_line": 871,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXₗXᵣ : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYₗYᵣ : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun hrXₗ := ⋯;\n  let_fun hrXᵣ := ⋯;\n  let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun hcYₗ := ⋯;\n  let_fun hcYᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fXᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fYₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fXᵣ i) (fYₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  (Aₗ ⊟ D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L871"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "408205f81649293e727186cbb87015ffa96c507506c44cc9a0c3a57927a75345"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 914,
        "start_column": 6,
        "end_line": 914,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case inr.inl\nα : Type\nXₗ Yₗ Xᵣ Yᵣ : Set α\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\nhAₗ✝ : (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular\nhAᵣ✝ : (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular\nhcc : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\nhrr : ∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range\nf : Fin 1 → ↑Xₗ ⊕ ↑Xᵣ\ng : Fin 1 → ↑Yₗ ⊕ ↑Yᵣ\nhAₗ : Aₗ.IsTotallyUnimodular\nhAᵣ : Aᵣ.IsTotallyUnimodular\ni₂ : ↑Xᵣ\nj₁ : ↑Yₗ\n⊢ c₀ i₂ * r₀ j₁ + c₁ i₂ * r₁ j₁ ∈ SignType.cast.range",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L914"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "46e0d358a0f87d23cf6be5b498f30e7eacd54bd7601dfb143c8b4033bac91c7b"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nXᵣ Yᵣ : Set α\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\nhAᵣ : (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular\nhcc : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\n⊢ (▮0 ◫ ▮(-c₀ - c₁) ◫ ▮(c₀ - c₁) ◫ ▮(c₁ - c₀) ◫ ▮(c₀ + c₁) ◫ ▮(-c₀) ◫ ▮(-c₁) ◫ ▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-14T14:06:11+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "25cc2f34200e92375ddba9e8b662d83080cb4b11f1b914fa43dc26660bc954eb"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1050,
        "start_column": 2,
        "end_line": 1050,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nXₗ Yₗ Xᵣ : Set α\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\ni : ↑Xₗ\nj : ↑Yₗ\nhij : Aₗ i j = 1 ∨ Aₗ i j = -1\nhAₗ : (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular\nhAᵣ : (▮c₀ ◫ ▮c₁).IsTotallyUnimodular\nhc₀c₁ : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\nhr₀r₁ : ∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range\n⊢ let r₀' := matrix3sumCompositionAlt_pivotAₗ_Dr₀ Aₗ r₀ r₁ c₀ c₁ hij;\n  let r₁' := matrix3sumCompositionAlt_pivotAₗ_Dr₁ Aₗ r₀ r₁ c₀ c₁ hij;\n  (▬r₀' ⊟ ▬r₁' ⊟ Aₗ).IsTotallyUnimodular ∧ ∀ (j : ↑Yₗ), (r₀' + r₁') j ∈ SignType.cast.range",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L1050"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "4058ee2e7fc14458c938143fba2a1a8d8af058b185833c2aa22cf5c29460193c"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1066,
        "start_column": 4,
        "end_line": 1066,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case hBD\nα : Type\ninst✝ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\ni : ↑Xₗ\nj : ↑Yₗ\nhij : Aₗ i j = 1 ∨ Aₗ i j = -1\nB : Matrix (↑Xₗ ⊕ ↑Xᵣ) (↑Yₗ ⊕ ↑Yᵣ) ℚ := matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁\nr₀' : ↑Yₗ → ℚ := matrix3sumCompositionAlt_pivotAₗ_Dr₀ Aₗ r₀ r₁ c₀ c₁ hij\nr₁' : ↑Yₗ → ℚ := matrix3sumCompositionAlt_pivotAₗ_Dr₁ Aₗ r₀ r₁ c₀ c₁ hij\nhBAₗ : (B.shortTableauPivot ◩i ◩j).toBlocks₁₁ = Aₗ.shortTableauPivot i j\nhB0 : (B.shortTableauPivot ◩i ◩j).toBlocks₁₂ = 0\n⊢ (B.shortTableauPivot ◩i ◩j).toBlocks₂₁ = (fun x1 x2 => c₀ x1 * r₀' x2) + fun x1 x2 => c₁ x1 * r₁' x2",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L1066"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "3f816dd6dabd24a2a7fca2c40f6e68ec438f805c9ebb0fd276ee902d6d42da37"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1134,
        "start_column": 8,
        "end_line": 1134,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α✝¹ α✝ α : Type\ninst✝ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nn : ℕ\nih :\n  ∀ {Aₗ : Matrix ↑Xₗ ↑Yₗ ℚ} {Aᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ} {r₀ r₁ : ↑Yₗ → ℚ} {c₀ c₁ : ↑Xᵣ → ℚ},\n    (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular →\n      (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular →\n        (∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range) →\n          (∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range) →\n            (matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).IsPreTU (n + 1)\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\nhrrAₗ : (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular\nhccAᵣ : (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular\nhcc : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\nhrr : ∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range\nhAₗ : Aₗ.IsTotallyUnimodular\nhAᵣ : Aᵣ.IsTotallyUnimodular\ncontr : ¬(matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).IsPreTU (n + 1 + 1)\nf : Fin (n + 1 + 1) → ↑Xₗ ⊕ ↑Xᵣ\ng : Fin (n + 1 + 1) → ↑Yₗ ⊕ ↑Yᵣ\nhAfg : ((matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).submatrix f g).det ∉ SignType.cast.range\nhf : Function.Injective f\nhg : Function.Injective g\ni₁ : Fin (n + 2)\nx₁ : ↑Xₗ\nhix₁ : f i₁ = ◩x₁\nj₀ : Fin (n + 2)\ny₀ : ↑Yₗ\nhjy₀ : g j₀ = ◩y₀\nhAxy0 : Aₗ x₁ y₀ ≠ 0\nhAxy1 : Aₗ x₁ y₀ = 1 ∨ Aₗ x₁ y₀ = -1\nf' g' : Fin (n + 1) → Fin (n + 1).succ\nimpossible :\n  ((((matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).submatrix f g).shortTableauPivot i₁ j₀).submatrix f' g').det ∉\n    SignType.cast.range\n⊢ (▬matrix3sumCompositionAlt_pivotAₗ_Dr₀ Aₗ r₀ r₁ c₀ c₁ hAxy1 ⊟\n        ▬matrix3sumCompositionAlt_pivotAₗ_Dr₁ Aₗ r₀ r₁ c₀ c₁ hAxy1 ⊟\n      Aₗ.shortTableauPivot x₁ y₀).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L1134"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-11T11:25:57+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "62f8502e64a5ec5b2957d8df8bebc6d64e6885174da40831e8218a80d032b609"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1135,
        "start_column": 8,
        "end_line": 1135,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α✝¹ α✝ α : Type\ninst✝ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nn : ℕ\nih :\n  ∀ {Aₗ : Matrix ↑Xₗ ↑Yₗ ℚ} {Aᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ} {r₀ r₁ : ↑Yₗ → ℚ} {c₀ c₁ : ↑Xᵣ → ℚ},\n    (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular →\n      (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular →\n        (∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range) →\n          (∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range) →\n            (matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).IsPreTU (n + 1)\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\nhrrAₗ : (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular\nhccAᵣ : (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular\nhcc : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\nhrr : ∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range\nhAₗ : Aₗ.IsTotallyUnimodular\nhAᵣ : Aᵣ.IsTotallyUnimodular\ncontr : ¬(matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).IsPreTU (n + 1 + 1)\nf : Fin (n + 1 + 1) → ↑Xₗ ⊕ ↑Xᵣ\ng : Fin (n + 1 + 1) → ↑Yₗ ⊕ ↑Yᵣ\nhAfg : ((matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).submatrix f g).det ∉ SignType.cast.range\nhf : Function.Injective f\nhg : Function.Injective g\ni₁ : Fin (n + 2)\nx₁ : ↑Xₗ\nhix₁ : f i₁ = ◩x₁\nj₀ : Fin (n + 2)\ny₀ : ↑Yₗ\nhjy₀ : g j₀ = ◩y₀\nhAxy0 : Aₗ x₁ y₀ ≠ 0\nhAxy1 : Aₗ x₁ y₀ = 1 ∨ Aₗ x₁ y₀ = -1\nf' g' : Fin (n + 1) → Fin (n + 1).succ\nimpossible :\n  ((((matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).submatrix f g).shortTableauPivot i₁ j₀).submatrix f' g').det ∉\n    SignType.cast.range\n⊢ ∀ (j : ↑Yₗ),\n    (matrix3sumCompositionAlt_pivotAₗ_Dr₀ Aₗ r₀ r₁ c₀ c₁ hAxy1 +\n          matrix3sumCompositionAlt_pivotAₗ_Dr₁ Aₗ r₀ r₁ c₀ c₁ hAxy1)\n        j ∈\n      SignType.cast.range",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L1135"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-11T11:25:57+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "de627bac189c7d47b79ead16c9bfa2a9e9d7c9a972e294492e0ccfc0f545002e"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1194,
        "start_column": 8,
        "end_line": 1194,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁵ : DecidableEq α\nβ : Type\ninst✝⁴ : Field β\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ : Matrix (↑Xₗ) (↑Yₗ) β\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) β\nhXₗXᵣ : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYₗYᵣ : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nB : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁})) ⊕ ↑(Xᵣ \\ {x'})) (↑(Yₗ \\ {y'}) ⊕ ↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β × Prop\nhB : B = matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ\nhrXₗ✝ : x₀ ᕃ x₁ ᕃ {x'} ⊆ Xₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hXₗXᵣ)) Set.inter_subset_left\nx₀inXₗ✝ : x₀ ∈ Xₗ := hrXₗ✝ (Set.mem_insert x₀ (x₁ ᕃ {x'}))\nx₁inXₗ✝ : x₁ ∈ Xₗ := hrXₗ✝ (Eq.symm (Set.insert_comm x₀ x₁ {x'}) ▸ Set.mem_insert x₁ (x₀ ᕃ {x'}))\nhcYₗ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYₗYᵣ)) Set.inter_subset_left\nhcYᵣ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yᵣ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYₗYᵣ)) Set.inter_subset_right\ny₀inYₗ✝ : y₀ ∈ Yₗ := hcYₗ✝ (Set.mem_insert y₀ (y₁ ᕃ {y'}))\ny₀inYᵣ✝ : y₀ ∈ Yᵣ := hcYᵣ✝ (Set.mem_insert y₀ (y₁ ᕃ {y'}))\ny₁inYₗ✝ : y₁ ∈ Yₗ := hcYₗ✝ (Eq.symm (Set.insert_comm y₀ y₁ {y'}) ▸ Set.mem_insert y₁ (y₀ ᕃ {y'}))\ny₁inYᵣ✝ : y₁ ∈ Yᵣ := hcYᵣ✝ (Eq.symm (Set.insert_comm y₀ y₁ {y'}) ▸ Set.mem_insert y₁ (y₀ ᕃ {y'}))\nAₗ : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁}))) (↑(Yₗ \\ {y'})) β := Bₗ.submatrix ⋯.elem ⋯.elem\nAᵣ : Matrix (↑(Xᵣ \\ {x'})) (↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β := Bᵣ.submatrix ⋯.elem ⋯.elem\nc₀ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ✝⟩\nc₁ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ✝⟩\nv₀ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₀, x₀inXₗ✝⟩ ∘ ⋯.elem\nv₁ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₁, x₁inXₗ✝⟩ ∘ ⋯.elem\nD₀ₗ : Matrix (Fin 2) (Fin 2) β :=\n  !![Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩;\n    Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩]\nr₀ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 0 0 * v₀ i + D₀ₗ⁻¹ 0 1 * v₁ i\nr₁ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 1 0 * v₀ i + D₀ₗ⁻¹ 1 1 * v₁ i\nhBₗ₁ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₁₁ = Aₗ\nhBₗ₂ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₁₂ = 0\nhBᵣ₂ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₂₂ = Aᵣ\ni : ↑(Xᵣ \\ {x'})\nj : ↑(Yₗ \\ {y'})\nhi : ↑i = x₀\nhj : ↑j = y₀\n⊢ Matrix.fromBlocks ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem]\n      !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]\n      ((Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩]) *\n          !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]⁻¹ *\n        ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem])\n      (Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩])\n      (if hi₀ : ↑i = x₀ then ◩0\n      else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim)\n      (if hj₀ : ↑j = y₀ then ◪0\n      else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim) =\n    c₀ i * r₀ j + c₁ i * r₁ j",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L1194"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "f3d80d07caec7b330bafa2dc35bf15ed2a921d005a01d951bddee8f4627eeece"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1196,
        "start_column": 8,
        "end_line": 1196,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁵ : DecidableEq α\nβ : Type\ninst✝⁴ : Field β\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ : Matrix (↑Xₗ) (↑Yₗ) β\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) β\nhXₗXᵣ : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYₗYᵣ : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nB : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁})) ⊕ ↑(Xᵣ \\ {x'})) (↑(Yₗ \\ {y'}) ⊕ ↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β × Prop\nhB : B = matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ\nhrXₗ✝ : x₀ ᕃ x₁ ᕃ {x'} ⊆ Xₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hXₗXᵣ)) Set.inter_subset_left\nx₀inXₗ✝ : x₀ ∈ Xₗ := hrXₗ✝ (Set.mem_insert x₀ (x₁ ᕃ {x'}))\nx₁inXₗ✝ : x₁ ∈ Xₗ := hrXₗ✝ (Eq.symm (Set.insert_comm x₀ x₁ {x'}) ▸ Set.mem_insert x₁ (x₀ ᕃ {x'}))\nhcYₗ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYₗYᵣ)) Set.inter_subset_left\nhcYᵣ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yᵣ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYₗYᵣ)) Set.inter_subset_right\ny₀inYₗ✝ : y₀ ∈ Yₗ := hcYₗ✝ (Set.mem_insert y₀ (y₁ ᕃ {y'}))\ny₀inYᵣ✝ : y₀ ∈ Yᵣ := hcYᵣ✝ (Set.mem_insert y₀ (y₁ ᕃ {y'}))\ny₁inYₗ✝ : y₁ ∈ Yₗ := hcYₗ✝ (Eq.symm (Set.insert_comm y₀ y₁ {y'}) ▸ Set.mem_insert y₁ (y₀ ᕃ {y'}))\ny₁inYᵣ✝ : y₁ ∈ Yᵣ := hcYᵣ✝ (Eq.symm (Set.insert_comm y₀ y₁ {y'}) ▸ Set.mem_insert y₁ (y₀ ᕃ {y'}))\nAₗ : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁}))) (↑(Yₗ \\ {y'})) β := Bₗ.submatrix ⋯.elem ⋯.elem\nAᵣ : Matrix (↑(Xᵣ \\ {x'})) (↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β := Bᵣ.submatrix ⋯.elem ⋯.elem\nc₀ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ✝⟩\nc₁ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ✝⟩\nv₀ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₀, x₀inXₗ✝⟩ ∘ ⋯.elem\nv₁ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₁, x₁inXₗ✝⟩ ∘ ⋯.elem\nD₀ₗ : Matrix (Fin 2) (Fin 2) β :=\n  !![Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩;\n    Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩]\nr₀ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 0 0 * v₀ i + D₀ₗ⁻¹ 0 1 * v₁ i\nr₁ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 1 0 * v₀ i + D₀ₗ⁻¹ 1 1 * v₁ i\nhBₗ₁ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₁₁ = Aₗ\nhBₗ₂ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₁₂ = 0\nhBᵣ₂ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₂₂ = Aᵣ\ni : ↑(Xᵣ \\ {x'})\nj : ↑(Yₗ \\ {y'})\nhi : ↑i = x₀\nhj : ¬↑j = y₀\n⊢ Matrix.fromBlocks ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem]\n      !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]\n      ((Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩]) *\n          !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]⁻¹ *\n        ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem])\n      (Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩])\n      (if hi₀ : ↑i = x₀ then ◩0\n      else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim)\n      (if hj₀ : ↑j = y₀ then ◪0\n      else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim) =\n    c₀ i * r₀ j + c₁ i * r₁ j",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L1196"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "2c9ecb01ff9f78e67317789e9324baefaa7090cf93303dee287ca4674e702b7f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1198,
        "start_column": 6,
        "end_line": 1198,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁵ : DecidableEq α\nβ : Type\ninst✝⁴ : Field β\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ : Matrix (↑Xₗ) (↑Yₗ) β\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) β\nhXₗXᵣ : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYₗYᵣ : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nB : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁})) ⊕ ↑(Xᵣ \\ {x'})) (↑(Yₗ \\ {y'}) ⊕ ↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β × Prop\nhB : B = matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ\nhrXₗ✝ : x₀ ᕃ x₁ ᕃ {x'} ⊆ Xₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hXₗXᵣ)) Set.inter_subset_left\nx₀inXₗ✝ : x₀ ∈ Xₗ := hrXₗ✝ (Set.mem_insert x₀ (x₁ ᕃ {x'}))\nx₁inXₗ✝ : x₁ ∈ Xₗ := hrXₗ✝ (Eq.symm (Set.insert_comm x₀ x₁ {x'}) ▸ Set.mem_insert x₁ (x₀ ᕃ {x'}))\nhcYₗ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYₗYᵣ)) Set.inter_subset_left\nhcYᵣ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yᵣ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYₗYᵣ)) Set.inter_subset_right\ny₀inYₗ✝ : y₀ ∈ Yₗ := hcYₗ✝ (Set.mem_insert y₀ (y₁ ᕃ {y'}))\ny₀inYᵣ✝ : y₀ ∈ Yᵣ := hcYᵣ✝ (Set.mem_insert y₀ (y₁ ᕃ {y'}))\ny₁inYₗ✝ : y₁ ∈ Yₗ := hcYₗ✝ (Eq.symm (Set.insert_comm y₀ y₁ {y'}) ▸ Set.mem_insert y₁ (y₀ ᕃ {y'}))\ny₁inYᵣ✝ : y₁ ∈ Yᵣ := hcYᵣ✝ (Eq.symm (Set.insert_comm y₀ y₁ {y'}) ▸ Set.mem_insert y₁ (y₀ ᕃ {y'}))\nAₗ : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁}))) (↑(Yₗ \\ {y'})) β := Bₗ.submatrix ⋯.elem ⋯.elem\nAᵣ : Matrix (↑(Xᵣ \\ {x'})) (↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β := Bᵣ.submatrix ⋯.elem ⋯.elem\nc₀ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ✝⟩\nc₁ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ✝⟩\nv₀ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₀, x₀inXₗ✝⟩ ∘ ⋯.elem\nv₁ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₁, x₁inXₗ✝⟩ ∘ ⋯.elem\nD₀ₗ : Matrix (Fin 2) (Fin 2) β :=\n  !![Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩;\n    Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩]\nr₀ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 0 0 * v₀ i + D₀ₗ⁻¹ 0 1 * v₁ i\nr₁ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 1 0 * v₀ i + D₀ₗ⁻¹ 1 1 * v₁ i\nhBₗ₁ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₁₁ = Aₗ\nhBₗ₂ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₁₂ = 0\nhBᵣ₂ : (matrix3sumComposition_standard Bₗ Bᵣ hXₗXᵣ hYₗYᵣ).1.toBlocks₂₂ = Aᵣ\ni : ↑(Xᵣ \\ {x'})\nj : ↑(Yₗ \\ {y'})\nhi : ¬↑i = x₀\n⊢ Matrix.fromBlocks ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem]\n      !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]\n      ((Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩]) *\n          !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]⁻¹ *\n        ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem])\n      (Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩])\n      (if hi₀ : ↑i = x₀ then ◩0\n      else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim)\n      (if hj₀ : ↑j = y₀ then ◪0\n      else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim) =\n    c₀ i * r₀ j + c₁ i * r₁ j",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L1198"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "dafcc51d48c4995de95242e22426646c550f5dc0f9a84248ec87ae823a54b15a"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1269,
        "start_column": 2,
        "end_line": 1269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro\nα : Type\ninst✝ : DecidableEq α\nS₁ S₂ : StandardRepr α Z2\nx₀ x₁ x' y₀ y₁ y' : α\nhXX : S₁.X ∩ S₂.X = x₀ ᕃ x₁ ᕃ {x'}\nhYY : S₁.Y ∩ S₂.Y = y₀ ᕃ y₁ ᕃ {y'}\nhXY : S₁.X ⫗ S₂.Y\nhYX : S₁.Y ⫗ S₂.X\nBₗ : Matrix ↑S₁.X ↑S₁.Y ℚ\nhBₗ : Bₗ.IsTotallyUnimodular\nhBBₗ : ∀ (i : ↑S₁.X) (j : ↑S₁.Y), |Bₗ i j| = ↑(ZMod.val (S₁.B i j))\nBᵣ : Matrix ↑S₂.X ↑S₂.Y ℚ\nhBᵣ : Bᵣ.IsTotallyUnimodular\nhBBᵣ : ∀ (i : ↑S₂.X) (j : ↑S₂.Y), |Bᵣ i j| = ↑(ZMod.val (S₂.B i j))\n⊢ (standardRepr3sumComposition_standard hXX hYY hXY hYX).1.HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Sum3.lean#L1269"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T17:54:51+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "8ee102dac7ba9bfb91848cd4a25dd7c377e5c79f1df3382abd0da3ecdf690e95"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Duality.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α R : Type\ninst✝¹ : DecidableEq α\ninst✝ : DivisionRing R\nS : StandardRepr α R\nG : Set α\nhG : G ⊆ S.toMatroid.E\n⊢ S✶.toMatroid.IsBase G ↔ S.toMatroid.IsBase (S.toMatroid.E \\ G)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Duality.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "6620d7b89ad7",
        "blame_date": "2025-03-27T01:07:30-07:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "7bc109a49ab8dfc5422fd2729cae392e9a1016d2c5f576e9d79693c31c422471"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Duality.lean",
        "start_line": 56,
        "start_column": 23,
        "end_line": 56,
        "end_column": 28
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nS : StandardRepr α Z2\nhM : S.toMatroid.IsRegular\n⊢ Finite ↑S.X",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Duality.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-03-26T17:17:14+01:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "381e0e33d9a8ea5aa6bd6484237b13df5c19dc23bcf5fa2b81355cde2dbd54be"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Duality.lean",
        "start_line": 57,
        "start_column": 24,
        "end_line": 57,
        "end_column": 29
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nS : StandardRepr α Z2\nhM : S.toMatroid.IsRegular\nthis : Finite ↑S.X\n⊢ Finite ↑S✶.X",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Operations/Duality.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-03-26T17:17:14+01:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "6616853c59cee0bf9639b80beffcbdf5f727c21300c1610b76be0ea47f438753"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Notions/Regularity.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h\nα β : Type\nM : Matroid α\nf : α ≃ β\nX Y : Set β\nA : Matrix ↑X ↑Y ℚ\nhA : A.IsTotallyUnimodular\nhAM : { X := X, Y := Y, A := A }.toMatroid = M.mapEquiv f\nf' : β ≃ α := f.symm\n⊢ { X := ⇑f' '' X, Y := ⇑f' '' Y, A := A.submatrix ⇑(f'.image X).symm ⇑(f'.image Y).symm }.toMatroid = M",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Notions/Regularity.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "6620d7b89ad7",
        "blame_date": "2025-03-28T23:02:51-07:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "da1a31ca39a7dc3ace71868602d7a6e1d45c4045df401786283ed1a900c8275c"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Notions/Regularity.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h\nα β : Type\nM : Matroid α\nf : α ≃ β\nX Y : Set α\nA : Matrix ↑X ↑Y ℚ\nhA : A.IsTotallyUnimodular\nhAM : { X := X, Y := Y, A := A }.toMatroid = M\nf' : α ≃ β := f\n⊢ { X := ⇑f' '' X, Y := ⇑f' '' Y, A := A.submatrix ⇑(f'.image X).symm ⇑(f'.image Y).symm }.toMatroid = M.mapEquiv f",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Notions/Regularity.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "6620d7b89ad7",
        "blame_date": "2025-03-28T23:02:51-07:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "c51e35931cf8289a957b606389ecc6a88c134fc095e4cf65549cef42a4b879a0"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "ca2dde8d03a270e36d72dc54832127f7d706f4e8",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Notions/Regularity.lean",
        "start_line": 286,
        "start_column": 2,
        "end_line": 286,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝¹ : DecidableEq α\nV W : VectorMatroid α Z2\ninst✝ : Finite ↑V.X\nhVW : V.toMatroid = W.toMatroid\n⊢ V.A.HasTuSigning ↔ W.A.HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/ca2dde8d03a270e36d72dc54832127f7d706f4e8/Seymour/Matroid/Notions/Regularity.lean#L286"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-03T17:58:14+02:00",
        "inclusion_date": "2025-04-26T04:08:42.583409+00:00"
      },
      "id": "586898cfdc0d2cf4bfb3e7ddfae96883ed8426904e2a82aa93bcffdf8410de4a"
    },
    {
      "repo": {
        "remote": "https://github.com/lean-machines-central/lean-machines",
        "branch": "multiref_API_multi",
        "commit": "58510cb1b5bdbb011ce74646980ab51c8bae9628",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "LeanMachines/Examples/Multiref/Tank/Tank_bis.lean",
        "start_line": 151,
        "start_column": 23,
        "end_line": 151,
        "end_column": 28
      },
      "debug_info": {
        "goal": "ctx : CountContext\nctx' : XorContext\n⊢ ∀ (m : Tank1 ctx),\n    Machine.invariant m →\n      {\n              guard :=\n                { guard := fun m => m.st ≠ status.OPEN_OUT ∧ m.cpt < ctx.max,\n                    action := fun m x => { cpt := m.cpt, st := status.CLOSED }, safety := ⋯ }.guard,\n              action :=\n                { guard := fun m => m.st ≠ status.OPEN_OUT ∧ m.cpt < ctx.max,\n                    action := fun m x => { cpt := m.cpt, st := status.CLOSED }, safety := ⋯ }.action,\n              safety := ⋯ }.guard\n          m →\n        ∀ (am : Counter0 ctx), Refinement.refine am m → (mkOrdinaryEvent (skip_Event (Counter0 ctx) Unit)).guard am ()",
        "url": "https://github.com/lean-machines-central/lean-machines/blob/58510cb1b5bdbb011ce74646980ab51c8bae9628/LeanMachines/Examples/Multiref/Tank/Tank_bis.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "5a291fca1fc0",
        "blame_date": "2025-04-09T16:12:26+02:00",
        "inclusion_date": "2025-04-26T04:18:10.504994+00:00"
      },
      "id": "179c6cf7525db7b63877cb8fbacd66abd12a8a52bdc9c5797091c55eb595eb13"
    },
    {
      "repo": {
        "remote": "https://github.com/lean-machines-central/lean-machines",
        "branch": "multiref_API_multi",
        "commit": "58510cb1b5bdbb011ce74646980ab51c8bae9628",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "LeanMachines/Examples/Multiref/Tank/Tank_bis.lean",
        "start_line": 152,
        "start_column": 20,
        "end_line": 152,
        "end_column": 25
      },
      "debug_info": {
        "goal": "ctx : CountContext\nctx' : XorContext\n⊢ ∀ (m : Tank1 ctx) (Hinv : Machine.invariant m)\n    (Hgrd :\n      {\n            guard :=\n              { guard := fun m => m.st ≠ status.OPEN_OUT ∧ m.cpt < ctx.max,\n                  action := fun m x => { cpt := m.cpt, st := status.CLOSED }, safety := ⋯ }.guard,\n            action :=\n              { guard := fun m => m.st ≠ status.OPEN_OUT ∧ m.cpt < ctx.max,\n                  action := fun m x => { cpt := m.cpt, st := status.CLOSED }, safety := ⋯ }.action,\n            safety := ⋯ }.guard\n        m)\n    (am : Counter0 ctx) (Href : Refinement.refine am m),\n    let m' :=\n      {\n            guard :=\n              { guard := fun m => m.st ≠ status.OPEN_OUT ∧ m.cpt < ctx.max,\n                  action := fun m x => { cpt := m.cpt, st := status.CLOSED }, safety := ⋯ }.guard,\n            action :=\n              { guard := fun m => m.st ≠ status.OPEN_OUT ∧ m.cpt < ctx.max,\n                  action := fun m x => { cpt := m.cpt, st := status.CLOSED }, safety := ⋯ }.action,\n            safety := ⋯ }.action\n        m Hgrd;\n    match (mkOrdinaryEvent (skip_Event (Counter0 ctx) Unit)).action am () ⋯ with\n    | (fst, am') => Refinement.refine am' m'",
        "url": "https://github.com/lean-machines-central/lean-machines/blob/58510cb1b5bdbb011ce74646980ab51c8bae9628/LeanMachines/Examples/Multiref/Tank/Tank_bis.lean#L152"
      },
      "metadata": {
        "blame_email_hash": "5a291fca1fc0",
        "blame_date": "2025-04-09T16:12:26+02:00",
        "inclusion_date": "2025-04-26T04:18:10.504994+00:00"
      },
      "id": "9542fe437787adb5c628431d0cb2bd2610dd2fd3df52ba02cb3670f68ee00644"
    },
    {
      "repo": {
        "remote": "https://github.com/lean-machines-central/lean-machines",
        "branch": "multiref_API_multi",
        "commit": "58510cb1b5bdbb011ce74646980ab51c8bae9628",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "LeanMachines/Examples/Multiref/Tank/Tank_bis.lean",
        "start_line": 154,
        "start_column": 12,
        "end_line": 154,
        "end_column": 17
      },
      "debug_info": {
        "goal": "ctx : CountContext\nctx' : XorContext\n⊢ _OrdinaryREvent'' (Xor0 ctx') (Tank1 ctx) Xor0.SetX_true\n    {\n      guard :=\n        { guard := fun m => m.st ≠ status.OPEN_OUT ∧ m.cpt < ctx.max,\n            action := fun m x => { cpt := m.cpt, st := status.CLOSED }, safety := ⋯ }.guard,\n      action :=\n        { guard := fun m => m.st ≠ status.OPEN_OUT ∧ m.cpt < ctx.max,\n            action := fun m x => { cpt := m.cpt, st := status.CLOSED }, safety := ⋯ }.action,\n      safety := ⋯ }",
        "url": "https://github.com/lean-machines-central/lean-machines/blob/58510cb1b5bdbb011ce74646980ab51c8bae9628/LeanMachines/Examples/Multiref/Tank/Tank_bis.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "5a291fca1fc0",
        "blame_date": "2025-04-11T09:54:48+02:00",
        "inclusion_date": "2025-04-26T04:18:10.504994+00:00"
      },
      "id": "55628b8fd765291e41db9c804bb461f13f001aca5f23277080e684b777d6d7d2"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "Amice_TransForm",
        "commit": "c6c3f9e572bc88f861160d230d9573a09cff1a7a",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Mathlib/RingTheory/AdicCompletion/Lemma.lean",
        "start_line": 58,
        "start_column": 51,
        "end_line": 58,
        "end_column": 56
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝⁴ : CommRing R\nI : Ideal R\nS : Type u_2\ninst✝³ : CommRing S\ninst✝² : Algebra R S\nJ : Ideal S\nM : Type u_3\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nf : S →ₗ[R] M\nn : ℕ\n⊢ (J ^ n • ⊤).toAddSubmonoid ≤ (Submodule.comap f (I ^ n • ⊤)).toAddSubmonoid",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c6c3f9e572bc88f861160d230d9573a09cff1a7a/Mathlib/RingTheory/AdicCompletion/Lemma.lean#L58"
      },
      "metadata": {
        "blame_email_hash": "c738381ff48f",
        "blame_date": "2025-04-25T12:37:49+08:00",
        "inclusion_date": "2025-04-26T04:41:35.015360+00:00"
      },
      "id": "5ebd3caf93db2da7520a546132bc405cc889f1163d9a9e130bd4e651b6971b2e"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "Amice_TransForm",
        "commit": "c6c3f9e572bc88f861160d230d9573a09cff1a7a",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Mathlib/RingTheory/AdicCompletion/Lemma.lean",
        "start_line": 73,
        "start_column": 5,
        "end_line": 73,
        "end_column": 10
      },
      "debug_info": {
        "goal": "case mk\nR : Type u_1\ninst✝⁶ : CommRing R\nI : Ideal R\nS : Type u_2\ninst✝⁵ : CommRing S\ninst✝⁴ : Algebra R S\nJ : Ideal S\nM : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\nN : Submodule R M\nP : Type u_4\ninst✝¹ : AddCommGroup P\ninst✝ : Module R P\nf : S →ₗ[R] M\nhp : (J • ⊤).toAddSubmonoid ≤ (Submodule.comap f (I • ⊤)).toAddSubmonoid\nm n : ℕ\nhmn : m ≤ n\na1 : ℕ → S\na2 : ∀ {m n : ℕ}, m ≤ n → a1 m ≡ a1 n [SMOD J ^ m • ⊤]\n⊢ f (a1 m) ≡ f (a1 n) [SMOD I ^ m • ⊤]",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c6c3f9e572bc88f861160d230d9573a09cff1a7a/Mathlib/RingTheory/AdicCompletion/Lemma.lean#L73"
      },
      "metadata": {
        "blame_email_hash": "c738381ff48f",
        "blame_date": "2025-04-25T12:37:49+08:00",
        "inclusion_date": "2025-04-26T04:41:35.015360+00:00"
      },
      "id": "35830cb4f81c62f28435a1ce92bb52181f57955ae5bfc0cacd424470ed3f1d51"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "Amice_TransForm",
        "commit": "c6c3f9e572bc88f861160d230d9573a09cff1a7a",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Mathlib/RingTheory/AdicCompletion/Lemma.lean",
        "start_line": 79,
        "start_column": 4,
        "end_line": 79,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝⁶ : CommRing R\nI : Ideal R\nS : Type u_2\ninst✝⁵ : CommRing S\ninst✝⁴ : Algebra R S\nJ : Ideal S\nM : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\nN : Submodule R M\nP : Type u_4\ninst✝¹ : AddCommGroup P\ninst✝ : Module R P\nf : S →ₗ[R] M\nhp : (J • ⊤).toAddSubmonoid ≤ (Submodule.comap f (I • ⊤)).toAddSubmonoid\nr : R\na : AdicCauchySequence J S\n⊢ ⟨fun n => f (↑(r • a) n), ⋯⟩ = (RingHom.id R) r • ⟨fun n => f (↑a n), ⋯⟩",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c6c3f9e572bc88f861160d230d9573a09cff1a7a/Mathlib/RingTheory/AdicCompletion/Lemma.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "c738381ff48f",
        "blame_date": "2025-04-25T12:37:49+08:00",
        "inclusion_date": "2025-04-26T04:41:35.015360+00:00"
      },
      "id": "688d771fcc8e0c2799acd6adafa4a5d81e5a84baee582d3404ca2cd0ae999495"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "Amice_TransForm",
        "commit": "c6c3f9e572bc88f861160d230d9573a09cff1a7a",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Mathlib/RingTheory/AdicCompletion/Lemma.lean",
        "start_line": 92,
        "start_column": 5,
        "end_line": 92,
        "end_column": 10
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝⁶ : CommRing R\nI : Ideal R\nS : Type u_2\ninst✝⁵ : CommRing S\ninst✝⁴ : Algebra R S\nJ : Ideal S\nM : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\nN : Submodule R M\nP : Type u_4\ninst✝¹ : AddCommGroup P\ninst✝ : Module R P\nf : S →ₗ[R] M\nhp : (J • ⊤).toAddSubmonoid ≤ (Submodule.comap f (I • ⊤)).toAddSubmonoid\nm n : ℕ\nhmn : m ≤ n\n⊢ transitionMap I M hmn ∘ₗ (fun n => AdicCompletion.ReduceModIdeal I J f n ∘ₗ ↑R (eval J S n)) n =\n    (fun n => AdicCompletion.ReduceModIdeal I J f n ∘ₗ ↑R (eval J S n)) m",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c6c3f9e572bc88f861160d230d9573a09cff1a7a/Mathlib/RingTheory/AdicCompletion/Lemma.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "c738381ff48f",
        "blame_date": "2025-04-25T12:37:49+08:00",
        "inclusion_date": "2025-04-26T04:41:35.015360+00:00"
      },
      "id": "067cc77c6f4186563fc6e9508d0dbf4cf1b02a40a238ac95ab5c31fc19a712ae"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 162,
        "start_column": 60,
        "end_line": 162,
        "end_column": 65
      },
      "debug_info": {
        "goal": "«$v» : Level\n«$A» : Type v\n«$sA» : CommSemiring «$A»\n«$a» : «$A»\n⊢ «$a» = 1 • 1 + Nat.rawCast 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "3e73ea66dc72bdb85506f47a4a61f55d8f848317d1ad0f0b59db9e1e294be3eb"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 163,
        "start_column": 25,
        "end_line": 163,
        "end_column": 30
      },
      "debug_info": {
        "goal": "«$v» : Level\n«$A» : Type v\n«$sA» : CommSemiring «$A»\n«$a» $a✝ : «$A»\n⊢ «$a» = $a✝",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L163"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "79fd4a7061657af5982a0065d004d1068dc38de3e72637483590fc5463b805bc"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 257,
        "start_column": 36,
        "end_line": 257,
        "end_column": 41
      },
      "debug_info": {
        "goal": "«$u» : Level\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n$a✝ : «$A»\n$hyp✝ : Option Expr\n«$n» : ℕ\n«$a» : «$A» := ↑«$n» * 1\n⊢ «$a» = ↑«$n» * 1",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-13T18:43:26+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "3e22c038a8638536ea261624648d8ffa0b9cfee6e8b4ca0491f72044fddec3e2"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 260,
        "start_column": 36,
        "end_line": 260,
        "end_column": 41
      },
      "debug_info": {
        "goal": "«$u» : Level\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n«$a» $x✝ : «$A»\n$e✝ : ℕ\n$b✝ : «$A»\n«$n» : ℕ\n«$b'» : «$A»\n«$pb'» : $b✝ = ↑«$n» * «$b'»\n⊢ $x✝ ^ $e✝ * $b✝ = ↑«$n» * ($x✝ ^ $e✝ * «$b'»)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L260"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-13T18:43:26+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "bb729561dfb5dc36a85d7f562ad085ea19bcc50f58ea59974a0a03ba8cb85a43"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 282,
        "start_column": 28,
        "end_line": 282,
        "end_column": 33
      },
      "debug_info": {
        "goal": "«$u» «$v» : Level\n«$A» : Type u\n«$R» : Type v\n«$sA» : CommSemiring «$A»\n«$sR» : CommSemiring «$R»\n«$sRA» : Algebra «$R» «$A»\n«$r» : «$R»\n$a✝ : «$A»\n«$n» : ℕ\n«$a» : «$A»\n«$pa» : $a✝ = ↑«$n» * «$a»\n⊢ «$r» • $a✝ = «$r» • «$a»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-13T18:43:26+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "810bcb3f4e7138f9ea91eb72c1fa602f5d2e6f10405d12f76fc16c93d470b024"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 285,
        "start_column": 31,
        "end_line": 285,
        "end_column": 36
      },
      "debug_info": {
        "goal": "«$u» «$v» : Level\n«$A» : Type u\n«$R» : Type v\n«$sA» : CommSemiring «$A»\n«$sR» : CommSemiring «$R»\n«$sRA» : Algebra «$R» «$A»\n$r✝ : «$R»\n$a✝ : «$A»\n«$n» : ℕ\n«$a» : «$A»\n«$pa» : $a✝ = ↑«$n» * «$a»\n$expr✝ : «$R»\n«$pr'» : $r✝ = $expr✝\n«$r» : «$R»\n«$pr» : $expr✝ * ↑«$n» = «$r»\n⊢ $r✝ • $a✝ = «$r» • «$a»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L285"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "9cb0a255d75f77b1ed12710e068bfdd121bb69ac79c8e5645ddabe273810c759"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 309,
        "start_column": 73,
        "end_line": 309,
        "end_column": 78
      },
      "debug_info": {
        "goal": "«$u» «$v» «$w» : Level\n«$A» : Type u\n«$R₁» : Type v\n«$R₂» : Type w\n«$sA» : CommSemiring «$A»\n«$sR₁» : CommSemiring «$R₁»\n«$sRA₁» : Algebra «$R₁» «$A»\n«$sR₂» : CommSemiring «$R₂»\n«$sRA₂» : Algebra «$R₂» «$A»\n«$r₁» : «$R₁»\n«$r₂» : «$R₂»\n«$a₁» «$a₂» : «$A»\n«$pf_isNat_zero» : NormNum.IsNat («$a₁» + «$a₂») 0\n⊢ 1 • «$a₁» + 1 • «$a₂» = 1 • 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L309"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-14T17:07:18+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "96b68d4fb4e2fb05e809ec7917b749c91882484fe8b5e4a4b83e611917d8651c"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 311,
        "start_column": 52,
        "end_line": 311,
        "end_column": 57
      },
      "debug_info": {
        "goal": "«$u» «$v» «$w» : Level\n«$A» : Type u\n«$R₁» : Type v\n«$R₂» : Type w\n«$sA» : CommSemiring «$A»\n«$sR₁» : CommSemiring «$R₁»\n«$sRA₁» : Algebra «$R₁» «$A»\n«$sR₂» : CommSemiring «$R₂»\n«$sRA₂» : Algebra «$R₂» «$A»\n«$r₁» : «$R₁»\n«$r₂» : «$R₂»\n«$a₁» «$a₂» $expr✝ : «$A»\n«$pa» : «$a₁» + «$a₂» = $expr✝\n⊢ 1 • «$a₁» + 1 • «$a₂» = 1 • $expr✝",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L311"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-14T17:07:18+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "6196316dfb8c51a29432d750d1019641dda3bd0266d6d066625f61fecd0e0251"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 327,
        "start_column": 54,
        "end_line": 327,
        "end_column": 59
      },
      "debug_info": {
        "goal": "«$u» «$v» «$w» : Level\n«$A» : Type u\n«$R₂» : Type w\n«$sA» : CommSemiring «$A»\n«$sR₂» : CommSemiring «$R₂»\n«$sRA₂» : Algebra «$R₂» «$A»\n$r₂✝¹ : «$R₂»\n$a₁✝ $a₂✝ : «$A»\n$r₂✝ «$r₂» : «$R₂»\n«$a₂» : «$A»\n«$pra₂» : $r₂✝ • $a₂✝ = «$r₂» • «$a₂»\n«$a₁» : «$A» := «$a₂»\n«$R₁» : Type w := «$R₂»\n«$sR₁» : CommSemiring «$R₁»\n«$sRA₁» : Algebra «$R₁» «$A»\n$r₁✝¹ $r₁✝ «$r₁» : «$R₁»\n«$pra₁» : $r₁✝ • $a₁✝ = «$r₁» • «$a₁»\n$r₁'✝ «$r₁'» : «$R₂»\n«$pr₁'» : $r₁'✝ = «$r₁'»\n«$r₂'» : «$R₂»\n«$pr₂'» : «$r₂» = «$r₂'»\n«$r» : «$R₂»\n«$pr» : «$r₁'» + «$r₂'» = «$r»\n⊢ $r₁✝ • $a₁✝ + $r₂✝ • $a₂✝ = «$r» • «$a₂»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "c41558a93128b8d42d5ec663bb1321f82091cd9b9f748a971fd3d8c91149677a"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 339,
        "start_column": 53,
        "end_line": 339,
        "end_column": 58
      },
      "debug_info": {
        "goal": "«$u» «$v» «$w» : Level\n«$A» : Type u\n«$R₁» : Type v\n«$R₂» : Type w\n«$sA» : CommSemiring «$A»\n«$sR₁» : CommSemiring «$R₁»\n«$sRA₁» : Algebra «$R₁» «$A»\n«$sR₂» : CommSemiring «$R₂»\n«$sRA₂» : Algebra «$R₂» «$A»\n$r₁✝¹ : «$R₁»\n$r₂✝¹ : «$R₂»\n$a₁✝ $a₂✝ : «$A»\n$r₂✝ : «$R₂»\n$r₁✝ «$r₁» : «$R₁»\n«$r₂» : «$R₂»\n«$a₂» : «$A»\n«$pra₂» : $r₂✝ • $a₂✝ = «$r₂» • «$a₂»\n«$a₁» : «$A» := «$a₂»\n«$pra₁» : $r₁✝ • $a₁✝ = «$r₁» • «$a₁»\n«$_i₃» : Algebra «$R₁» «$R₂»\n«$_i₄» : IsScalarTower «$R₁» «$R₂» «$A»\n$expr✝ : «$R₂»\n«$pr₂» : «$r₂» = $expr✝\n«$r» : «$R₂»\n«$pr» : «$r₁» • 1 + Nat.rawCast 0 + $expr✝ = «$r»\n⊢ $r₁✝ • $a₁✝ + $r₂✝ • $a₂✝ = «$r» • «$a₂»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L339"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "38d93f8c987b0bd1ca9604ac5477590e4ef15aaf46ac5353baed1d6b225e6d6a"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 350,
        "start_column": 53,
        "end_line": 350,
        "end_column": 58
      },
      "debug_info": {
        "goal": "«$u» «$v» «$w» : Level\n«$A» : Type u\n«$R₁» : Type v\n«$R₂» : Type w\n«$sA» : CommSemiring «$A»\n«$sR₁» : CommSemiring «$R₁»\n«$sRA₁» : Algebra «$R₁» «$A»\n«$sR₂» : CommSemiring «$R₂»\n«$sRA₂» : Algebra «$R₂» «$A»\n$r₁✝¹ : «$R₁»\n$r₂✝¹ : «$R₂»\n$a₁✝ $a₂✝ : «$A»\n$r₂✝ : «$R₂»\n$r₁✝ «$r₁» : «$R₁»\n«$r₂» : «$R₂»\n«$a₂» : «$A»\n«$pra₂» : $r₂✝ • $a₂✝ = «$r₂» • «$a₂»\n«$a₁» : «$A» := «$a₂»\n«$pra₁» : $r₁✝ • $a₁✝ = «$r₁» • «$a₁»\n«$_i₃» : Algebra «$R₂» «$R₁»\n«$_i₄» : IsScalarTower «$R₂» «$R₁» «$A»\n$expr✝ : «$R₁»\n«$pr₁» : «$r₁» = $expr✝\n«$r» : «$R₁»\n«$pr» : «$r₂» • 1 + Nat.rawCast 0 + $expr✝ = «$r»\n⊢ $r₁✝ • $a₁✝ + $r₂✝ • $a₂✝ = «$r» • «$a₁»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L350"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "615b85ce20348b7db69790997369ea18935333141092218ce11b3c694d0af33f"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 365,
        "start_column": 22,
        "end_line": 365,
        "end_column": 27
      },
      "debug_info": {
        "goal": "«$u» : Level\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n$a₁✝ «$a₂» «$a₁» : «$A»\n⊢ «$a₁» + Nat.rawCast 0 = «$a₁»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L365"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-09T00:17:18+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "1ef5aef31b60b2bd2ea607397c7bb58be8b365d4b99166c2781f8827aa6fdb9a"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 368,
        "start_column": 22,
        "end_line": 368,
        "end_column": 27
      },
      "debug_info": {
        "goal": "«$u» : Level\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n«$a₁» $a₂✝ «$a₂» : «$A»\n⊢ Nat.rawCast 0 + «$a₂» = «$a₂»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L368"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-10T16:14:36+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "94f99dc277db30fabcf3fc1e314d2d1d5233ba6411cdb446c46a3eab97e15849"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 416,
        "start_column": 24,
        "end_line": 416,
        "end_column": 29
      },
      "debug_info": {
        "goal": "«$u» : Level\n$A✝ : Type u\n$sA✝ : CommSemiring $A✝\n«$a₁» : $A✝\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n«$a₂» : «$A»\n⊢ Nat.rawCast 0 * «$a₂» = Nat.rawCast 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L416"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-09T00:17:18+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "0575aaa2b15dd73ae7ba285d4245c4a2e5d20eca43d2ca6984cac44df8dafb38"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 424,
        "start_column": 38,
        "end_line": 424,
        "end_column": 43
      },
      "debug_info": {
        "goal": "«$u» : Level\n$A✝ : Type u\n$sA✝ : CommSemiring $A✝\n«$a₁» : $A✝\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n$v✝ : Level\n«$R» : Type v✝\n«$sR» : CommSemiring «$R»\n«$r» : «$R»\n«$a» «$t» : «$A»\n«$sRA» : Algebra «$R» «$A»\n«$a₂» «$a'» : «$A»\n«$pa'» : «$a» * «$a₂» = «$a'»\n«$t'» : «$A»\n«$pt'» : «$t» * «$a₂» = «$t'»\n⊢ («$r» • «$a» + «$t») * «$a₂» = «$r» • «$a'» + «$t'»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L424"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-09T00:17:18+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "f6c4834f885c7e7fca5de16dd9672ca8bc0802def0f32c1f6d9bad5e4b8e06be"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 432,
        "start_column": 24,
        "end_line": 432,
        "end_column": 29
      },
      "debug_info": {
        "goal": "«$u» : Level\n$A✝ : Type u\n$sA✝ : CommSemiring $A✝\n«$a₂» : $A✝\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n«$a₁» : «$A»\n⊢ «$a₁» * Nat.rawCast 0 = Nat.rawCast 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L432"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-09T00:17:18+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "2080ab0026588630603ca85fd29eecd73d56ec12c94c71c041576b3092175bcf"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 442,
        "start_column": 20,
        "end_line": 442,
        "end_column": 25
      },
      "debug_info": {
        "goal": "«$u» : Level\n$A✝ : Type u\n$sA✝ : CommSemiring $A✝\n«$a₂» : $A✝\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n$v✝ : Level\n«$R» : Type v✝\n«$sR» : CommSemiring «$R»\n«$r» : «$R»\n«$a» «$t» : «$A»\n«$sRA» : Algebra «$R» «$A»\n«$a₁» «$a'» : «$A»\n«$pa'» : «$a₁» * «$a» = «$a'»\n«$ra'» : «$A»\n«$pra'» : «$r» • «$a'» = «$ra'»\n«$t'» : «$A»\n«$pt'» : «$a₁» * «$t» = «$t'»\n$expr✝ : «$A»\n«$p» : «$ra'» + «$t'» = $expr✝\n⊢ «$a₁» * («$r» • «$a» + «$t») = $expr✝",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L442"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-13T18:43:26+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "3f097a67c22927235d073e4a7885b39506d8af44631d24be9330eed46efa347d"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 507,
        "start_column": 37,
        "end_line": 507,
        "end_column": 42
      },
      "debug_info": {
        "goal": "«$v» : Level\n«$A» : Type v\n«$iA» : Semiring «$A»\n«$u₁» «$u₂» : Level\n«$R₂» : Type u₂\n«$iR₂» : CommSemiring «$R₂»\n«$iRA₂» : Algebra «$R₂» «$A»\n«$r₂» : «$R₂»\n«$a» : «$A»\n«$R₁» : Type u₂ := «$R₂»\n«$iR₁» : CommSemiring «$R₁»\n«$iRA₁» : Algebra «$R₁» «$A»\n«$r₁» : «$R₁»\n$r₁'✝ «$r₂'» : «$R₂»\n«$pr₂'» : «$r₂» = «$r₂'»\n«$r₁'» : «$R₂» := «$r₁»\n«$pr₁'» : $r₁'✝ = «$r₁'»\n«$r» : «$R₂»\n«$pr» : «$r₁'» * «$r₂'» = «$r»\n⊢ «$r₁» • «$r₂» • «$a» = «$r» • «$a»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L507"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-08T17:33:25+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "3ac5707ea2567ae38fa216b3247478e017c5c611efcf6858b24c57082e48a466"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 519,
        "start_column": 38,
        "end_line": 519,
        "end_column": 43
      },
      "debug_info": {
        "goal": "«$v» : Level\n«$A» : Type v\n«$iA» : Semiring «$A»\n«$u₁» : Level\n«$R₁» : Type u₁\n«$u₂» : Level\n«$R₂» : Type u₂\n«$iR₂» : CommSemiring «$R₂»\n«$iRA₂» : Algebra «$R₂» «$A»\n«$r₁» : «$R₁»\n«$r₂» : «$R₂»\n«$a» : «$A»\n«$_i₁» : CommSemiring «$R₁»\n«$_i₃» : Algebra «$R₁» «$R₂»\n«$iR₁» : CommSemiring «$R₁» := «$_i₁»\n«$iRA₁» : Algebra «$R₁» «$A»\n«$_i₄» : IsScalarTower «$R₁» «$R₂» «$A»\n«$r₂'» : «$R₂»\n«$pr₂'» : «$r₂» = «$r₂'»\n«$r» : «$R₂»\n«$pr» : «$r₁» • «$r₂'» = «$r»\n⊢ «$r₁» • «$r₂» • «$a» = «$r» • «$a»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L519"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "9ac0a2c4ba67793806bd3a51e572c62f30ec0221a884accb1d73b35dbaf6308c"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 530,
        "start_column": 38,
        "end_line": 530,
        "end_column": 43
      },
      "debug_info": {
        "goal": "«$v» : Level\n«$A» : Type v\n«$iA» : Semiring «$A»\n«$u₁» : Level\n«$R₁» : Type u₁\n«$iR₁» : CommSemiring «$R₁»\n«$iRA₁» : Algebra «$R₁» «$A»\n«$u₂» : Level\n«$R₂» : Type u₂\n«$r₁» : «$R₁»\n«$r₂» : «$R₂»\n«$a» : «$A»\n«$_i₁» : CommSemiring «$R₂»\n«$_i₃» : Algebra «$R₂» «$R₁»\n«$iR₂» : CommSemiring «$R₂» := «$_i₁»\n«$iRA₂» : Algebra «$R₂» «$A»\n«$_i₄» : IsScalarTower «$R₂» «$R₁» «$A»\n«$r₁'» : «$R₁»\n«$pr₁'» : «$r₁» = «$r₁'»\n«$r» : «$R₁»\n«$pr» : «$r₂» • «$r₁'» = «$r»\n⊢ «$r₁» • «$r₂» • «$a» = «$r» • «$a»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L530"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "eddefc05c612826bd4abb6b6c341a52be7f105fa2cf77b54664a3024abecc6a8"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 552,
        "start_column": 45,
        "end_line": 552,
        "end_column": 50
      },
      "debug_info": {
        "goal": "«$u» «$v» : Level\n«$R» : Type u\n«$A» : Type v\n«$sA» : CommSemiring «$A»\n«$sR» : CommSemiring «$R»\n«$sRA» : Algebra «$R» «$A»\n«$r» : «$R»\n$a✝ : «$A»\n$v✝ : Level\n«$S» : Type v✝\n«$sS» : CommSemiring «$S»\n«$s» : «$S»\n«$a» $b✝ : «$A»\n«$sSA» : Algebra «$S» «$A»\n«$et» : «$A»\n«$pt» : «$r» • $b✝ = «$et»\n«$u₁» : Level\n«$R₁» : Type u₁\n«$iR₁» : CommSemiring «$R₁»\n«$sR₁A» : Algebra «$R₁» «$A»\n«$r₁» : «$R₁»\n«$pr₁» : «$s» • «$r» • «$a» = «$r₁» • «$a»\n⊢ «$r» • («$s» • «$a» + $b✝) = «$r₁» • «$a» + «$et»",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L552"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-25T17:49:22+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "afd5daa4c3ca42aa080901cd9553277d665a3136aa7551403719c13a7882bf00"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 600,
        "start_column": 24,
        "end_line": 600,
        "end_column": 29
      },
      "debug_info": {
        "goal": "«$u» : Level\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n«$n» : Name\n$us✝ : List Level\n$x✝ : Expr × Expr × Bool\n«$a» «$b» : «$A»\n«$e» : «$A» := «$a» + «$b»\n$expr✝² : «$A»\n«$pa» : «$a» = $expr✝²\n$expr✝¹ : «$A»\n«$pb» : «$b» = $expr✝¹\n$expr✝ : «$A»\n«$pab» : $expr✝² + $expr✝¹ = $expr✝\n⊢ «$e» = $expr✝",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L600"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-13T18:43:26+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "e6fcf08d10360d883313e545cc1b93d6bcc0f7431ac667cae3a1fe43bfc5d508"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 600,
        "start_column": 24,
        "end_line": 600,
        "end_column": 29
      },
      "debug_info": {
        "goal": "«$u» : Level\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n«$n» : Name\n$us✝ : List Level\n$x✝ : Expr × Expr × Bool\n«$a» «$b» : «$A»\n«$e» : «$A» := «$a» + «$b»\n$expr✝² : «$A»\n«$pa» : «$a» = $expr✝²\n$expr✝¹ : «$A»\n«$pb» : «$b» = $expr✝¹\n$expr✝ : «$A»\n«$pab» : $expr✝² + $expr✝¹ = $expr✝\n⊢ «$e» = $expr✝",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L600"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-13T18:43:26+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "e6fcf08d10360d883313e545cc1b93d6bcc0f7431ac667cae3a1fe43bfc5d508"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 609,
        "start_column": 24,
        "end_line": 609,
        "end_column": 29
      },
      "debug_info": {
        "goal": "«$u» : Level\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n«$n» : Name\n$us✝ : List Level\n$x✝ : Expr × Expr × Bool\n«$a» «$b» : «$A»\n«$e» : «$A» := «$a» * «$b»\n$expr✝² : «$A»\n«$pa» : «$a» = $expr✝²\n$expr✝¹ : «$A»\n«$pb» : «$b» = $expr✝¹\n$expr✝ : «$A»\n«$pab» : $expr✝² * $expr✝¹ = $expr✝\n⊢ «$e» = $expr✝",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L609"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-13T18:43:26+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "9356c2954c552e9818e1035a084eec05c0b00a4387b0ad36167ae1903d2ff4d0"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Algebra.lean",
        "start_line": 609,
        "start_column": 24,
        "end_line": 609,
        "end_column": 29
      },
      "debug_info": {
        "goal": "«$u» : Level\n«$A» : Type u\n«$sA» : CommSemiring «$A»\n«$n» : Name\n$us✝ : List Level\n$x✝ : Expr × Expr × Bool\n«$a» «$b» : «$A»\n«$e» : «$A» := «$a» * «$b»\n$expr✝² : «$A»\n«$pa» : «$a» = $expr✝²\n$expr✝¹ : «$A»\n«$pb» : «$b» = $expr✝¹\n$expr✝ : «$A»\n«$pab» : $expr✝² * $expr✝¹ = $expr✝\n⊢ «$e» = $expr✝",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Algebra.lean#L609"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-04-13T18:43:26+02:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "9356c2954c552e9818e1035a084eec05c0b00a4387b0ad36167ae1903d2ff4d0"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Polynomial.lean",
        "start_line": 530,
        "start_column": 9,
        "end_line": 530,
        "end_column": 14
      },
      "debug_info": {
        "goal": "a : ℚ\n⊢ a + a = 2 * a",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Polynomial.lean#L530"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-02-25T18:05:11+01:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "ddf72bb6ac2cf2c05db381d9ca1375187d640bb059f5c12d727fdcf11446862c"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "arend/algebra",
        "commit": "6706af18f127b0a3c0e8442a9af50d9257bb7703",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Mathlib/Tactic/Polynomial.lean",
        "start_line": 530,
        "start_column": 9,
        "end_line": 530,
        "end_column": 14
      },
      "debug_info": {
        "goal": "a : ℚ\n⊢ a * a = a ^ 2",
        "url": "https://github.com/leanprover-community/mathlib4/blob/6706af18f127b0a3c0e8442a9af50d9257bb7703/Mathlib/Tactic/Polynomial.lean#L530"
      },
      "metadata": {
        "blame_email_hash": "677e25bc67b0",
        "blame_date": "2025-02-25T18:05:11+01:00",
        "inclusion_date": "2025-04-26T04:48:37.992683+00:00"
      },
      "id": "54c8904e9c3eec29624b69fcded63c952e134526ae499f399817b4a9c96766c0"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9
      },
      "debug_info": {
        "goal": "k : ℕ\nf : ℂ → ℂ\nhf : ∀ (z : ℂ), AnalyticAt ℂ f z\nhfdev : ∀ (z : ℂ), AnalyticAt ℂ (iteratedDeriv k f) z\nz : ℂ\nthis : AnalyticAt ℂ (deriv^[k] f) z\n⊢ ⋯.order = ⋯.order - 1",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "7bdfc47f49e87c2a132d4911e6a009e9b1e2f0de9923c165cd5275e47f973071"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 120,
        "start_column": 4,
        "end_line": 120,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp.intro\nk n : ℕ\nf : ℂ → ℂ\nz : ℂ\nhf : ∀ (z : ℂ), AnalyticAt ℂ f z\nhord : ⋯.order ≠ ⊤\nH1 : ∀ k < n, iteratedDeriv k f z = 0\nH2 : iteratedDeriv k f z ≠ 0\n⊢ ∃ g, AnalyticAt ℂ g z ∧ g z ≠ 0 ∧ ∀ᶠ (z_1 : ℂ) in nhds z, f z_1 = (z_1 - z) ^ n • g z_1",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L120"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "c9b87ecbc12dc890131c4a269a4c960ffc1e4131d2ac5bc4bf1ea2c65aa17f15"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 121,
        "start_column": 4,
        "end_line": 121,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mpr\nk n : ℕ\nf : ℂ → ℂ\nz : ℂ\nhf : ∀ (z : ℂ), AnalyticAt ℂ f z\nhord : ⋯.order ≠ ⊤\n⊢ ⋯.order = ↑n → (∀ k < n, iteratedDeriv k f z = 0) ∧ iteratedDeriv k f z ≠ 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "39dac7c29ccf55e27f827bb987fad16f0d0558896b879c6b83575c54dc7beec8"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 125,
        "start_column": 74,
        "end_line": 125,
        "end_column": 79
      },
      "debug_info": {
        "goal": "n : ℕ\n⊢ ∀ (f : ℂ → ℂ) (z₀ : ℂ) (hf : ∀ (z : ℂ), AnalyticAt ℂ f z), (∀ k < n, iteratedDeriv k f z₀ = 0) → ↑n ≤ ⋯.order",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L125"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-23T18:11:52+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "a59249705b34abc51e860efed72dea467fd81a4e049eab04b73a2cd7dee46b4f"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 601,
        "start_column": 8,
        "end_line": 601,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case calc_2.h.h₁.h₁.h₁.h₀.h\nK : Type\ninst✝¹ : Field K\nα' β' γ' : K\ninst✝ : NumberField K\nq : ℕ\nu✝ : Fin (m K * n K q)\nt✝ : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nu : Fin (m K * n K q)\nt : Fin (q * q)\na : ℕ := ↑(finProdFinEquiv.symm.toFun t).1 + 1\nb : ℕ := ↑(finProdFinEquiv.symm.toFun t).2 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nf : -1 / 2 + ↑(n K q) * (1 / 2) = (↑(n K q) - 1) / 2\n⊢ ↑(c₁ K α' β' γ') ^ (n K q - 1 + m K * q + m K * q) ≤ ↑(c₁ K α' β' γ') ^ (1 + 2 * m K * (2 * m K).sqrt)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L601"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-14T16:41:00+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "a2010e55f0fc9d95f3369bfe1bb23f25e052fa9e8f83f7616f040f264e670fd5"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 614,
        "start_column": 8,
        "end_line": 614,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case calc_2.h.h₁.h₁.h₂\nK : Type\ninst✝¹ : Field K\nα' β' γ' : K\ninst✝ : NumberField K\nq : ℕ\nu✝ : Fin (m K * n K q)\nt✝ : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nu : Fin (m K * n K q)\nt : Fin (q * q)\na : ℕ := ↑(finProdFinEquiv.symm.toFun t).1 + 1\nb : ℕ := ↑(finProdFinEquiv.symm.toFun t).2 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nf : -1 / 2 + ↑(n K q) * (1 / 2) = (↑(n K q) - 1) / 2\n⊢ house (↑a + ↑b * β') ^ k ≤ ↑(2 * m K).sqrt * (1 + house β')",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L614"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-10T17:49:33+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "a704571d9a4643a61cf20052e9618db7ae591e8e82ef48fdb91ee2d07f27607f"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 618,
        "start_column": 8,
        "end_line": 618,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case calc_2.h.h₁.h₂\nK : Type\ninst✝¹ : Field K\nα' β' γ' : K\ninst✝ : NumberField K\nq : ℕ\nu✝ : Fin (m K * n K q)\nt✝ : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nu : Fin (m K * n K q)\nt : Fin (q * q)\na : ℕ := ↑(finProdFinEquiv.symm.toFun t).1 + 1\nb : ℕ := ↑(finProdFinEquiv.symm.toFun t).2 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nf : -1 / 2 + ↑(n K q) * (1 / 2) = (↑(n K q) - 1) / 2\n⊢ house α' ^ (a * l) ≤ house α' ^ (2 * m K ^ 2)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L618"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-10T17:49:33+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "67965c499b4b59373330846a16df20d64195480f8c26c80ce608472b105e6ebd"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 630,
        "start_column": 8,
        "end_line": 630,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case calc_2.h.h₂\nK : Type\ninst✝¹ : Field K\nα' β' γ' : K\ninst✝ : NumberField K\nq : ℕ\nu✝ : Fin (m K * n K q)\nt✝ : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nu : Fin (m K * n K q)\nt : Fin (q * q)\na : ℕ := ↑(finProdFinEquiv.symm.toFun t).1 + 1\nb : ℕ := ↑(finProdFinEquiv.symm.toFun t).2 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nf : -1 / 2 + ↑(n K q) * (1 / 2) = (↑(n K q) - 1) / 2\n⊢ house γ' ^ (b * l) ≤ house γ' ^ (2 * m K ^ 2)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L630"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-10T17:49:33+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "db6d2f929f6af4f2b8c50c049ca5f35d54807b4d97720f4d36cc1252f9d1fb13"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 910,
        "start_column": 2,
        "end_line": 910,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt✝¹ : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nk : ℕ\nhR : R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t✝¹ = 0\nt✝ : Fin (q * q)\nthis : ∀ (x : ℂ), iteratedDeriv k (fun x => R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t✝ x) x = 0\nderiv_eq :\n  (iteratedDeriv k fun x => R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t✝ x) = fun x =>\n    ∑ t, σ ↑(η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t) * cexp (ρ α β q t * x) * ρ α β q t ^ k\nderiv_eq_0 : iteratedDeriv k (fun x => R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t✝ x) 0 = 0\nt : Fin (q * q)\nht : t ∈ Finset.univ\n⊢ ρ α β q t ^ ↑t✝ = ρ α β q t ^ k",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L910"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-08T00:24:25+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "32ef2d5d59ee033ee4ae5e85f2a0c459839adad81128d7bdfb8ce4e90814ed96"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1170,
        "start_column": 2,
        "end_line": 1170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nhl : l < n K q\nthis✝ :\n  Complex.log α ^ (-↑k) *\n        ∑ t, σ ↑(η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t) * cexp (ρ α β q t * ↑l) * ρ α β q t ^ k =\n      Complex.log α ^ (-↑k) * 0 ↔\n    ∑ t, σ ↑(η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t) * cexp (ρ α β q t * ↑l) * ρ α β q t ^ k = 0\nhMt0✝ :\n  ∀ (x : Fin (m K * n K q)),\n    (let i := x;\n      ∑ i_1,\n        (fun j => (fun i j => ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q j i, ⋯⟩) i j) i_1 * ⋯.choose i_1) =\n      0 x\nhMt0 : ∑ x, ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q x u, ⋯⟩ * ⋯.choose x = 0\nthis :\n  ∑ x, σ (↑(η α β hirr htriv K σ hd α' β' γ' habc q u x hq0 h2mq x) * sys_coeffs K α' β' γ' q x u) = 0 ↔\n    ↑(c_coeffs K α' β' γ' q) *\n        ∑ x, σ (↑(η α β hirr htriv K σ hd α' β' γ' habc q u x hq0 h2mq x) * sys_coeffs K α' β' γ' q x u) =\n      ↑(c_coeffs K α' β' γ' q) * 0\nh0 :\n  ∑ x, ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q x u, ⋯⟩ * ⋯.choose x = 0 ↔\n    (algebraMap (𝓞 K) K) (∑ x, ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q x u, ⋯⟩ * ⋯.choose x) = 0\nh1 :\n  ↑(∑ x, ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q x u, ⋯⟩ * ⋯.choose x) =\n    ∑ x, ↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q x u * ↑(⋯.choose x)\n⊢ ∑ i,\n      ↑(c_coeffs K α' β' γ' q) *\n        σ (↑(η α β hirr htriv K σ hd α' β' γ' habc q u i hq0 h2mq i) * sys_coeffs K α' β' γ' q i u) =\n    ↑(c_coeffs K α' β' γ' q) * 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1170"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "f3d59fe1e180fbf3ecbada3f4f95b59b9ce4ac8e6331f86db48a4321df777b20"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1153,
        "start_column": 92,
        "end_line": 1153,
        "end_column": 97
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nhl : l < n K q\nthis✝ :\n  Complex.log α ^ (-↑k) *\n        ∑ t, σ ↑(η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t) * cexp (ρ α β q t * ↑l) * ρ α β q t ^ k =\n      Complex.log α ^ (-↑k) * 0 ↔\n    ∑ t, σ ↑(η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t) * cexp (ρ α β q t * ↑l) * ρ α β q t ^ k = 0\nhMt0✝ :\n  ∀ (x : Fin (m K * n K q)),\n    (let i := x;\n      ∑ i_1,\n        (fun j => (fun i j => ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q j i, ⋯⟩) i j) i_1 * ⋯.choose i_1) =\n      0 x\nhMt0 : ∑ x, ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q x u, ⋯⟩ * ⋯.choose x = 0\nthis :\n  ∑ x, σ (↑(η α β hirr htriv K σ hd α' β' γ' habc q u x hq0 h2mq x) * sys_coeffs K α' β' γ' q x u) = 0 ↔\n    ↑(c_coeffs K α' β' γ' q) *\n        ∑ x, σ (↑(η α β hirr htriv K σ hd α' β' γ' habc q u x hq0 h2mq x) * sys_coeffs K α' β' γ' q x u) =\n      ↑(c_coeffs K α' β' γ' q) * 0\n⊢ ∑ x, ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q x u, ⋯⟩ * ⋯.choose x = 0 ↔\n    (algebraMap (𝓞 K) K) (∑ x, ⟨↑(c_coeffs K α' β' γ' q) * sys_coeffs K α' β' γ' q x u, ⋯⟩ * ⋯.choose x) = 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1153"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "01cc0c6bbc8f49cfe6b66f37e8ddc4d7d729091767059d7be353e0e1e1a06720"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1335,
        "start_column": 2,
        "end_line": 1335,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\n⊢ ⋯.order ≠ ⊤",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1335"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "36b362a3935c50c79feb58fcdb833b6933ce146939318ca90d093102b329cc7d"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1369,
        "start_column": 4,
        "end_line": 1369,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case hf\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\norder : ∀ k < n K q, iteratedDeriv k R ↑l = 0\nhk : ℕ\n⊢ ∀ (z : ℂ), AnalyticAt ℂ (_root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t) z",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1369"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "a850bbc0594a29c42e906cba30fe52e887b03ade002e9a245010b41445768dee"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1370,
        "start_column": 4,
        "end_line": 1370,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case a\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\norder : ∀ k < n K q, iteratedDeriv k R ↑l = 0\nhk : ℕ\n⊢ ∀ k < n K q, iteratedDeriv k (_root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t) ↑↑u = 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1370"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "80061ab3443b23a955ba8080eaa322ff82a5fa9cf487c43ffe4ba57900933782"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1375,
        "start_column": 15,
        "end_line": 1375,
        "end_column": 20
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\n⊢ let r := r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n  r ≤ n K q",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1375"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T17:54:44+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "5ae6522d73cb96b6582bd791e3136cf983fb93ff0cacfbeef4e1c9e0d399df17"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1388,
        "start_column": 4,
        "end_line": 1388,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refine_3\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\no : ℕ := (order α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq).toNat\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\nthis : (∀ k < n K q, iteratedDeriv k R ↑l = 0) ∧ iteratedDeriv k R ↑l ≠ 0 ↔ AnalyticAt.order ⋯ = ↑(n K q)\n⊢ ∃ l₀, iteratedDeriv r R ↑↑l₀ ≠ 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1388"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "1ffb1ffb9ac2903622ea8d22ee7e1f9063946ff833700204bb3713cd1cadfe45"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1390,
        "start_column": 4,
        "end_line": 1390,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refine_2\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\no : ℕ := (order α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq).toNat\nl : ℕ := ↑(finProdFinEquiv.symm.toFun u).1 + 1\nk : ℕ := ↑(finProdFinEquiv.symm.toFun u).2\n⊢ ⋯.order ≠ ⊤",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1390"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "263103f521125b2e0ef2ecc7803e249d917fd903671940c60318d02afa208679"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1421,
        "start_column": 2,
        "end_line": 1421,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nH :\n  ∑ t,\n      ↑(η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t) *\n        sys_coeffs' α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t u =\n    0\n⊢ False",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1421"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-01T02:10:10+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "de0c0ff69b92477affd5c11adea0937144bc5c25d374cf8fac0dea8d9cd24ed9"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1443,
        "start_column": 2,
        "end_line": 1443,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\n⊢ IsIntegral ℤ\n    (|c₁ K α' β' γ' ^ r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq * c₁ K α' β' γ' ^ (2 * m K * q)| •\n      ∑ t,\n        ↑(η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t) *\n          let a := ↑(finProdFinEquiv.symm.toFun t).1 + 1;\n          let b := ↑(finProdFinEquiv.symm.toFun t).2 + 1;\n          let r := r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n          let l₀ := ↑(finProdFinEquiv.symm.toFun u).1 + 1;\n          (↑a + b • β') ^ r * α' ^ (a * l₀) * γ' ^ (b * l₀))",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1443"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-21T01:11:30+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "b593100b9e1851c41ccce07880a962877d494eab0cd1eb195a619a00e9b5fe13"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1478,
        "start_column": 2,
        "end_line": 1478,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₁ : ℤ := _root_.c₁ K α' β' γ'\nc1ρ : 𝓞 K := _root_.c1ρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\ncρ : ℤ := _root_.cρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nH : (Algebra.norm ℤ) ↑cρ = cρ ^ Module.finrank ℚ K\n⊢ ‖(Algebra.norm ℤ)\n        (RingOfIntegers.restrict\n          (fun x =>\n            ↑(_root_.cρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq) *\n              rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq)\n          ⋯ ℤ)‖ =\n    ↑((Algebra.norm ℤ) ↑cρ) * ↑((Algebra.norm ℤ) ρ)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1478"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-23T18:11:52+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "dd8dc1ff1d36b4941a3d43a9265b21107dc4225282f33092e2d26b45abf113b3"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1520,
        "start_column": 6,
        "end_line": 1520,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case calc_2\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₁ : ℤ := _root_.c₁ K α' β' γ'\nc1ρ : 𝓞 K := _root_.c1ρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\ncρ : ℤ := _root_.cρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nthis : ↑(h K) * ↑r + ↑(h K) * (2 * ↑(m K) * ↑q) = ↑(h K) * ↑r + ↑(h K) * 2 * ↑(m K) * ↑q\n⊢ _root_.c₁ K α' β' γ' ^ (h K * r + h K * 2 * m K * q) < (_root_.c₁ K α' β' γ' ^ (h K * (2 * m K * q))) ^ r",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1520"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "54a1faac48316eeb1f48cb12ed2339a0cb892de7648fdcd223c353e21810738a"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1526,
        "start_column": 8,
        "end_line": 1526,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₁ : ℤ := _root_.c₁ K α' β' γ'\nc1ρ : 𝓞 K := _root_.c1ρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\ncρ : ℤ := _root_.cρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ 1 < (↑|c' K α' * c' K β' * c' K γ'| ^ (↑(h K) * (2 * ↑(m K) * ↑q))) ^ r",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1526"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-23T18:11:52+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "9f9de7c5b728f5e01c3ed3050559aada062f4292bcbd41098141a52c2e1ea933"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1565,
        "start_column": 6,
        "end_line": 1565,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case calc_2.hb\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₁ : ℤ := _root_.c₁ K α' β' γ'\nc1ρ : 𝓞 K := _root_.c1ρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\ncρ : ℤ := _root_.cρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ 0 < ↑c₁ ^ (↑(h K) * (↑r + 2 * ↑(m K) * ↑q))",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1565"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "30c19372c58642202832eb9f851a602ad699d59dd14a467887b50f1d6688f258"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1586,
        "start_column": 4,
        "end_line": 1586,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_3\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₁ : ℤ := _root_.c₁ K α' β' γ'\nc1ρ : 𝓞 K := _root_.c1ρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\ncρ : ℤ := _root_.cρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nthis : (Algebra.norm ℤ) ↑cρ = cρ ^ Module.finrank ℚ K\n⊢ ↑c₁ ^ (-↑(h K) * (↑r + 2 * ↑(m K) * ↑q)) < ↑|(Algebra.norm ℤ) ρ|",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1586"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-13T00:29:22+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "59e661125fb0db0e8b74d286843806bf14469775c5e5236ecfda3bb70855b7f0"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1588,
        "start_column": 2,
        "end_line": 1588,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case calc.step\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₁ : ℤ := _root_.c₁ K α' β' γ'\nc1ρ : 𝓞 K := _root_.c1ρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\ncρ : ℤ := _root_.cρ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ |↑((Algebra.norm ℤ) ρ)| < ‖(Algebra.norm ℚ) ρ‖",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1588"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-13T00:29:22+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "54f92dafbc5b02600153c3bb9c244c4a8eb0d4f684ecde1ae00cbe9e5190f669"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1656,
        "start_column": 8,
        "end_line": 1656,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\na : ℕ := ↑(finProdFinEquiv.symm.toFun t).1 + 1\nb : ℕ := ↑(finProdFinEquiv.symm.toFun t).2 + 1\nl₀ : ℕ := ↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq)\ni : Fin (q * q)\nhi : i ∈ Finset.univ\n⊢ house\n        ((↑(↑(finProdFinEquiv.symm.toFun i).1 + 1) + (↑(finProdFinEquiv.symm.toFun i).2 + 1) • β') ^\n            _root_.r α β hirr htriv K σ hd α' β' γ' habc q u i hq0 h2mq *\n          α' ^ ((↑(finProdFinEquiv.symm.toFun i).1 + 1) * (↑(finProdFinEquiv.symm.toFun u).1 + 1))) *\n      house (γ' ^ ((↑(finProdFinEquiv.symm.toFun i).2 + 1) * (↑(finProdFinEquiv.symm.toFun u).1 + 1))) ≤\n    house (↑a + b • β') ^ r * house α' ^ (a * l₀) * house γ' ^ (b * l₀)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1656"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-14T03:28:14+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "f45a3036ef640fad5c0ec782304aa831f484e829e975941153dc319742582043"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1662,
        "start_column": 4,
        "end_line": 1662,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_5\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\na : ℕ := ↑(finProdFinEquiv.symm.toFun t).1 + 1\nb : ℕ := ↑(finProdFinEquiv.symm.toFun t).2 + 1\nl₀ : ℕ := ↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq)\n⊢ ∑ t,\n      c₄ ^ ↑(n K q) * ↑(n K q) ^ (1 / 2 * (n K q + 1)) *\n        (house (↑a + b • β') ^ r * house α' ^ (a * l₀) * house γ' ^ (b * l₀)) ≤\n    (∑ t, house (sys_coeffs' α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t u)) * ↑↑t *\n          (c₄ ^ ↑(n K q) * ↑(n K q) ^ (1 / 2 * (n K q + 1))) *\n        (c₆ * ↑q) ^ r *\n      c₇ ^ ↑q",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1662"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T17:54:44+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "f76553ac20bef15a4846ed3825e07faaa91bd26d424f08f2caa8fe7e6b651dfb"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1663,
        "start_column": 4,
        "end_line": 1663,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_6\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\na : ℕ := ↑(finProdFinEquiv.symm.toFun t).1 + 1\nb : ℕ := ↑(finProdFinEquiv.symm.toFun t).2 + 1\nl₀ : ℕ := ↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq)\n⊢ (∑ t, house (sys_coeffs' α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t u)) * ↑↑t *\n          (c₄ ^ ↑(n K q) * ↑(n K q) ^ (1 / 2 * (n K q + 1))) *\n        (c₆ * ↑q) ^ r *\n      c₇ ^ ↑q ≤\n    c₈ ^ r * ↑r ^ (r + 3 / 2)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1663"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T17:54:44+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "a0b788c999a838a3b26ff55400dd939b24436f89a6e873377ffb7564471b20a9"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1698,
        "start_column": 8,
        "end_line": 1698,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case hb.ha.h.h\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nz : ℂ\nhz : ‖z‖ < ↑(m K) * (1 + ↑r / ↑q) ∧ ¬z = ↑↑l₀\nx : ℂ\nHX : x = ↑↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq)\n⊢ False",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1698"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "ba5c8f27dacfddf8e2bd443096e403d5ebae5099f4eea55b74820d43cd5bdff7"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1699,
        "start_column": 6,
        "end_line": 1699,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case hb.hb\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nz : ℂ\nhz : z ∈ Metric.ball 0 (↑(m K) * (1 + ↑r / ↑q)) \\ {↑↑l₀}\n⊢ Differentiable ℂ fun y =>\n    ∏ k ∈ Finset.range (m K) \\ {↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq)},\n      ((↑↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq) - ↑k) / (y - ↑k)) ^\n        _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1699"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-16T17:08:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "f647b1aadf7484de5a36f1a44c3a086d7580c872445ec89e587d080a66178a05"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1729,
        "start_column": 10,
        "end_line": 1729,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case hb.ha\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nthis : ↑↑l₀ < ↑(m K)\n⊢ 0 < ↑r",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1729"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-14T00:20:02+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "291be72ce101cb0fbde3200f7a07747f7b3fc27877ef60f47af92cf1c15e5f3c"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1739,
        "start_column": 4,
        "end_line": 1739,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case hc.h.a\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nx : ℂ\nhx : ‖x‖ ≤ ↑(m K) * (1 + ↑r / ↑q)\n⊢ ‖x‖ < ↑(m K) * (1 + ↑(_root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq) / ↑q) ∧\n    ¬x = ↑↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1739"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "f629bd0c5117a0168b69f7b19787c0b8d52b1ed0dc67580b5c9bce5d843f5e9c"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1756,
        "start_column": 4,
        "end_line": 1756,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_1\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\n⊢ σ ρ = Complex.log α ^ (-↑r) * S ↑↑l₀",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1756"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "e8eff87a04a9ce1b7e03d91e2a727cbb046ae9a5731df357f16e49a04d5c0899"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1792,
        "start_column": 6,
        "end_line": 1792,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case calc_2.h.h₁\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nz : ℂ\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nη : Fin (q * q) → 𝓞 K := _root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\ni : Fin (q * q)\nhi : i ∈ Finset.univ\nthis :\n  house ((algebraMap (𝓞 K) K) (_root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq t)) ≤\n    _root_.c₄ K hd α' β' γ' q ^ ↑(n K q) * ↑(n K q) ^ (1 / 2 * (n K q + 1))\n⊢ ‖σ ↑(_root_.η α β hirr htriv K σ hd α' β' γ' habc q u i hq0 h2mq i)‖ ≤\n    _root_.c₄ K hd α' β' γ' q ^ ↑(n K q) * ↑(n K q) ^ (1 / 2 * (n K q + 1))",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1792"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-14T15:36:55+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "b7202115fc58575cc8505cea5217696688c051733c76e2f860028c9dbc16f533"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1809,
        "start_column": 8,
        "end_line": 1809,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case calc_3.h₂.h₂\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nz : ℂ\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nη : Fin (q * q) → 𝓞 K := _root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\n⊢ Real.exp ((↑q + ↑q * ‖β‖) * ↑(m K) * (1 + ↑r / ↑q)) * ‖α‖ ≤ c₉ ^ (r + q)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1809"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-14T17:31:30+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "e64af2cb7a7c7a13e0ea9af2180b60508586b65bec1cd33781f85658e1209e99"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1828,
        "start_column": 16,
        "end_line": 1828,
        "end_column": 21
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nz : ℂ\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nη : Fin (q * q) → 𝓞 K := _root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\n⊢ 0 ≤ ↑r / ↑q",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1828"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-16T17:08:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "3465ac4b4c478f70ad0f87e8475ee0206db6972781f60b1035985bfa80c3e434"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1855,
        "start_column": 16,
        "end_line": 1855,
        "end_column": 21
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nz : ℂ\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nη : Fin (q * q) → 𝓞 K := _root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\n⊢ 0 ≤ ↑r / ↑q",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1855"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-16T17:08:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "2c7f47d6fe018218a90473c768731077887522259a84870d81fefd8078f39850"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1860,
        "start_column": 4,
        "end_line": 1860,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_4\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nz : ℂ\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nη : Fin (q * q) → 𝓞 K := _root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\n⊢ ↑q ^ 2 * (c₄ ^ ↑(n K q) * ↑(n K q) ^ (1 / 2 * (n K q + 1)) * c₉ ^ (r + q)) ≤ c₁₀ ^ r * ↑r ^ (1 / 2 * (r + 3))",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1860"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "a411c3a1fec72bb567c11a1524eb69cbe558f9eade42e99aaf0bb6b2f5e15e98"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1794,
        "start_column": 63,
        "end_line": 1794,
        "end_column": 68
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nz : ℂ\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nη : Fin (q * q) → 𝓞 K := _root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nc₄ : ℝ := _root_.c₄ K hd α' β' γ' q\ni : Fin (q * q)\nhi : i ∈ Finset.univ\n⊢ ∀ (i : Fin (q * q)), ‖cexp (_root_.ρ α β q i * z)‖ ≤ Real.exp ((↑q + ↑q * ‖β‖) * ↑(m K) * (1 + ↑r / ↑q)) * ‖α‖",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1794"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-14T16:59:45+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "2a51d9360783d9c83ab330efefa18ad321397e3dd19e23f593e6ac3d2ac41eff"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1969,
        "start_column": 6,
        "end_line": 1969,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case calc_3.h₂\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nz : ℂ\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : ℕ := ↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq)\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ ‖R z‖ * ‖1 / (z - ↑l₀) ^ r‖ * ‖∏ k ∈ Finset.range (m K) \\ {l₀}, ((↑l₀ - ↑k) / (z - ↑k)) ^ r‖ ≤\n    c₁₀ ^ r * ↑r ^ ((r + 3) / 2) * c₁₁ ^ r * (↑q / ↑r) ^ (m K * r)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1969"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-16T17:08:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "2481f13071e73b61168db2adfa2acfc10ccfca0e48ebbf49c1accb6733b2654b"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1976,
        "start_column": 4,
        "end_line": 1976,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_4\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nz : ℂ\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : ℕ := ↑(_root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq)\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ ↑r.factorial * (c₁₀ ^ r * ↑r ^ ((r + 3) / 2) * c₁₁ ^ r * (↑q / ↑r) ^ (m K * r)) ≤ c₁₂ ^ r * ((3 - ↑(m K)) / 2 + 3 / 2)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1976"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-14T00:20:02+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "bbca8b0b7f95e832e93e677c6565ce6720b9d096f59525d3e71ed1f817291425"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 1988,
        "start_column": 52,
        "end_line": 1988,
        "end_column": 57
      },
      "debug_info": {
        "goal": "γ α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nhα : IsAlgebraic ℚ α\nhβ : IsAlgebraic ℚ β\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nhγ : γ = α ^ β\n⊢ let R := R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t;\n  let r := r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n  let l₀ := l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n  let S := S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n  let ρ := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq;\n  let η := η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n  σ ρ = ↑(2 * Real.pi)⁻¹ * ∮ (z : ℂ) in C(0, ↑(m K) * (1 + ↑r / ↑q)), (z - ↑↑l₀)⁻¹ * S z",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L1988"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "730bab2f7e2072d8cf5a931787957aebf5e59a4d1f5c269e2aa315e847ff61df"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2015,
        "start_column": 4,
        "end_line": 2015,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_3\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nη : Fin (q * q) → 𝓞 K := _root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ ‖(2 * Real.pi)⁻¹‖ * ‖∮ (z : ℂ) in C(0, ↑(m K) * (1 + ↑r / ↑q)), (z - ↑↑l₀)⁻¹ * S z‖ ≤\n    ‖Complex.log α‖ ^ (-↑r) * ↑(m K) * (1 + ↑r / ↑q) * c₁₂ ^ r * ↑r ^ (r * (3 - m K) / 2 + 3 / 2) * ↑q / (↑(m K) * ↑r)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2015"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "cc8dd2f2d23c2086a26ba074594a050e861dc7a67473d07d92b99f49a7422801"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2016,
        "start_column": 4,
        "end_line": 2016,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_4\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nR : ℂ → ℂ := _root_.R α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq t\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nρ : K := rho α β hirr htriv K σ hd α' β' γ' habc q u hq0 h2mq\nη : Fin (q * q) → 𝓞 K := _root_.η α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ ‖Complex.log α‖ ^ (-↑r) * ↑(m K) * (1 + ↑r / ↑q) * c₁₂ ^ r * ↑r ^ (r * (3 - m K) / 2 + 3 / 2) * ↑q / (↑(m K) * ↑r) ≤\n    c₁₃ ^ r * ↑r ^ (r * (3 - m K) / 2 + 3 / 2)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2016"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "fb6642cab17be22cce505e1dace53a366edf4470d3ead1c2658365cced569557"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2031,
        "start_column": 6,
        "end_line": 2031,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ (↑(h K) - 1) * (↑r + 3 / 2) + (3 - ↑(m K)) * ↑r * 1 / 2 + 3 / 2 = -↑r / 2 + 3 * ↑(h K) / 2",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2031"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-14T15:36:55+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "4d910c397b75931816d460000caa0c9dd60192c5e15695b89dfe9b893dfa843e"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2036,
        "start_column": 4,
        "end_line": 2036,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_1\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nthis : (↑(h K) - 1) * (↑r + 3 / 2) + (3 - ↑(m K)) * ↑r * 1 / 2 + 3 / 2 = -↑r / 2 + 3 * ↑(h K) / 2\n⊢ ↑((Algebra.norm ℚ) ρ) ≤ c₁₄ ^ r * ↑r ^ ((h K - 1) * (r + 3 / 2) + (3 - m K) * r * 1 / 2 + 3 / 2)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2036"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "885b3b7e6246c31c2d3b48ff7559ca8893f3eb38303373b0b04733167307eed0"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2038,
        "start_column": 4,
        "end_line": 2038,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_2\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nthis : (↑(h K) - 1) * (↑r + 3 / 2) + (3 - ↑(m K)) * ↑r * 1 / 2 + 3 / 2 = -↑r / 2 + 3 * ↑(h K) / 2\n⊢ c₁₄ ^ r * ↑r ^ ((h K - 1) * (r + 3 / 2) + (3 - m K) * r * 1 / 2 + 3 / 2) =\n    c₁₄ ^ r * ↑r ^ ((↑(h K) - 1) * (↑r + 3 / 2) + (3 - ↑(m K)) * ↑r * 1 / 2 + 3 / 2)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2038"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-23T18:11:52+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "df6868359a5e390049436aa0c0e0cc2191a8161356534e10e0da7193aace38ac"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2047,
        "start_column": 2,
        "end_line": 2047,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h.left\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\n⊢ r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq ≥ n K q",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2047"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-13T00:29:22+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "136683fe6640e0431e0e6d7ee16913a93593e676af553f8c7cf06f354df25545"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2049,
        "start_column": 2,
        "end_line": 2049,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h.right\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\n⊢ ↑(r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq) ^\n      ((r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq - 3 * h K) / 2) ≥\n    c₁₅ K α' β' γ' q ^ r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2049"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-08T02:58:34+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "79f5fc4859edfd3e96dcb24a0859844733ce4323c76f61facda4d02bb9f6655c"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2062,
        "start_column": 4,
        "end_line": 2062,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case calc_1\nα β : ℂ\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhtriv : α ≠ 0 ∧ α ≠ 1\nK : Type\ninst✝¹ : Field K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\ninst✝ : NumberField K\nq : ℕ\nu : Fin (m K * n K q)\nt : Fin (q * q)\nhq0 : 0 < q\nh2mq : 2 * m K ∣ q ^ 2\nr : ℕ := _root_.r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nl₀ : Fin (m K) := _root_.l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\nS : ℂ → ℂ := _root_.S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq\n⊢ ↑r ^ (r / 2 - 3 * h K / 2) < c₁₄ ^ r * c₅ K α' β' γ' q ^ r",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2062"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "4bb5e9e9d181535b0b3f59de7f571517026ac5c88fec800c6398994a027c53bf"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "e6ee3438876611142fd0c7aa2dc6abce306726d0",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 2077,
        "start_column": 2,
        "end_line": 2077,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro.intro.intro.intro\nα β : ℂ\nhα : IsAlgebraic ℚ α\nhβ : IsAlgebraic ℚ β\nhtriv : α ≠ 0 ∧ α ≠ 1\nhirr : ∀ (i j : ℤ), β ≠ ↑i / ↑j\nhγ : IsAlgebraic ℚ (α ^ β)\nK : Type\nhK : Field K\nhNK : NumberField K\nσ : K →+* ℂ\nhd : DecidableEq (K →+* ℂ)\nα' β' γ' : K\nhabc : α = σ α' ∧ β = σ β' ∧ α ^ β = σ γ'\nmain :\n  ∀ (q : ℕ),\n    Fin (m K * n K q) →\n      Fin (q * q) → 0 < q → 2 * m K ∣ q ^ 2 → ∃ r ≥ n K q, ↑r ^ ((r - 3 * h K) / 2) ≥ c₁₅ K α' β' γ' q ^ r\nuse5 :\n  ∀ (q : ℕ) (u : Fin (m K * n K q)) (t : Fin (q * q)) (hq0 : 0 < q) (h2mq : 2 * m K ∣ q ^ 2),\n    let r := r α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n    let l₀ := l₀ α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n    let S := S α β hirr htriv K σ hd α' β' γ' habc q u t hq0 h2mq;\n    ↑r ^ (r / 2 - 3 * h K / 2) < c₁₅ K α' β' γ' q ^ r\n⊢ False",
        "url": "https://github.com/leanprover-community/mathlib4/blob/e6ee3438876611142fd0c7aa2dc6abce306726d0/Mathlib/NumberTheory/h7.lean#L2077"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-09T15:43:20+02:00",
        "inclusion_date": "2025-04-26T04:57:18.210582+00:00"
      },
      "id": "9b03a2bd21fccca8c157ae1bf1f4e126ab60462d675743af7183b4bbdefb7395"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "1db97af9ae87a0ecc0c4a983c990e3739d91abd8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Duper/Tests/lastAsylum.lean",
        "start_line": 35,
        "start_column": 13,
        "end_line": 35,
        "end_column": 18
      },
      "debug_info": {
        "goal": "ax1 : ∀ (x : Inhab), Peculiar x ↔ (Sane x ↔ ¬Doctor x)\nax2 : ∀ (x : Inhab), Special x ↔ ∀ (y : Inhab), ¬Doctor y ↔ (Sane y ↔ Peculiar x)\nax3 : ∀ (x y : Inhab), (Sane x ↔ Special y) → (Sane (bf x) ↔ ¬Doctor y)\nax4 : Sane Tarr ↔ ∀ (x : Inhab), Doctor x → Sane x\nax5 : Sane Fether ↔ ∀ (x : Inhab), ¬Doctor x → ¬Sane x\nax6 : Sane Fether ↔ Sane Tarr\n⊢ False",
        "url": "https://github.com/leanprover-community/duper/blob/1db97af9ae87a0ecc0c4a983c990e3739d91abd8/Duper/Tests/lastAsylum.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "d9c480704efb",
        "blame_date": "2022-08-01T22:37:02-04:00",
        "inclusion_date": "2025-04-26T05:12:08.867020+00:00"
      },
      "id": "71dbc6ccc12dc8a34b742b1c4ebe91ecf5c6993713cc48d837bcfe30afc65c06"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "1db97af9ae87a0ecc0c4a983c990e3739d91abd8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Duper/Tests/test_continuity.lean",
        "start_line": 18,
        "start_column": 50,
        "end_line": 18,
        "end_column": 55
      },
      "debug_info": {
        "goal": "a : Real\n⊢ dist a a = zero",
        "url": "https://github.com/leanprover-community/duper/blob/1db97af9ae87a0ecc0c4a983c990e3739d91abd8/Duper/Tests/test_continuity.lean#L18"
      },
      "metadata": {
        "blame_email_hash": "4ac7eab8a488",
        "blame_date": "2023-06-05T10:39:00+02:00",
        "inclusion_date": "2025-04-26T05:12:08.867020+00:00"
      },
      "id": "96ec49e5a8a0352d9d633fa1e81a279b194d105c9f45a1d589548603b962d721"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "1db97af9ae87a0ecc0c4a983c990e3739d91abd8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Duper/Tests/test_continuity.lean",
        "start_line": 20,
        "start_column": 48,
        "end_line": 20,
        "end_column": 53
      },
      "debug_info": {
        "goal": "a : Real\n⊢ lt zero one",
        "url": "https://github.com/leanprover-community/duper/blob/1db97af9ae87a0ecc0c4a983c990e3739d91abd8/Duper/Tests/test_continuity.lean#L20"
      },
      "metadata": {
        "blame_email_hash": "4ac7eab8a488",
        "blame_date": "2023-06-05T10:39:00+02:00",
        "inclusion_date": "2025-04-26T05:12:08.867020+00:00"
      },
      "id": "07ee0f8c898fb80f179672600fc7e540646ff51cba51c37e2d48f449fde8b869"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "44392645bc64e975d33fbf84437c7843de0c319a",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lintsimp.lean",
        "start_line": 37,
        "start_column": 64,
        "end_line": 37,
        "end_column": 69
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝ : Mul α\na x y : αᵐᵒᵖ\n⊢ SemiconjBy a.unop y.unop x.unop ↔ SemiconjBy a x y",
        "url": "https://github.com/leanprover-community/batteries/blob/44392645bc64e975d33fbf84437c7843de0c319a/BatteriesTest/lintsimp.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "8a7dcd08b95f",
        "blame_date": "2022-12-18T15:51:52-05:00",
        "inclusion_date": "2025-04-26T05:23:21.184065+00:00"
      },
      "id": "5ade695a80a547212563f77f22a1dd3b25e60203f0025638cd2899a15cd03531"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "44392645bc64e975d33fbf84437c7843de0c319a",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lintunused.lean",
        "start_line": 7,
        "start_column": 2,
        "end_line": 7,
        "end_column": 7
      },
      "debug_info": {
        "goal": "h : 1 = 1\n⊢ True",
        "url": "https://github.com/leanprover-community/batteries/blob/44392645bc64e975d33fbf84437c7843de0c319a/BatteriesTest/lintunused.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-08T02:17:31+02:00",
        "inclusion_date": "2025-04-26T05:23:21.184065+00:00"
      },
      "id": "9ef6df387a1b64d8b95d35751bc080b40743adfd0881b0e2eadc7d4334e0c4bb"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "44392645bc64e975d33fbf84437c7843de0c319a",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 23,
        "start_column": 2,
        "end_line": 24,
        "end_column": 5
      },
      "debug_info": {
        "goal": "⊢ 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/44392645bc64e975d33fbf84437c7843de0c319a/BatteriesTest/lint_unreachableTactic.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-26T05:23:21.184065+00:00"
      },
      "id": "add30842965434c9cf2f68e3e775fd8bb0dd46a4c7092e371486b0ed53eba23a"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "44392645bc64e975d33fbf84437c7843de0c319a",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 31,
        "start_column": 33,
        "end_line": 31,
        "end_column": 38
      },
      "debug_info": {
        "goal": "aa : Nat\n⊢ aa = 0 → t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/44392645bc64e975d33fbf84437c7843de0c319a/BatteriesTest/lint_unreachableTactic.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-26T05:23:21.184065+00:00"
      },
      "id": "9d769dcf1cd0d6411fd5e52aa79b6a479a584b90545741d3a2779b5de99a28cc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 60,
        "start_column": 9,
        "end_line": 60,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\n⊢ ∀ (i : ιₛᵢ ⊕ Unit),\n    (OStatement ⊕ᵥ fun x => WitEquiv) i =\n      match (⋯.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Components.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "ee7a6ef04b3c3e3742cf86c027b90b02bfba1a9e32a2e3a43ef27fb0d9f960f8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 78,
        "start_column": 2,
        "end_line": 78,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝² : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝¹ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\nrelIn : Statement × ((i : ιₛᵢ) → OStatement i) → Witness → Prop\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Components.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "c0e0ce1952af5ab0b0e300b8bcb1417c8c205917dff7bb791cc92ed7baef283d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 138,
        "start_column": 9,
        "end_line": 138,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝¹ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\n⊢ ∀ (i : ιₛᵢ ⊕ ιₛᵢ),\n    (OStatement ⊕ᵥ OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Components.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "d8a469d3ecc818920f3ff2b07df8908ad830789d5beff8e92ab3db67ad86b71f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝² : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Components.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "a356f8129337d91390dd43bbd6ba80f7554b787de0f39aa7a5672c166537c74f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 255,
        "start_column": 2,
        "end_line": 255,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nOStatement : Type\ninst✝² : ToOracle OStatement\ninst✝¹ : VCVCompatible (Query OStatement)\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Components.lean#L255"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "bf7d77dcc1d2c46b10b14ecce49fd3858cc9baeb4be067c33c3037a52a2cc7e7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let a ← (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ← Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "abb2dac42dba71412b6a49ef09d578888aae1cf3a53ad042c3b0502717da73fe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst✝ : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let __discr ←\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => a.1)) <$>\n            (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++ₒ [pSpec.Challenge]ₒ)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ←\n      (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | ⟨0, isLt⟩ => __discr.1).liftComp\n        (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "3f73d1be5ad4312b2f732b6507270c471f47b559824f76f8cc23edd224389713"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ (do\n      let _ ← liftM (query 0 ())\n      (fun a => (0, ↑a)) <$> liftM (query 1 ())) =\n    do\n    let y ← liftM (query 1 ())\n    (fun a => (0, ↑y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "3df8c03319bf2ce473162b27aa6f8a0260215f3209658a454b962a7a4a88df49"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n⊢ (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a)))) none =\n    ∑' (a : Fin 2), 2⁻¹ * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a_1 => (0, ↑a)))) none",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "38a0ea8210b899d739ec72c9de199a545b1329aaa3b1dc1d279b21c7a45a5e33"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : ℕ\n⊢ (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a => (0, ↑y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "2b05534b3291dcb8693faea1038652cc5d0884f1e2ce4c6709d9eb84c3e3a461"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : ℕ) → unifSpec.domain i → Fin (i + 1)\n⊢ (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun x => (fun a => (0, ↑a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun y => (fun a => (0, ↑y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "6a15b39274bbc81e0618b8e0dd6f8bcf7a44a36c9019a0b2c9714b8a17ab4abe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/ToOracle.lean",
        "start_line": 299,
        "start_column": 2,
        "end_line": 299,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝⁵ : CommRing R\nd : ℕ\ninst✝⁴ : Fintype R\ninst✝³ : DecidableEq R\ninst✝² : IsDomain R\nσ : Type\ninst✝¹ : Fintype σ\ninst✝ : DecidableEq σ\na : R[X σ]\nha : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s a = 0 → ∀ (i : σ), s i ≤ d\nb : R[X σ]\nhb : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s b = 0 → ∀ (i : σ), s i ≤ d\nhNe : ¬a = b\n⊢ {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card ≤ Fintype.card σ * d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/ToOracle.lean#L299"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "f5a9acba663b311e55cabcaf16fa43cdba6617243caec711247243d46bd0827a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/ToOracle.lean",
        "start_line": 338,
        "start_column": 2,
        "end_line": 338,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nR : Type\ninst✝ : CommSemiring R\nm : ℕ\nD : Fin m ↪ R\np : R[X]\n⊢ ∃ x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {α} =>\n          (statelessOracle spec [fun x => R[X]]ₒ fun i q => oracle p q).impl) =\n        pure x ∧\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/ToOracle.lean#L338"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "72da40d3c12a2ab200de5f49ac05a11885de97056ad102cb28c5b27479d42b4d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).1.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "8730e303bf77920c29cc3500628f95fd9d55c3153c999aec8bb4b3514980aebc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).2.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "1e522986f00049ace6a6ce80b06b991a71d3079a9d0a06f8096a493aeb3cb617"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pEven ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "157bf3f8cb478c46c38adb4ab4b2ec3e5a2356053a7ca3a6da4e4729f9d24d95"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pOdd ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "724acb4507dadca2c6414fe27dbfe98b2cd7bced184e702e2819b36af33e959d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\nα : Type\ninst✝² : DecidableEq α\ninst✝¹ : Inhabited α\ninst✝ : Fintype α\nhash : α × α → α\nn : ℕ\nih :\n  ∀ (leaves : List.Vector α (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function α hash)\n        (do\n          let cache ← buildMerkleTree α n leaves\n          let proof : List.Vector α n := generateProof α i cache\n          verifyProof α i leaves[i] (getRoot α cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector α (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n⊢ ((((Option.elimM (OptionT.run (buildMerkleTree α (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run ∘ fun cache =>\n                verifyProof α i (leaves.get i) (getRoot α cache) (generateProof α i cache))).mapM\n          fun {α_1} q =>\n          match α_1, q with\n          | .((spec α).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "63d509ca5f989a3990e47f837bb25e8d39016a65b39e3e63b63ca6502bce9c9d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\n⊢ ‖C‖₀' ≠ ⊤",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "104308c943b9a156feeba4453339d45803b885ee200e5953e7d1ebdfa3868a6b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\nthis : ‖C‖₀' ≠ ⊤\n⊢ ENat.toNat (Finset.image (fun x => Δ₀(↑x.1, ↑x.2)) {p | ¬p.1 = p.2}).min =\n    sInf {d | ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d}",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "80e1cd256be22eabcf7bb25487aae516ed90bf85dfc28d316016a0ec5e77b05f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₁.intro.intro.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nv : n → R\nhv : v ∈ C\nhuv : ¬u = v\nhDist : Δ₀(u, v) ≤ d\n⊢ ∃ u ∈ C, ¬u = 0 ∧ ‖u‖₀ ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "79e55903fedf29e17e0960fd0284fea3cd691ac8fb88486090e3436978bd3548"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₂.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nhNorm : ¬u = 0\nhDist : ‖u‖₀ ≤ d\n⊢ ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "00bceb255e37054ce6dc3fa0a2c1abdbb94074f18c6aec56b7b11dc1b69de2af"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 269,
        "start_column": 67,
        "end_line": 269,
        "end_column": 72
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : Finite R\nC : Set (n → R)\n⊢ card ↑C ≤ card R ^ (card n - ‖C‖₀ + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/CodingTheory/Basic.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "3a66dbc70de45a1e3dc1d36c414ab6adfad528be4a4ba0db01db72b3bba60619"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 275,
        "start_column": 65,
        "end_line": 275,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝³ : Fintype n\nR : Type u_2\ninst✝² : DecidableEq R\ninst✝¹ : Finite R\ninst✝ : DivisionRing R\nC : Submodule R (n → R)\n⊢ Module.finrank R ↥C ≤ card n - ‖C.carrier‖₀ + 1",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/CodingTheory/Basic.lean#L275"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "33498f35a6cb431e37ee098b72b0c71a2fb85f1cc8a2365959d7aa8c5bd7f7ca"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "8a3e6db75a8dd90c1195bf946931c90b92aa3b13dd1f85a171dea59b7a8ba347"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "f8d5b5ca2ee6cc429c5c540220702da6ca37a09fc4db3e0c88c876e37103fb9c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\np q : MlPoly R n\n⊢ (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "5d5e2c5c73c8ba836c9e52f14c8aa328718edb0633f4617bb9369413b9f07937"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : CommSemiring R\nn : ℕ\nS : Type u_2\ninst✝ : CommSemiring S\nf : R →+* S\np : MlPoly R n\nx : Vector S n\n⊢ p.eval₂ f x = MvPolynomial.eval₂ f x.get ↑p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "9dcc0025be0473112d1945295b4731988bb0f3cc151e1d25414e64b0e8a12259"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "196350f435b83d7728e272fe3b5e1889e75508fe74edd0ea0bbd83981ef00d97"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ (cons a b).get ⬝ᵥ (cons c d).get = a * c + b.get ⬝ᵥ d.get",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "65d21a25cdd74d07020c4fa59d73bb637b909dd23b602c6a95b6e6c8d230274c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "f54d5477ecd1ef4cda2553353636bf5b7aaca0f109def68f8b2c595a99a33e7f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "d79c9b98893f7e982d8efcf77a7669aef278cac6927c24d1306121285b5a3cb2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "f65dddf0aaf789bdd70fc0640c33560a6a30436b0362fb73b7239b376688a6d3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "5cdc07be84f7918300e020ffd6cd5d15d199d691b6580612e9e1fa15e65fb37a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (n_1 : ℕ) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "72f92a10e7cc84a55791a4e988c138e1fb4393b0c8c94cb1f01a38d69166c7f9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "595682b7a962841d54b201129791050e912dfce4958a5bb568d718560e8870e6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (b : MlPoly R n), 1 • b = b",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "47bba31814a644763d27dac4a7dd19963f677e84f91b377b10d9917df9f0e119"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (x : MlPoly R n), 0 • x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "ea0164cf7315b35adedb0873a3c9b28a0e9ef480caf98f843f7c37074f61290c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 374,
        "start_column": 43,
        "end_line": 374,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : ℕ\nα : Fin n → Sort u\nl : List ℕ\nn' : ℕ\nl' : List ℕ\nmotive : Fin (n' :: l').sum → Sort u_1\ncases : (n : ℕ) → (h : n ∈ n' :: l') → (i : Fin n) → motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : ¬↑i < n'\n⊢ ↑i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Fin.lean#L374"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T14:25:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "2e1c049cf9c862e1af6a8e6ecda9e3db27a70a2f80c7439122b1194f0c7c2bb7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 402,
        "start_column": 16,
        "end_line": 402,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case ind\nn✝ n : ℕ\nIH : ∀ m < n, ∀ {a : Fin m → ℕ}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n → ℕ\n⊢ (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Fin.lean#L402"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "8b4a9f076efcd4f2d654f52cd655032360cedf0f32b1953170f4ca74e14ef4be"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 497,
        "start_column": 32,
        "end_line": 497,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Fin.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "1426bbfe62ec8c6c5b65e8606a0a8366990b09dc96b540651aac1096f8c01138"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 499,
        "start_column": 35,
        "end_line": 499,
        "end_column": 40
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Fin.lean#L499"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "5d6129224bac548d71b735f0d54711928326203d37a4795ab753e1792dfd5c65"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 501,
        "start_column": 36,
        "end_line": 501,
        "end_column": 41
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Fin.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "27a9e1445089185d07adc5df3b9fe421b41866f7d70cd70dad992fb0b29a209e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 557,
        "start_column": 4,
        "end_line": 557,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List ℕ\nj a : ℕ\nl' : List ℕ\nh : j < a + l'.sum\n⊢ ∃ n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Fin.lean#L557"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "a8681fd70018c2f6b56dd09c379b138e257e294ed171c4f8022ebf0546b8c1b2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 569,
        "start_column": 80,
        "end_line": 569,
        "end_column": 85
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝² : AddMonoid α\ninst✝¹ : Preorder α\ninst✝ : DecidableRel fun x1 x2 => x1 < x2\nl : List ℕ\nj : Fin l.sum\n⊢ l.findSumIdx ↑j < l.length",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Fin.lean#L569"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "b84cc78f985b69a23afea996fd81315de1e56fa36a08f6b4a8f9b8d30d77ddd8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Operations.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nunit : α\nl l' : List α\nm n n' : ℕ\nh : n ≤ m\nh' : n' ≤ m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n ⊔ l.length = n' ⊔ l'.length\n⊢ l ++ replicate (n - l.length + (m - n' ⊔ l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' ⊔ l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Operations.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "17cf91d088ec58d4000bbbea8b981fe4f92e9a1d5ce5d5fa7a26d48b200d7364"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Operations.lean",
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10
      },
      "debug_info": {
        "goal": "α : Type u_1\nl₁ l₂ : List α\nunit : α\n⊢ (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l₁.matchSize l₂ unit) ↔\n    ∀ (i : ℕ), l₁.getD i unit = l₂.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Operations.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "e538b4d4042fa368dd47e51d75cb8a9ba4b3484c6ab1e3a36f9e3f443c710209"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Operations.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\na : Array α\nn : ℕ\nunit : α\ni : ℕ\nh✝ : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n⊢ { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Operations.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "0c4b575b2deda5c2bed5d079e724b689e1200ab00ba46fbff7a816f290897a49"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Operations.lean",
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80
      },
      "debug_info": {
        "goal": "α : Type u_1\np : α → Bool\nas : Array α\nh : (popWhile p as).size > 0\n⊢ ¬p ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/Math/Operations.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "0d875588a9fc1adb2961c6a053215e6c41d500ff8875203c5aaeae034ca10376"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nσ : Type u_3\nσ₁ : Type u_4\nσ₂ : Type u_5\nx : σ₁ → R\nf : σ → σ₁ ⊕ σ₂\np : R[X σ]\nb : σ₁ →₀ ℕ\nh : ¬coeff b ((sumToIter R σ₁ σ₂) ((rename f) p)) = 0\n⊢ (coeff b ((sumToIter R σ₁ σ₂) ((rename f) p))).degrees ≤ Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "60658b33e3b126e35f466de67bec1387c124edb4a7bd1d26e896829fb382d68e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\nh : n > 0\nD : Fin (n - 1) → Finset R\np : R[X Fin n]\n⊢ ((sumExceptFirst' n h D) p).degree ≤ ↑(degreeOf ⟨0, h⟩ p)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "9c8937e4daebe8b930eae7155705b166db628c53996f205d566b2f76f32737d0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝⁴ : DecidableEq σ\ninst✝³ : Fintype σ\nR : Type u_2\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : DecidableEq R\np : R[X σ]\nhp : p ≠ 0\nS : σ → Finset R\n⊢ ↑(#({x ∈ p.vars.pi S | (eval (extendDomain x)) p = 0})) / ∏ i ∈ p.vars, ↑(#(S i)) ≤\n    ∑ i ∈ p.vars, ↑(degreeOf i p) / ↑(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "53bac932b6961f7fb46ae0f36a6501377f29c22e85969a6f2047b87fe977b49d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝³ : DecidableEq σ\ninst✝² : Fintype σ\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\np q : R[X σ]\nS : σ → Finset R\nhDegree : ∀ (i : σ), degreeOf i p < #(S i)\nhEval : ∀ x ∈ piFinset fun i => S i, (eval x) p = (eval x) q\n⊢ p = q",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "8c7fbf7089b6b9592de4f11d0023a088666bb0ba335281dfa97246fa98392c5a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 95,
        "start_column": 16,
        "end_line": 95,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case succ\nk : ℕ\na✝ : k > 0 → AdjoinRoot (poly k) = Field k\nk_pos : k + 1 > 0\n⊢ AdjoinRoot (poly (k + 1)) = Field (k + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/BinaryTowerField/Basic.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-30T10:53:02+05:30",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "d5db8dc748ba38c2fd36c5e6fe55d8e86428c53efb6d13163ca54a1962a649d2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 115,
        "start_column": 59,
        "end_line": 115,
        "end_column": 64
      },
      "debug_info": {
        "goal": "n : ℕ\n⊢ Irreducible (poly n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/BinaryTowerField/Basic.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2024-06-18T17:58:42-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "9ec36cc4d4812204c86a972e2233b1e38ff246254e6637ce650e5ed764ab7ffa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic-old.lean",
        "start_line": 197,
        "start_column": 21,
        "end_line": 197,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.LeftInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic-old.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "4630fff236580478efebe53754b7d7931aca05217e8bdd882d7164181bafaa44"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic-old.lean",
        "start_line": 198,
        "start_column": 22,
        "end_line": 198,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic-old.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "cbb0208468391cf0898142fd547d6a94e0ab351d2a2572e742a905a6d50bce98"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic-old.lean",
        "start_line": 199,
        "start_column": 21,
        "end_line": 199,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x *\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic-old.lean#L199"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "4a683ae311e8fa8d0aca484e01254f15ab2d1a0849a0bb5093ba37e91c2424e1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic-old.lean",
        "start_line": 200,
        "start_column": 21,
        "end_line": 200,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x +\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic-old.lean#L200"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "0a5b475f559cc7171059557da07b7df40093a2788c90f6276f91e1f8309b9a21"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q : UniPoly Q\ni : ℕ\nhi : i < Array.size (p.add_raw q)\n⊢ (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "c2a602c7b84ad2f8aa67451bf9bf906d385512fa7165dcffb309bf0999eec09d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n⊢ p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "abbf55c8a49a25c6ceface580ce67ad68a7d1886eef1b75f674658b27c136d10"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : Ring R\ninst✝ : BEq R\np : UniPoly R\n⊢ (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) ∈ TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "35651742d070c900e65a5b20442b9fc5f23c1b813315bf03ab62209c9547f2b7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "bf2ff56a7a265f057cf515cf61f3ef2deb1e1c911807905f1e65ff80ae007aad"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "7c30af018a425e43cefda4a538af321f74b33af613e9eab15ec72bfd8a359eb2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "441b7d5cd64e206b2873e98bb86a164ed553e48f061f299921820a9e81c860bd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 254,
        "start_column": 2,
        "end_line": 254,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h\nm n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nT : pSpec₁.FullTranscript\nT' : pSpec₂.FullTranscript\ni : Fin m\n⊢ _root_.cast ⋯ (T i) = (⋯ ▸ T) i",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Sequential.lean#L254"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T12:49:22-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "2155e952940cb186e4290db151bedce49422aa26e675e062554d9e885bbfa11c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 556,
        "start_column": 55,
        "end_line": 556,
        "end_column": 60
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\n⊢ (compose 0 (fun x => n) fun x => pSpec) = pSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Sequential.lean#L556"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T18:57:31+07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "62be57544c82a920e489fb03e1f85fe8d8eb732d4753782ee5c77ef4dbd595f5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 572,
        "start_column": 2,
        "end_line": 572,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ni : Fin m\n⊢ compose (↑i + 1) (Fin.take (↑i + 2) ⋯ n) (Fin.take (↑i + 2) ⋯ pSpec) =\n    cast ⋯ (compose (↑i) (Fin.take (↑i + 1) ⋯ n) (Fin.take (↑i + 1) ⋯ pSpec) ++ₚ pSpec i.succ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Sequential.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "3d942936791ddc13d67da45d7be2e664706c6c170c27b744aea9c4663c0e4201"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 699,
        "start_column": 2,
        "end_line": 699,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nOₘ₁ : (i : pSpec₁.MessageIndex) → ToOracle (pSpec₁.Message i)\nOₘ₂ : (i : pSpec₂.MessageIndex) → ToOracle (pSpec₂.Message i)\ninst✝² : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝¹ : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\ninst✝ : oSpec.DecidableEq\nP₁ : Prover pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nP₂ : Prover pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\nstmt : Stmt₁\nwit : Wit₁\n⊢ run stmt wit (P₁.append P₂) = do\n    let __discr ← liftM (run stmt wit P₁)\n    match __discr with\n      | (stmt₂, wit₂, transcript₁) => do\n        let __discr ← liftM (run stmt₂ wit₂ P₂)\n        match __discr with\n          | (stmt₃, wit₃, transcript₂) => pure (stmt₃, wit₃, transcript₁ ++ₜ transcript₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Sequential.lean#L699"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "f562f257cb05d22e066ee58c22d8194d0e1030471457c290919d820257c430a8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 725,
        "start_column": 89,
        "end_line": 725,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : ℕ\nι : Type\ninst✝⁴ : DecidableEq ι\noSpec : OracleSpec ι\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\ninst✝³ : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝² : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nrel₁ : Stmt₁ → Wit₁ → Prop\nrel₂ : Stmt₂ → Wit₂ → Prop\nrel₃ : Stmt₃ → Wit₃ → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR₁ : Reduction pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nR₂ : Reduction pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\ncompletenessError₁ completenessError₂ : ℝ≥0\nh₁ : completeness rel₁ rel₂ R₁ completenessError₁\nh₂ : completeness rel₂ rel₃ R₂ completenessError₂\n⊢ completeness rel₁ rel₃ (R₁.append R₂) (completenessError₁ + completenessError₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Sequential.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "1004974be1183bd8265d5220b57d77f6180d16e154b97992fa9c1e51fec76b07"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 752,
        "start_column": 38,
        "end_line": 752,
        "end_column": 43
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nm : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ninst✝² : (i : Fin (m + 1)) → (j : (pSpec i).ChallengeIndex) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 2) → Type\nrel : (i : Fin (m + 2)) → Stmt i → Wit i → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR : (i : Fin (m + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1) → ℝ≥0\nh : ∀ (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n⊢ completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (∑ i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Sequential.lean#L752"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "768ca92eb9e4172b40ae1129326a420f8108734f07614bbb5a4dce09f511a3e1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2.1).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2 a)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "d40d282e5c3d28225e52a33823aae845a0d29b4c13d3fe902fe29de422a137fc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "171dc3b67bed40a1c24a2f76793a897e8654468642b9b732169b6a8ad60f1ea5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let __discr ← Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "609c95fb1c048c04e8db5387b88f6625c2dfd51ff13f49a0029b1fc07ffb8cb0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\ncompletenessError : ℝ≥0\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn →\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run stmtIn witIn R] ≥\n        1 - ↑completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] ≥\n    1 - ↑completenessError\nx✝ : (StmtOut' × WitOut') × StmtOut' × pSpec.FullTranscript\na✝ : x✝ ∈ (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x✝.2.1 x✝.1.2 ∧ x✝.1.1 = x✝.2.1\n⊢ ((fun x => relOut x.2.1 x.1.2 ∧ x.1.1 = x.2.1) ∘ fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x✝",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "3ea0c7b0ea302d3b829c1f6933cc87597dfc39085a87f7b17e9e69142eb3ae90"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : ℝ≥0\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  ∀ (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    ∀ stmtIn ∉ langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut ∉ langOut'|run stmtIn witIn { prover := prover, verifier := V }] ≤\n        ↑soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn ∉ langIn\n⊢ [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut ∉\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] ≤\n    ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "761edd6e0a68ca2ce09a2f1cd57a886230cb992c899872dfe1b76a35ce99b5a5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\nsoundnessError : ℝ≥0\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          ¬relIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) ∧\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] ≤\n      ↑soundnessError\n⊢ ∃ extractor,\n    ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            ¬relIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) ∧\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] ≤\n        ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "14a810e1fb001539b0126e537cb73f2efe0eba348dbdcafe655e9d85135c2045"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x✝³ : StmtIn\nx✝² : Unit\nx✝¹ : StmtOut'\nx✝ : Unit\np q : ℤ[X]\nt : ℤ\nf : ℤ[X]\nt' r : ℤ\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n⊢ eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "a890ee7cc6a0518c0f1acb098450837453636480261b251dba8bc6f6bb358b13"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 361,
        "start_column": 2,
        "end_line": 361,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : ℝ≥0\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        ¬relIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) ∧\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] ≤\n      ↑knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : ∀ (x : WitIn), ¬relIn stmtIn x\n⊢ [fun x => ∀ (x_1 : WitOut), ¬relOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] ≤\n    ↑knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Security/Basic.lean#L361"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "18a5aa09c077ceb21f23771666e73171719720800f6946094c7bbeba23d24f47"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn StmtOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction langIn langOut verifier\nrbrSoundnessError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrSoundness langIn langOut verifier stateFunction rbrSoundnessError →\n    soundness langIn langOut verifier (∑ i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Security/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "796f3786af189ab478ca46f2b6dc48d0e1a14f15f339f503ca22dd6bc5642baf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 393,
        "start_column": 2,
        "end_line": 393,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier stateFunction rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Security/Basic.lean#L393"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "c77542e9d4401d17a602e417b812872ccade67529e8dabcd5f95f62ed08ed4e2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 403,
        "start_column": 82,
        "end_line": 403,
        "end_column": 87
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    knowledgeSoundness relIn relOut verifier (∑ i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/OracleReduction/Security/Basic.lean#L403"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "79103de7308e2c5f279171004fc1d08a9936b9981f95b5639df30852e15f5015"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 496,
        "start_column": 2,
        "end_line": 496,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\ninst✝ : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, ↥R⦃≤ ↑deg⦄[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : ↑(transcript 0) ∈ R⦃≤ ↑deg⦄[X]\nhEq : transcript 0 = ⟨↑(transcript 0), hp_i⟩\n⊢ (do\n      let a ←\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run ∘ fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (transcript 1)))).mapM\n            fun {α} => (ToOracle.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) ↑(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if ∑ x, Polynomial.eval (D x) ↑(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Sumcheck/Basic.lean#L496"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "906bcf286c160cd131a18f29b617b7bb3dc3d820912b07f352fa3d00289965a5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 514,
        "start_column": 57,
        "end_line": 514,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ (do\n      let x ←\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                ⟨0, ⋯⟩\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn✝)).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)\n      let a ← liftM (query (Sum.inr ⟨1, ⋯⟩) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  ⟨1, ⋯⟩ x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Sumcheck/Basic.lean#L514"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "acdaed8c48f17db5c464a9c3616f33072c935121f62674f8323dfe361d5e9333"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 523,
        "start_column": 2,
        "end_line": 523,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) → OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) ∈\n        (run ({ target := target, challenges := challenge }, oStmt) witIn✝\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support →\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | ⟨poly, property⟩ =>\n            ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x ∘ Fin.cast ⋯)) poly =\n              target) ∧\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Sumcheck/Basic.lean#L523"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "e9145de4b57428d6b468c57ee12245f62b14eb66fd5c5b83ab453fbd2195678b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 572,
        "start_column": 4,
        "end_line": 572,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R✝ : Type\ninst✝⁵ : CommSemiring R✝\nn✝ deg✝ m✝ : ℕ\nD✝ : Fin m✝ ↪ R✝\nι✝ : Type\noSpec✝ : OracleSpec ι✝\ninst✝⁴ : VCVCompatible R✝\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni✝ : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  ¬relation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i),\n    (a, b) ∈ (Verifier.run stmt tr (verifier R n deg D oSpec i)).support →\n      ∀ (x : Unit), ¬relation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Sumcheck/Basic.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "01c0c10777953bfb2661ae531b0b02607d77a0f9f0363a16d42d8151b1a9ea74"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "d3ad275922393ae291d5f5474f17eddb4b5f10ce",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 647,
        "start_column": 42,
        "end_line": 647,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\nn deg m : ℕ\nD : Fin m ↪ R\ninst✝ : VCVCompatible R\n⊢ OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d3ad275922393ae291d5f5474f17eddb4b5f10ce/ArkLib/ProofSystem/Sumcheck/Basic.lean#L647"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:43:19.956137+00:00"
      },
      "id": "91a7662cd7928dd9abda0ff6a4834a5698e28e7547c1a0b57ff722cfa95c5160"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 60,
        "start_column": 9,
        "end_line": 60,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\n⊢ ∀ (i : ιₛᵢ ⊕ Unit),\n    (OStatement ⊕ᵥ fun x => WitEquiv) i =\n      match (⋯.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Components.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "de3d9a617f80e0aef98e544b3446ea53868531f41f4d10c9f3cb767bab87fbc7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 78,
        "start_column": 2,
        "end_line": 78,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝² : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝¹ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\nrelIn : Statement × ((i : ιₛᵢ) → OStatement i) → Witness → Prop\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Components.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "f604a82eb24ea3065ef2d102bcb68c10b3502b0d62aa24009d58c5fe213a6d82"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 138,
        "start_column": 9,
        "end_line": 138,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝¹ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\n⊢ ∀ (i : ιₛᵢ ⊕ ιₛᵢ),\n    (OStatement ⊕ᵥ OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Components.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "8108fa0443caca6805c8b191415c74660d7d265f57613f34def094de36c6f609"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝² : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Components.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "e6b74ff696d433d2a3779e8cda99a64e78c75f2b2d22c4ec4535e1a818b61d7b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Components.lean",
        "start_line": 255,
        "start_column": 2,
        "end_line": 255,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nOStatement : Type\ninst✝² : ToOracle OStatement\ninst✝¹ : VCVCompatible (Query OStatement)\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Components.lean#L255"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "45ec5adf62b96da29caf7b16a81c66fcef0ea1136ed72500904f2fef99ead22f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let a ← (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ← Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "d6ee99745ada92387b7f79c6789b39dc2d7fd79bfbff7d1031399a630b09a24c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst✝ : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let __discr ←\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => a.1)) <$>\n            (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++ₒ [pSpec.Challenge]ₒ)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ←\n      (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | ⟨0, isLt⟩ => __discr.1).liftComp\n        (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "74ee307e96601428aff1c92243512929c8a86437f19f7b98deaf74a40061dd82"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ (do\n      let _ ← liftM (query 0 ())\n      (fun a => (0, ↑a)) <$> liftM (query 1 ())) =\n    do\n    let y ← liftM (query 1 ())\n    (fun a => (0, ↑y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "82a1dd7812bac6cb66159e12bbaa8de734aab08b6d1e09c5e3585d80ed6f17e3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n⊢ (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a)))) none =\n    ∑' (a : Fin 2), 2⁻¹ * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a_1 => (0, ↑a)))) none",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "a917d01ec55486f6479e9492c9fa47362fa3b9c573f912cb522d86404b0bcb08"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : ℕ\n⊢ (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a => (0, ↑y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "4fbf7a21cd0b1698b6ea38ddccfe99cb2c0c267cb32b2f9e60b869e03d4ab12c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : ℕ) → unifSpec.domain i → Fin (i + 1)\n⊢ (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun x => (fun a => (0, ↑a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun y => (fun a => (0, ↑y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "04c6f789907e7085b49e9a1c4a73a8d8637e05087769f66cc4e7745b39c0557a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/ToOracle.lean",
        "start_line": 299,
        "start_column": 2,
        "end_line": 299,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝⁵ : CommRing R\nd : ℕ\ninst✝⁴ : Fintype R\ninst✝³ : DecidableEq R\ninst✝² : IsDomain R\nσ : Type\ninst✝¹ : Fintype σ\ninst✝ : DecidableEq σ\na : R[X σ]\nha : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s a = 0 → ∀ (i : σ), s i ≤ d\nb : R[X σ]\nhb : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s b = 0 → ∀ (i : σ), s i ≤ d\nhNe : ¬a = b\n⊢ {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card ≤ Fintype.card σ * d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/ToOracle.lean#L299"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "2097ba3fe964bd4eea452748029696100537d4c3d8730a3fd5dea66e11da2927"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/ToOracle.lean",
        "start_line": 338,
        "start_column": 2,
        "end_line": 338,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nR : Type\ninst✝ : CommSemiring R\nm : ℕ\nD : Fin m ↪ R\np : R[X]\n⊢ ∃ x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {α} =>\n          (statelessOracle spec [fun x => R[X]]ₒ fun i q => oracle p q).impl) =\n        pure x ∧\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/ToOracle.lean#L338"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "254bfe87646e4bab671c0d59a37b3aae965717f7d55619e21c5d5a909944a1eb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).1.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "1e502702b164667d81551eae7089a9c8d83a7c35d30636f27a6cd868658c4fb9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).2.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "97b97e5a7eb9dff7a5cf98317d456c171c0652ca0f263b06828fc39770933caf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pEven ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "6fdedc8c06dfa406b192670c77a57522dc3a4d4c14b1fae26541a0e70813b824"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pOdd ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "05c2ed8d841804ef8f8e3ff7a5f1ecfb23071c46fab76973aa21dcd4ae1fa869"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\nα : Type\ninst✝² : DecidableEq α\ninst✝¹ : Inhabited α\ninst✝ : Fintype α\nhash : α × α → α\nn : ℕ\nih :\n  ∀ (leaves : List.Vector α (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function α hash)\n        (do\n          let cache ← buildMerkleTree α n leaves\n          let proof : List.Vector α n := generateProof α i cache\n          verifyProof α i leaves[i] (getRoot α cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector α (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n⊢ ((((Option.elimM (OptionT.run (buildMerkleTree α (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run ∘ fun cache =>\n                verifyProof α i (leaves.get i) (getRoot α cache) (generateProof α i cache))).mapM\n          fun {α_1} q =>\n          match α_1, q with\n          | .((spec α).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "2584324141779042d6a23a7dc9372ffb32255aaed6336ce736ac5a512c61d9dd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\n⊢ ‖C‖₀' ≠ ⊤",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "769ae1c9e10a22a4a6cd833d61113ab2493ea1dd72b15c0ec65dee04ce2524b1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\nthis : ‖C‖₀' ≠ ⊤\n⊢ ENat.toNat (Finset.image (fun x => Δ₀(↑x.1, ↑x.2)) {p | ¬p.1 = p.2}).min =\n    sInf {d | ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d}",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "1925d17ef5cde0f1a4862cf90737efeb30e5eb1b86477c141ce91b5faef2f6b5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₁.intro.intro.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nv : n → R\nhv : v ∈ C\nhuv : ¬u = v\nhDist : Δ₀(u, v) ≤ d\n⊢ ∃ u ∈ C, ¬u = 0 ∧ ‖u‖₀ ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "44de88e5933ade7e812221a85ea55b7a46b9c3cc132780dc0f9cbe97eb1c6ac5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₂.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nhNorm : ¬u = 0\nhDist : ‖u‖₀ ≤ d\n⊢ ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "8093dddd3381e42a1f8bf08204b0b9db6836570f752b76cf0a2fab27aa1f2cfa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 269,
        "start_column": 67,
        "end_line": 269,
        "end_column": 72
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : Finite R\nC : Set (n → R)\n⊢ card ↑C ≤ card R ^ (card n - ‖C‖₀ + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/CodingTheory/Basic.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "698a5d31b044bf0fd1847e1a3fca8459f3daca68407b77767c738c0da843ad69"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/CodingTheory/Basic.lean",
        "start_line": 275,
        "start_column": 65,
        "end_line": 275,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝³ : Fintype n\nR : Type u_2\ninst✝² : DecidableEq R\ninst✝¹ : Finite R\ninst✝ : DivisionRing R\nC : Submodule R (n → R)\n⊢ Module.finrank R ↥C ≤ card n - ‖C.carrier‖₀ + 1",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/CodingTheory/Basic.lean#L275"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "b4f5828e9f3158ab77cefef852b46a9ebe1488fa628a96e7649983e154ea8924"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "e5a464bf43047c5653c5a91c522f07fb4fc7757d1f1347ec2c6d729030780d42"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "a6ff1ba2de4b72cd1fa9b95c448413aaf5ecd4ea4135cda02666d837a09a64be"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\np q : MlPoly R n\n⊢ (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "5a2ee8bedd3fb91cd1bc2374f13abeafa592fcc9f9945f3b9a7df736053d85ba"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : CommSemiring R\nn : ℕ\nS : Type u_2\ninst✝ : CommSemiring S\nf : R →+* S\np : MlPoly R n\nx : Vector S n\n⊢ p.eval₂ f x = MvPolynomial.eval₂ f x.get ↑p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "c9f7c9efbbaced0bc350d055173f5a8c9d45f1e0ff223513064fbd067521e862"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "13f11261901df67db818e357cd81ff945d9e7b35365b734ac62dea460967d58d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ (cons a b).get ⬝ᵥ (cons c d).get = a * c + b.get ⬝ᵥ d.get",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "88d0a5d7d35a95fbea4aea4fe2096454c4d7e3e52518a165db5fff4b4bf5a232"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "2a31f2372359c0e89ce65c580c109db1a42622564cab7033e7a14901a33460fd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "2a8eca2c6ae098186c6d18ab19bd7cb770ccb661d4ca192588f17cf0efc0f114"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "ffb7f3b3e7fc2c2e69c9424ce67c372da4cef15dca8c9479bfb43b119a985a50"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "f7b1934d3e6717c7019556ff0cc45f8a4c1f0c522f3ff6dd773017edcae198bf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (n_1 : ℕ) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "de0a6c63c746a97e73c00d05c18ab00e35d6e32025418bdd510b2dc25a081411"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "069453ad552e736864f59f54438442d0292ab17b49a1075f04d54d38b5e3d647"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (b : MlPoly R n), 1 • b = b",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "d5bc862c60475bb62aa539e0db6f1a1e290125637fe7acabaa0b763c940c72c9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MlPoly/Basic.lean",
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (x : MlPoly R n), 0 • x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "387f86000eb2dd2dd16d80d0383f183f92e5e1b710ee91acfacda5c3e8c4661f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 374,
        "start_column": 43,
        "end_line": 374,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : ℕ\nα : Fin n → Sort u\nl : List ℕ\nn' : ℕ\nl' : List ℕ\nmotive : Fin (n' :: l').sum → Sort u_1\ncases : (n : ℕ) → (h : n ∈ n' :: l') → (i : Fin n) → motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : ¬↑i < n'\n⊢ ↑i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Fin.lean#L374"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T14:25:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "140e0a604961bdabbaad860d672647f6ee6ca48e8d4cbda15ced0fd4951a40b1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 402,
        "start_column": 16,
        "end_line": 402,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case ind\nn✝ n : ℕ\nIH : ∀ m < n, ∀ {a : Fin m → ℕ}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n → ℕ\n⊢ (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Fin.lean#L402"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "2eb24c99f18c549058e55d48dad3b7e4f8002e88275dd3180adc006cdca1ea30"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 497,
        "start_column": 32,
        "end_line": 497,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Fin.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "5ca694314910f3ef10cb131277b5dc50a20e7294381769d132b8cfe7c17efc55"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 499,
        "start_column": 35,
        "end_line": 499,
        "end_column": 40
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Fin.lean#L499"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "f820c2a497f4a1df061c9325f2d202f9959d7f58e62a36ab20254efc23d38e30"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 501,
        "start_column": 36,
        "end_line": 501,
        "end_column": 41
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Fin.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "0452ac7aa9695d21f910262b44031aeb6f161e470cfaad3e046a9c04f98b71b1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 557,
        "start_column": 4,
        "end_line": 557,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List ℕ\nj a : ℕ\nl' : List ℕ\nh : j < a + l'.sum\n⊢ ∃ n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Fin.lean#L557"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "67b043be6ca5bfb7eeee67ee615d01f8370a278b25b919dab8f56658cb1cae57"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Fin.lean",
        "start_line": 569,
        "start_column": 80,
        "end_line": 569,
        "end_column": 85
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝² : AddMonoid α\ninst✝¹ : Preorder α\ninst✝ : DecidableRel fun x1 x2 => x1 < x2\nl : List ℕ\nj : Fin l.sum\n⊢ l.findSumIdx ↑j < l.length",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Fin.lean#L569"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "8d27cc8ee24a40b6d6b624c74063847373d6a924d14d35daba3088f71079f831"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Operations.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nunit : α\nl l' : List α\nm n n' : ℕ\nh : n ≤ m\nh' : n' ≤ m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n ⊔ l.length = n' ⊔ l'.length\n⊢ l ++ replicate (n - l.length + (m - n' ⊔ l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' ⊔ l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Operations.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "2e8c0f1a177e7c2ec14b2cb381150d460452cf7dcbbce4ccd18ed6e09d890d72"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Operations.lean",
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10
      },
      "debug_info": {
        "goal": "α : Type u_1\nl₁ l₂ : List α\nunit : α\n⊢ (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l₁.matchSize l₂ unit) ↔\n    ∀ (i : ℕ), l₁.getD i unit = l₂.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Operations.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "7f1b3c65311f0e5cf557d3584982424c64fa73c63db188228c4a6f671d0236b8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Operations.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\na : Array α\nn : ℕ\nunit : α\ni : ℕ\nh✝ : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n⊢ { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Operations.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "6dc19724cfbbb678a9184c8cd0acfa37e7cdc98d7b9541cdd6f85d2296b37060"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/Math/Operations.lean",
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80
      },
      "debug_info": {
        "goal": "α : Type u_1\np : α → Bool\nas : Array α\nh : (popWhile p as).size > 0\n⊢ ¬p ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/Math/Operations.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "042ca5df4bd7f42451d6ff80a7738c91934239315ab8e1b452ef17f5965eb715"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nσ : Type u_3\nσ₁ : Type u_4\nσ₂ : Type u_5\nx : σ₁ → R\nf : σ → σ₁ ⊕ σ₂\np : R[X σ]\nb : σ₁ →₀ ℕ\nh : ¬coeff b ((sumToIter R σ₁ σ₂) ((rename f) p)) = 0\n⊢ (coeff b ((sumToIter R σ₁ σ₂) ((rename f) p))).degrees ≤ Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "adbee0acf65d09438592a9da78944a241b22decd46f7a9d69ae66e3c186d083f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\nh : n > 0\nD : Fin (n - 1) → Finset R\np : R[X Fin n]\n⊢ ((sumExceptFirst' n h D) p).degree ≤ ↑(degreeOf ⟨0, h⟩ p)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "91c40a8484daf7276257dd966ed8f23234972267d691ad7d824edfa5fee64880"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝⁴ : DecidableEq σ\ninst✝³ : Fintype σ\nR : Type u_2\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : DecidableEq R\np : R[X σ]\nhp : p ≠ 0\nS : σ → Finset R\n⊢ ↑(#({x ∈ p.vars.pi S | (eval (extendDomain x)) p = 0})) / ∏ i ∈ p.vars, ↑(#(S i)) ≤\n    ∑ i ∈ p.vars, ↑(degreeOf i p) / ↑(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "40f6ef84e8aaec2f5858b51593fc8cf74b481e800d3f4e4c8520ba0a26bdae4b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝³ : DecidableEq σ\ninst✝² : Fintype σ\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\np q : R[X σ]\nS : σ → Finset R\nhDegree : ∀ (i : σ), degreeOf i p < #(S i)\nhEval : ∀ x ∈ piFinset fun i => S i, (eval x) p = (eval x) q\n⊢ p = q",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "65e40c5e05fe6b23eee074f8b3f9d35a5fefeb38f6fcc56b1b4e2a67018dec89"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 95,
        "start_column": 16,
        "end_line": 95,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case succ\nk : ℕ\na✝ : k > 0 → AdjoinRoot (poly k) = Field k\nk_pos : k + 1 > 0\n⊢ AdjoinRoot (poly (k + 1)) = Field (k + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/BinaryTowerField/Basic.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-30T10:53:02+05:30",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "b57a85aba550532ee84846aac75b3c04febd1b7825b6219f3c6f3d3f4c07661e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 115,
        "start_column": 59,
        "end_line": 115,
        "end_column": 64
      },
      "debug_info": {
        "goal": "n : ℕ\n⊢ Irreducible (poly n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/BinaryTowerField/Basic.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2024-06-18T17:58:42-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "5b01c13bbc3317b449c682a0cdafb13c2f638fc93aa58ea0c49f4a61996ec2f0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic-old.lean",
        "start_line": 197,
        "start_column": 21,
        "end_line": 197,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.LeftInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic-old.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "abf169207994e72ba80382c112b751d8a6d06f94e83f1c569a64f37ed2b5e238"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic-old.lean",
        "start_line": 198,
        "start_column": 22,
        "end_line": 198,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic-old.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "a944c3bce964f475387c3c4ed8809ed0479eae83daab8383b5c052de29f379bf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic-old.lean",
        "start_line": 199,
        "start_column": 21,
        "end_line": 199,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x *\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic-old.lean#L199"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "d43cce861cbcb4e140009ca6b508e2cec3ff10dc4c9daaf5c822be8979cf1c4c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic-old.lean",
        "start_line": 200,
        "start_column": 21,
        "end_line": 200,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x +\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic-old.lean#L200"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "b36e8dd84260ec8b4f4f0879591e510c05c5f24e83e08cd0b6eafd917f0c5cd1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q : UniPoly Q\ni : ℕ\nhi : i < Array.size (p.add_raw q)\n⊢ (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "d337221a962d0c63a8ce759dedc9307a21cd22b95738586c1b536d50a247f881"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n⊢ p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "21bb217a0d40f50d81e88353bf7060f5a4996e51ef46c99a6e20191f9d7549c3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : Ring R\ninst✝ : BEq R\np : UniPoly R\n⊢ (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) ∈ TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "1bbc9b51dbb6423b497e41f7faabaa4ff5b3e77618c7e5122914f6b30c1f7f6b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "aedc110fc2b2326f79422aa9795fca82ae04b76cd3857015e9ce0761b4970c78"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "1316ad3a884849fa7f64739409630f8dfcb1a021f738371f0c62a381f82fbd06"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/Data/UniPoly/Basic.lean",
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "06d7e36b96461e98c37d598c4c63eb631731e10a22b3ab13a4da902b46fe5f80"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 254,
        "start_column": 2,
        "end_line": 254,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h\nm n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nT : pSpec₁.FullTranscript\nT' : pSpec₂.FullTranscript\ni : Fin m\n⊢ _root_.cast ⋯ (T i) = (⋯ ▸ T) i",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Sequential.lean#L254"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T12:49:22-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "057a4a52599d4085ef84cb43762d6b77c3c131751f109e3dc953a77e2e7c14cf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 556,
        "start_column": 55,
        "end_line": 556,
        "end_column": 60
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\n⊢ (compose 0 (fun x => n) fun x => pSpec) = pSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Sequential.lean#L556"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T18:57:31+07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "c558f136209f5951cb5877dcf93c2bcd8212f28485b7db001312f5069be5c42f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 572,
        "start_column": 2,
        "end_line": 572,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ni : Fin m\n⊢ compose (↑i + 1) (Fin.take (↑i + 2) ⋯ n) (Fin.take (↑i + 2) ⋯ pSpec) =\n    cast ⋯ (compose (↑i) (Fin.take (↑i + 1) ⋯ n) (Fin.take (↑i + 1) ⋯ pSpec) ++ₚ pSpec i.succ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Sequential.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "bce3935577390f278c2e28e268807c0a1c5451108b1660f81cbb15d1cdcc2607"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 699,
        "start_column": 2,
        "end_line": 699,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nOₘ₁ : (i : pSpec₁.MessageIndex) → ToOracle (pSpec₁.Message i)\nOₘ₂ : (i : pSpec₂.MessageIndex) → ToOracle (pSpec₂.Message i)\ninst✝² : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝¹ : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\ninst✝ : oSpec.DecidableEq\nP₁ : Prover pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nP₂ : Prover pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\nstmt : Stmt₁\nwit : Wit₁\n⊢ run stmt wit (P₁.append P₂) = do\n    let __discr ← liftM (run stmt wit P₁)\n    match __discr with\n      | (stmt₂, wit₂, transcript₁) => do\n        let __discr ← liftM (run stmt₂ wit₂ P₂)\n        match __discr with\n          | (stmt₃, wit₃, transcript₂) => pure (stmt₃, wit₃, transcript₁ ++ₜ transcript₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Sequential.lean#L699"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "fd82fd11648d48d6e9b0a7e6dd8687e16e5a89e1a87229eaeec5ee8ab84d5413"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 725,
        "start_column": 89,
        "end_line": 725,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : ℕ\nι : Type\ninst✝⁴ : DecidableEq ι\noSpec : OracleSpec ι\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\ninst✝³ : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝² : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nrel₁ : Stmt₁ → Wit₁ → Prop\nrel₂ : Stmt₂ → Wit₂ → Prop\nrel₃ : Stmt₃ → Wit₃ → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR₁ : Reduction pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nR₂ : Reduction pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\ncompletenessError₁ completenessError₂ : ℝ≥0\nh₁ : completeness rel₁ rel₂ R₁ completenessError₁\nh₂ : completeness rel₂ rel₃ R₂ completenessError₂\n⊢ completeness rel₁ rel₃ (R₁.append R₂) (completenessError₁ + completenessError₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Sequential.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "fd881c600f69821bd4d8f62aab6d772dc92be1df487adf088e8e12cbbb37b77f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 752,
        "start_column": 38,
        "end_line": 752,
        "end_column": 43
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nm : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ninst✝² : (i : Fin (m + 1)) → (j : (pSpec i).ChallengeIndex) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 2) → Type\nrel : (i : Fin (m + 2)) → Stmt i → Wit i → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR : (i : Fin (m + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1) → ℝ≥0\nh : ∀ (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n⊢ completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (∑ i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Sequential.lean#L752"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "52a42fe46be9de35a3209ccb464b868720fef4f0431501f73e1ab83d3bdcbed1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2.1).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2 a)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "b989a71b44ee41f65d2a525c9fece22e499f3b649a7d2becc772ec9254125329"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "7734a62476e951feeb3b92290b3423cc340e1c4611ee2e405b9c55278d09c8b9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let __discr ← Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "16b3ffee221d9f599e7aead762080d2060da4fe8b50b123a399229aa169036d6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\ncompletenessError : ℝ≥0\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn →\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run stmtIn witIn R] ≥\n        1 - ↑completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] ≥\n    1 - ↑completenessError\nx✝ : (StmtOut' × WitOut') × StmtOut' × pSpec.FullTranscript\na✝ : x✝ ∈ (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x✝.2.1 x✝.1.2 ∧ x✝.1.1 = x✝.2.1\n⊢ ((fun x => relOut x.2.1 x.1.2 ∧ x.1.1 = x.2.1) ∘ fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x✝",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "cb06be90524f5278a150b5b589ada219b2c3b4d234446ca9a52e46f31c099e07"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : ℝ≥0\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  ∀ (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    ∀ stmtIn ∉ langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut ∉ langOut'|run stmtIn witIn { prover := prover, verifier := V }] ≤\n        ↑soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn ∉ langIn\n⊢ [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut ∉\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] ≤\n    ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "d405977a9f392690bb38e08ab08e6b86fa3cbb38ed479d9e76129e25226b658a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\nsoundnessError : ℝ≥0\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          ¬relIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) ∧\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] ≤\n      ↑soundnessError\n⊢ ∃ extractor,\n    ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            ¬relIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) ∧\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] ≤\n        ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "606191f295af1501e7da02c95a04257162e0785f18733775b859881ebc58c62e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x✝³ : StmtIn\nx✝² : Unit\nx✝¹ : StmtOut'\nx✝ : Unit\np q : ℤ[X]\nt : ℤ\nf : ℤ[X]\nt' r : ℤ\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n⊢ eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "c700d2db56743400949179c245681163677cd73d2b64d83a2b789b9023a04510"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 361,
        "start_column": 2,
        "end_line": 361,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : ℝ≥0\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        ¬relIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) ∧\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] ≤\n      ↑knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : ∀ (x : WitIn), ¬relIn stmtIn x\n⊢ [fun x => ∀ (x_1 : WitOut), ¬relOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] ≤\n    ↑knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Security/Basic.lean#L361"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "10cb4bb6ad7d3a1f8b841ffccddcb6bbd113f4e7d4ed9e46484cde80068e50c3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn StmtOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction langIn langOut verifier\nrbrSoundnessError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrSoundness langIn langOut verifier stateFunction rbrSoundnessError →\n    soundness langIn langOut verifier (∑ i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Security/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "98cffb47e2e8aa1b52064d4f0aa208787532d23225f22b3c7bd7f3105678b524"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 393,
        "start_column": 2,
        "end_line": 393,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier stateFunction rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Security/Basic.lean#L393"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "a54db65e95fe6c4808d765845acb1cb58ed266840bb37343d6a3c45f00bb9d75"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/OracleReduction/Security/Basic.lean",
        "start_line": 403,
        "start_column": 82,
        "end_line": 403,
        "end_column": 87
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    knowledgeSoundness relIn relOut verifier (∑ i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/OracleReduction/Security/Basic.lean#L403"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "2e63217ee7f5904480e77c868bdeef98eaddfe0ed9eb578bc0ae44904f40a89d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 496,
        "start_column": 2,
        "end_line": 496,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\ninst✝ : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, ↥R⦃≤ ↑deg⦄[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : ↑(transcript 0) ∈ R⦃≤ ↑deg⦄[X]\nhEq : transcript 0 = ⟨↑(transcript 0), hp_i⟩\n⊢ (do\n      let a ←\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run ∘ fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (transcript 1)))).mapM\n            fun {α} => (ToOracle.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) ↑(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if ∑ x, Polynomial.eval (D x) ↑(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Sumcheck/Basic.lean#L496"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "5a84d8dfd14a4b11fbad7aeaf05382db2a2e306b27e9dd81fc5611bfcd61e958"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 514,
        "start_column": 57,
        "end_line": 514,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ (do\n      let x ←\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                ⟨0, ⋯⟩\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn✝)).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)\n      let a ← liftM (query (Sum.inr ⟨1, ⋯⟩) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  ⟨1, ⋯⟩ x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Sumcheck/Basic.lean#L514"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "438fef3c2c534f23836c4011ff73dd054a2fc805f497616ccde3b3cd1c005336"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 523,
        "start_column": 2,
        "end_line": 523,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) → OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) ∈\n        (run ({ target := target, challenges := challenge }, oStmt) witIn✝\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support →\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | ⟨poly, property⟩ =>\n            ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x ∘ Fin.cast ⋯)) poly =\n              target) ∧\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Sumcheck/Basic.lean#L523"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "119cce5d922a8df9fa12b730dba53b8111154379dd087bbf0e451d8fbc41ad3a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 572,
        "start_column": 4,
        "end_line": 572,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R✝ : Type\ninst✝⁵ : CommSemiring R✝\nn✝ deg✝ m✝ : ℕ\nD✝ : Fin m✝ ↪ R✝\nι✝ : Type\noSpec✝ : OracleSpec ι✝\ninst✝⁴ : VCVCompatible R✝\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni✝ : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  ¬relation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i),\n    (a, b) ∈ (Verifier.run stmt tr (verifier R n deg D oSpec i)).support →\n      ∀ (x : Unit), ¬relation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Sumcheck/Basic.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "f3395398b5e787d5eed7922677d955ffe64ecd25b64906ffa328c86a7ed7ac4c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "name-change",
        "commit": "d732f5dc6c14fb841c08ab4e21a099f590b9b994",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ArkLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 647,
        "start_column": 42,
        "end_line": 647,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\nn deg m : ℕ\nD : Fin m ↪ R\ninst✝ : VCVCompatible R\n⊢ OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/d732f5dc6c14fb841c08ab4e21a099f590b9b994/ArkLib/ProofSystem/Sumcheck/Basic.lean#L647"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:54:00.456184+00:00"
      },
      "id": "ba1e7d74c694b59d7a660a9d774795b77a6e44287c92611a018209d100d4b97f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 60,
        "start_column": 9,
        "end_line": 60,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\n⊢ ∀ (i : ιₛᵢ ⊕ Unit),\n    (OStatement ⊕ᵥ fun x => WitEquiv) i =\n      match (⋯.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Components.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "de87d9a33992d139e1b7fc028da91ec73db9a96bc3bc6b55f8ceedc2854f2314"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 78,
        "start_column": 2,
        "end_line": 78,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement Witness ιₛᵢ : Type\nOStatement : ιₛᵢ → Type\ninst✝² : (i : ιₛᵢ) → ToOracle (OStatement i)\nWitEquiv : Type\ninst✝¹ : ToOracle WitEquiv\nequiv : Witness ≃ WitEquiv\nrelIn : Statement × ((i : ιₛᵢ) → OStatement i) → Witness → Prop\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Components.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "27b05d9f66065c84b35ef24b2dc76055dcf8b863178fb8e357b8eae784f4d013"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 138,
        "start_column": 9,
        "end_line": 138,
        "end_column": 14
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝¹ : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\n⊢ ∀ (i : ιₛᵢ ⊕ ιₛᵢ),\n    (OStatement ⊕ᵥ OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Components.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "436b9b71331bda3a42147daaa32eb750c1071dac65019fdec37af57a61ef2809"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStatement ιₛᵢ : Type\ninst✝² : Unique ιₛᵢ\nOStatement : ιₛᵢ → Type\ninst✝¹ : (i : ιₛᵢ) → ToOracle (OStatement i)\nrel : Statement × ((i : ιₛᵢ) → OStatement i) → Prop\nrelComp : Statement → OracleComp [OStatement]ₒ Unit\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Components.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "c9ad27c488d678bc56768eebb05ab05433632d04fd2a41eca910e8269f82e5ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Components.lean",
        "start_line": 255,
        "start_column": 2,
        "end_line": 255,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nOStatement : Type\ninst✝² : ToOracle OStatement\ninst✝¹ : VCVCompatible (Query OStatement)\ninst✝ : oSpec.FiniteRange\n⊢ OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Components.lean#L255"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "996806be680a605a15f344876c614b5960a80dee59dec3dacbbbbb191cb17aec"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Execution.lean",
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let a ← (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ← Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "ca9c7d35b1c3fca64560e842fa9d8d5c912774f347e0ea3987ae054b19465c55"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Execution.lean",
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst✝ : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n⊢ (do\n      let __discr ←\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => a.1)) <$>\n            (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++ₒ [pSpec.Challenge]ₒ)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let __discr ←\n      (reduction.prover.sendMessage ⟨0, ⋯⟩ (reduction.prover.input stmt wit)).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | ⟨0, isLt⟩ => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | ⟨0, isLt⟩ => __discr.1).liftComp\n        (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "d15835d48aa33b2aa03d4a59305da3e2f78c275a97d35288e4aaa6272370e171"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "⊢ (do\n      let _ ← liftM (query 0 ())\n      (fun a => (0, ↑a)) <$> liftM (query 1 ())) =\n    do\n    let y ← liftM (query 1 ())\n    (fun a => (0, ↑y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "831cc23164cc7e68c50b28e8e7a27415057b85cd93e512ac1b5fc107a5fddc9c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.none\n⊢ (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a)))) none =\n    ∑' (a : Fin 2), 2⁻¹ * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a_1 => (0, ↑a)))) none",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "174ec269f65ba6edcb67f788109cd2da7c8dc5619af8e873db350a702ed92b81"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : ℕ\n⊢ (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure ∘ fun a => (0, ↑a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run ∘ evalDist ∘ fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure ∘ fun a => (0, ↑y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "3fe6af931e71d99b862e6df3408acd34385ab9d51cc26f24826acd3655cd4d76"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Equiv.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : (i : ℕ) → unifSpec.domain i → Fin (i + 1)\n⊢ (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun x => (fun a => (0, ↑a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {α} x =>\n              match α, x with\n              | .(unifSpec.range i), query i t => some (f i t) } ∘\n        fun y => (fun a => (0, ↑y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "83692bd8ad2fde42ca8a352538c1f2c40d7dadc6dc2a20b1145beab67f18f63c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/ToOracle.lean",
        "start_line": 299,
        "start_column": 2,
        "end_line": 299,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝⁵ : CommRing R\nd : ℕ\ninst✝⁴ : Fintype R\ninst✝³ : DecidableEq R\ninst✝² : IsDomain R\nσ : Type\ninst✝¹ : Fintype σ\ninst✝ : DecidableEq σ\na : R[X σ]\nha : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s a = 0 → ∀ (i : σ), s i ≤ d\nb : R[X σ]\nhb : ∀ (s : σ →₀ ℕ), ¬MvPolynomial.coeff s b = 0 → ∀ (i : σ), s i ≤ d\nhNe : ¬a = b\n⊢ {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card ≤ Fintype.card σ * d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/ToOracle.lean#L299"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "c14d4fc5020b41eedfb815919157d2502e952b06248a880b5550dc00af8e0e4e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/ToOracle.lean",
        "start_line": 338,
        "start_column": 2,
        "end_line": 338,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nR : Type\ninst✝ : CommSemiring R\nm : ℕ\nD : Fin m ↪ R\np : R[X]\n⊢ ∃ x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {α} =>\n          (statelessOracle spec [fun x => R[X]]ₒ fun i q => oracle p q).impl) =\n        pure x ∧\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/ToOracle.lean#L338"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "7b6cd7d541f0c30230af0326db623a18917b4b55b5b21a1cfd9dd9f2f7f41fd5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).1.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "26a7121c8f6571cfae940967c05424fddf675f90c2fd6048a6beee6aa1214339"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\np : R[X]\n⊢ (splitEvenOdd p).2.natDegree ≤ p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "08cd62f6d589edb8638b6865176b8d940c55d804fe08418c036580baa60bca8e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pEven ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "45fd5f2bba07663131055e050fceb1fb0b6362ff1a8bc91bb6583a2cd68ec031"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/Fold.lean",
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommRing R\ninst✝ : Sampleable R\nn deg : ℕ\nζ : Rˣ\nhPrim : IsPrimitiveRoot ζ (2 ^ n)\np : ↥R⦃< 2 * n⦄[X]\npEven pOdd : R[X]\n⊢ pOdd ∈ R⦃< n⦄[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "68da02cde5ab605c1e9461c87d62aa4cb7bac5ba989baf2b1b345b1851d3e58f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/CommitmentScheme/MerkleTree.lean",
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case succ\nα : Type\ninst✝² : DecidableEq α\ninst✝¹ : Inhabited α\ninst✝ : Fintype α\nhash : α × α → α\nn : ℕ\nih :\n  ∀ (leaves : List.Vector α (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function α hash)\n        (do\n          let cache ← buildMerkleTree α n leaves\n          let proof : List.Vector α n := generateProof α i cache\n          verifyProof α i leaves[i] (getRoot α cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector α (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n⊢ ((((Option.elimM (OptionT.run (buildMerkleTree α (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run ∘ fun cache =>\n                verifyProof α i (leaves.get i) (getRoot α cache) (generateProof α i cache))).mapM\n          fun {α_1} q =>\n          match α_1, q with\n          | .((spec α).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "a472f473948c166a021857a9dcc752f09797ca73d9f44a686cfe8a20ac3668ad"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\n⊢ ‖C‖₀' ≠ ⊤",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "dab010fbad767028b48daa7584aca4ebc622c3f07854a81966562c7b60c5236c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\nC : Set (n → R)\ninst✝ : Fintype ↑C\nh : ¬Subsingleton ↑C\nthis : ‖C‖₀' ≠ ⊤\n⊢ ENat.toNat (Finset.image (fun x => Δ₀(↑x.1, ↑x.2)) {p | ¬p.1 = p.2}).min =\n    sInf {d | ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d}",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "e93664de89b3226819367d44717a9abc200edab8ae993f5c28d6fc23f18dde95"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₁.intro.intro.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nv : n → R\nhv : v ∈ C\nhuv : ¬u = v\nhDist : Δ₀(u, v) ≤ d\n⊢ ∃ u ∈ C, ¬u = 0 ∧ ‖u‖₀ ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "27e4c53a684819dc3b570d20c4e16920b09e12ac3fcecebd4b252887819f4ae1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.h.h₂.intro.intro.intro\nn : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : CommSemiring R\nC : Submodule R (n → R)\nd : ℕ\nu : n → R\nhu : u ∈ C\nhNorm : ¬u = 0\nhDist : ‖u‖₀ ≤ d\n⊢ ∃ u ∈ C, ∃ v ∈ C, ¬u = v ∧ Δ₀(u, v) ≤ d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "cf7472bdf0a0850ff9f33c8be414a12658a68d1ed78c7c15971f130c6b6d0a57"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 269,
        "start_column": 67,
        "end_line": 269,
        "end_column": 72
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝² : Fintype n\nR : Type u_2\ninst✝¹ : DecidableEq R\ninst✝ : Finite R\nC : Set (n → R)\n⊢ card ↑C ≤ card R ^ (card n - ‖C‖₀ + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/CodingTheory/Basic.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "1486204fbcefc46600e3665ea26467a7d842dfcf67e6734cc46901db50392697"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/CodingTheory/Basic.lean",
        "start_line": 275,
        "start_column": 65,
        "end_line": 275,
        "end_column": 70
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst✝³ : Fintype n\nR : Type u_2\ninst✝² : DecidableEq R\ninst✝¹ : Finite R\ninst✝ : DivisionRing R\nC : Submodule R (n → R)\n⊢ Module.finrank R ↥C ≤ card n - ‖C.carrier‖₀ + 1",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/CodingTheory/Basic.lean#L275"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "21cf9534ce33dc0bf349f759a56e807a293a394b3673d966e1b0de58bb88981d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "46eeca7b25acf8ff7b448803d6439566c850fca93b3112c981c9dda705cb33f8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\n⊢ Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "dbfae8d820a97cc21fe2f7677ec4400475ff11728e6f2844844aa5b554c8a2f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\np q : MlPoly R n\n⊢ (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "fbbc2e93df2d00ff6ef6662c91c25b034453f3cdfb965278b7273916829a6256"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Equiv.lean",
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : CommSemiring R\nn : ℕ\nS : Type u_2\ninst✝ : CommSemiring S\nf : R →+* S\np : MlPoly R n\nx : Vector S n\n⊢ p.eval₂ f x = MvPolynomial.eval₂ f x.get ↑p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "88acc776d574ef28cec9709a396100c722b6d468b84535e7e87bd63e01d9a3f2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "4da18408d60ba5195e02c1c15458512e4542ef7494e83e322ce9a30b61d26051"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝¹ : Mul R\ninst✝ : AddCommMonoid R\nn : ℕ\na : R\nb : Vector R n\nc : R\nd : Vector R n\n⊢ (cons a b).get ⬝ᵥ (cons c d).get = a * c + b.get ⬝ᵥ d.get",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "67eb991200d3eed4f19e520db0444415d92c4d9aafe15cbc8c8f072ac3334565"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "62727be40afb5899340e948bb008afdb09281ce726ef46db0694822c1b5700be"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "b578e2232763be4c177282c00a7d417a2b4a8742b0dce2b39628194986fd7a86"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "d5684d73db3c0ddb611aa373262263bf9fe6ecfefdbc2b93f11db15f11d4a769"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "5717ed3eb6b0d6be82e3a06c0bdc395fe36502b10ddfe0e1888a3836bff65464"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (n_1 : ℕ) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "c45eac315241991a5c07f836dd35cba78fd1e259148aecd95df0a27d21c4eab7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : AddCommMonoid R\n⊢ ∀ (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "ceed1ce0ac7ce7ecd2ff59f9b8c1b6240648f8cf1840dc530ff1792e3e827714"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (b : MlPoly R n), 1 • b = b",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "7b38afc44aa1a3e97694609d97c6d6cfa4d9628d9075aa5d767599f21e44f5cd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MlPoly/Basic.lean",
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : ℕ\ninst✝ : Semiring R\n⊢ ∀ (x : MlPoly R n), 0 • x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "4e8a0bde0619510187b505cdbfadec42e9efc72892fe6f36ae79c9b84759208f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 374,
        "start_column": 43,
        "end_line": 374,
        "end_column": 48
      },
      "debug_info": {
        "goal": "n : ℕ\nα : Fin n → Sort u\nl : List ℕ\nn' : ℕ\nl' : List ℕ\nmotive : Fin (n' :: l').sum → Sort u_1\ncases : (n : ℕ) → (h : n ∈ n' :: l') → (i : Fin n) → motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : ¬↑i < n'\n⊢ ↑i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Fin.lean#L374"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T14:25:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "fcfcc651871e7dc929d1da1d318f738147a5f18d5b39b645939ac91ee24fcd5f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 402,
        "start_column": 16,
        "end_line": 402,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case ind\nn✝ n : ℕ\nIH : ∀ m < n, ∀ {a : Fin m → ℕ}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n → ℕ\n⊢ (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Fin.lean#L402"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "42aa147c1c3d384b1f7fd9a8947f31348e2065ff4de9054359080abc4e55bc19"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 497,
        "start_column": 32,
        "end_line": 497,
        "end_column": 37
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Fin.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "ebc3e34e0e4be7a93bbf5f21ef3a903ff8b8633496c784071aa6a244536c8e06"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 499,
        "start_column": 35,
        "end_line": 499,
        "end_column": 40
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Fin.lean#L499"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "f2f20a33e78bb418dfcb079902b0a4662b2939e9c2de5372031740bfe31c37fd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 501,
        "start_column": 36,
        "end_line": 501,
        "end_column": 41
      },
      "debug_info": {
        "goal": "⊢ True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Fin.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "85e049837caa4c658905732581018a55b3c06a6a997a3da271dc0256d4b353c9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 557,
        "start_column": 4,
        "end_line": 557,
        "end_column": 9
      },
      "debug_info": {
        "goal": "l : List ℕ\nj a : ℕ\nl' : List ℕ\nh : j < a + l'.sum\n⊢ ∃ n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Fin.lean#L557"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "b8874ace3923c47e7814f90333a89388102780733c8b21e816da665a091e0a9f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Fin.lean",
        "start_line": 569,
        "start_column": 80,
        "end_line": 569,
        "end_column": 85
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝² : AddMonoid α\ninst✝¹ : Preorder α\ninst✝ : DecidableRel fun x1 x2 => x1 < x2\nl : List ℕ\nj : Fin l.sum\n⊢ l.findSumIdx ↑j < l.length",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Fin.lean#L569"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "2796faf2d1cea84f20ece2ab07d63e390f14e11487b27398b563fe12d161f525"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\nunit : α\nl l' : List α\nm n n' : ℕ\nh : n ≤ m\nh' : n' ≤ m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n ⊔ l.length = n' ⊔ l'.length\n⊢ l ++ replicate (n - l.length + (m - n' ⊔ l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' ⊔ l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Operations.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "2f6ff45ce9b9cfcd843a7f430780c22720be602044f2917105ec110d35871fb7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10
      },
      "debug_info": {
        "goal": "α : Type u_1\nl₁ l₂ : List α\nunit : α\n⊢ (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l₁.matchSize l₂ unit) ↔\n    ∀ (i : ℕ), l₁.getD i unit = l₂.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Operations.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "b2482f000750dea657abb57b7fdea4a347b8adba5f9b01011a1d08116b9e93a6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type u_1\na : Array α\nn : ℕ\nunit : α\ni : ℕ\nh✝ : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n⊢ { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Operations.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "fc45635be5e2776063b98942b5a482ad245bf49ebc003cf0ecb4adb9792c572c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/Math/Operations.lean",
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80
      },
      "debug_info": {
        "goal": "α : Type u_1\np : α → Bool\nas : Array α\nh : (popWhile p as).size > 0\n⊢ ¬p ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/Math/Operations.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "ff81dea59c4927a2a7dc7c13e7cb34e26e5c8bd837f88af76342d7ca90632bf6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nσ : Type u_3\nσ₁ : Type u_4\nσ₂ : Type u_5\nx : σ₁ → R\nf : σ → σ₁ ⊕ σ₂\np : R[X σ]\nb : σ₁ →₀ ℕ\nh : ¬coeff b ((sumToIter R σ₁ σ₂) ((rename f) p)) = 0\n⊢ (coeff b ((sumToIter R σ₁ σ₂) ((rename f) p))).degrees ≤ Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "0f1a99adc035d3a471254d9f9d0a01965dbe6e0fe08528275ea5cfdb18db6271"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Sumcheck.lean",
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst✝ : CommSemiring R\nn : ℕ\nh : n > 0\nD : Fin (n - 1) → Finset R\np : R[X Fin n]\n⊢ ((sumExceptFirst' n h D) p).degree ≤ ↑(degreeOf ⟨0, h⟩ p)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "5865a0f431626985854fc21fbe73960d7023a9776ffc5882b56fdd0fd43e3d6e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝⁴ : DecidableEq σ\ninst✝³ : Fintype σ\nR : Type u_2\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : DecidableEq R\np : R[X σ]\nhp : p ≠ 0\nS : σ → Finset R\n⊢ ↑(#({x ∈ p.vars.pi S | (eval (extendDomain x)) p = 0})) / ∏ i ∈ p.vars, ↑(#(S i)) ≤\n    ∑ i ∈ p.vars, ↑(degreeOf i p) / ↑(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "d0977245c313a171e392d94e9bf190954b38765e168d1765f05e1f7704f41bc7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/MvPolynomial/Interpolation.lean",
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81
      },
      "debug_info": {
        "goal": "σ : Type u_1\ninst✝³ : DecidableEq σ\ninst✝² : Fintype σ\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\np q : R[X σ]\nS : σ → Finset R\nhDegree : ∀ (i : σ), degreeOf i p < #(S i)\nhEval : ∀ x ∈ piFinset fun i => S i, (eval x) p = (eval x) q\n⊢ p = q",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "63db56d74e46e7c98d7fcfe1ee09ddcde347c6e2646880500cad459bdfa91877"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 95,
        "start_column": 16,
        "end_line": 95,
        "end_column": 21
      },
      "debug_info": {
        "goal": "case succ\nk : ℕ\na✝ : k > 0 → AdjoinRoot (poly k) = Field k\nk_pos : k + 1 > 0\n⊢ AdjoinRoot (poly (k + 1)) = Field (k + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/BinaryTowerField/Basic.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-30T10:53:02+05:30",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "5dfabf30c4b126789962e6a166b99a4575a4940924fbf6ff114f5400681660d6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/BinaryTowerField/Basic.lean",
        "start_line": 115,
        "start_column": 59,
        "end_line": 115,
        "end_column": 64
      },
      "debug_info": {
        "goal": "n : ℕ\n⊢ Irreducible (poly n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/BinaryTowerField/Basic.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2024-06-18T17:58:42-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "b3a52df00c9efa4822f0cc7ee002833eaa8a8a40dc8278790f718514fe116a51"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 197,
        "start_column": 21,
        "end_line": 197,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.LeftInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic-old.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "4d04d26178db11a2a40e16a04070fb3efa8beaf9d81f9b671581620c9836a988"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 198,
        "start_column": 22,
        "end_line": 198,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic-old.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "dd587b60c0d3d291ad0765ea2b22b0a0ce409770d072ca0e6709f8e23944124c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 199,
        "start_column": 21,
        "end_line": 199,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x *\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic-old.lean#L199"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "f59e2c4e8dfa60719395bc5445693d7917162c88e6385650c158b690ee09dc0a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic-old.lean",
        "start_line": 200,
        "start_column": 21,
        "end_line": 200,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝ : Semiring R\n⊢ ∀ (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := ⋯, right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          x +\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := ⋯, right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic-old.lean#L200"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "cd3ad6f7f3e0f75e3bd01475f2fcf269993a5ce92adf63345d9c75a93dc8ca1d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q : UniPoly Q\ni : ℕ\nhi : i < Array.size (p.add_raw q)\n⊢ (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "2368a06577b31a81856c2505d6e3a90ec9aa1ea1d30d26147fcf2d473c0e8cbe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst✝ : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n⊢ p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "23e7233eadc66ffb1b62d8423862724a51d6ea243fc74f46918bf7be8a64ee60"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : Ring R\ninst✝ : BEq R\np : UniPoly R\n⊢ (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) ∈ TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "62e5356aa4a144c40594614dbcb408319f875873f15c969d4dd37d3c4ca672e9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "d0cba346657cb3d9ec4173bb2c641a372b74abae36ee5c8aa44c1f2203eaee75"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "763c5ba4e5f530a2367a2b77ee1ce4efe89bafbb44923d4c48923af00ad9e3cd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/Data/UniPoly/Basic.lean",
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : BEq R\ninst✝ : Ring R\n⊢ ∀ (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n            right_inv := ⋯ }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := ⋯,\n              right_inv := ⋯ }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "845def7523e187840377e77301d0d446aadcd4b3ae4376635ba1042ae409798a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 254,
        "start_column": 2,
        "end_line": 254,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h\nm n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nT : pSpec₁.FullTranscript\nT' : pSpec₂.FullTranscript\ni : Fin m\n⊢ _root_.cast ⋯ (T i) = (⋯ ▸ T) i",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Sequential.lean#L254"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T12:49:22-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "769ffd6dff8bc112634263166a2ed1d92d8a00151805c91c735922cdc7fb1a48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 556,
        "start_column": 55,
        "end_line": 556,
        "end_column": 60
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\n⊢ (compose 0 (fun x => n) fun x => pSpec) = pSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Sequential.lean#L556"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T18:57:31+07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "e984e8134d7def6ca88978695f5cca67f346d93a3751df2674a5150c991243f8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 572,
        "start_column": 2,
        "end_line": 572,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ni : Fin m\n⊢ compose (↑i + 1) (Fin.take (↑i + 2) ⋯ n) (Fin.take (↑i + 2) ⋯ pSpec) =\n    cast ⋯ (compose (↑i) (Fin.take (↑i + 1) ⋯ n) (Fin.take (↑i + 1) ⋯ pSpec) ++ₚ pSpec i.succ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Sequential.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "7335f4ea7d3aa325c475f990f2a40356f5e11748caab0fb49544152f19ef4c51"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 699,
        "start_column": 2,
        "end_line": 699,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m n : ℕ\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\nι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nOₘ₁ : (i : pSpec₁.MessageIndex) → ToOracle (pSpec₁.Message i)\nOₘ₂ : (i : pSpec₂.MessageIndex) → ToOracle (pSpec₂.Message i)\ninst✝² : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝¹ : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\ninst✝ : oSpec.DecidableEq\nP₁ : Prover pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nP₂ : Prover pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\nstmt : Stmt₁\nwit : Wit₁\n⊢ run stmt wit (P₁.append P₂) = do\n    let __discr ← liftM (run stmt wit P₁)\n    match __discr with\n      | (stmt₂, wit₂, transcript₁) => do\n        let __discr ← liftM (run stmt₂ wit₂ P₂)\n        match __discr with\n          | (stmt₃, wit₃, transcript₂) => pure (stmt₃, wit₃, transcript₁ ++ₜ transcript₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Sequential.lean#L699"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "214b83852e4974c13d97f854f0f055f7344c8bc31cf6fe225565530a1e377f44"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 725,
        "start_column": 89,
        "end_line": 725,
        "end_column": 94
      },
      "debug_info": {
        "goal": "m n : ℕ\nι : Type\ninst✝⁴ : DecidableEq ι\noSpec : OracleSpec ι\npSpec₁ : ProtocolSpec m\npSpec₂ : ProtocolSpec n\ninst✝³ : (i : pSpec₁.ChallengeIndex) → Sampleable (pSpec₁.Challenge i)\ninst✝² : (i : pSpec₂.ChallengeIndex) → Sampleable (pSpec₂.Challenge i)\nStmt₁ Wit₁ Stmt₂ Wit₂ Stmt₃ Wit₃ : Type\nrel₁ : Stmt₁ → Wit₁ → Prop\nrel₂ : Stmt₂ → Wit₂ → Prop\nrel₃ : Stmt₃ → Wit₃ → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR₁ : Reduction pSpec₁ oSpec Stmt₁ Wit₁ Stmt₂ Wit₂\nR₂ : Reduction pSpec₂ oSpec Stmt₂ Wit₂ Stmt₃ Wit₃\ncompletenessError₁ completenessError₂ : ℝ≥0\nh₁ : completeness rel₁ rel₂ R₁ completenessError₁\nh₂ : completeness rel₂ rel₃ R₂ completenessError₂\n⊢ completeness rel₁ rel₃ (R₁.append R₂) (completenessError₁ + completenessError₂)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Sequential.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "4c9532a923180e9631bafbed63489705e1076e55e522b10df4118c38f3380ce4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Sequential.lean",
        "start_line": 752,
        "start_column": 38,
        "end_line": 752,
        "end_column": 43
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\noSpec : OracleSpec ι\nm : ℕ\nn : Fin (m + 1) → ℕ\npSpec : (i : Fin (m + 1)) → ProtocolSpec (n i)\ninst✝² : (i : Fin (m + 1)) → (j : (pSpec i).ChallengeIndex) → Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 2) → Type\nrel : (i : Fin (m + 2)) → Stmt i → Wit i → Prop\ninst✝¹ : oSpec.DecidableEq\ninst✝ : oSpec.FiniteRange\nR : (i : Fin (m + 1)) → Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1) → ℝ≥0\nh : ∀ (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n⊢ completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (∑ i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Sequential.lean#L752"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "5c1aa22d579be224b7f4102034c8db206048eeb4481459c499bada8893fecd61"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2.1).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr ← ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge ⟨j, hDir⟩ __discr.2 a)) <$>\n                liftM (query (Sum.inr ⟨j, hDir⟩) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage ⟨j, hDir⟩ __discr.2).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "dc46c2abfb2c49af62952b183c3907675a3908ef30e054f39547a2775c2b3636"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "eb0a1486f0217dd62ea688ec3e5119de79de1d6831eff0eddb2f54fc7b45c262"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n⊢ (do\n      let __discr ← Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++ₒ [pSpec.Challenge]ₒ)) =\n    do\n    let a ← Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++ₒ [pSpec.Challenge]ₒ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "9b7b1c0c2286c38b78699e1d678206f068e8b01fdab8ca683abe25fccf912719"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\ncompletenessError : ℝ≥0\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn →\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run stmtIn witIn R] ≥\n        1 - ↑completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut ∧ prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] ≥\n    1 - ↑completenessError\nx✝ : (StmtOut' × WitOut') × StmtOut' × pSpec.FullTranscript\na✝ : x✝ ∈ (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x✝.2.1 x✝.1.2 ∧ x✝.1.1 = x✝.2.1\n⊢ ((fun x => relOut x.2.1 x.1.2 ∧ x.1.1 = x.2.1) ∘ fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x✝",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "27be847267bf263ccc0ba247fe0a983b3348246d41e5f44d0bb00085d7b69814"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : ℝ≥0\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  ∀ (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    ∀ stmtIn ∉ langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut ∉ langOut'|run stmtIn witIn { prover := prover, verifier := V }] ≤\n        ↑soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn ∉ langIn\n⊢ [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut ∉\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] ≤\n    ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "4f4a7a52bd270e41569332192932ac13e8ed70bd3a08d0a437966b756999ee63"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro\nn : ℕ\npSpec : ProtocolSpec n\nι : Type\ninst✝² : DecidableEq ι\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nrelIn' : StmtIn' → WitIn' → Prop\nrelOut' : StmtOut' → WitOut' → Prop\nsoundnessError : ℝ≥0\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  ∀ (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          ¬relIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) ∧\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] ≤\n      ↑soundnessError\n⊢ ∃ extractor,\n    ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            ¬relIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) ∧\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] ≤\n        ↑soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "b8846335f21915e8e6defcdb8971cfe9168ec41170948be61bd875eddc8e76ad"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Composition/Virtual.lean",
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9
      },
      "debug_info": {
        "goal": "x✝³ : StmtIn\nx✝² : Unit\nx✝¹ : StmtOut'\nx✝ : Unit\np q : ℤ[X]\nt : ℤ\nf : ℤ[X]\nt' r : ℤ\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n⊢ eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "35226ea3662b4b2ec6327ae8e4f6e17dee1ff2fae6ddfa4fb0916cfc8913b620"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 361,
        "start_column": 2,
        "end_line": 361,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : ℝ≥0\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  ∀ (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        ¬relIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) ∧\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] ≤\n      ↑knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : ∀ (x : WitIn), ¬relIn stmtIn x\n⊢ [fun x => ∀ (x_1 : WitOut), ¬relOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] ≤\n    ↑knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Security/Basic.lean#L361"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "5cb8ad1cbe873431cc43964e19c15ccbedbe689902adeaadd72bf4281c64bdd7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn StmtOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction langIn langOut verifier\nrbrSoundnessError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrSoundness langIn langOut verifier stateFunction rbrSoundnessError →\n    soundness langIn langOut verifier (∑ i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Security/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "fa76d4315ba3d607fc08a4b1033e59aeef0b75099b98664f40aedd9760d64862"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 393,
        "start_column": 2,
        "end_line": 393,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier stateFunction rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Security/Basic.lean#L393"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "fd4ac6b0cc5cecaa733d52bb0d8496c1044b8231eda8e7295692a0ddf9a229b1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/OracleReduction/Security/Basic.lean",
        "start_line": 403,
        "start_column": 82,
        "end_line": 403,
        "end_column": 87
      },
      "debug_info": {
        "goal": "n : ℕ\nι : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec ι\nStmtIn WitIn StmtOut WitOut : Type\ninst✝¹ : (i : pSpec.ChallengeIndex) → VCVCompatible (pSpec.Challenge i)\ninst✝ : oSpec.FiniteRange\nrelIn : StmtIn → WitIn → Prop\nrelOut : StmtOut → WitOut → Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex → ℝ≥0\n⊢ rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError →\n    knowledgeSoundness relIn relOut verifier (∑ i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/OracleReduction/Security/Basic.lean#L403"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "c61aa74e316aa630f3544d315c5fe22ff704e804bee676ea56da79bcbb99f642"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 496,
        "start_column": 2,
        "end_line": 496,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\ninst✝ : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, ↥R⦃≤ ↑deg⦄[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : ↑(transcript 0) ∈ R⦃≤ ↑deg⦄[X]\nhEq : transcript 0 = ⟨↑(transcript 0), hp_i⟩\n⊢ (do\n      let a ←\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run ∘ fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr ⟨0, ⋯⟩)) (transcript 1)))).mapM\n            fun {α} => (ToOracle.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) ↑(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if ∑ x, Polynomial.eval (D x) ↑(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Sumcheck/Basic.lean#L496"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "c9804985b6a113ffae8a70509edd02560ad380c4a9a237134768975a903072da"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 514,
        "start_column": 57,
        "end_line": 514,
        "end_column": 62
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ (do\n      let x ←\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                ⟨0, ⋯⟩\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn✝)).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)\n      let a ← liftM (query (Sum.inr ⟨1, ⋯⟩) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  ⟨1, ⋯⟩ x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++ₒ [(pSpec R deg).Challenge]ₒ)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Sumcheck/Basic.lean#L514"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "0441869cadf7bd914344c3af5d86b679ce0663aa6339d974ca1e42b73e0e2ff3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 523,
        "start_column": 2,
        "end_line": 523,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ntarget : R\nchallenge : Fin ↑i.castSucc → R\noStmt : (i : Fin 1) → OracleStatement R n deg i\nwitIn✝ : Unit\nhValid :\n  ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x ∘ Fin.cast ⋯)) ↑(oStmt 0) =\n    target\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) → OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) ∈\n        (run ({ target := target, challenges := challenge }, oStmt) witIn✝\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support →\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | ⟨poly, property⟩ =>\n            ∑ x ∈ Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x ∘ Fin.cast ⋯)) poly =\n              target) ∧\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Sumcheck/Basic.lean#L523"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "085dcba67e55f3e6340717028824ae8ddcefd16612c37a25e7a6474b36627143"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 572,
        "start_column": 4,
        "end_line": 572,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R✝ : Type\ninst✝⁵ : CommSemiring R✝\nn✝ deg✝ m✝ : ℕ\nD✝ : Fin m✝ ↪ R✝\nι✝ : Type\noSpec✝ : OracleSpec ι✝\ninst✝⁴ : VCVCompatible R✝\nR : Type\ninst✝³ : CommSemiring R\ninst✝² : VCVCompatible R\nn deg m : ℕ\nD : Fin m ↪ R\nι : Type\noSpec : OracleSpec ι\ni✝ : Fin (n + 1)\ninst✝¹ : DecidableEq ι\ninst✝ : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc × ((i : Fin 1) → OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  ¬relation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n⊢ ∀ (a : Statement R n i.succ) (b : (i : Fin 1) → OracleStatement R n deg i),\n    (a, b) ∈ (Verifier.run stmt tr (verifier R n deg D oSpec i)).support →\n      ∀ (x : Unit), ¬relation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Sumcheck/Basic.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "8afc6e944734a68646231166270a6b89098008c2e8ce082fb3f03931ea9a243f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "update_documentation",
        "commit": "39d4fe31b55ce1da780bb05d2f1f9560fc8d0531",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ZKLib/ProofSystem/Sumcheck/Basic.lean",
        "start_line": 647,
        "start_column": 42,
        "end_line": 647,
        "end_column": 47
      },
      "debug_info": {
        "goal": "R : Type\ninst✝¹ : CommSemiring R\nn deg m : ℕ\nD : Fin m ↪ R\ninst✝ : VCVCompatible R\n⊢ OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/39d4fe31b55ce1da780bb05d2f1f9560fc8d0531/ZKLib/ProofSystem/Sumcheck/Basic.lean#L647"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-26T05:57:58.788607+00:00"
      },
      "id": "1f253cfb781caaee6140c0febe59e50eb36ad069acb3087f12e6fc3c5c7c23a4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "f3b35043f5c5eeed25a8c922222322a9feb6be2ed8b06f49a2a29bae818a1ec9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Circuit/Loops.lean",
        "start_line": 149,
        "start_column": 6,
        "end_line": 149,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case e_v.e_a\nn m : ℕ\nF : Type\ninst✝¹ : Field F\nα β : Type\ncircuit : α → Circuit F β\ninst✝ : Nonempty β\nlawful : ConstantLawfulCircuits circuit\nops : OperationsList F\nn' : ℕ\nxs : Vector α n'\nx : α\nih :\n  (Vector.mapM circuit xs ops).1.toArray =\n    Array.mapIdx\n      (fun i x =>\n        ConstantLawfulCircuits.output circuit x (ops.offset + ConstantLawfulCircuits.local_length circuit * i))\n      xs.toArray\n⊢ (Vector.mapM circuit xs ops).2.offset = ops.offset + ConstantLawfulCircuits.local_length circuit * n'",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Circuit/Loops.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-23T11:23:02+02:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "c3aac50cd4e8393477d21bf9abb438616c0103ed365ef4c2af62f81da507c370"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Circuit/Loops.lean",
        "start_line": 177,
        "start_column": 6,
        "end_line": 177,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n m : ℕ\nF : Type\ninst✝¹ : Field F\nα β : Type\ncircuit : α → Circuit F β\ninst✝ : Nonempty β\nlawful : ConstantLawfulCircuits circuit\nops : OperationsList F\nn' : ℕ\nxs : Vector α n'\nx : α\nih :\n  (Vector.mapM circuit xs ops).2 =\n    { offset := (fun n => n + ConstantLawfulCircuits.local_length circuit * n') ops.offset,\n      withLength := ops.withLength ++ (fun n => operations_mapM xs lawful n) ops.offset }\nh :\n  ((Vector.mapM circuit xs >>= fun out => out.push <$> circuit x) ops).2 = (circuit x (Vector.mapM circuit xs ops).2).2\nh' :\n  (circuit x (Vector.mapM circuit xs ops).2).2 =\n    { offset := (Vector.mapM circuit xs ops).2.offset + ConstantLawfulCircuits.local_length circuit,\n      withLength :=\n        (Vector.mapM circuit xs ops).2.withLength ++\n          ConstantLawfulCircuits.operations x (Vector.mapM circuit xs ops).2.offset }\n⊢ HEq\n    (ops.withLength ++ operations_mapM._unary ⟨n', ⟨circuit, ⟨inst✝, ⟨xs, ⟨lawful, ops.offset⟩⟩⟩⟩⟩ ++\n      ConstantLawfulCircuits.operations x (ops.offset + ConstantLawfulCircuits.local_length circuit * n'))\n    (ops.withLength ++\n      operations_mapM._unary\n        ⟨n' + 1, ⟨circuit, ⟨inst✝, ⟨{ toArray := xs.push x, size_toArray := ⋯ }, ⟨lawful, ops.offset⟩⟩⟩⟩⟩)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Circuit/Loops.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-24T18:06:15+02:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "cbd3ea79e123f406265499f9ad0b3a565ac61c2770cd8642d27e846d5f54b252"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 65,
        "start_column": 18,
        "end_line": 65,
        "end_column": 23
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Soundness (F p) assumptions (spec off)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Gadgets/Rotation64/Rotation64.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-01T17:43:17+02:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "2f0dcc4efc05ef1adaad79d59902cfc6e3bb9d8e16eb276ce6103e588c788f84"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 66,
        "start_column": 21,
        "end_line": 66,
        "end_column": 26
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Completeness (F p) U64 assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Gadgets/Rotation64/Rotation64.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-02-27T17:02:29+01:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "d7022ae3c60b8712caefa2e3e3388a18e66f26b2181b0656b6de636384df0390"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[↑4]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[↑3])) ∧\n            (eval env state_var[1]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[↑4])) ∧\n        (eval env state_var[2]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[↑3]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Gadgets/Keccak/ThetaD.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "27a3758ac318f15289bdb5db3e712b7420da28fc9725ae4e1289706b537a5798"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/Chi.lean",
        "start_line": 103,
        "start_column": 2,
        "end_line": 103,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni✝ : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env :\n  env.uses_local_witnesses_completeness\n    (Vector.mapM\n          (fun i =>\n            (StateT.modifyGet fun ops =>\n                  (not64_bytewise state_var.toArray[↑(i + 5)],\n                    { offset := ops.offset + 0,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ main := fun x => StateT.pure (not64_bytewise x), local_length := fun x => 0,\n                                local_length_eq := ⋯, output := fun x x_1 => not64_bytewise x, output_eq := ⋯,\n                                initial_offset_eq := ⋯, assumptions := fun x => x.is_normalized,\n                                spec := fun x z => z.value = not64 x.value ∧ z.is_normalized, soundness := ⋯,\n                                completeness := ⋯ }.to_subcircuit\n                            ops.offset state_var.toArray[↑(i + 5)]) })).bind\n              fun state_not =>\n              (StateT.modifyGet fun ops =>\n                    (var_from_offset U64 ops.offset,\n                      { offset := ops.offset + 8,\n                        withLength :=\n                          ops.withLength.subcircuit\n                            ({ toElaboratedCircuit := And.And64.elaborated, assumptions := And.And64.assumptions,\n                                  spec := And.And64.spec, soundness := ⋯, completeness := ⋯ }.to_subcircuit\n                              ops.offset { x := state_not, y := state_var.toArray[↑(i + 10)] }) })).bind\n                fun state_and =>\n                StateT.modifyGet fun ops =>\n                  (var_from_offset U64 ops.offset,\n                    { offset := ops.offset + 8,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ toElaboratedCircuit := Xor.elaborated, assumptions := Xor.assumptions, spec := Xor.spec,\n                                soundness := ⋯, completeness := ⋯ }.to_subcircuit\n                            ops.offset { x := state_var.toArray[↑i], y := state_and }) }))\n          (Vector.finRange 25) { offset := i✝, withLength := Operations.empty i✝ }).2.withLength\nstate : KeccakState (F p)\nh_input : eval env state_var = state\nstate_norm : ∀ (i : Fin 25), state[↑i].is_normalized\ni : Fin 25\n⊢ ((eval env state_var[↑(i + 5)]).is_normalized ∧\n      (eval env (not64_bytewise state_var[↑(i + 5)])).is_normalized ∧ (eval env state_var[↑(i + 10)]).is_normalized) ∧\n    (eval env state_var[↑i]).is_normalized ∧ (eval env (var_from_offset U64 (i✝ + ↑i * 16))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Gadgets/Keccak/Chi.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T15:53:10+02:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "e8e18a02d8682cba9c99b86051337959fda734df1e4aa84d11a91718ab3ae261"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaXor.lean",
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var Inputs (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : Inputs (F p)\nh_assumptions : assumptions state\nh_input : { state := eval env state_var.state, d := eval env state_var.d } = state\n⊢ (((((((((((((((((((((((((eval env state_var.state[0]).is_normalized ∧ (eval env state_var.d[0]).is_normalized) ∧\n                                                  (eval env state_var.state[1]).is_normalized ∧\n                                                    (eval env state_var.d[0]).is_normalized) ∧\n                                                (eval env state_var.state[2]).is_normalized ∧\n                                                  (eval env state_var.d[0]).is_normalized) ∧\n                                              (eval env state_var.state[↑3]).is_normalized ∧\n                                                (eval env state_var.d[0]).is_normalized) ∧\n                                            (eval env state_var.state[↑4]).is_normalized ∧\n                                              (eval env state_var.d[0]).is_normalized) ∧\n                                          (eval env state_var.state[↑5]).is_normalized ∧\n                                            (eval env state_var.d[1]).is_normalized) ∧\n                                        (eval env state_var.state[↑6]).is_normalized ∧\n                                          (eval env state_var.d[1]).is_normalized) ∧\n                                      (eval env state_var.state[↑7]).is_normalized ∧\n                                        (eval env state_var.d[1]).is_normalized) ∧\n                                    (eval env state_var.state[↑8]).is_normalized ∧\n                                      (eval env state_var.d[1]).is_normalized) ∧\n                                  (eval env state_var.state[↑9]).is_normalized ∧\n                                    (eval env state_var.d[1]).is_normalized) ∧\n                                (eval env state_var.state[↑10]).is_normalized ∧\n                                  (eval env state_var.d[2]).is_normalized) ∧\n                              (eval env state_var.state[↑11]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                            (eval env state_var.state[↑12]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                          (eval env state_var.state[↑13]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                        (eval env state_var.state[↑14]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                      (eval env state_var.state[↑15]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                    (eval env state_var.state[↑16]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                  (eval env state_var.state[↑17]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                (eval env state_var.state[↑18]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n              (eval env state_var.state[↑19]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n            (eval env state_var.state[↑20]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n          (eval env state_var.state[↑21]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n        (eval env state_var.state[↑22]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n      (eval env state_var.state[↑23]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n    (eval env state_var.state[↑24]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Gadgets/Keccak/ThetaXor.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T16:27:02+02:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "0c448e36afe309fccbf542b9b705ea200c3bea5148bef57973bf171c7cc98979"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "0ab16043aeb72f38dc30c4236532d10f2a10b036",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaC.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env : env.uses_local_witnesses_completeness ((theta_c state_var).operations i0)\nstate : KeccakState (F p)\nh_assumptions : ∀ (i : Fin 25), state[i].is_normalized\nh_input : Vector.map (eval env) state_var = state\ns : ∀ (i : Fin 25), (eval env state_var[↑i]).is_normalized = True\n⊢ ((((((((((((((eval env (var_from_offset U64 i0)).is_normalized ∧\n                              (eval env (var_from_offset U64 (i0 + 8))).is_normalized) ∧\n                            (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                          (eval env (var_from_offset U64 (i0 + 32))).is_normalized) ∧\n                        (eval env (var_from_offset U64 (i0 + 40))).is_normalized) ∧\n                      (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n                    (eval env (var_from_offset U64 (i0 + 64))).is_normalized) ∧\n                  (eval env (var_from_offset U64 (i0 + 72))).is_normalized) ∧\n                (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n              (eval env (var_from_offset U64 (i0 + 96))).is_normalized) ∧\n            (eval env (var_from_offset U64 (i0 + 104))).is_normalized) ∧\n          (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n        (eval env (var_from_offset U64 (i0 + 128))).is_normalized) ∧\n      (eval env (var_from_offset U64 (i0 + 136))).is_normalized) ∧\n    (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/0ab16043aeb72f38dc30c4236532d10f2a10b036/Clean/Gadgets/Keccak/ThetaC.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-03T17:31:42+02:00",
        "inclusion_date": "2025-04-26T06:04:06.923983+00:00"
      },
      "id": "a90a0144b323b254fbf677c16775287420ca2af2d7aa5e9be88713bdc6c0187a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "ac9c9c105f685547272928bdee0442f709ceb1bce73399943b90f6b1a268fd2e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := ⋯ }\npush : {n : ℕ} → (as : Vector α n) → (a : α) → motive as → motive (as.push a)\nn n✝ : ℕ\nx : α\nxs : Vector α n✝\nih : induct_push nil (fun {n} => push) xs = induct_push' nil (fun {n} => push) xs\n⊢ Eq.rec (motive := fun x_1 x_2 =>\n      Vector α x_1 →\n        (h : { toList := x :: xs.toList }.size = x_1) → motive { toList := x :: xs.toList, size_toArray := h })\n      (fun v h =>\n        cast ⋯\n          (push { toList := x :: xs.toList, size_toArray := ⋯ }.to_push.as\n            { toList := x :: xs.toList, size_toArray := ⋯ }.to_push.a\n            (induct_push nil (fun {n} => push) { toList := x :: xs.toList, size_toArray := ⋯ }.to_push.as)))\n      ⋯ { toList := x :: xs.toList, size_toArray := ⋯ } ⋯ =\n    cast ⋯\n      (induct nil (fun n x xs r => cast ⋯ (push xs.reverse x r))\n        { toArray := { toList := x :: xs.toList }.reverse, size_toArray := ⋯ })",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Utils/Vector.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-25T20:18:35+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "34836c118b8ba04e771c12427a9e23929b5fc9c5c1324e8589e7a921b144c5a9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 153,
        "start_column": 2,
        "end_line": 153,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := ⋯ }\npush : {n : ℕ} → (as : Vector α n) → (a : α) → motive as → motive (as.push a)\nn : ℕ\nxs : Vector α n\nx a : α\nh : induct_push nil (fun {n} => push) (xs.push a) = push xs a (induct_push nil (fun {n} => push) xs)\n⊢ Eq.rec (motive := fun x_1 x_2 =>\n      Vector α x_1 →\n        (h : { toList := x :: (xs.push a).toList }.size = x_1) →\n          motive { toList := x :: (xs.push a).toList, size_toArray := h })\n      (fun v h =>\n        cast ⋯\n          (push { toArray := { toList := x :: (xs.push a).toList }.extract 0 (xs.push a).size, size_toArray := ⋯ }\n            (x :: (xs.push a).toList)[(xs.push a).size]\n            (induct_push nil (fun {n} => push)\n              { toArray := { toList := x :: (xs.push a).toList }.extract 0 (xs.push a).size, size_toArray := ⋯ })))\n      ⋯ { toList := x :: (xs.toList ++ [a]), size_toArray := ⋯ } ⋯ =\n    push { toList := x :: xs.toList, size_toArray := ⋯ } a\n      (Eq.rec (motive := fun x_1 x_2 =>\n        Vector α x_1 →\n          (h : { toList := x :: xs.toList }.size = x_1) → motive { toList := x :: xs.toList, size_toArray := h })\n        (fun v h =>\n          cast ⋯\n            (push { toArray := { toList := x :: xs.toList }.extract 0 xs.size, size_toArray := ⋯ }\n              (x :: xs.toList)[xs.size]\n              (induct_push nil (fun {n} => push)\n                { toArray := { toList := x :: xs.toList }.extract 0 xs.size, size_toArray := ⋯ })))\n        ⋯ { toList := x :: xs.toList, size_toArray := ⋯ } ⋯)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Utils/Vector.lean#L153"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-25T20:18:35+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "35c758db6166c5654bc42a6b17fbf4118b528c4cc42c5abc41dbe6841f8e1e90"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 173,
        "start_column": 4,
        "end_line": 173,
        "end_column": 9
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := ⋯ }\npush : {n : ℕ} → (as : Vector α n) → (a : α) → motive as → motive (as.push a)\nn : ℕ\na : α\nn✝ : ℕ\nx : α\nxs : Vector α n✝\nih : induct_push nil (fun {n} => push) (xs.push a) = push xs a (induct_push nil (fun {n} => push) xs)\n⊢ induct_push nil (fun {n} => push) (cons x { toArray := xs.push a, size_toArray := ⋯ }) =\n    push (cons x xs) a (induct_push nil (fun {n} => push) (cons x xs))",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Utils/Vector.lean#L173"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-25T20:18:35+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "6c3f4f1901323621e058e0974275e29af312101019f01c05c7336c07afb054eb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := rfl }\npush : {n : ℕ} → (as : Vector α n) → (a : α) → motive as → motive (as.push a)\nn : ℕ\na : α\nn✝ : ℕ\nx : α\nxs : Vector α n✝\nih : induct_push' nil (fun {n} => push) (xs.push a) = push xs a (induct_push' nil (fun {n} => push) xs)\n⊢ cast (induct_push'.proof_2 ((cons x xs).push a))\n      (induct nil (fun n x xs r => cast (induct_push'.proof_3 n x xs) (push xs.reverse x r))\n        ((cons x xs).push a).reverse) =\n    push (cons x xs) a\n      (cast (induct_push'.proof_2 (cons x xs))\n        (induct nil (fun n x xs r => cast (induct_push'.proof_3 n x xs) (push xs.reverse x r)) (cons x xs).reverse))",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Utils/Vector.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-25T20:18:35+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "4332134418ee90585866eb52c9cf5051bbc55b7676ec785529fe56df2adde7b7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 65,
        "start_column": 18,
        "end_line": 65,
        "end_column": 23
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Soundness (F p) assumptions (spec off)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Gadgets/Rotation64/Rotation64.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-01T17:43:17+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "ec57e33354e4d5d08e43b322183e9aa4441d68e48e7e0110877ea8f24adda253"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 66,
        "start_column": 21,
        "end_line": 66,
        "end_column": 26
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Completeness (F p) U64 assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Gadgets/Rotation64/Rotation64.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-02-27T17:02:29+01:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "089100724aec52728e1dd5a09db77f1377d9967eb5df0bb771264e862a17e285"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[↑4]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[↑3])) ∧\n            (eval env state_var[1]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[↑4])) ∧\n        (eval env state_var[2]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[↑3]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Gadgets/Keccak/ThetaD.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "5905263729a27624e5f57d9cce1d12528d44927fcc77571c7c737a52a1f24a09"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/Chi.lean",
        "start_line": 103,
        "start_column": 2,
        "end_line": 103,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni✝ : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env :\n  env.uses_local_witnesses_completeness\n    (Vector.mapM\n          (fun i =>\n            (StateT.modifyGet fun ops =>\n                  (not64_bytewise state_var.toArray[↑(i + 5)],\n                    { offset := ops.offset + 0,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ main := fun x => StateT.pure (not64_bytewise x), local_length := fun x => 0,\n                                local_length_eq := ⋯, output := fun x x_1 => not64_bytewise x, output_eq := ⋯,\n                                initial_offset_eq := ⋯, assumptions := fun x => x.is_normalized,\n                                spec := fun x z => z.value = not64 x.value ∧ z.is_normalized, soundness := ⋯,\n                                completeness := ⋯ }.to_subcircuit\n                            ops.offset state_var.toArray[↑(i + 5)]) })).bind\n              fun state_not =>\n              (StateT.modifyGet fun ops =>\n                    (var_from_offset U64 ops.offset,\n                      { offset := ops.offset + 8,\n                        withLength :=\n                          ops.withLength.subcircuit\n                            ({ toElaboratedCircuit := And.And64.elaborated, assumptions := And.And64.assumptions,\n                                  spec := And.And64.spec, soundness := ⋯, completeness := ⋯ }.to_subcircuit\n                              ops.offset { x := state_not, y := state_var.toArray[↑(i + 10)] }) })).bind\n                fun state_and =>\n                StateT.modifyGet fun ops =>\n                  (var_from_offset U64 ops.offset,\n                    { offset := ops.offset + 8,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ toElaboratedCircuit := Xor.elaborated, assumptions := Xor.assumptions, spec := Xor.spec,\n                                soundness := ⋯, completeness := ⋯ }.to_subcircuit\n                            ops.offset { x := state_var.toArray[↑i], y := state_and }) }))\n          (Vector.finRange 25) { offset := i✝, withLength := Operations.empty i✝ }).2.withLength\nstate : KeccakState (F p)\nh_input : eval env state_var = state\nstate_norm : ∀ (i : Fin 25), state[↑i].is_normalized\ni : Fin 25\n⊢ ((eval env state_var[↑(i + 5)]).is_normalized ∧\n      (eval env (not64_bytewise state_var[↑(i + 5)])).is_normalized ∧ (eval env state_var[↑(i + 10)]).is_normalized) ∧\n    (eval env state_var[↑i]).is_normalized ∧ (eval env (var_from_offset U64 (i✝ + ↑i * 16))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Gadgets/Keccak/Chi.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T15:53:10+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "fbe22e7553e13dc09d9673d2446394476f147324ec40f167d12cc8fe564d075d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaXor.lean",
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var Inputs (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : Inputs (F p)\nh_assumptions : assumptions state\nh_input : { state := eval env state_var.state, d := eval env state_var.d } = state\n⊢ (((((((((((((((((((((((((eval env state_var.state[0]).is_normalized ∧ (eval env state_var.d[0]).is_normalized) ∧\n                                                  (eval env state_var.state[1]).is_normalized ∧\n                                                    (eval env state_var.d[0]).is_normalized) ∧\n                                                (eval env state_var.state[2]).is_normalized ∧\n                                                  (eval env state_var.d[0]).is_normalized) ∧\n                                              (eval env state_var.state[↑3]).is_normalized ∧\n                                                (eval env state_var.d[0]).is_normalized) ∧\n                                            (eval env state_var.state[↑4]).is_normalized ∧\n                                              (eval env state_var.d[0]).is_normalized) ∧\n                                          (eval env state_var.state[↑5]).is_normalized ∧\n                                            (eval env state_var.d[1]).is_normalized) ∧\n                                        (eval env state_var.state[↑6]).is_normalized ∧\n                                          (eval env state_var.d[1]).is_normalized) ∧\n                                      (eval env state_var.state[↑7]).is_normalized ∧\n                                        (eval env state_var.d[1]).is_normalized) ∧\n                                    (eval env state_var.state[↑8]).is_normalized ∧\n                                      (eval env state_var.d[1]).is_normalized) ∧\n                                  (eval env state_var.state[↑9]).is_normalized ∧\n                                    (eval env state_var.d[1]).is_normalized) ∧\n                                (eval env state_var.state[↑10]).is_normalized ∧\n                                  (eval env state_var.d[2]).is_normalized) ∧\n                              (eval env state_var.state[↑11]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                            (eval env state_var.state[↑12]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                          (eval env state_var.state[↑13]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                        (eval env state_var.state[↑14]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                      (eval env state_var.state[↑15]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                    (eval env state_var.state[↑16]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                  (eval env state_var.state[↑17]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                (eval env state_var.state[↑18]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n              (eval env state_var.state[↑19]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n            (eval env state_var.state[↑20]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n          (eval env state_var.state[↑21]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n        (eval env state_var.state[↑22]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n      (eval env state_var.state[↑23]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n    (eval env state_var.state[↑24]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Gadgets/Keccak/ThetaXor.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T16:27:02+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "2873887ae6a1bae1e42a14002481b84f060f4997302151bd9a5281c2293cf82e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "736e1d442b49d4e42f74774a22a52e5ce758f858",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaC.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env : env.uses_local_witnesses_completeness ((theta_c state_var).operations i0)\nstate : KeccakState (F p)\nh_assumptions : ∀ (i : Fin 25), state[i].is_normalized\nh_input : Vector.map (eval env) state_var = state\ns : ∀ (i : Fin 25), (eval env state_var[↑i]).is_normalized = True\n⊢ ((((((((((((((eval env (var_from_offset U64 i0)).is_normalized ∧\n                              (eval env (var_from_offset U64 (i0 + 8))).is_normalized) ∧\n                            (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                          (eval env (var_from_offset U64 (i0 + 32))).is_normalized) ∧\n                        (eval env (var_from_offset U64 (i0 + 40))).is_normalized) ∧\n                      (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n                    (eval env (var_from_offset U64 (i0 + 64))).is_normalized) ∧\n                  (eval env (var_from_offset U64 (i0 + 72))).is_normalized) ∧\n                (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n              (eval env (var_from_offset U64 (i0 + 96))).is_normalized) ∧\n            (eval env (var_from_offset U64 (i0 + 104))).is_normalized) ∧\n          (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n        (eval env (var_from_offset U64 (i0 + 128))).is_normalized) ∧\n      (eval env (var_from_offset U64 (i0 + 136))).is_normalized) ∧\n    (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/736e1d442b49d4e42f74774a22a52e5ce758f858/Clean/Gadgets/Keccak/ThetaC.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-03T17:31:42+02:00",
        "inclusion_date": "2025-04-26T06:10:07.487736+00:00"
      },
      "id": "fd108649f41da9e477ae792a876628dbfc6321e9c69fe89101c479579681cdd7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "f2e76a6e1eafc6e14c8ba3bdc8787b40e83d2676f364a9ab182d8e14342bcff6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "069405fddbb74942dfc0f6aa4bb4d920970a7afd3d077ffae591344c9a1a0fa4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "99773cf9a69430523e5273fbf5324bae03bd7feb5f77ecce70d02dc53a116ef0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "326fb272b3848666f6286379c3ad9fa10557b039d4f81025b4321b4a4a340c7e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\ninst✝ : spec.FiniteRange\nα β γ δ ε : Type\noa : OracleComp spec α\nob : OracleComp spec β\noc : OracleComp spec γ\nod : OracleComp spec δ\noe : α → β → γ → δ → OracleComp spec ε\nz : ε\n⊢ [=z|do\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      let d ← od\n      oe a b c d] =\n    [=z|do\n      let d ← od\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "1f0aa560e75ab75644f8a96509e2e875a6be52caebc30c15993c0a9eaaaa2931"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\noa : Bool → ProbComp α\nx : α\n⊢ [=x|$ᵗBool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "34a7d944e1d93da906c12e64f5fe2cac9934ef99f7023ba70472b9052086b046"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₁ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * (c +ᵥ g₁ +ᵥ x)) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "a253dc4097da35dc8925c81961705d779630f74c6eee5b60499a110c7942db61"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₂ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let y ← $ᵗP\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * y) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "26f0fb026a11668ff04bd67aac6f03f328b927df3b6f5eb75fd8499ed7257bc0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "46e107a8ae7cb9d30fadd2035572f154015784ccb1d02a384f6c9a174871de7a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "b50616dfa43fccbc08fcf795a5543e8ace46c565e96b5f22a8582f252c269957"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "d82de7806444889ab050b11bea2f0f51537c431026e9c1fd2d5845abc6c85389"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "0370e9a63a6a8e4927fd7d7661aba533d35abf05cf548b6d33f80ee55a09edb7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "40cde97e2d700ceed452d2b6d9622cd981143c00263a6046962ccc1dae358116"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "108dab275538d0b01431aafdf37f00bf2dfa8c9f24d524b3c0a5a841afa4411e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "67e1dfb10df66e225311d61d00e787dea7892e169a2549ed3d0d5ba7b0643af7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "a9a2007bb31b96c7942ba0b1c3493e4e2e742de70d4da74b5d86e07cccd26799"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "4fd5824500dad31cda2f9124765ee4b7065fa06d44500fb5591691be2251ac6f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "5ec2d5c65f168f11203145da6c28abf61c26fd02d0f58f71970aee7dde8243c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "fbc0f0b267800bffaf0cd789aa11992fd8b90e8961b68012d3e78b747924577a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "f2c19de50fe7d6c0035b4fa85d93e4f24b4bc6be98702ac0785a7a893b09b72b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "59cb72f6d89e88be88a0e7e1500f87ceff623bca0ead6b1a5460379de5a5568b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "fab546ffa6cd37e4d6d670f79e2ab0ead03f397cfcf204a855076acfed871512"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "ffc91d40d70acc8520c74deac94cc454b3020bf299f17005644aa75dc953a6a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "607daf232b146488079263e804c47aec6732cd8d00a84d91fe3ea938434eb689"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ cf x₁ = cf x₂",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "90e22cce6dc6c1f9c0191cf12d56ba7f70d98388f799cea8f4aa1692b63c7cdb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "99412603e1c8b14bd5ae0a4a5e96a5a2df72b00b6fe61718b0be0aa75becd6ce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "0164951497e9d45b4932faf77c7b8781ac832b930013cc4b75411e6373d22e7f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "7c17e2f0adc289a84e6e47bb0d45360e5943127924c519661825eb84daffd7c5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "d91b370abbe4dd4b701be01c61e0a29d999960ff966b117be71ce9187274186a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "b0724c9397037107290a967bbb141bf2f791de4a5f35b56fa7115d8a94a633fb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ ∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h ≤\n    ∑ s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "8f75739189158955abbcd9a5314cdcc4fc7abf6666d15ab63f2cb67c9dd8fd32"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h) =\n    1 - ∑ s, [=some s|cf <$> main] ^ 2 + ∑ s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "0a7c8ae6f5a4a0338d951de4485bff4362069a8d49656ecb4b036230c70b315e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ acc * h⁻¹ + (1 - acc ^ 2 * (↑q)⁻¹) = 1 - (acc ^ 2 * (↑q)⁻¹ - acc * h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "9fcc2742177d0b7980cb5e702461f53e7cf9a23df315adc50bcdf52516aff9ec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "132664ead3d7ee396408bfce296d40fefccc5b0188a6dfc9b6164dab635dceed"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "d2808b654b53bf3bc36b44a127e171032d2802550035212015217d8b5c67feb0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "e717d99c07725ca3a65438632076426b750626ef73039ea8f3cb9e1c0acd1dec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "c4c8a66d3dc75d1d891974a94857a74e770b08af6d75412257c305f70686e624"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "fa2fdc5eda3d2b3b30280d16431d497c0b1d6160ec40d402c61659e929918c4f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "93b8bef55ed9519877ea089104d767e85972e2c4f7a7f85e2eb3d67632bc6386"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "0b9f47cfa76b8e26897f37f770c3c9f3ec5b80eef6a1fa54936f24ecc5365458"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "47b1112fb157001ada8fa7be6b3a115dd5ef6d0cbf01ce33a4639a01f4ece3dc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "459424f683eb5272c213e6c35b0cf271d1034b44dd9eb4bdb03c4a7090aef709"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm : ℕ\ninst✝ : SelectableType α\nx y : Matrix (Fin 0) (Fin m) α\n⊢ (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "604718595ae9f9469686ddc8078077267fe2d1f87da8e37ef171e55667593bd5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : SelectableType α\nm : ℕ\nih :\n  ∀ (x y : Matrix (Fin m) (Fin m✝) α),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m✝) α\n⊢ [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "d4fb268b75e2481f0904bd4d6a154e1388cf61ccd268314ae94160b3cc03cd58"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : SelectableType α\nm : ℕ\nih :\n  [⊥|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n⊢ Vector α m✝ →\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          Fin.cons top.get <$> ihn)\n        m)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "43fe06a6d9dd02d4e78c2b053a0c19d52eb872614a2cbc4e0dfba8ea41dee4ca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "0b5e844e459146400b22666ad27ec6a2ab942c64f3a8cd643e849088753b7d93"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "193e4160a4d9c949b3d2ade03560504bf33a7098ff5533da83b57ac8a2e163a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (generateSeed spec qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "04f695f8076abadd81f737c7eb3c5f05a39aabedd7dec128d48b61f53ca5c66f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "514de0759e91a003384569f41000ebba3a5b4d9f5d7cfdf3fd33bb4e901cff66"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (generateSeed spec qc js)\n⊢ [=seed|generateSeed spec qc js] = (↑(finSupport (generateSeed spec qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "e8498c183d136a53ae74b637ad113ceb1835cc827dccf3e1106bb65649144d80"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "16e3d4b76caaa3145ec28cfa48b98fd60c41cda3604428708f170a3460ac3d7f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "62c86292e5c0f0b468e7db28a9655d11eaa9b63c126ed983bfea81d998ac9457"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "f5beb3b0b9b26b7070c76b65fcb643122335b43dee00148372843c82d96e44b4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "260871911c21fb96910c4b5ffd34b336a091317c115dc36d2fd23669572e3a0d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "012469c708ed9a322cf700da9e4e7a31ac293cbcbf8844ed722305aee5002da7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ℝ≥0∞\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "cce3816ed62172ef3a4037d734c306dc42ea282e0097467ab0710fee980ef594"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "dd3515c064935085fbc7c540e2946cf972137beddf5d1d61756f6621a38a4f78"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "4649e876f6658e093cd255aaaa883a0b77120d9cbf94490d086d7ae205bb7cba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "496de5aef9607ddfeead4cee05e04ffec980f70605389f3a37516505d4f2d362"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "26cc856f5a3e427c207300952a50db34d174a2fc892342e84d990f671404256f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 233,
        "start_column": 2,
        "end_line": 233,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝¹ : spec.FiniteRange\ninst✝ : Fintype β\noa : OracleComp spec α\nf : α → β\n⊢ [⊥|oa] = 1 - ∑ y, [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L233"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "e509d62e83c22498fa445f11721d4059985455453f736e9c2a34c0275c3f6de8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 725,
        "start_column": 83,
        "end_line": 725,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "84fa7b518421f845efbd855b5a2904baf072c21dc7472e1ac9614fcd6727d382"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 731,
        "start_column": 73,
        "end_line": 731,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L731"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "d3d5d384d11ae2bcf10afc4a2325928dc2de3f8a0767bf6da08dea538feadc75"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 69,
        "end_line": 736,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "52155123969504f9ff4ea33efbb5d6f58c69fb9992acfdf2bc5d65e0971d64f0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 740,
        "start_column": 59,
        "end_line": 740,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L740"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "a715f6a7d9aa1ed1b1bef70d4cb80ca5ba5c41506df2fc8f675e2af190446a36"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "6849468b93bb46862651b6226f0543584e46cd54581741019e39d44c174c3102"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "edd1317814000c2f872f8f5068ad2ed41a4323df2f953baa1092bab79babcb5b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "592d623de8165a5fd2ee236b011a1fb803ceb698fd0e6f1f1dcf5c5dde5c15d4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "96133d53d76be2b7387dc51729c249f35ea8af35c9cf4b7a0d068da414b587cb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "4f6e14795cfc11cd54ffb0146164a4de0f175ad421997fc14aac307d1ff5169b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 180,
        "start_column": 8,
        "end_line": 180,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/List.lean#L180"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "441d5ca3b63227da7d3bf99aa3bba6d6e127e83e8275895b38afadbb7a492d3d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 315,
        "start_column": 4,
        "end_line": 315,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/List.lean#L315"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "de17eaad5c6d59865692aa66cf66c110fc0705a711a6a09781abb07d661fa2cc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 327,
        "start_column": 4,
        "end_line": 327,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case v_insert\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nn : ℕ\nf : α → OracleComp spec β\nn✝ : ℕ\nhd : α\ntl : Vector α n✝\nih : ∀ {x : Vector β n✝}, x ∈ (Vector.mapM f tl).support ↔ ∀ (i : Fin n✝), x[i] ∈ (f tl[i]).support\nx : Vector β (n✝ + 1)\n⊢ x ∈ (Vector.mapM f { toArray := #[hd] ++ tl.toArray, size_toArray := ⋯ }).support ↔\n    ∀ (i : Fin (n✝ + 1)), x[↑i] ∈ (f (#[hd] ++ tl.toArray)[↑i]).support",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/DistSemantics/List.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:07:39-04:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "3441577f93657ef299e9136f33b31ed90ba41c8db8964f395ff83b16b7a3a3a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "32d3f99ec0ac445ae512b0421c2a3dd3059614b92514b92291d9fcf6952705a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "c082bd4a19884b91fcdba8eb0ac78a9026359ded3336578ebd53bc1947c5ac52"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "b52571f42444c06d545279a7cf8da3c9531aa113ea91827491cc033f9c764814"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "ea2cca197dca97bafb6fd8ccbf6e9dca798dcaab360324ba5fa99e3c693b10b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "5ca60ac21da492a9bfe28891fef3e70360b40b01aeb92c023d4f4d23eea871d9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "bc31904dbe7d556c2578e964b49cfd0e05b3c4f4ac38c331e759e3303cebe7c5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "98b00110abb4b6ecb11924a42fa4a2b748564ae4c43886085ae7dd5ff209f104"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "8484c42965dee244456ef18738c6661f32d09dd291f11df148a9f0a6a89e550b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "fec2c6a89428dabb60a53afa1be89600c06273c9",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/fec2c6a89428dabb60a53afa1be89600c06273c9/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:00:54.614047+00:00"
      },
      "id": "5f3c6b0f88ef50bbfcb16042d2d960579f3d0248fd836077d30e97a4c0faaf19"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n⊢ String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "3f88f689f21a7f5032622ace95438a1a05dcfb8960bba1f20d55c797559d11d7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ (∀ (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails ∧\n        ∀\n          x_1 ∈\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails ∧\n            ∀\n              x_2 ∈\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) ∧\n    (∀ (x : BitVec 256),\n        false ∉\n          (do\n              let x_1 ←\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData ←\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) ∧\n      ∃ a,\n        true ∈\n          (do\n              let x ←\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData ←\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "a48a21376e24190dbc24ca83ff8f62cbe763f3347e7be49436434aefb1c573e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7
      },
      "debug_info": {
        "goal": "message_content : String\n⊢ ∀ (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails ∧\n      ∀\n        x_1 ∈\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails ∧\n          ∀\n            x_2 ∈\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "5137f65b53dabd8a643ba874087aaa852d807b700b101f10a90a2fa68dd79f00"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/FrankingProtocol.lean",
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n⊢ ∀ (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "2020d5838d5cdb536123f015c4ee6636a14d07cfe0d292d08e5db212838e3762"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\ninst✝ : spec.FiniteRange\nα β γ δ ε : Type\noa : OracleComp spec α\nob : OracleComp spec β\noc : OracleComp spec γ\nod : OracleComp spec δ\noe : α → β → γ → δ → OracleComp spec ε\nz : ε\n⊢ [=z|do\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      let d ← od\n      oe a b c d] =\n    [=z|do\n      let d ← od\n      let a ← oa\n      let b ← ob\n      let c ← oc\n      oe a b c d]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/Examples/HHS_Elgamal.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "4643da5d2a7fbf238b0042b8d8b15c71fa9e737a7411c08a2726fbadc616237d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\noa : Bool → ProbComp α\nx : α\n⊢ [=x|$ᵗBool >>= oa] = [=x|oa true] / 2 + [=x|oa false] / 2",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/Examples/HHS_Elgamal.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "268b239ff949037eaa7da2a9f2907118b068823006fc385db5d6cded20784699"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 93,
        "start_column": 4,
        "end_line": 93,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₁ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = true then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * (c +ᵥ g₁ +ᵥ x)) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = true then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/Examples/HHS_Elgamal.lean#L93"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "5310444341df96c53365a60e32529baad7a4359a21e11486df6df296172a6643"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Examples/HHS_Elgamal.lean",
        "start_line": 98,
        "start_column": 4,
        "end_line": 98,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case e_a.e_a\nG P : Type\ninst✝⁶ : SelectableType G\ninst✝⁵ : SelectableType P\ninst✝⁴ : AddCommGroup G\ninst✝³ : Group P\ninst✝² : AddTorsor G P\ninst✝¹ : DecidableEq G\ninst✝ : DecidableEq P\nadversary : (elgamalAsymmEnc G P).IND_CPA_adversary\nx : P\ng₁ : G\n⊢ [=()|do\n      let a ←\n        (simulateQ\n                (idOracle ++ₛₒ\n                  {\n                      impl := fun {α} x_1 =>\n                        match α, x_1 with\n                        | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, m₂) =>\n                          (fun a => (a +ᵥ x, m₂ * (a +ᵥ g₁ +ᵥ x))) <$> ($ᵗG) }.withCaching)\n                (adversary (x, g₁ +ᵥ x))).run\n            ∅\n      if a.1 = false then pure () else failure] =\n    [=()|do\n      let c ← $ᵗG\n      let y ← $ᵗP\n      let b' ←\n        simulateQ\n            (idOracle ++ₛₒ\n              {\n                impl := fun {α} x_1 =>\n                  match α, x_1 with\n                  | .((P × P →ₒ P × P).range ()), query PUnit.unit (m₁, _m₂) => pure (c +ᵥ x, m₁ * y) })\n            (adversary (x, g₁ +ᵥ x))\n      if b' = false then pure () else failure]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/Examples/HHS_Elgamal.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "6e7e0af31d24f39c526d5b1f690a8ce4cae9f375a05d9a235669be2c4f4b264e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nQ : {α : Type v} → spec.OracleQuery α → Prop\nF : Prop\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nob : α → OracleComp spec β\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh :\n  ∀ (u : spec.range i),\n    allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u >>= ob) ↔\n      allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa u) ∧\n        ∀ x ∈ (oa u).supportWhen fun {α} => possible_outputs,\n          allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)\n⊢ (Q (query i t) ∧\n      ∀ x ∈ possible_outputs (query i t),\n        allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x) ∧\n          ∀ x_1 ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x),\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x_1)) ↔\n    (Q (query i t) ∧\n        ∀ x ∈ possible_outputs (query i t), allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (oa x)) ∧\n      ∀ (x : α),\n        ∀ x_1 ∈ possible_outputs (query i t),\n          x ∈ OracleComp.construct (fun x => {x}) (fun {β} q oa f => ⋃ u ∈ possible_outputs q, f u) ∅ (oa x_1) →\n            allWhen (fun {α} => Q) F (fun {α} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "debeb18ffca1a972ee7889feca77fb43f2ddab06b6041d74fd5ca81b16f5706e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Traversal.lean",
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type v\nι' : Type u_1\nspec' : OracleSpec ι'\noa : OracleComp spec α\npossible_outputs : {α : Type v} → spec.OracleQuery α → Set α\nh : oa.neverFailsWhen fun {α} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).support ⊆ possible_outputs q\nhso : ∀ {α : Type v} (q : spec.OracleQuery α), (so.impl q).neverFails\n⊢ (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "3589129f26e0438f0d07c44fc7849f7c8f0fc35ed3fca20a0a28c0f48108d437"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryBound.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nqb : ι → ℕ\n⊢ (∀ (qc : spec.QueryCount) (x : α), (x, qc) ∈ (simulateQ countingOracle oa).run.support → qc ≤ qb) ↔\n    ∀\n      x ∈\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x ≤ qb",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "116ee33a61c071f0dd1c7f4eef2c33696853a65c60922d56f72090585f197c42"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 27,
        "start_column": 2,
        "end_line": 27,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nz : α × β\n⊢ [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "6925f4cdd3e5ec2b18e8401a5c52fd564166608fef095abfd3c27c3de864e3ee"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nx : α\ny : β\n⊢ [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "b661a2b69860b41efbfb2c6db7d35acd851649eeb25ea8a955b7101ee5e6de29"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "57e9b333d9004ebc97373bfe7dacade9a2397bfddb4494c14f27e2cab14b9321"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "1bf9ad7af399c25e7ab144955ac7608e335e319c718ddc982b689d1d4221a426"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nz : γ × δ\n⊢ [=z|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "bf06c81c0de450cf492f36fb2456283c4cb63463f487e7b4afeb51de81e72862"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 57,
        "start_column": 2,
        "end_line": 57,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ δ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : OracleComp spec β\nf : α → γ\ng : β → δ\nx : γ\ny : δ\n⊢ [=(x, y)|do\n      let x ← oa\n      let y ← ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "0c008d6e601ae2efc725c375ef953400344aa9d674cdd65c0511871a0e6ec2aa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 67,
        "start_column": 2,
        "end_line": 67,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\nσ : Type u\ns : Finset σ\noc : σ → α → OracleComp spec γ\n⊢ [⊥|oa >>= ob] = ∑ x ∈ s, [⊥|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L67"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "ca1a462721e28f4fd7e59ef097aed618f80a2cb5880d974d71119a45e7fc6237"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ny : β\nz : α × β\n⊢ [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "d03150fe44ce6f318982a3362f857a09819d4b74dcfe11ad0cdc6d68e29119df"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 82,
        "start_column": 2,
        "end_line": 82,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nx : α\nz : α × β\n⊢ [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "1039f6f05e7eedc1e17db0584a977f0c55fbc6e169858b82c356cca3267511c0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 88,
        "start_column": 2,
        "end_line": 88,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nf : α → γ\ny : β\nz : γ × β\n⊢ [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L88"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "08e285d5332ba240dd111d382af54fecc3e6cddb186f4fb256b928e0a1a59577"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 94,
        "start_column": 2,
        "end_line": 94,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β γ : Type v\ninst✝ : spec.FiniteRange\nob : OracleComp spec β\nf : β → γ\nx : α\nz : α × γ\n⊢ [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "49c794175a3338171d06f957fd5cbb1d250c33f5b0137a3f9d997001a7e038a9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 150,
        "start_column": 2,
        "end_line": 150,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L150"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "a8a2183658b87ae62d0c93810e867591904a5b639cc252dd09770724c8e98989"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 154,
        "start_column": 2,
        "end_line": 154,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\n⊢ (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "aad178d311f8b279a2b8afc9a0d5f47f89c095e49b1956d519df31d3b6ade50d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 158,
        "start_column": 2,
        "end_line": 158,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ cf x₁ = cf x₂",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "7d0c27e5dd18b80e49704403e9bb9cdf7a9b69716897071bb989242117a3e8ab"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 162,
        "start_column": 2,
        "end_line": 162,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L162"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "59e81e2138901ed34ffac693e3b9421d975d213a0322e1262831aa5b122d49c7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 166,
        "start_column": 2,
        "end_line": 166,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n⊢ [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L166"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "e0aea0da9a895990d5f626bc023c63fff59c27b5f64526a29fbcdd0993a499ec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nx₁ x₂ : α\nh : (x₁, x₂) ∈ (main.fork qb js i cf).support\n⊢ ∃ s,\n    cf x₁ = some s ∧\n      cf x₂ = some s ∧\n        ∃ log₁,\n          ∃ (hcf₁ : ↑s < log₁.countQ i),\n            ∃ log₂,\n              ∃ (hcf₁_1 : ↑s < log₂.countQ i),\n                (log₁.getQ i)[s].1 = (log₂.getQ i)[s].1 ∧\n                  (log₁.getQ i)[s].2 ≠ (log₂.getQ i)[s].2 ∧\n                    (x₁, log₁) ∈ (simulateQ loggingOracle main).run.support ∧\n                      (x₂, log₂) ∈ (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "48e464b2f3c3944656498e9268230f85b1008bf08ebde9e36c645e2da8233213"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 280,
        "start_column": 10,
        "end_line": 280,
        "end_column": 15
      },
      "debug_info": {
        "goal": "case e_a\nι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\n⊢ [=(some s, some s)|do\n      let seed ← liftM (generateSeed spec qb js)\n      let x₁ ← (simulateQ seededOracle main).run seed\n      let u ← liftM ($ᵗspec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i ↑s).addValue i u\n      let x₂ ← (simulateQ seededOracle main).run seed'\n      pure (cf x₁, cf x₂)] =\n    [=(some s, some s)|do\n      let shared_seed ← liftM (generateSeed spec (update qb i ↑s) js)\n      let x₁ ← (simulateQ seededOracle main).run shared_seed\n      let x₂ ← (simulateQ seededOracle main).run shared_seed\n      pure (cf x₁, cf x₂)]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "c4b89629106ce8ecdb9f64374c2cd3e114318552138ba82fb2e825777053b490"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 282,
        "start_column": 53,
        "end_line": 282,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\ns : Fin (qb i + 1)\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nthis✝ : DecidableEq α\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed ∈ (liftM (generateSeed spec qb js)).support\n⊢ ↑(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L282"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "76e61066e6fc260672272d69d9345f133d1e2c7b0735a7a385ffe9d28ff5d6d2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 382,
        "start_column": 6,
        "end_line": 382,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ ∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h ≤\n    ∑ s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "80e70078a8fbdc5aeff0192a823735819194c2798c26fb3aedbda4389ddd3913"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 384,
        "start_column": 6,
        "end_line": 384,
        "end_column": 11
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ 1 - (∑ s, [=some s|cf <$> main] ^ 2 - ∑ s, [=some s|cf <$> main] / h) =\n    1 - ∑ s, [=some s|cf <$> main] ^ 2 + ∑ s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "836031035544135bbeeff04ea54e15d1889e38097235902067f75f6f9722a21d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/Fork.lean",
        "start_line": 404,
        "start_column": 8,
        "end_line": 404,
        "end_column": 13
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝⁴ : DecidableEq ι\nspec : OracleSpec ι\ninst✝³ : (i : ι) → SelectableType (spec.range i)\ninst✝² : spec.DecidableEq\ninst✝¹ : unifSpec ⊂ₒ spec\nα : Type\nmain : OracleComp spec α\nqb : ι → ℕ\njs : List ι\ni : ι\ncf : α → Option (Fin (qb i + 1))\ninst✝ : spec.FiniteRange\nacc : ℝ≥0∞ := ∑ s, [=some s|cf <$> main]\nh : ℝ≥0∞ := ↑(Fintype.card (spec.range i))\nq : ℕ := qb i + 1\n⊢ acc * h⁻¹ + (1 - acc ^ 2 * (↑q)⁻¹) = 1 - (acc ^ 2 * (↑q)⁻¹ - acc * h⁻¹)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/Fork.lean#L404"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "e681293198892a9f2bf7bcd08de78392581091fd4dc7a1cc14d4529a7af26927"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/SymmEncAlg.lean",
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7
      },
      "debug_info": {
        "goal": "m : Type → Type v\nM K C : Type\ninst✝⁵ : AlternativeMonad m\ninst✝⁴ : LawfulAlternative m\ninst✝³ : Fintype M\ninst✝² : Fintype K\ninst✝¹ : Fintype C\nencAlg : SymmEncAlg m M K C\ninst✝ : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n⊢ encAlg.perfectSecrecy ↔\n    (∀ (k : K), [=k|encAlg.exec encAlg.keygen] = (↑(Fintype.card K))⁻¹) ∧\n      ∀ (m_1 : M) (c : m C), ∃! k, k ∈ support (encAlg.exec encAlg.keygen) ∧ encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "628f66b22303b8426230daf92f65022a769113d3ec090db7eb594c34740172b6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/CryptoFoundations/FiatShamir.lean",
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nσ X W PC SC Ω P : Type\np : X → W → Bool\ninst✝⁵ : SelectableType X\ninst✝⁴ : SelectableType W\ninst✝³ : DecidableEq PC\ninst✝² : DecidableEq Ω\ninst✝¹ : SelectableType Ω\nsigmaAlg : SigmaAlg X W PC SC Ω P p\nhr : GenerableRelation X W p\nM : Type\ninst✝ : DecidableEq M\nα✝ : Type\nc : ProbComp α✝\n⊢ (fun {α} comp =>\n        let so := idOracle ++ₛₒ randomOracle;\n        (simulateQ so comp).run' ∅)\n      ((fun {α} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "6d615a7356c785c95847be42de5b84d7adf01b05f2913eca9938db0118259105"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nsuperSpec : OracleSpec τ\nα : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst✝⁴ : spec.DecidableEq\ninst✝³ : superSpec.DecidableEq\ninst✝² : superSpec.FiniteRange\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nq : spec.OracleQuery α\n⊢ (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "d695b7964c816ea2d11c596b8e34177ba7f92984c5f82a9d39b80380d0684f69"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Coercions/SubSpec.lean",
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nτ : Type v\nspec : OracleSpec ι\nα : Type w\nsuperSpec : OracleSpec τ\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec α\n⊢ (simulateQ { impl := fun {α} => liftM } oa).neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "076826980becd8b3d98a4d725419cec4b233fa3c25ef9a7e883a71b46580b13e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nob : α → OracleComp spec β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      let x ← (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "1a404260f7dc9f0ff3b7aa2b244c318776d42daf877ea998701e9b94c0ea9c60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/SeededOracle.lean",
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\nspec : OracleSpec ι\nα β : Type\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\ninst✝¹ : unifSpec ⊂ₒ spec\ninst✝ : spec.FiniteRange\nqc : ι → ℕ\njs : List ι\noa : OracleComp spec α\nf : α → β\ny : β\n⊢ [=y|do\n      let seed ← liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "5acab62b0478047ce93bec8e7542e26012aa9c964b10cdad9c70472075dfd232"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/CountingOracle.lean",
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\ninst✝ : DecidableEq ι\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "17f6dafe33617889875867789672fcf095b8ef34a4d6bc4532c9b161d53c113d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean",
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa : OracleComp spec α\n⊢ ∀ {α : Type u} (q : spec.OracleQuery α), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "3d6b517d5900920b843fbfb881c422849ecdd45543b9b7811d117bbf38036f46"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nhα : SelectableType α\n⊢ neverFails ($ᵗα)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "5d719f8499899e0f6c62163416ffcb8cfc1215a8480fb3e2a18b52de2c97cf71"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm : ℕ\ninst✝ : SelectableType α\nx y : Matrix (Fin 0) (Fin m) α\n⊢ (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "d444c0174c11f364c02eb76d4b8a6b52f95839f274aadf24308b14686d50ff2f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : SelectableType α\nm : ℕ\nih :\n  ∀ (x y : Matrix (Fin m) (Fin m✝) α),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top ← $ᵗVector α m✝\n            let bot ← ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m✝) α\n⊢ [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "907746ccb5eac968f7fb63df182ff2006cc5c7e540201c589b7353d5933d8632"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/UniformSelect.lean",
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\nα✝ : Type\nhα : SelectableType α✝\nα : Type\nm✝ : ℕ\ninst✝ : SelectableType α\nm : ℕ\nih :\n  [⊥|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          let bot ← ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n⊢ Vector α m✝ →\n    neverFails\n      (Nat.rec (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top ← $ᵗVector α m✝\n          Fin.cons top.get <$> ihn)\n        m)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "2101c3035d3408e1ea4abcf6b81bd4c576a4d686122a45b41ae2a1af6b7f83b9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\nj : ι\njs : List ι\n⊢ (do\n      let x ← replicate (qc j) ($ᵗspec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ ← replicate (qc j) ($ᵗspec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($ᵗspec.range j) >>= pure ∘ fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "40635bb648f014fb433875a475dc5827c5bb9ef59b656b90a36438e044c8cc7e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝¹ : DecidableEq ι\nspec : OracleSpec ι\ninst✝ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\n⊢ support (generateSeed spec qc js) = {seed | ∀ (i : ι), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "a50327c6aff60b9093d25fd20f425c809267d758f759aabf4897e9d4c3d60128"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝ : DecidableEq spec.QuerySeed\n⊢ finSupport (generateSeed spec qc js) ≠ ∅",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "6ec0f98865bfe201868cebf129fe81343b183f73dab7bf6d86d96feea01babcd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case append_singleton\nι : Type\ninst✝² : DecidableEq ι\nspec : OracleSpec ι\ninst✝¹ : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs✝ : List ι\ninst✝ : spec.FiniteRange\nj : List ι\njs : ι\nhjs :\n  ∀ seed ∈ support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / ↑(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed ∈ support (generateSeed spec qc (j ++ [js]))\n⊢ [=seed|do\n      let a ←\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($ᵗspec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($ᵗspec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast ∘ fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        ↑(Fintype.card (spec.range js)) ^ qc js)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "b877e3a5efe0e699eb7bb61027ee34e946dc346e4b137c0f63471827eb97049c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/Constructions/GenerateSeed.lean",
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type\ninst✝³ : DecidableEq ι\nspec : OracleSpec ι\ninst✝² : (i : ι) → SelectableType (spec.range i)\nqc : ι → ℕ\njs : List ι\ninst✝¹ : spec.FiniteRange\ninst✝ : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed ∈ support (generateSeed spec qc js)\n⊢ [=seed|generateSeed spec qc js] = (↑(finSupport (generateSeed spec qc js)).card)⁻¹",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "1dee0ef016363621bd73c6a73c48c73a561d150dabe21e8695f974a013258228"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 28,
        "start_column": 2,
        "end_line": 28,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ x ∈ oa.support, [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "6756a6956a52049f21901082665295487de3ddb3661671a98f88812cde63ce8e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 33,
        "start_column": 2,
        "end_line": 33,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\nh : ∀ (x : α), [⊥|ob x] = [⊥|oc x]\n⊢ [⊥|oa >>= ob] = [⊥|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "e97d5b27cda20decfff564e29e770c7bd151d4b8f95aa0cf009b90062805220d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "3ccfce33c7bdd335ffc145d50ff78fbf6327bcd4a69569cb24396705dbbf67c6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nh : ∀ (x : α), [=y|ob₁ x] = [=y|ob₂ x]\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "f84b96e2bc5a7ab4d619fbec5612c716cbf6467ecc33671d2ccb18d2c1a2419f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β γ : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob : α → OracleComp spec β\noc : α → OracleComp spec γ\ny : β\nz : γ\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z|oc x]\n⊢ [=y|oa >>= ob] ≤ [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "f2333aac8e36fa3f5cc8a455ef7552da65723f255d26493a14f3206d69630485"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 55,
        "start_column": 2,
        "end_line": 55,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nob₁ ob₂ : α → OracleComp spec β\ny : β\nr : ℝ≥0∞\nh : ∀ x ∈ oa.support, [=y|ob₁ x] = [=y|ob₂ x] / r\n⊢ [=y|oa >>= ob₁] = [=y|oa >>= ob₂] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L55"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "bdce42ce97795ada27923276b9fce926cfe5341a878eeb00adbac154bf26aadf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] + [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "6fd4d64ee507fabc0f04006158f31c52ed5b36ffe0d3c4e6dcf1d6a1d570f8b7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 83,
        "start_column": 2,
        "end_line": 83,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] + [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] + [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "8977e0a406e7f7146d7490d3a4c72e3b25d09c5216b8892d4fd125cff6593af2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 91,
        "start_column": 2,
        "end_line": 91,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=y|ob x] ≤ [=z₁|oc₁ x] - [=z₂|oc₂ x]\n⊢ [=y|oa >>= ob] ≤ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "95f2f3bb0c7829afafedb674fe31a4daeed9798287b4d703eb15dc0e15786e89"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Monad.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type v\nspec : OracleSpec ι\nα β : Type u\ninst✝ : spec.FiniteRange\nγ₁ γ₂ : Type u\noa : OracleComp spec α\nob : α → OracleComp spec β\noc₁ : α → OracleComp spec γ₁\noc₂ : α → OracleComp spec γ₂\ny : β\nz₁ : γ₁\nz₂ : γ₂\nh : ∀ x ∈ oa.support, [=z₁|oc₁ x] - [=z₂|oc₂ x] ≤ [=y|ob x]\n⊢ [=z₁|oa >>= oc₁] - [=z₂|oa >>= oc₂] ≤ [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Monad.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "08755d520ddc3ccbe01e455398b5f0108724e026c91cf6aa216ca4de48c5d10b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 233,
        "start_column": 2,
        "end_line": 233,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝¹ : spec.FiniteRange\ninst✝ : Fintype β\noa : OracleComp spec α\nf : α → β\n⊢ [⊥|oa] = 1 - ∑ y, [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L233"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "07dd27868f67a66d8e561da9dba3678a4b4499218da8f0661426f252ffbf730d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 725,
        "start_column": 83,
        "end_line": 725,
        "end_column": 88
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "ab2c67755abbd4a113f15159a4631b4f7200678f8d882ed00e3415f098fcefe1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 731,
        "start_column": 73,
        "end_line": 731,
        "end_column": 78
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\ns : ℝ≥0∞\nh' : [⊥|oa] = s\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L731"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "280d3b1c514eb170d5208e4cd63d45d7952703fdbb913a1d902c6d94ab04ccbd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 736,
        "start_column": 69,
        "end_line": 736,
        "end_column": 74
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh' : oa.neverFails\nob : α → OracleComp spec β\nr : ℝ≥0∞\nhr : ∀ x ∈ oa.support, [⊥|ob x] ≤ r\n⊢ [⊥|oa >>= ob] ≤ r",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "57e92f1c144a66c7aa94e6f245d5b1769943488f085db9b268259dc276807424"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 740,
        "start_column": 59,
        "end_line": 740,
        "end_column": 64
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα β : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\nh : oa.neverFails\nob : α → OracleComp spec β\n⊢ [⊥|oa >>= ob] = ∑' (x : α), [=x|oa] * [⊥|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L740"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "e4d9c27a0ca3392cf8a3eee655fee938a13ba781194559dd53f5a655e73841b9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ [⊥|oa] = 0 ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "a229c9993263bbd7de4d03125b5ca2e7fcb32126984994e98d776db6cf3d8356"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/EvalDist.lean",
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type w\ninst✝ : spec.FiniteRange\noa : OracleComp spec α\n⊢ 0 < [⊥|oa] ↔ ¬oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "de48c561d307c7f154d9d109ffa07964ae4630cd5e085e13d8b5fee5ea6c647b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40
      },
      "debug_info": {
        "goal": "case pure\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh : spec.FiniteRange\noa' : OracleComp spec α\nx : α\n⊢ (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "afdb3b603c8dfcc4d87b35d51a1c719fa07897bfa67322c90774ab7ba41eaa7e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case query_bind\nι : Type u\nspec : OracleSpec ι\nα : Type v\nh✝ : spec.FiniteRange\noa' : OracleComp spec α\ni : ι\nt : spec.domain i\noa : spec.range i → OracleComp spec α\nh : ∀ (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n⊢ (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "705dc51b1d390ba103582ac4ec009ef4ab19126af8704a8e2adfd85bd257b823"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/Alternative.lean",
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα : Type u\noa oa' : OracleComp spec α\ninst✝ : Decidable oa.neverFails\n⊢ (oa <|> oa').support = if oa.neverFails then oa.support else oa.support ∪ oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "4270c0739b8e1b0961f71510906934a86dccaf18c8ff99526a34e7ea4ea7b855"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 180,
        "start_column": 8,
        "end_line": 180,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\nι : Type u\nspec : OracleSpec ι\nα : Type u_1\nβ : Type u_2\ninst✝¹ : DecidableEq β\ninst✝ : spec.FiniteRange\nf : α → OracleComp spec β\nys zs : List β\nz : β\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : α\nxs : List α\nhzs :\n  take ys.length zs = ys.reverse →\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n⊢ [=drop ys.length (zs ++ [z])|do\n      let __do_lift ← f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/List.lean#L180"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "3b912762bd590e575819c17679ee7fba4ea90b2f71d6ea286cb4afbd6d584c53"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 315,
        "start_column": 4,
        "end_line": 315,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nf : α → OracleComp spec β\nx : α\nxs : List α\nas : Array α\nh : ∀ x ∈ as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs → (List.mapM f as.toList).neverFails\n⊢ (f x).neverFails ∧ ∀ x_1 ∈ (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/List.lean#L315"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-25T15:22:19-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "87cc635e65f0f05d526a5fd54ee8cd9c6d3f19087b7991ccecbcedec9f4541e3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/DistSemantics/List.lean",
        "start_line": 327,
        "start_column": 4,
        "end_line": 327,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case v_insert\nι : Type u\nspec : OracleSpec ι\nα β : Type v\nn : ℕ\nf : α → OracleComp spec β\nn✝ : ℕ\nhd : α\ntl : Vector α n✝\nih : ∀ {x : Vector β n✝}, x ∈ (Vector.mapM f tl).support ↔ ∀ (i : Fin n✝), x[i] ∈ (f tl[i]).support\nx : Vector β (n✝ + 1)\n⊢ x ∈ (Vector.mapM f { toArray := #[hd] ++ tl.toArray, size_toArray := ⋯ }).support ↔\n    ∀ (i : Fin (n✝ + 1)), x[↑i] ∈ (f (#[hd] ++ tl.toArray)[↑i]).support",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/DistSemantics/List.lean#L327"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-26T12:03:25-04:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "5e7e338dace9c80b0849ccca21d73013f106093ed198240f4b748917cb865b68"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/StateT.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u_1\nspec : OracleSpec ι\nσ : Type u\ninst✝ : Subsingleton σ\nα : Type u\nso : QueryImpl spec (StateT σ (OracleComp spec))\nh : ∀ (α : Type u) (q : spec.OracleQuery α) (s : σ), (so.impl q).run' s = liftM q\noa : OracleComp spec α\ns : σ\n⊢ (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "0e85daba29b4592fae181e6b1773c2a6dbf958de0abb8ff0f0dd64a3400989c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "VCVio/OracleComp/SimSemantics/WriterT.lean",
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7
      },
      "debug_info": {
        "goal": "ι : Type u\nspec : OracleSpec ι\nα ω : Type u\ninst✝ : Monoid ω\nso : QueryImpl spec (WriterT ω (OracleComp spec))\nhso : ∀ {α : Type u} (q : spec.OracleQuery α), (fst <$> (so.impl q).run).support = ⊤\nhso' : ∀ {α : Type u} (q : spec.OracleQuery α), (so.impl q).run.neverFails\noa : OracleComp spec α\n⊢ (simulateQ so oa).run.neverFails ↔ oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "54d71797617621d6f437481b59166261487a3acab84d9e6842a6c8be062bb4c5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\na : α\nb : β\nc : SPMF (α × β)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : ∀ (x : Option α), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n⊢ c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "7703360be92c7047358fe6564a117cf968d5584188a4f8c7a71b7d13a08adda1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18
      },
      "debug_info": {
        "goal": "case mp\nα β : Type u\nc : SPMF (α × β)\nh : c.IsCoupling OptionT.fail OptionT.fail\n⊢ c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "7947f08aacf425191b509e26080806baedb4e1dcf11381868f43c8aa1593fa64"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_fst\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "7ecde1ddc257ffcc610a6e486a7ceb021d98fef79288b75be2e014077705b878"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47
      },
      "debug_info": {
        "goal": "case mpr.map_snd\nα β : Type u\nc : SPMF (α × β)\nh : c = OptionT.fail\n⊢ Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "b245b35da831bdd1db9bce60cbbf8274909c31dce81c4bb69abb92f7068702a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\na₁ : α₁\na₂ : α₂\nthis : ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\n⊢ Prod.fst <$> d (a₁, a₂).1 (a₁, a₂).2 = f (a₁, a₂).1",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "8bf8c81bd616b1ad04cb8569af430f25dd19be399fcfcd08c2ba012e45e1027f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/ProbabilityTheory/Coupling.lean",
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23
      },
      "debug_info": {
        "goal": "case mk.map_snd\nα₁ α₂ β₁ β₂ : Type u\np : SPMF α₁\nq : SPMF α₂\nf : α₁ → SPMF β₁\ng : α₂ → SPMF β₂\nc : p.Coupling q\nd : α₁ → α₂ → SPMF (β₁ × β₂)\nh : ∀ (a₁ : α₁) (a₂ : α₂), ↑↑c (some (a₁, a₂)) ≠ 0 → (d a₁ a₂).IsCoupling (f a₁) (g a₂)\nhc₁ : Prod.fst <$> ↑c = p\nhc₂ : Prod.snd <$> ↑c = q\n⊢ (do\n      let a ← ↑c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a ← ↑c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "a52d02df868696046cdb4bb452eab9edc71e30c4aa122a59aac7744fbe9043a8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "ToMathlib/Control/WriterT.lean",
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44
      },
      "debug_info": {
        "goal": "m : Type u → Type v\ninst✝³ : AlternativeMonad m\nω α β γ : Type u\ninst✝² : Monoid ω\ninst✝¹ : LawfulMonad m\ninst✝ : LawfulAlternative m\n⊢ LawfulAlternative (WriterT ω m)",
        "url": "https://github.com/dtumad/VCV-io/blob/823d9ec3e955f9c30e0ad51187ee6432d1f0b7a0/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-27T03:07:56.204718+00:00"
      },
      "id": "0f6c129a4525d0ea4f78c08f7cd0e1c375a24a67b039f7b2422d89e71e490449"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Hilbert/NNFormula.lean",
        "start_line": 232,
        "start_column": 8,
        "end_line": 232,
        "end_column": 13
      },
      "debug_info": {
        "goal": "φ : NNFormula ℕ\n⊢ ∃ ψ, ψ.isModalCNF ∧ Hilbert.K ⊢! φ.toFormula ⭤ ψ.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Hilbert/NNFormula.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "e8deec4c9d640ce1a496c5c21f6384ec113f5e374f7cb9fa44e894856b68aa66"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Hilbert/NNFormula.lean",
        "start_line": 236,
        "start_column": 8,
        "end_line": 236,
        "end_column": 13
      },
      "debug_info": {
        "goal": "φ : NNFormula ℕ\n⊢ ∃ ψ, ψ.isModalDNF ∧ Hilbert.K ⊢! φ.toFormula ⭤ ψ.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Hilbert/NNFormula.lean#L236"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "7c7f724cfd2e5d650730c4ef37dc96fca8d662de2ec14e66eea2eaa0cc13cc86"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 27,
        "start_column": 25,
        "end_line": 27,
        "end_column": 30
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\n⊢ γ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Maximal/Makinson.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "2822d73ec160114de2b6df402d854a18b1273d1d9952e0bc2204fcfa53ea0cbb"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 28,
        "start_column": 33,
        "end_line": 28,
        "end_column": 38
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\n⊢ γ ∉ Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Maximal/Makinson.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "ed28b2e745b9624b2b8fac0fa577197ee128df07daff560d92da0904d1ce8b40"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 31,
        "start_column": 4,
        "end_line": 31,
        "end_column": 9
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\n⊢ ∃ δ ∈ Γ, (↑δ).toFormula ∈ L ∧ (↑δ).toFormula ∉ Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Maximal/Makinson.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "520b25d1fa9acecdaa56037c5e5e06e460f18e081d2d1eb2c3b69a454686f46f"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 36,
        "start_column": 4,
        "end_line": 36,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.intro\nL : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis✝ : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nξ : NNFormula ℕ\nproperty✝ : (□ξ).isPrebox ∨ (□ξ).isPredia ∨ (□ξ).degree = 0\nhψ₁ : ⟨□ξ, property✝⟩ ∈ Δ\nhψ₂ : (↑⟨□ξ, property✝⟩).isPrebox\nthis : □ξ.toFormula ∈ Logic.Ver\n⊢ False",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Maximal/Makinson.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "d13e954c41c7f46b64af62bca2fbac81c21ab0e3cd0e3795c8785e45c993169f"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 38,
        "start_column": 49,
        "end_line": 38,
        "end_column": 54
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nhΔ₁ : ∀ ψ ∈ Δ, ¬(↑ψ).isPrebox\n⊢ ∃ Γ, φ ⭤ ⋀Γ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Maximal/Makinson.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "1d2c75c1029eb8e0a9ce67543c4f8d0d64800087b7e0a1676bf2da4b1d45f05c"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 40,
        "start_column": 2,
        "end_line": 40,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.mk.intro.intro.intro\nL : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : ¬Hilbert.Ver ⊢! φ\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis✝ : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nhΔ₁ : ∀ ψ ∈ Δ, ¬(↑ψ).isPrebox\nthis : ∃ Γ, φ ⭤ ⋀Γ ∈ L\n⊢ ∃ ψ, ◇ψ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Maximal/Makinson.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "3b392c866fc41b4fdcbd9ebcfd731fb6946ea6eb6d4f85202f77087624c8dab1"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Balloon.lean",
        "start_line": 63,
        "start_column": 2,
        "end_line": 63,
        "end_column": 7
      },
      "debug_info": {
        "goal": "φ : Formula ℕ\nM : Model\ninst✝ : IsStrictOrder M.World M.Rel\nx : M.World\nh : ¬x ⊧ □φ\n⊢ ∃ y, x ≺ y ∧ ¬y ⊧ φ ∧ y ⊧ □φ",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Kripke/Balloon.lean#L63"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-04-26T09:19:50+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "8c701b0382872505127505ac734feba2240b200f7ea072bf3f847c44abee1357"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean",
        "start_line": 42,
        "start_column": 4,
        "end_line": 42,
        "end_column": 9
      },
      "debug_info": {
        "goal": "⊢ ∀ {φ : Formula ℕ}, Grz.miniCanonicalFrame Hilbert.GrzPoint3 φ ∈ FrameClass.finite_connected_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "d8db919afbe6a3344566a5bb7744731ebe6865138df782ca6727a0cb87a49e9b"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GLPoint3.lean",
        "start_line": 33,
        "start_column": 101,
        "end_line": 33,
        "end_column": 106
      },
      "debug_info": {
        "goal": "⊢ Complete Hilbert.GLPoint3 FrameClass.finite_strict_linear_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Kripke/Hilbert/GLPoint3.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-17T22:57:50+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "084f3ac30cc8bc612dd515a16d3b98f1162ccd3a1e8cb6420a77ce2afecdf7d7"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "950a664886db080b77a8baa50d46100f9d6a1853",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean",
        "start_line": 35,
        "start_column": 4,
        "end_line": 35,
        "end_column": 9
      },
      "debug_info": {
        "goal": "⊢ ∀ {φ : Formula ℕ}, Grz.miniCanonicalFrame Hilbert.GrzPoint2 φ ∈ FrameClass.finite_confluent_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/950a664886db080b77a8baa50d46100f9d6a1853/Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-27T03:11:21.063537+00:00"
      },
      "id": "20da667c452c36cf0ac6d10c6208c639354a558a339520a104daac9d0d4d3527"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Hilbert/NNFormula.lean",
        "start_line": 232,
        "start_column": 8,
        "end_line": 232,
        "end_column": 13
      },
      "debug_info": {
        "goal": "φ : NNFormula ℕ\n⊢ ∃ ψ, ψ.isModalCNF ∧ Hilbert.K ⊢! φ.toFormula ⭤ ψ.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Hilbert/NNFormula.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "9c6d7bcc97abf9f13b0c37f877c4ebb5eb042e2ce0b5edbea6c2071d1eec3eb2"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Hilbert/NNFormula.lean",
        "start_line": 236,
        "start_column": 8,
        "end_line": 236,
        "end_column": 13
      },
      "debug_info": {
        "goal": "φ : NNFormula ℕ\n⊢ ∃ ψ, ψ.isModalDNF ∧ Hilbert.K ⊢! φ.toFormula ⭤ ψ.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Hilbert/NNFormula.lean#L236"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "e0ec1a66e0764866fe0f1bdfe59b374c715b808e45cf2c759461bb1a1eb2274e"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 27,
        "start_column": 25,
        "end_line": 27,
        "end_column": 30
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\n⊢ γ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Maximal/Makinson.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "7dd7b49820de9e326f1b6b60de938e06d108cc60c6f768d2c7cfd71698a6baa9"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 28,
        "start_column": 33,
        "end_line": 28,
        "end_column": 38
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\n⊢ γ ∉ Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Maximal/Makinson.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "24db279cd727ec9bac752c76d23fc2064d3ed47e7d759295b6a0d2a8749c3721"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 31,
        "start_column": 4,
        "end_line": 31,
        "end_column": 9
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\n⊢ ∃ δ ∈ Γ, (↑δ).toFormula ∈ L ∧ (↑δ).toFormula ∉ Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Maximal/Makinson.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "ed8f6bdab7204308f8184849ef31c9ad74780e7532dfb2180aed99ec472e5f72"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 36,
        "start_column": 4,
        "end_line": 36,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mk.intro\nL : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis✝ : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nξ : NNFormula ℕ\nproperty✝ : (□ξ).isPrebox ∨ (□ξ).isPredia ∨ (□ξ).degree = 0\nhψ₁ : ⟨□ξ, property✝⟩ ∈ Δ\nhψ₂ : (↑⟨□ξ, property✝⟩).isPrebox\nthis : □ξ.toFormula ∈ Logic.Ver\n⊢ False",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Maximal/Makinson.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "d247b72b1f0863a8bf15311c09312b8e7cc1497d52d5fe8089ada93c2f4cdbee"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 38,
        "start_column": 49,
        "end_line": 38,
        "end_column": 54
      },
      "debug_info": {
        "goal": "L : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : φ ∉ Logic.Ver\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nhΔ₁ : ∀ ψ ∈ Δ, ¬(↑ψ).isPrebox\n⊢ ∃ Γ, φ ⭤ ⋀Γ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Maximal/Makinson.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "0ec1f2cba48897c0a656c636bc4badf6dcae209eca4e22b5b47d3fedcefe85de"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Maximal/Makinson.lean",
        "start_line": 40,
        "start_column": 2,
        "end_line": 40,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.mk.intro.intro.intro\nL : Logic\ninst✝¹ : L.Normal\ninst✝ : L.Consistent\nφ : Formula ℕ\nhL : φ ∈ L\nhV : ¬Hilbert.Ver ⊢! φ\nΓ : List { ψ // ψ.isModalCNFPart }\nγ : Formula ℕ\neγ : (⋀Γ.unattach).toFormula = γ\nh : Hilbert.K ⊢! φ.toNNFormula.toFormula ⭤ γ\nthis✝ : φ.toNNFormula.toFormula ⭤ γ ∈ L\nhγL : γ ∈ L\nhγV : γ ∉ Logic.Ver\nΔ : List { ψ // ψ.isPrebox ∨ ψ.isPredia ∨ ψ.degree = 0 }\nhδΓ : ⟨⋁Δ.unattach, ⋯⟩ ∈ Γ\nhδL : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∈ L\nhδV : (↑⟨⋁Δ.unattach, ⋯⟩).toFormula ∉ Logic.Ver\nhΔ₁ : ∀ ψ ∈ Δ, ¬(↑ψ).isPrebox\nthis : ∃ Γ, φ ⭤ ⋀Γ ∈ L\n⊢ ∃ ψ, ◇ψ ∈ L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Maximal/Makinson.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "b65ebe5ecbb189fb2406acaf8b3c5172ddcafceddb9a7ac2f84a6260ce61055e"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean",
        "start_line": 42,
        "start_column": 4,
        "end_line": 42,
        "end_column": 9
      },
      "debug_info": {
        "goal": "⊢ ∀ {φ : Formula ℕ}, Grz.miniCanonicalFrame Hilbert.GrzPoint3 φ ∈ FrameClass.finite_connected_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "ccfddc49677b06e4f0614783e21b803cba92acb2470305abfb47f86dcf80c218"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GLPoint3.lean",
        "start_line": 33,
        "start_column": 101,
        "end_line": 33,
        "end_column": 106
      },
      "debug_info": {
        "goal": "⊢ Complete Hilbert.GLPoint3 FrameClass.finite_strict_linear_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Kripke/Hilbert/GLPoint3.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-17T22:57:50+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "1d627d80d1d1906196eb4d370ad1b47087a8dc29292a2fa0f0b9323e66ad6fc0"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "strict-hierarchy",
        "commit": "c5ba54bc11691b0978d756355a7a8191dd4eec41",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean",
        "start_line": 35,
        "start_column": 4,
        "end_line": 35,
        "end_column": 9
      },
      "debug_info": {
        "goal": "⊢ ∀ {φ : Formula ℕ}, Grz.miniCanonicalFrame Hilbert.GrzPoint2 φ ∈ FrameClass.finite_confluent_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/c5ba54bc11691b0978d756355a7a8191dd4eec41/Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-27T03:30:59.091442+00:00"
      },
      "id": "3011fe079333483f83e4c162d2b58df07608e202f19aa0b5e2e7ad6cbc98e0dc"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/HardDirection.lean",
        "start_line": 8,
        "start_column": 2,
        "end_line": 8,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nM : Matroid α\nhM : M.IsRegular\n⊢ M.IsGood",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/HardDirection.lean#L8"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-13T12:19:44+01:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "b9197962a9343be6ff39410e7e8951a6cb689089fefb85fbeedf3ac820ac64d8"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Basic/SubmoduleSpans.lean",
        "start_line": 32,
        "start_column": 21,
        "end_line": 32,
        "end_column": 26
      },
      "debug_info": {
        "goal": "α R : Type\ninst✝ : Ring R\nX Y G I : Set α\nA : Matrix (↑X) (↑Y) R\nhIX : I ⊆ X\nB : Basis (↑G) R ↥(Submodule.span R A.range)\nhAI : LinearIndepOn R A hIX.elem.range\n⊢ Finite ↑G",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Basic/SubmoduleSpans.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-16T18:38:30+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "c0dda0989787f9f8cd0df7991ffc29e3da562447b9b3d44ab6d92cd916a992b7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Basic/SubmoduleSpans.lean",
        "start_line": 46,
        "start_column": 21,
        "end_line": 46,
        "end_column": 26
      },
      "debug_info": {
        "goal": "α R : Type\ninst✝ : Ring R\nX Y G I : Set α\nA : Matrix (↑X) (↑Y) R\nhIX : I ⊆ X\nB : Basis (↑G) R ↥(Submodule.span R A.range)\nhBI : LinearIndepOn R (fun x g => (B.repr ⟨A x, ⋯⟩) g) hIX.elem.range\n⊢ Finite ↑G",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Basic/SubmoduleSpans.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-16T18:38:30+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "5413a58bdf8f138c10a49514f7f5e5d5ee11628f3ae55fadc1d2e0c729d01854"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matrix/Pivoting.lean",
        "start_line": 241,
        "start_column": 2,
        "end_line": 241,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case right\nF : Type\ninst✝ : Field F\nk : ℕ\nA : Matrix (Fin k.succ) (Fin k.succ) F\nr c : Fin k.succ\nhArc : A r c ≠ 0\n⊢ ((A.shortTableauPivot r c).submatrix r.succAbove c.succAbove).det = A.det / A r c",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matrix/Pivoting.lean#L241"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-07T18:24:02+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "4267b02aa6e823990860d8773cd81f573fef7ee6ba183e287d06f24299df49c0"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 60,
        "start_column": 6,
        "end_line": 60,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case h.mp\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  I ⊆ (standardRepr1sumComposition hXY hYX).1.X ∪ (standardRepr1sumComposition hXY hYX).1.Y ∧\n    LinearIndepOn Z2 (Matrix.transpose fun x => (standardRepr1sumComposition hXY hYX).1.B.prependId x ∘ Subtype.toSum)\n      (Subtype.val ⁻¹' I)\n⊢ (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => Sₗ.B.prependId x ∘ Subtype.toSum)\n        (Subtype.val ⁻¹' (I ∩ (Sₗ.X ∪ Sₗ.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => Sᵣ.B.prependId x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (Sᵣ.X ∪ Sᵣ.Y)))) ∧\n      I ⊆ Sₗ.X ∪ Sₗ.Y ∪ (Sᵣ.X ∪ Sᵣ.Y)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum1.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "e70012e7f1fe1ca4ada346b68858e8b72e11adc54cb69993a48a5301291f662a"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum1.lean",
        "start_line": 62,
        "start_column": 6,
        "end_line": 62,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case right\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nvalid : (standardRepr1sumComposition hXY hYX).2\nI : Set α\nhI : I ⊆ (standardRepr1sumComposition hXY hYX).1.toMatroid.E\nlinearlyI :\n  (True ∧\n      LinearIndepOn Z2 (Matrix.transpose fun x => Sₗ.B.prependId x ∘ Subtype.toSum)\n        (Subtype.val ⁻¹' (I ∩ (Sₗ.X ∪ Sₗ.Y)))) ∧\n    (True ∧\n        LinearIndepOn Z2 (Matrix.transpose fun x => Sᵣ.B.prependId x ∘ Subtype.toSum)\n          (Subtype.val ⁻¹' (I ∩ (Sᵣ.X ∪ Sᵣ.Y)))) ∧\n      I ⊆ Sₗ.X ∪ Sₗ.Y ∪ (Sᵣ.X ∪ Sᵣ.Y)\n⊢ LinearIndepOn Z2 (Matrix.transpose fun x => (standardRepr1sumComposition hXY hYX).1.B.prependId x ∘ Subtype.toSum)\n    (Subtype.val ⁻¹' I)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum1.lean#L62"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-02-15T17:08:53+01:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "a7caa016f795e93a7a2a5f10ed556a59d06dd7fa909b8b1d83c040d2c96dc264"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 130,
        "start_column": 2,
        "end_line": 130,
        "end_column": 7
      },
      "debug_info": {
        "goal": "Q : Matrix (Fin 2) (Fin 2) Z2\nhQ : IsUnit Q\n⊢ ∃ f g, Q.submatrix ⇑f ⇑g = 1 ∨ Q.submatrix ⇑f ⇑g = !![1, 1; 0, 1]",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "a8cb514c28e110d6748ccd1721082f408bd6043165c901f49033d0dd38789c00"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 153,
        "start_column": 2,
        "end_line": 153,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ (Matrix.toCanonicalSigning Q hx₀ hx₁ hx' hy₀ hy₁ hy').IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L153"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "320e4038a25397f44828dc9540e7bc9f1cee1cf55096fe76694162ab9fe78106"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\nhQsub :\n  !![Q ⟨x₀, hx₀⟩ ⟨y₀, hy₀⟩, Q ⟨x₀, hx₀⟩ ⟨y₁, hy₁⟩, Q ⟨x₀, hx₀⟩ ⟨y', hy'⟩;\n        Q ⟨x₁, hx₁⟩ ⟨y₀, hy₀⟩, Q ⟨x₁, hx₁⟩ ⟨y₁, hy₁⟩, Q ⟨x₁, hx₁⟩ ⟨y', hy'⟩;\n        Q ⟨x', hx'⟩ ⟨y₀, hy₀⟩, Q ⟨x', hx'⟩ ⟨y₁, hy₁⟩, Q ⟨x', hx'⟩ ⟨y', hy'⟩].abs =\n    !![1, 0, 1; 0, 1, 1; 1, 1, 0]\n⊢ let Q' := Matrix.toCanonicalSigning Q hx₀ hx₁ hx' hy₀ hy₁ hy';\n  !![Q' ⟨x₀, hx₀⟩ ⟨y₀, hy₀⟩, Q' ⟨x₀, hx₀⟩ ⟨y₁, hy₁⟩, Q' ⟨x₀, hx₀⟩ ⟨y', hy'⟩;\n      Q' ⟨x₁, hx₁⟩ ⟨y₀, hy₀⟩, Q' ⟨x₁, hx₁⟩ ⟨y₁, hy₁⟩, Q' ⟨x₁, hx₁⟩ ⟨y', hy'⟩;\n      Q' ⟨x', hx'⟩ ⟨y₀, hy₀⟩, Q' ⟨x', hx'⟩ ⟨y₁, hy₁⟩, Q' ⟨x', hx'⟩ ⟨y', hy'⟩] =\n    !![1, 0, 1; 0, -1, 1; 1, 1, 0]",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "6c4a23ae638eec87c18ba76376bbb219bc4db5b7649ab0319ad39ed00a355dcd"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 187,
        "start_column": 2,
        "end_line": 187,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\nhQsub :\n  !![Q ⟨x₀, hx₀⟩ ⟨y₀, hy₀⟩, Q ⟨x₀, hx₀⟩ ⟨y₁, hy₁⟩, Q ⟨x₀, hx₀⟩ ⟨y', hy'⟩;\n        Q ⟨x₁, hx₁⟩ ⟨y₀, hy₀⟩, Q ⟨x₁, hx₁⟩ ⟨y₁, hy₁⟩, Q ⟨x₁, hx₁⟩ ⟨y', hy'⟩;\n        Q ⟨x', hx'⟩ ⟨y₀, hy₀⟩, Q ⟨x', hx'⟩ ⟨y₁, hy₁⟩, Q ⟨x', hx'⟩ ⟨y', hy'⟩].abs =\n    !![1, 1, 1; 0, 1, 1; 1, 1, 0]\n⊢ let Q' := Matrix.toCanonicalSigning Q hx₀ hx₁ hx' hy₀ hy₁ hy';\n  !![Q' ⟨x₀, hx₀⟩ ⟨y₀, hy₀⟩, Q' ⟨x₀, hx₀⟩ ⟨y₁, hy₁⟩, Q' ⟨x₀, hx₀⟩ ⟨y', hy'⟩;\n      Q' ⟨x₁, hx₁⟩ ⟨y₀, hy₀⟩, Q' ⟨x₁, hx₁⟩ ⟨y₁, hy₁⟩, Q' ⟨x₁, hx₁⟩ ⟨y', hy'⟩;\n      Q' ⟨x', hx'⟩ ⟨y₀, hy₀⟩, Q' ⟨x', hx'⟩ ⟨y₁, hy₁⟩, Q' ⟨x', hx'⟩ ⟨y', hy'⟩] =\n    !![1, 1, 1; 0, 1, 1; 1, 1, 0]",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "a3dfb2feeb6a948102d2cb359dc253da4c6470dfdcd042bd1ef07cef67835325"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 199,
        "start_column": 2,
        "end_line": 199,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ◫ ▮c₀ ◫ (▮c₀) - (▮c₁)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L199"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "784722fd383ad4018ef37b96604fe99632926442e09145eb02d06bcfc2d174cf"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 209,
        "start_column": 2,
        "end_line": 209,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ◫ ▮c₁ ◫ (▮c₀) - (▮c₁)).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "b9e77282a534a9ecc7e6d62754ab9447f1ed56e3bc92580beacf6092f654796f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 218,
        "start_column": 2,
        "end_line": 218,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  ∀ (i : ↑(X \\ {x'})), ![c₀ i, c₁ i] ≠ ![1, -1] ∧ ![c₀ i, c₁ i] ≠ ![-1, 1]",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L218"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "c4d6099c23728d17d2687eea544e5a4eac70ba286d6587f1ec4ae820f593fe0c"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 232,
        "start_column": 2,
        "end_line": 232,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let c₀ := fun j => Q (⋯.elem j) ⟨y₀, hy₀⟩;\n  let c₁ := fun j => Q (⋯.elem j) ⟨y₁, hy₁⟩;\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ◫ ▮c₀ ◫ ▮(-c₀) ◫ ▮c₁ ◫ ▮(-c₁) ◫ ▮(c₀ - c₁) ◫ ▮(c₁ - c₀) ◫ ▮0).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "1cf7ec68e2a9065c319c1d5a833ae0bb0ba9485650760f765d1fd3ae9d684178"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 242,
        "start_column": 2,
        "end_line": 242,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nX Y : Set α\nx₀ x₁ x' y₀ y₁ y' : α\nQ : Matrix ↑X ↑Y ℚ\nhx₀ : x₀ ∈ X\nhx₁ : x₁ ∈ X\nhx' : x' ∈ X\nhy₀ : y₀ ∈ Y\nhy₁ : y₁ ∈ Y\nhy' : y' ∈ Y\nhQ : Q.IsTotallyUnimodular\n⊢ let d₀ := fun x => Q ⟨x₀, hx₀⟩ (⋯.elem x);\n  let d₁ := fun x => Q ⟨x₁, hx₁⟩ (⋯.elem x);\n  let Q' := Q.submatrix ⋯.elem ⋯.elem;\n  (Q' ⊟ ▬d₀ ⊟ ▬(-d₀) ⊟ ▬d₁ ⊟ ▬(-d₁) ⊟ ▬(d₀ - d₁) ⊟ ▬(d₁ - d₀) ⊟ ▬0).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L242"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "a97aadff7c725235b71f979ec9c130a2422a5ac902ed7697f38a533cf7546a4b"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 425,
        "start_column": 2,
        "end_line": 425,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fᵣ i) (fₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  D = (fun x1 x2 => c₀ x1 * r₀ x2) + fun x1 x2 => c₁ x1 * r₁ x2",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L425"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "0d411904be9e5143abcccb4777f1be4a5c8fd04f309855883a2e4cc8eb0f7956"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 528,
        "start_column": 2,
        "end_line": 528,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fᵣ i) (fₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  ∀ (i : ↑(Xᵣ \\ {x'})), D i = r₀ ∨ D i = -r₀ ∨ D i = r₁ ∨ D i = -r₁ ∨ D i = r₂ ∨ D i = -r₂ ∨ D i = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L528"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "246801199c61eff945eb8b2c4f367387d652aed12263ab08edf1a4aa7463202d"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 631,
        "start_column": 2,
        "end_line": 631,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fᵣ i) (fₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  ∀ (j : ↑(Yₗ \\ {y'})),\n    (fun x => D x j) = c₀ ∨\n      (fun x => D x j) = -c₀ ∨\n        (fun x => D x j) = c₁ ∨\n          (fun x => D x j) = -c₁ ∨ (fun x => D x j) = c₀ - c₁ ∨ (fun x => D x j) = c₁ - c₀ ∨ (fun x => D x j) = 0",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L631"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "30b68e630914af8017f04e3bc06cab4bccd7b895412c7fd60b2185ca573cc8cb"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 734,
        "start_column": 2,
        "end_line": 734,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fᵣ i) (fₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  (Aᵣ ◫ D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L734"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "836671da9eb24b8f6bc95626819cade86c7b76be115f303d11e6adcd2e962fb4"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 838,
        "start_column": 2,
        "end_line": 838,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁴ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ' : Matrix ↑Xₗ ↑Yₗ ℚ\nBᵣ' : Matrix ↑Xᵣ ↑Yᵣ ℚ\nhBₗ' : Bₗ'.IsTotallyUnimodular\nhBᵣ' : Bᵣ'.IsTotallyUnimodular\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nhBₗ'sub :\n  (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\nhBᵣ'sub :\n  (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case1_Unsigned ∨\n    (Matrix.special3x3Submatrix Bᵣ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs = Special3x3Submatrix_Case2_Unsigned\n⊢ let_fun x₀inXₗ := ⋯;\n  let_fun x₀inXᵣ := ⋯;\n  let_fun x₁inXₗ := ⋯;\n  let_fun x₁inXᵣ := ⋯;\n  let_fun x'inXₗ := ⋯;\n  let_fun x'inXᵣ := ⋯;\n  let_fun y₀inYₗ := ⋯;\n  let_fun y₀inYᵣ := ⋯;\n  let_fun y₁inYₗ := ⋯;\n  let_fun y₁inYᵣ := ⋯;\n  let_fun y'inYₗ := ⋯;\n  let_fun y'inYᵣ := ⋯;\n  let Bₗ := Matrix.toCanonicalSigning Bₗ' x₀inXₗ x₁inXₗ x'inXₗ y₀inYₗ y₁inYₗ y'inYₗ;\n  let Bᵣ := Matrix.toCanonicalSigning Bᵣ' x₀inXᵣ x₁inXᵣ x'inXᵣ y₀inYᵣ y₁inYᵣ y'inYᵣ;\n  let Aₗ := Bₗ.submatrix ⋯.elem ⋯.elem;\n  let Aᵣ := Bᵣ.submatrix ⋯.elem ⋯.elem;\n  let D₀ₗ :=\n    !![Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₀, x₀inXₗ⟩ ⟨y₁, y₁inYₗ⟩;\n      Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₀, y₀inYₗ⟩, Bₗ ⟨x₁, x₁inXₗ⟩ ⟨y₁, y₁inYₗ⟩];\n  let D₀ᵣ :=\n    !![Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₀, x₀inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩;\n      Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₀, y₀inYᵣ⟩, Bᵣ ⟨x₁, x₁inXᵣ⟩ ⟨y₁, y₁inYᵣ⟩];\n  let Dₗ := ![Bₗ ⟨x₀, x₀inXₗ⟩ ∘ ⋯.elem, Bₗ ⟨x₁, x₁inXₗ⟩ ∘ ⋯.elem];\n  let Dᵣ := Matrix.of fun i => ![Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ⟩, Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ⟩];\n  let Dₗᵣ := Dᵣ * D₀ₗ⁻¹ * Dₗ;\n  let D' := Matrix.fromBlocks Dₗ D₀ₗ Dₗᵣ Dᵣ;\n  let_fun fᵣ := fun i =>\n    if hi₀ : ↑i = x₀ then ◩0\n    else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim;\n  let_fun fₗ := fun j =>\n    if hj₀ : ↑j = y₀ then ◪0\n    else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim;\n  let D := Matrix.of fun i j => D' (fᵣ i) (fₗ j);\n  let c₀ := fun j => Bᵣ (⋯.elem j) ⟨y₀, y₀inYᵣ⟩;\n  let c₁ := fun j => Bᵣ (⋯.elem j) ⟨y₁, y₁inYᵣ⟩;\n  let d₀ := fun i => Bₗ ⟨x₀, x₀inXₗ⟩ (⋯.elem i);\n  let d₁ := fun i => Bₗ ⟨x₁, x₁inXₗ⟩ (⋯.elem i);\n  let D₀_unsigned := (Matrix.special3x3Submatrix Bₗ' ⋯ ⋯ ⋯ ⋯ ⋯ ⋯).abs;\n  let r₀ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ - d₁ else ⋯.elim;\n  let r₁ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then -d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₁ else ⋯.elim;\n  let r₂ :=\n    if hD₀_case1 : D₀_unsigned = Special3x3Submatrix_Case1_Unsigned then d₀ - d₁\n    else if hD₀_case2 : D₀_unsigned = Special3x3Submatrix_Case2_Unsigned then d₀ else ⋯.elim;\n  (Aₗ ⊟ D).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L838"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-25T17:48:24+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "a9f089c79c89526f717016c67f3fcd6f8278f353771357908d80230a0c124d81"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 881,
        "start_column": 6,
        "end_line": 881,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case inr.inl\nα : Type\nXₗ Yₗ Xᵣ Yᵣ : Set α\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\nhAₗ✝ : (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular\nhAᵣ✝ : (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular\nhcc : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\nhrr : ∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range\nf : Fin 1 → ↑Xₗ ⊕ ↑Xᵣ\ng : Fin 1 → ↑Yₗ ⊕ ↑Yᵣ\nhAₗ : Aₗ.IsTotallyUnimodular\nhAᵣ : Aᵣ.IsTotallyUnimodular\ni₂ : ↑Xᵣ\nj₁ : ↑Yₗ\n⊢ c₀ i₂ * r₀ j₁ + c₁ i₂ * r₁ j₁ ∈ SignType.cast.range",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L881"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "b66b065d4f1f6c4010597690da139a09a3006eccf92b6c7c377e2ee6f2fe09c8"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 895,
        "start_column": 2,
        "end_line": 895,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nXᵣ Yᵣ : Set α\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\nhAᵣ : (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular\nhcc : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\n⊢ (▮0 ◫ ▮(-c₀ - c₁) ◫ ▮(c₀ - c₁) ◫ ▮(c₁ - c₀) ◫ ▮(c₀ + c₁) ◫ ▮(-c₀) ◫ ▮(-c₁) ◫ ▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L895"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-14T14:06:11+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "394d171c610c97bae0d123f898badf8e85d6d213a6a31ab1a5e62502c8502d60"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1017,
        "start_column": 2,
        "end_line": 1017,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nXₗ Yₗ Xᵣ : Set α\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\ni : ↑Xₗ\nj : ↑Yₗ\nhij : Aₗ i j = 1 ∨ Aₗ i j = -1\nhAₗ : (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular\nhAᵣ : (▮c₀ ◫ ▮c₁).IsTotallyUnimodular\nhc₀c₁ : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\nhr₀r₁ : ∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range\n⊢ let r₀' := matrix3sumCompositionAlt_pivotAₗ_Dr₀ Aₗ r₀ r₁ c₀ c₁ hij;\n  let r₁' := matrix3sumCompositionAlt_pivotAₗ_Dr₁ Aₗ r₀ r₁ c₀ c₁ hij;\n  (▬r₀' ⊟ ▬r₁' ⊟ Aₗ).IsTotallyUnimodular ∧ ∀ (j : ↑Yₗ), (r₀' + r₁') j ∈ SignType.cast.range",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L1017"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "eb7ee68353005efc90a77c9a4b1205dc858155803952b93f1fb6acde18d6fc04"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1033,
        "start_column": 4,
        "end_line": 1033,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case hBD\nα : Type\ninst✝ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\ni : ↑Xₗ\nj : ↑Yₗ\nhij : Aₗ i j = 1 ∨ Aₗ i j = -1\nB : Matrix (↑Xₗ ⊕ ↑Xᵣ) (↑Yₗ ⊕ ↑Yᵣ) ℚ := matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁\nr₀' : ↑Yₗ → ℚ := matrix3sumCompositionAlt_pivotAₗ_Dr₀ Aₗ r₀ r₁ c₀ c₁ hij\nr₁' : ↑Yₗ → ℚ := matrix3sumCompositionAlt_pivotAₗ_Dr₁ Aₗ r₀ r₁ c₀ c₁ hij\nhBAₗ : (B.shortTableauPivot ◩i ◩j).toBlocks₁₁ = Aₗ.shortTableauPivot i j\nhB0 : (B.shortTableauPivot ◩i ◩j).toBlocks₁₂ = 0\n⊢ (B.shortTableauPivot ◩i ◩j).toBlocks₂₁ = (fun x1 x2 => c₀ x1 * r₀' x2) + fun x1 x2 => c₁ x1 * r₁' x2",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L1033"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "6bcfb93531fab661747cd66423c3c9af919e7111158cffbe53773f2f8e79c708"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1101,
        "start_column": 8,
        "end_line": 1101,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α✝¹ α✝ α : Type\ninst✝ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nn : ℕ\nih :\n  ∀ {Aₗ : Matrix ↑Xₗ ↑Yₗ ℚ} {Aᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ} {r₀ r₁ : ↑Yₗ → ℚ} {c₀ c₁ : ↑Xᵣ → ℚ},\n    (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular →\n      (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular →\n        (∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range) →\n          (∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range) →\n            (matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).IsPreTU (n + 1)\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\nhrrAₗ : (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular\nhccAᵣ : (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular\nhcc : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\nhrr : ∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range\nhAₗ : Aₗ.IsTotallyUnimodular\nhAᵣ : Aᵣ.IsTotallyUnimodular\ncontr : ¬(matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).IsPreTU (n + 1 + 1)\nf : Fin (n + 1 + 1) → ↑Xₗ ⊕ ↑Xᵣ\ng : Fin (n + 1 + 1) → ↑Yₗ ⊕ ↑Yᵣ\nhAfg : ((matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).submatrix f g).det ∉ SignType.cast.range\nhf : Function.Injective f\nhg : Function.Injective g\ni₁ : Fin (n + 2)\nx₁ : ↑Xₗ\nhix₁ : f i₁ = ◩x₁\nj₀ : Fin (n + 2)\ny₀ : ↑Yₗ\nhjy₀ : g j₀ = ◩y₀\nhAxy0 : Aₗ x₁ y₀ ≠ 0\nhAxy1 : Aₗ x₁ y₀ = 1 ∨ Aₗ x₁ y₀ = -1\nf' g' : Fin (n + 1) → Fin (n + 1).succ\nimpossible :\n  ((((matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).submatrix f g).shortTableauPivot i₁ j₀).submatrix f' g').det ∉\n    SignType.cast.range\n⊢ (▬matrix3sumCompositionAlt_pivotAₗ_Dr₀ Aₗ r₀ r₁ c₀ c₁ hAxy1 ⊟\n        ▬matrix3sumCompositionAlt_pivotAₗ_Dr₁ Aₗ r₀ r₁ c₀ c₁ hAxy1 ⊟\n      Aₗ.shortTableauPivot x₁ y₀).IsTotallyUnimodular",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L1101"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-11T11:25:57+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "33f1e40eb613d72a99c75b6cc7b43ebaec6ba537ecbc676b7242af6d4405c1d3"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1102,
        "start_column": 8,
        "end_line": 1102,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α✝¹ α✝ α : Type\ninst✝ : DecidableEq α\nXₗ Yₗ Xᵣ Yᵣ : Set α\nn : ℕ\nih :\n  ∀ {Aₗ : Matrix ↑Xₗ ↑Yₗ ℚ} {Aᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ} {r₀ r₁ : ↑Yₗ → ℚ} {c₀ c₁ : ↑Xᵣ → ℚ},\n    (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular →\n      (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular →\n        (∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range) →\n          (∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range) →\n            (matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).IsPreTU (n + 1)\nAₗ : Matrix ↑Xₗ ↑Yₗ ℚ\nAᵣ : Matrix ↑Xᵣ ↑Yᵣ ℚ\nr₀ r₁ : ↑Yₗ → ℚ\nc₀ c₁ : ↑Xᵣ → ℚ\nhrrAₗ : (▬r₀ ⊟ ▬r₁ ⊟ Aₗ).IsTotallyUnimodular\nhccAᵣ : (▮c₀ ◫ ▮c₁ ◫ Aᵣ).IsTotallyUnimodular\nhcc : ∀ (i : ↑Xᵣ), (c₀ - c₁) i ∈ SignType.cast.range\nhrr : ∀ (j : ↑Yₗ), (r₀ + r₁) j ∈ SignType.cast.range\nhAₗ : Aₗ.IsTotallyUnimodular\nhAᵣ : Aᵣ.IsTotallyUnimodular\ncontr : ¬(matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).IsPreTU (n + 1 + 1)\nf : Fin (n + 1 + 1) → ↑Xₗ ⊕ ↑Xᵣ\ng : Fin (n + 1 + 1) → ↑Yₗ ⊕ ↑Yᵣ\nhAfg : ((matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).submatrix f g).det ∉ SignType.cast.range\nhf : Function.Injective f\nhg : Function.Injective g\ni₁ : Fin (n + 2)\nx₁ : ↑Xₗ\nhix₁ : f i₁ = ◩x₁\nj₀ : Fin (n + 2)\ny₀ : ↑Yₗ\nhjy₀ : g j₀ = ◩y₀\nhAxy0 : Aₗ x₁ y₀ ≠ 0\nhAxy1 : Aₗ x₁ y₀ = 1 ∨ Aₗ x₁ y₀ = -1\nf' g' : Fin (n + 1) → Fin (n + 1).succ\nimpossible :\n  ((((matrix3sumCompositionAlt Aₗ Aᵣ r₀ r₁ c₀ c₁).submatrix f g).shortTableauPivot i₁ j₀).submatrix f' g').det ∉\n    SignType.cast.range\n⊢ ∀ (j : ↑Yₗ),\n    (matrix3sumCompositionAlt_pivotAₗ_Dr₀ Aₗ r₀ r₁ c₀ c₁ hAxy1 +\n          matrix3sumCompositionAlt_pivotAₗ_Dr₁ Aₗ r₀ r₁ c₀ c₁ hAxy1)\n        j ∈\n      SignType.cast.range",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L1102"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-11T11:25:57+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "76c3ff52e3f50aa95237ab74e001aa13500c479316d7ae1a7dc9c9261e5285f8"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1161,
        "start_column": 8,
        "end_line": 1161,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁵ : DecidableEq α\nβ : Type\ninst✝⁴ : Field β\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ : Matrix (↑Xₗ) (↑Yₗ) β\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) β\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nB : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁})) ⊕ ↑(Xᵣ \\ {x'})) (↑(Yₗ \\ {y'}) ⊕ ↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β × Prop\nhB : B = matrix3sumComposition_standard Bₗ Bᵣ hXX hYY\nhrXₗ✝ : x₀ ᕃ x₁ ᕃ {x'} ⊆ Xₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hXX)) Set.inter_subset_left\nx₀inXₗ✝ : x₀ ∈ Xₗ := Eq.mem3₀ₗ hXX\nx₁inXₗ✝ : x₁ ∈ Xₗ := Eq.mem3₁ₗ hXX\nhcYₗ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYY)) Set.inter_subset_left\nhcYᵣ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yᵣ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYY)) Set.inter_subset_right\ny₀inYₗ✝ : y₀ ∈ Yₗ := Eq.mem3₀ₗ hYY\ny₀inYᵣ✝ : y₀ ∈ Yᵣ := Eq.mem3₀ᵣ hYY\ny₁inYₗ✝ : y₁ ∈ Yₗ := Eq.mem3₁ₗ hYY\ny₁inYᵣ✝ : y₁ ∈ Yᵣ := Eq.mem3₁ᵣ hYY\nAₗ : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁}))) (↑(Yₗ \\ {y'})) β := Bₗ.submatrix ⋯.elem ⋯.elem\nAᵣ : Matrix (↑(Xᵣ \\ {x'})) (↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β := Bᵣ.submatrix ⋯.elem ⋯.elem\nc₀ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ✝⟩\nc₁ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ✝⟩\nv₀ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₀, x₀inXₗ✝⟩ ∘ ⋯.elem\nv₁ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₁, x₁inXₗ✝⟩ ∘ ⋯.elem\nD₀ₗ : Matrix (Fin 2) (Fin 2) β :=\n  !![Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩;\n    Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩]\nr₀ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 0 0 * v₀ i + D₀ₗ⁻¹ 0 1 * v₁ i\nr₁ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 1 0 * v₀ i + D₀ₗ⁻¹ 1 1 * v₁ i\nhBₗₗ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₁₁ = Aₗ\nhBₗᵣ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₁₂ = 0\nhBᵣᵣ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₂₂ = Aᵣ\ni : ↑(Xᵣ \\ {x'})\nj : ↑(Yₗ \\ {y'})\nhi : ↑i = x₀\nhj : ↑j = y₀\n⊢ Matrix.fromBlocks ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem]\n      !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]\n      ((Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩]) *\n          !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]⁻¹ *\n        ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem])\n      (Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩])\n      (if hi₀ : ↑i = x₀ then ◩0\n      else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim)\n      (if hj₀ : ↑j = y₀ then ◪0\n      else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim) =\n    c₀ i * r₀ j + c₁ i * r₁ j",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L1161"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "a5eb191c7efc23a18ed3650f7f9cb5a72d6d570a63e31d7f10c4c54c5e8d3818"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1163,
        "start_column": 8,
        "end_line": 1163,
        "end_column": 13
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁵ : DecidableEq α\nβ : Type\ninst✝⁴ : Field β\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ : Matrix (↑Xₗ) (↑Yₗ) β\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) β\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nB : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁})) ⊕ ↑(Xᵣ \\ {x'})) (↑(Yₗ \\ {y'}) ⊕ ↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β × Prop\nhB : B = matrix3sumComposition_standard Bₗ Bᵣ hXX hYY\nhrXₗ✝ : x₀ ᕃ x₁ ᕃ {x'} ⊆ Xₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hXX)) Set.inter_subset_left\nx₀inXₗ✝ : x₀ ∈ Xₗ := Eq.mem3₀ₗ hXX\nx₁inXₗ✝ : x₁ ∈ Xₗ := Eq.mem3₁ₗ hXX\nhcYₗ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYY)) Set.inter_subset_left\nhcYᵣ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yᵣ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYY)) Set.inter_subset_right\ny₀inYₗ✝ : y₀ ∈ Yₗ := Eq.mem3₀ₗ hYY\ny₀inYᵣ✝ : y₀ ∈ Yᵣ := Eq.mem3₀ᵣ hYY\ny₁inYₗ✝ : y₁ ∈ Yₗ := Eq.mem3₁ₗ hYY\ny₁inYᵣ✝ : y₁ ∈ Yᵣ := Eq.mem3₁ᵣ hYY\nAₗ : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁}))) (↑(Yₗ \\ {y'})) β := Bₗ.submatrix ⋯.elem ⋯.elem\nAᵣ : Matrix (↑(Xᵣ \\ {x'})) (↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β := Bᵣ.submatrix ⋯.elem ⋯.elem\nc₀ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ✝⟩\nc₁ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ✝⟩\nv₀ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₀, x₀inXₗ✝⟩ ∘ ⋯.elem\nv₁ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₁, x₁inXₗ✝⟩ ∘ ⋯.elem\nD₀ₗ : Matrix (Fin 2) (Fin 2) β :=\n  !![Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩;\n    Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩]\nr₀ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 0 0 * v₀ i + D₀ₗ⁻¹ 0 1 * v₁ i\nr₁ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 1 0 * v₀ i + D₀ₗ⁻¹ 1 1 * v₁ i\nhBₗₗ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₁₁ = Aₗ\nhBₗᵣ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₁₂ = 0\nhBᵣᵣ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₂₂ = Aᵣ\ni : ↑(Xᵣ \\ {x'})\nj : ↑(Yₗ \\ {y'})\nhi : ↑i = x₀\nhj : ¬↑j = y₀\n⊢ Matrix.fromBlocks ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem]\n      !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]\n      ((Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩]) *\n          !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]⁻¹ *\n        ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem])\n      (Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩])\n      (if hi₀ : ↑i = x₀ then ◩0\n      else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim)\n      (if hj₀ : ↑j = y₀ then ◪0\n      else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim) =\n    c₀ i * r₀ j + c₁ i * r₁ j",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L1163"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "7e0c110d90b98d7d20b57818f92271bb9e51797e4cec01d3cbf254fe5d567b7f"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1165,
        "start_column": 6,
        "end_line": 1165,
        "end_column": 11
      },
      "debug_info": {
        "goal": "α : Type\ninst✝⁵ : DecidableEq α\nβ : Type\ninst✝⁴ : Field β\nXₗ Yₗ Xᵣ Yᵣ : Set α\nx₀ x₁ x' y₀ y₁ y' : α\ninst✝³ : (x : α) → Decidable (x ∈ Xₗ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝² : (x : α) → Decidable (x ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}))\ninst✝¹ : (y : α) → Decidable (y ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}))\ninst✝ : (y : α) → Decidable (y ∈ Yᵣ \\ (y₀ ᕃ y₁ ᕃ {y'}))\nBₗ : Matrix (↑Xₗ) (↑Yₗ) β\nBᵣ : Matrix (↑Xᵣ) (↑Yᵣ) β\nhXX : Xₗ ∩ Xᵣ = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Yₗ ∩ Yᵣ = y₀ ᕃ y₁ ᕃ {y'}\nB : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁})) ⊕ ↑(Xᵣ \\ {x'})) (↑(Yₗ \\ {y'}) ⊕ ↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β × Prop\nhB : B = matrix3sumComposition_standard Bₗ Bᵣ hXX hYY\nhrXₗ✝ : x₀ ᕃ x₁ ᕃ {x'} ⊆ Xₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hXX)) Set.inter_subset_left\nx₀inXₗ✝ : x₀ ∈ Xₗ := Eq.mem3₀ₗ hXX\nx₁inXₗ✝ : x₁ ∈ Xₗ := Eq.mem3₁ₗ hXX\nhcYₗ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yₗ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYY)) Set.inter_subset_left\nhcYᵣ✝ : y₀ ᕃ y₁ ᕃ {y'} ⊆ Yᵣ := HasSubset.Subset.trans (Eq.subset (Eq.symm hYY)) Set.inter_subset_right\ny₀inYₗ✝ : y₀ ∈ Yₗ := Eq.mem3₀ₗ hYY\ny₀inYᵣ✝ : y₀ ∈ Yᵣ := Eq.mem3₀ᵣ hYY\ny₁inYₗ✝ : y₁ ∈ Yₗ := Eq.mem3₁ₗ hYY\ny₁inYᵣ✝ : y₁ ∈ Yᵣ := Eq.mem3₁ᵣ hYY\nAₗ : Matrix (↑(Xₗ \\ (x₀ ᕃ {x₁}))) (↑(Yₗ \\ {y'})) β := Bₗ.submatrix ⋯.elem ⋯.elem\nAᵣ : Matrix (↑(Xᵣ \\ {x'})) (↑(Yᵣ \\ (y₀ ᕃ {y₁}))) β := Bᵣ.submatrix ⋯.elem ⋯.elem\nc₀ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₀, y₀inYᵣ✝⟩\nc₁ : ↑(Xᵣ \\ {x'}) → β := fun i => Bᵣ (⋯.elem i) ⟨y₁, y₁inYᵣ✝⟩\nv₀ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₀, x₀inXₗ✝⟩ ∘ ⋯.elem\nv₁ : ↑(Yₗ \\ {y'}) → β := Bₗ ⟨x₁, x₁inXₗ✝⟩ ∘ ⋯.elem\nD₀ₗ : Matrix (Fin 2) (Fin 2) β :=\n  !![Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₀, x₀inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩;\n    Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₀, y₀inYₗ✝⟩, Bₗ ⟨x₁, x₁inXₗ✝⟩ ⟨y₁, y₁inYₗ✝⟩]\nr₀ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 0 0 * v₀ i + D₀ₗ⁻¹ 0 1 * v₁ i\nr₁ : ↑(Yₗ \\ {y'}) → β := fun i => D₀ₗ⁻¹ 1 0 * v₀ i + D₀ₗ⁻¹ 1 1 * v₁ i\nhBₗₗ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₁₁ = Aₗ\nhBₗᵣ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₁₂ = 0\nhBᵣᵣ : (matrix3sumComposition_standard Bₗ Bᵣ hXX hYY).1.toBlocks₂₂ = Aᵣ\ni : ↑(Xᵣ \\ {x'})\nj : ↑(Yₗ \\ {y'})\nhi : ¬↑i = x₀\n⊢ Matrix.fromBlocks ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem]\n      !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]\n      ((Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩]) *\n          !![Bₗ ⟨x₀, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₀, ⋯⟩ ⟨y₁, ⋯⟩; Bₗ ⟨x₁, ⋯⟩ ⟨y₀, ⋯⟩, Bₗ ⟨x₁, ⋯⟩ ⟨y₁, ⋯⟩]⁻¹ *\n        ![Bₗ ⟨x₀, ⋯⟩ ∘ ⋯.elem, Bₗ ⟨x₁, ⋯⟩ ∘ ⋯.elem])\n      (Matrix.of fun i => ![Bᵣ ⟨↑i, ⋯⟩ ⟨y₀, ⋯⟩, Bᵣ ⟨↑i, ⋯⟩ ⟨y₁, ⋯⟩])\n      (if hi₀ : ↑i = x₀ then ◩0\n      else if hi₁ : ↑i = x₁ then ◩1 else if hi : ↑i ∈ Xᵣ \\ (x₀ ᕃ x₁ ᕃ {x'}) then ◪⟨↑i, hi⟩ else ⋯.elim)\n      (if hj₀ : ↑j = y₀ then ◪0\n      else if hj₁ : ↑j = y₁ then ◪1 else if hj : ↑j ∈ Yₗ \\ (y₀ ᕃ y₁ ᕃ {y'}) then ◩⟨↑j, hj⟩ else ⋯.elim) =\n    c₀ i * r₀ j + c₁ i * r₁ j",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L1165"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T23:41:15+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "62556142e77895473e552449e03e56c047f7a87755439a42b69c25c6a2e19bf2"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Sum3.lean",
        "start_line": 1236,
        "start_column": 2,
        "end_line": 1236,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro\nα : Type\ninst✝ : DecidableEq α\nSₗ Sᵣ : StandardRepr α Z2\nx₀ x₁ x' y₀ y₁ y' : α\nhXX : Sₗ.X ∩ Sᵣ.X = x₀ ᕃ x₁ ᕃ {x'}\nhYY : Sₗ.Y ∩ Sᵣ.Y = y₀ ᕃ y₁ ᕃ {y'}\nhXY : Sₗ.X ⫗ Sᵣ.Y\nhYX : Sₗ.Y ⫗ Sᵣ.X\nBₗ : Matrix ↑Sₗ.X ↑Sₗ.Y ℚ\nhBₗ : Bₗ.IsTotallyUnimodular\nhBBₗ : ∀ (i : ↑Sₗ.X) (j : ↑Sₗ.Y), |Bₗ i j| = ↑(ZMod.val (Sₗ.B i j))\nBᵣ : Matrix ↑Sᵣ.X ↑Sᵣ.Y ℚ\nhBᵣ : Bᵣ.IsTotallyUnimodular\nhBBᵣ : ∀ (i : ↑Sᵣ.X) (j : ↑Sᵣ.Y), |Bᵣ i j| = ↑(ZMod.val (Sᵣ.B i j))\n⊢ (standardRepr3sumComposition_standard hXX hYY hXY hYX).1.HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Sum3.lean#L1236"
      },
      "metadata": {
        "blame_email_hash": "1f3d9a693291",
        "blame_date": "2025-04-10T17:54:51+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "92bac8ab2d0126bcd4e222619e8c8f161e23d10134519d05a022cbbc94371212"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Duality.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α R : Type\ninst✝¹ : DecidableEq α\ninst✝ : DivisionRing R\nS : StandardRepr α R\nG : Set α\nhG : G ⊆ S.toMatroid.E\n⊢ S✶.toMatroid.IsBase G ↔ S.toMatroid.IsBase (S.toMatroid.E \\ G)",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Duality.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "6620d7b89ad7",
        "blame_date": "2025-03-27T01:07:30-07:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "449f702141e6b15624164e1cd1ddd1147e12d007b4a8e152328669a8ab6975a1"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Duality.lean",
        "start_line": 56,
        "start_column": 23,
        "end_line": 56,
        "end_column": 28
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nS : StandardRepr α Z2\nhM : S.toMatroid.IsRegular\n⊢ Finite ↑S.X",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Duality.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-03-26T17:17:14+01:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "18756abcd164d10f535733c98bddf98325525c979c08eb8c5e56dbb15fd323a5"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Operations/Duality.lean",
        "start_line": 57,
        "start_column": 24,
        "end_line": 57,
        "end_column": 29
      },
      "debug_info": {
        "goal": "α : Type\ninst✝ : DecidableEq α\nS : StandardRepr α Z2\nhM : S.toMatroid.IsRegular\nthis : Finite ↑S.X\n⊢ Finite ↑S✶.X",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Operations/Duality.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-03-26T17:17:14+01:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "e62dc7716477b41c57f0e011d321ccdac654e768ece805b8a029e97a08299f8b"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Notions/Regularity.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h\nα β : Type\nM : Matroid α\nf : α ≃ β\nX Y : Set β\nA : Matrix ↑X ↑Y ℚ\nhA : A.IsTotallyUnimodular\nhAM : { X := X, Y := Y, A := A }.toMatroid = M.mapEquiv f\nf' : β ≃ α := f.symm\n⊢ { X := ⇑f' '' X, Y := ⇑f' '' Y, A := A.submatrix ⇑(f'.image X).symm ⇑(f'.image Y).symm }.toMatroid = M",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Notions/Regularity.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "6620d7b89ad7",
        "blame_date": "2025-03-28T23:02:51-07:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "ed535435a02e189a8e0511a3851e2a2e96440e6bb7ee341cb5251f9834e017a7"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Notions/Regularity.lean",
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case h\nα β : Type\nM : Matroid α\nf : α ≃ β\nX Y : Set α\nA : Matrix ↑X ↑Y ℚ\nhA : A.IsTotallyUnimodular\nhAM : { X := X, Y := Y, A := A }.toMatroid = M\nf' : α ≃ β := f\n⊢ { X := ⇑f' '' X, Y := ⇑f' '' Y, A := A.submatrix ⇑(f'.image X).symm ⇑(f'.image Y).symm }.toMatroid = M.mapEquiv f",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Notions/Regularity.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "6620d7b89ad7",
        "blame_date": "2025-03-28T23:02:51-07:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "34e10a1d8728710b72e8104c3bb24c6b286c41fef7746a58550f40172dab849b"
    },
    {
      "repo": {
        "remote": "https://github.com/Ivan-Sergeyev/seymour",
        "branch": "main",
        "commit": "a15a347298a3090235639f81830a8e00fcf8ace5",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Seymour/Matroid/Notions/Regularity.lean",
        "start_line": 286,
        "start_column": 2,
        "end_line": 286,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\ninst✝¹ : DecidableEq α\nV W : VectorMatroid α Z2\ninst✝ : Finite ↑V.X\nhVW : V.toMatroid = W.toMatroid\n⊢ V.A.HasTuSigning ↔ W.A.HasTuSigning",
        "url": "https://github.com/Ivan-Sergeyev/seymour/blob/a15a347298a3090235639f81830a8e00fcf8ace5/Seymour/Matroid/Notions/Regularity.lean#L286"
      },
      "metadata": {
        "blame_email_hash": "a853c166ca8e",
        "blame_date": "2025-04-03T17:58:14+02:00",
        "inclusion_date": "2025-04-27T03:47:44.198622+00:00"
      },
      "id": "b95ea89c615497a5bd3c08c451d887f4993f6bff3dae08a17efc4c36d985a762"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 121,
        "start_column": 4,
        "end_line": 121,
        "end_column": 9
      },
      "debug_info": {
        "goal": "k : ℕ\nf : ℂ → ℂ\nhf : ∀ (z : ℂ), AnalyticAt ℂ f z\nhfdev : ∀ (z : ℂ), AnalyticAt ℂ (iteratedDeriv k f) z\nz : ℂ\nthis : AnalyticAt ℂ (deriv^[k] f) z\n⊢ ⋯.order = ⋯.order - 1",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df/Mathlib/NumberTheory/h7.lean#L121"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-27T04:02:23.503817+00:00"
      },
      "id": "47c553b3734de0f9fdfabd8e2ef2099cf8effe71af591e8e45194b63356c02a9"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 137,
        "start_column": 4,
        "end_line": 137,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case mp.intro\nk n : ℕ\nf : ℂ → ℂ\nz : ℂ\nhf : ∀ (z : ℂ), AnalyticAt ℂ f z\nhord : ⋯.order ≠ ⊤\nH1 : ∀ k < n, iteratedDeriv k f z = 0\nH2 : iteratedDeriv k f z ≠ 0\n⊢ ∃ g, AnalyticAt ℂ g z ∧ g z ≠ 0 ∧ ∀ᶠ (z_1 : ℂ) in nhds z, f z_1 = (z_1 - z) ^ n • g z_1",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df/Mathlib/NumberTheory/h7.lean#L137"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-24T01:59:03+02:00",
        "inclusion_date": "2025-04-27T04:02:23.503817+00:00"
      },
      "id": "8f480616226fbfed3e689f0700a212a5f7a03d9d2b6eebb71ba638701065af79"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 141,
        "start_column": 6,
        "end_line": 141,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case mpr.left\nk✝ n : ℕ\nf : ℂ → ℂ\nz : ℂ\nhf : ∀ (z : ℂ), AnalyticAt ℂ f z\nhord : ⋯.order ≠ ⊤\nH : ⋯.order = ↑n\nk : ℕ\nhk : k < n\n⊢ iteratedDeriv k f z = 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df/Mathlib/NumberTheory/h7.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-26T21:06:47+02:00",
        "inclusion_date": "2025-04-27T04:02:23.503817+00:00"
      },
      "id": "0285533dd76e119b133eda99a04d223649c61f3a6fb737483ea175c1f2f0cc84"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 143,
        "start_column": 6,
        "end_line": 143,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case mpr.right\nk n : ℕ\nf : ℂ → ℂ\nz : ℂ\nhf : ∀ (z : ℂ), AnalyticAt ℂ f z\nhord : ⋯.order ≠ ⊤\nH✝ : ⋯.order = ↑n\nH : iteratedDeriv k f z = 0\n⊢ False",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df/Mathlib/NumberTheory/h7.lean#L143"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-26T21:36:24+02:00",
        "inclusion_date": "2025-04-27T04:02:23.503817+00:00"
      },
      "id": "d169b7fbb7166284ac45892532f811aabc27e3e73f4c4ac9a2c1350d5f34a055"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "hilbert7",
        "commit": "c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "Mathlib/NumberTheory/h7.lean",
        "start_line": 159,
        "start_column": 2,
        "end_line": 159,
        "end_column": 7
      },
      "debug_info": {
        "goal": "case h.h.right\nn : ℕ\nf : ℂ → ℂ\nz : ℂ\nhf : ∀ (z : ℂ), AnalyticAt ℂ f z\nho : ∀ (z : ℂ), ⋯.order ≠ ⊤\nhd : ∀ k < n, iteratedDeriv k f z = 0\n⊢ iteratedDeriv ?m.28578 f z ≠ 0",
        "url": "https://github.com/leanprover-community/mathlib4/blob/c74e6cc3ff7443de2e01b3d5e1e61989b0fed3df/Mathlib/NumberTheory/h7.lean#L159"
      },
      "metadata": {
        "blame_email_hash": "427ce08bc78e",
        "blame_date": "2025-04-26T21:36:24+02:00",
        "inclusion_date": "2025-04-27T04:02:23.503817+00:00"
      },
      "id": "4d241f717775d77ec417f73b0cb9367f449df5bac3c6cc7a457b7aabe58e739a"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "d7ce7dcd3454aca1804feb088c16ad836094b89d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Duper/Tests/lastAsylum.lean",
        "start_line": 35,
        "start_column": 13,
        "end_line": 35,
        "end_column": 18
      },
      "debug_info": {
        "goal": "ax1 : ∀ (x : Inhab), Peculiar x ↔ (Sane x ↔ ¬Doctor x)\nax2 : ∀ (x : Inhab), Special x ↔ ∀ (y : Inhab), ¬Doctor y ↔ (Sane y ↔ Peculiar x)\nax3 : ∀ (x y : Inhab), (Sane x ↔ Special y) → (Sane (bf x) ↔ ¬Doctor y)\nax4 : Sane Tarr ↔ ∀ (x : Inhab), Doctor x → Sane x\nax5 : Sane Fether ↔ ∀ (x : Inhab), ¬Doctor x → ¬Sane x\nax6 : Sane Fether ↔ Sane Tarr\n⊢ False",
        "url": "https://github.com/leanprover-community/duper/blob/d7ce7dcd3454aca1804feb088c16ad836094b89d/Duper/Tests/lastAsylum.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "d9c480704efb",
        "blame_date": "2022-08-01T22:37:02-04:00",
        "inclusion_date": "2025-04-27T04:08:40.598046+00:00"
      },
      "id": "fafc5cd9165e8512f1454d08fea2ee7c9ca1349e1bd361095057033b87158e14"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "d7ce7dcd3454aca1804feb088c16ad836094b89d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Duper/Tests/test_continuity.lean",
        "start_line": 18,
        "start_column": 50,
        "end_line": 18,
        "end_column": 55
      },
      "debug_info": {
        "goal": "a : Real\n⊢ dist a a = zero",
        "url": "https://github.com/leanprover-community/duper/blob/d7ce7dcd3454aca1804feb088c16ad836094b89d/Duper/Tests/test_continuity.lean#L18"
      },
      "metadata": {
        "blame_email_hash": "4ac7eab8a488",
        "blame_date": "2023-06-05T10:39:00+02:00",
        "inclusion_date": "2025-04-27T04:08:40.598046+00:00"
      },
      "id": "01396a5701d5dca61ce61ab6711a98142e3d7f272e4b44b50a57a6cce6b296ee"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "d7ce7dcd3454aca1804feb088c16ad836094b89d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Duper/Tests/test_continuity.lean",
        "start_line": 20,
        "start_column": 48,
        "end_line": 20,
        "end_column": 53
      },
      "debug_info": {
        "goal": "a : Real\n⊢ lt zero one",
        "url": "https://github.com/leanprover-community/duper/blob/d7ce7dcd3454aca1804feb088c16ad836094b89d/Duper/Tests/test_continuity.lean#L20"
      },
      "metadata": {
        "blame_email_hash": "4ac7eab8a488",
        "blame_date": "2023-06-05T10:39:00+02:00",
        "inclusion_date": "2025-04-27T04:08:40.598046+00:00"
      },
      "id": "9934efb71f1677122ff5575b58afe67f0225326e49cb830114a4e6219b6d6d09"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "a194b7b995c53df12f7773ba4e2b96d76c44493d",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lintsimp.lean",
        "start_line": 37,
        "start_column": 64,
        "end_line": 37,
        "end_column": 69
      },
      "debug_info": {
        "goal": "α : Type u_1\ninst✝ : Mul α\na x y : αᵐᵒᵖ\n⊢ SemiconjBy a.unop y.unop x.unop ↔ SemiconjBy a x y",
        "url": "https://github.com/leanprover-community/batteries/blob/a194b7b995c53df12f7773ba4e2b96d76c44493d/BatteriesTest/lintsimp.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "8a7dcd08b95f",
        "blame_date": "2022-12-18T15:51:52-05:00",
        "inclusion_date": "2025-04-27T04:19:47.040226+00:00"
      },
      "id": "f990a06083893701b9dce0754f24f05dfbe0adb41df1d4b7e961a30293b3a8cb"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "a194b7b995c53df12f7773ba4e2b96d76c44493d",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lintunused.lean",
        "start_line": 7,
        "start_column": 2,
        "end_line": 7,
        "end_column": 7
      },
      "debug_info": {
        "goal": "h : 1 = 1\n⊢ True",
        "url": "https://github.com/leanprover-community/batteries/blob/a194b7b995c53df12f7773ba4e2b96d76c44493d/BatteriesTest/lintunused.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-08T02:17:31+02:00",
        "inclusion_date": "2025-04-27T04:19:47.040226+00:00"
      },
      "id": "de3a7059a380442d0b7f092b122829b00389fc06a253173991892887ff036787"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "a194b7b995c53df12f7773ba4e2b96d76c44493d",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 23,
        "start_column": 2,
        "end_line": 24,
        "end_column": 5
      },
      "debug_info": {
        "goal": "⊢ 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/a194b7b995c53df12f7773ba4e2b96d76c44493d/BatteriesTest/lint_unreachableTactic.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-27T04:19:47.040226+00:00"
      },
      "id": "60d4409992b7e82f899eb5db0d63557141e8f1a157e3751bcc9470bf3de75fbe"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "a194b7b995c53df12f7773ba4e2b96d76c44493d",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 31,
        "start_column": 33,
        "end_line": 31,
        "end_column": 38
      },
      "debug_info": {
        "goal": "aa : Nat\n⊢ aa = 0 → t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/a194b7b995c53df12f7773ba4e2b96d76c44493d/BatteriesTest/lint_unreachableTactic.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-27T04:19:47.040226+00:00"
      },
      "id": "4d14d59c7a4dcd50e21fcc001c9a1d4ac3b20d729ca5e72bd6a86bb20b4b6ed6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Examples/Add32LawfulCircuit.lean",
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : ℕ\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n⊢ (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) ∧\n    (True → env.get (i0 + 1) = 0 ∨ env.get (i0 + 1) = 1) ∧\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 ∧\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n          (True → env.get (i0 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1) = 1) ∧\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 ∧\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                (True → env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 ∧\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) ∧\n                      (True →\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 ∨ env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) ∧\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "6bab94f118f4dc21e31fedf997feea2c30e63c0ca2d4a20db0dcafcacff09498"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 71,
        "start_column": 2,
        "end_line": 71,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := ⋯ }\ncons : {n : ℕ} → (a : α) → (as : Vector α n) → motive as → motive (Vector.cons a as)\nn : ℕ\nxs : Vector α n\nx : α\n⊢ Eq.rec (motive := fun x_1 x_2 =>\n      Vector α x_1 →\n        (h : { toList := x :: xs.toList }.size = x_1) → motive { toList := x :: xs.toList, size_toArray := h })\n      (fun v h =>\n        cons x { toArray := xs.toArray, size_toArray := ⋯ }\n          (induct nil (fun {n} => cons) { toArray := xs.toArray, size_toArray := ⋯ }))\n      ⋯ { toList := x :: xs.toList, size_toArray := ⋯ } ⋯ =\n    cons x xs (induct nil (fun {n} => cons) xs)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Utils/Vector.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-26T11:55:37+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "a22eb418e608ba47c195e8b42e94b32c7be882552ef935ea1ca313b3d2114cbb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 142,
        "start_column": 4,
        "end_line": 142,
        "end_column": 9
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := ⋯ }\npush : {n : ℕ} → (as : Vector α n) → (a : α) → motive as → motive (as.push a)\nn n✝ : ℕ\nx : α\nxs : Vector α n✝\nih : induct_push nil (fun {n} => push) xs = induct_push' nil (fun {n} => push) xs\n⊢ Eq.rec (motive := fun x_1 x_2 =>\n      Vector α x_1 →\n        (h : { toList := x :: xs.toList }.size = x_1) → motive { toList := x :: xs.toList, size_toArray := h })\n      (fun v h =>\n        cast ⋯\n          (push { toList := x :: xs.toList, size_toArray := ⋯ }.to_push.as\n            { toList := x :: xs.toList, size_toArray := ⋯ }.to_push.a\n            (induct_push nil (fun {n} => push) { toList := x :: xs.toList, size_toArray := ⋯ }.to_push.as)))\n      ⋯ { toList := x :: xs.toList, size_toArray := ⋯ } ⋯ =\n    cast ⋯\n      (induct nil (fun n x xs r => cast ⋯ (push xs.reverse x r))\n        { toArray := { toList := x :: xs.toList }.reverse, size_toArray := ⋯ })",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Utils/Vector.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-25T20:18:35+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "6147d40db4f1c266077d94a1fc1f52f0ec398533ea984570bca265863746e5f9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 161,
        "start_column": 2,
        "end_line": 161,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := ⋯ }\npush : {n : ℕ} → (as : Vector α n) → (a : α) → motive as → motive (as.push a)\nn : ℕ\nxs : Vector α n\nx a : α\nh : induct_push nil (fun {n} => push) (xs.push a) = push xs a (induct_push nil (fun {n} => push) xs)\n⊢ Eq.rec (motive := fun x_1 x_2 =>\n      Vector α x_1 →\n        (h : { toList := x :: (xs.push a).toList }.size = x_1) →\n          motive { toList := x :: (xs.push a).toList, size_toArray := h })\n      (fun v h =>\n        cast ⋯\n          (push { toArray := { toList := x :: (xs.push a).toList }.extract 0 (xs.push a).size, size_toArray := ⋯ }\n            (x :: (xs.push a).toList)[(xs.push a).size]\n            (induct_push nil (fun {n} => push)\n              { toArray := { toList := x :: (xs.push a).toList }.extract 0 (xs.push a).size, size_toArray := ⋯ })))\n      ⋯ { toList := x :: (xs.toList ++ [a]), size_toArray := ⋯ } ⋯ =\n    push { toList := x :: xs.toList, size_toArray := ⋯ } a\n      (Eq.rec (motive := fun x_1 x_2 =>\n        Vector α x_1 →\n          (h : { toList := x :: xs.toList }.size = x_1) → motive { toList := x :: xs.toList, size_toArray := h })\n        (fun v h =>\n          cast ⋯\n            (push { toArray := { toList := x :: xs.toList }.extract 0 xs.size, size_toArray := ⋯ }\n              (x :: xs.toList)[xs.size]\n              (induct_push nil (fun {n} => push)\n                { toArray := { toList := x :: xs.toList }.extract 0 xs.size, size_toArray := ⋯ })))\n        ⋯ { toList := x :: xs.toList, size_toArray := ⋯ } ⋯)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Utils/Vector.lean#L161"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-25T20:18:35+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "69ab6a35c447f563a7b5408ede5a1eeb5c57c7c3f03f22b9ede539ff0887f272"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 181,
        "start_column": 4,
        "end_line": 181,
        "end_column": 9
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := ⋯ }\npush : {n : ℕ} → (as : Vector α n) → (a : α) → motive as → motive (as.push a)\nn : ℕ\na : α\nn✝ : ℕ\nx : α\nxs : Vector α n✝\nih : induct_push nil (fun {n} => push) (xs.push a) = push xs a (induct_push nil (fun {n} => push) xs)\n⊢ induct_push nil (fun {n} => push) (cons x { toArray := xs.push a, size_toArray := ⋯ }) =\n    push (cons x xs) a (induct_push nil (fun {n} => push) (cons x xs))",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Utils/Vector.lean#L181"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-25T20:18:35+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "a83093a432e55a951780af2dcd8a668a1a54b984c2df9d78a7f5b63dd4b6fb82"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Utils/Vector.lean",
        "start_line": 193,
        "start_column": 2,
        "end_line": 193,
        "end_column": 7
      },
      "debug_info": {
        "goal": "α : Type\nmotive : {n : ℕ} → Vector α n → Sort u\nnil : motive { toArray := #[], size_toArray := rfl }\npush : {n : ℕ} → (as : Vector α n) → (a : α) → motive as → motive (as.push a)\nn : ℕ\nas : Vector α n\na : α\n⊢ HEq\n    (push as a\n      (cast (induct_push'.proof_2 as)\n        (induct nil (fun n x xs r => cast (induct_push'.proof_3 n x xs) (push xs.reverse x r)) as.reverse)))\n    (push as.reverse.reverse a\n      (induct nil (fun n x xs r => cast (induct_push'.proof_3 n x xs) (push xs.reverse x r)) as.reverse))",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Utils/Vector.lean#L193"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-26T11:55:37+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "a472b255e88adb7b0d938f7966d9bfc1e83c38e9b7d9cc2525e6c9ae31295680"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 65,
        "start_column": 18,
        "end_line": 65,
        "end_column": 23
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Soundness (F p) assumptions (spec off)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Gadgets/Rotation64/Rotation64.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-01T17:43:17+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "7736f8ab28171bedb605e673156182a3c78d1008fd6ad1792eda7b9f651d745f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Rotation64/Rotation64.lean",
        "start_line": 66,
        "start_column": 21,
        "end_line": 66,
        "end_column": 26
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n⊢ Completeness (F p) U64 assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Gadgets/Rotation64/Rotation64.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-02-27T17:02:29+01:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "0a7ab2cc59eaad55eec18e440619f71e26374f028eb9a4246711ce9064fb5f60"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaD.lean",
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝ : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n⊢ ((((((((Rotation64.assumptions (eval env state_var[1]) ∧\n                    (eval env state_var[↑4]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                  Rotation64.assumptions (eval env state_var[2])) ∧\n                (eval env state_var[0]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n              Rotation64.assumptions (eval env state_var[↑3])) ∧\n            (eval env state_var[1]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n          Rotation64.assumptions (eval env state_var[↑4])) ∧\n        (eval env state_var[2]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n      Rotation64.assumptions (eval env state_var[0])) ∧\n    (eval env state_var[↑3]).is_normalized ∧ (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Gadgets/Keccak/ThetaD.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "20914af31dc882bb12a33523e6a2e77b9e786a03ba0727aedb6b41aeaa629767"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/Chi.lean",
        "start_line": 103,
        "start_column": 2,
        "end_line": 103,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni✝ : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env :\n  env.uses_local_witnesses_completeness\n    (Vector.mapM\n          (fun i =>\n            (StateT.modifyGet fun ops =>\n                  (not64_bytewise state_var.toArray[↑(i + 5)],\n                    { offset := ops.offset + 0,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ main := fun x => StateT.pure (not64_bytewise x), local_length := fun x => 0,\n                                local_length_eq := ⋯, output := fun x x_1 => not64_bytewise x, output_eq := ⋯,\n                                initial_offset_eq := ⋯, assumptions := fun x => x.is_normalized,\n                                spec := fun x z => z.value = not64 x.value ∧ z.is_normalized, soundness := ⋯,\n                                completeness := ⋯ }.to_subcircuit\n                            ops.offset state_var.toArray[↑(i + 5)]) })).bind\n              fun state_not =>\n              (StateT.modifyGet fun ops =>\n                    (var_from_offset U64 ops.offset,\n                      { offset := ops.offset + 8,\n                        withLength :=\n                          ops.withLength.subcircuit\n                            ({ toElaboratedCircuit := And.And64.elaborated, assumptions := And.And64.assumptions,\n                                  spec := And.And64.spec, soundness := ⋯, completeness := ⋯ }.to_subcircuit\n                              ops.offset { x := state_not, y := state_var.toArray[↑(i + 10)] }) })).bind\n                fun state_and =>\n                StateT.modifyGet fun ops =>\n                  (var_from_offset U64 ops.offset,\n                    { offset := ops.offset + 8,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ toElaboratedCircuit := Xor.elaborated, assumptions := Xor.assumptions, spec := Xor.spec,\n                                soundness := ⋯, completeness := ⋯ }.to_subcircuit\n                            ops.offset { x := state_var.toArray[↑i], y := state_and }) }))\n          (Vector.finRange 25) { offset := i✝, withLength := Operations.empty i✝ }).2.withLength\nstate : KeccakState (F p)\nh_input : eval env state_var = state\nstate_norm : ∀ (i : Fin 25), state[↑i].is_normalized\ni : Fin 25\n⊢ ((eval env state_var[↑(i + 5)]).is_normalized ∧\n      (eval env (not64_bytewise state_var[↑(i + 5)])).is_normalized ∧ (eval env state_var[↑(i + 10)]).is_normalized) ∧\n    (eval env state_var[↑i]).is_normalized ∧ (eval env (var_from_offset U64 (i✝ + ↑i * 16))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Gadgets/Keccak/Chi.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T15:53:10+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "24b3930261be152f5e4ac00f078bf52388e8afa26499d69f28cf62808534b2be"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaXor.lean",
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var Inputs (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : Inputs (F p)\nh_assumptions : assumptions state\nh_input : { state := eval env state_var.state, d := eval env state_var.d } = state\n⊢ (((((((((((((((((((((((((eval env state_var.state[0]).is_normalized ∧ (eval env state_var.d[0]).is_normalized) ∧\n                                                  (eval env state_var.state[1]).is_normalized ∧\n                                                    (eval env state_var.d[0]).is_normalized) ∧\n                                                (eval env state_var.state[2]).is_normalized ∧\n                                                  (eval env state_var.d[0]).is_normalized) ∧\n                                              (eval env state_var.state[↑3]).is_normalized ∧\n                                                (eval env state_var.d[0]).is_normalized) ∧\n                                            (eval env state_var.state[↑4]).is_normalized ∧\n                                              (eval env state_var.d[0]).is_normalized) ∧\n                                          (eval env state_var.state[↑5]).is_normalized ∧\n                                            (eval env state_var.d[1]).is_normalized) ∧\n                                        (eval env state_var.state[↑6]).is_normalized ∧\n                                          (eval env state_var.d[1]).is_normalized) ∧\n                                      (eval env state_var.state[↑7]).is_normalized ∧\n                                        (eval env state_var.d[1]).is_normalized) ∧\n                                    (eval env state_var.state[↑8]).is_normalized ∧\n                                      (eval env state_var.d[1]).is_normalized) ∧\n                                  (eval env state_var.state[↑9]).is_normalized ∧\n                                    (eval env state_var.d[1]).is_normalized) ∧\n                                (eval env state_var.state[↑10]).is_normalized ∧\n                                  (eval env state_var.d[2]).is_normalized) ∧\n                              (eval env state_var.state[↑11]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                            (eval env state_var.state[↑12]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                          (eval env state_var.state[↑13]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                        (eval env state_var.state[↑14]).is_normalized ∧ (eval env state_var.d[2]).is_normalized) ∧\n                      (eval env state_var.state[↑15]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                    (eval env state_var.state[↑16]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                  (eval env state_var.state[↑17]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n                (eval env state_var.state[↑18]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n              (eval env state_var.state[↑19]).is_normalized ∧ (eval env state_var.d[↑3]).is_normalized) ∧\n            (eval env state_var.state[↑20]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n          (eval env state_var.state[↑21]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n        (eval env state_var.state[↑22]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n      (eval env state_var.state[↑23]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized) ∧\n    (eval env state_var.state[↑24]).is_normalized ∧ (eval env state_var.d[↑4]).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Gadgets/Keccak/ThetaXor.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T16:27:02+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "4f48685bc2db2960485e606f2c6bc096a1f2f0414c0d28f1fa139fb78217508b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi-more-proofs",
        "commit": "81f531bd61507ae2e000142d23ce308a2545c7ec",
        "lean_version": "v4.17.0"
      },
      "location": {
        "path": "Clean/Gadgets/Keccak/ThetaC.lean",
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7
      },
      "debug_info": {
        "goal": "p : ℕ\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (p > 512)\ni0 : ℕ\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env : env.uses_local_witnesses_completeness ((theta_c state_var).operations i0)\nstate : KeccakState (F p)\nh_assumptions : ∀ (i : Fin 25), state[i].is_normalized\nh_input : Vector.map (eval env) state_var = state\ns : ∀ (i : Fin 25), (eval env state_var[↑i]).is_normalized = True\n⊢ ((((((((((((((eval env (var_from_offset U64 i0)).is_normalized ∧\n                              (eval env (var_from_offset U64 (i0 + 8))).is_normalized) ∧\n                            (eval env (var_from_offset U64 (i0 + 16))).is_normalized) ∧\n                          (eval env (var_from_offset U64 (i0 + 32))).is_normalized) ∧\n                        (eval env (var_from_offset U64 (i0 + 40))).is_normalized) ∧\n                      (eval env (var_from_offset U64 (i0 + 48))).is_normalized) ∧\n                    (eval env (var_from_offset U64 (i0 + 64))).is_normalized) ∧\n                  (eval env (var_from_offset U64 (i0 + 72))).is_normalized) ∧\n                (eval env (var_from_offset U64 (i0 + 80))).is_normalized) ∧\n              (eval env (var_from_offset U64 (i0 + 96))).is_normalized) ∧\n            (eval env (var_from_offset U64 (i0 + 104))).is_normalized) ∧\n          (eval env (var_from_offset U64 (i0 + 112))).is_normalized) ∧\n        (eval env (var_from_offset U64 (i0 + 128))).is_normalized) ∧\n      (eval env (var_from_offset U64 (i0 + 136))).is_normalized) ∧\n    (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/81f531bd61507ae2e000142d23ce308a2545c7ec/Clean/Gadgets/Keccak/ThetaC.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-03T17:31:42+02:00",
        "inclusion_date": "2025-04-27T04:25:59.176017+00:00"
      },
      "id": "3575f20362c81997e815810ba246bbb416b77de2d34f09aec762eff4c15bf4aa"
    }
  ]
}