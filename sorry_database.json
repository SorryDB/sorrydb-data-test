{
  "repos": [
    {
      "remote_url": "https://github.com/0art0/lean-slides",
      "last_time_visited": "2025-04-22T03:00:42.729081+00:00",
      "remote_heads_hash": "ea1fca1fe87f"
    },
    {
      "remote_url": "https://github.com/0art0/kimina",
      "last_time_visited": "2025-04-22T03:00:43.231470+00:00",
      "remote_heads_hash": "ba10e4d794e2"
    },
    {
      "remote_url": "https://github.com/abdoo8080/lean-cvc5",
      "last_time_visited": "2025-04-22T03:00:43.692336+00:00",
      "remote_heads_hash": "8a80dbcde9ca"
    },
    {
      "remote_url": "https://github.com/acmepjz/md4lean",
      "last_time_visited": "2025-04-22T03:00:44.271527+00:00",
      "remote_heads_hash": "78f0fe311a3f"
    },
    {
      "remote_url": "https://github.com/adamtopaz/NodeGraph",
      "last_time_visited": "2025-04-22T03:00:44.798511+00:00",
      "remote_heads_hash": "ccd524ebf6b4"
    },
    {
      "remote_url": "https://github.com/adamtopaz/lean_extras",
      "last_time_visited": "2025-04-22T03:00:45.440234+00:00",
      "remote_heads_hash": "6b9cfc280153"
    },
    {
      "remote_url": "https://github.com/adomani/advents",
      "last_time_visited": "2025-04-22T03:00:46.024121+00:00",
      "remote_heads_hash": "c4eb517ab2cb"
    },
    {
      "remote_url": "https://github.com/AdrienChampion/safeIdx",
      "last_time_visited": "2025-04-22T03:00:46.941856+00:00",
      "remote_heads_hash": "f362cca5ed0c"
    },
    {
      "remote_url": "https://github.com/ah1112/synthetic_euclid_4",
      "last_time_visited": "2025-04-22T03:00:47.515754+00:00",
      "remote_heads_hash": "ffe525d762dd"
    },
    {
      "remote_url": "https://github.com/alexf91/lean4-ctypes",
      "last_time_visited": "2025-04-22T03:00:48.105105+00:00",
      "remote_heads_hash": "4034301ddd2f"
    },
    {
      "remote_url": "https://github.com/alexjbest/leaff",
      "last_time_visited": "2025-04-22T03:00:48.651017+00:00",
      "remote_heads_hash": "4dc694ebc489"
    },
    {
      "remote_url": "https://github.com/alexkeizer/QpfTypes",
      "last_time_visited": "2025-04-22T03:00:49.225286+00:00",
      "remote_heads_hash": "e872072f74fd"
    },
    {
      "remote_url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "last_time_visited": "2025-04-22T03:00:49.885183+00:00",
      "remote_heads_hash": "79e0a27fa876"
    },
    {
      "remote_url": "https://github.com/alok/lean-inf",
      "last_time_visited": "2025-04-22T03:12:52.492166+00:00",
      "remote_heads_hash": "590910f95db9"
    },
    {
      "remote_url": "https://github.com/alok/AsciiPlot",
      "last_time_visited": "2025-04-22T03:12:53.102637+00:00",
      "remote_heads_hash": "b3900aad52ab"
    },
    {
      "remote_url": "https://github.com/ammkrn/timelib",
      "last_time_visited": "2025-04-22T03:12:53.584485+00:00",
      "remote_heads_hash": "40bbd08a1411"
    },
    {
      "remote_url": "https://github.com/ammkrn/printiest",
      "last_time_visited": "2025-04-22T03:12:54.145265+00:00",
      "remote_heads_hash": "4a58b9aba192"
    },
    {
      "remote_url": "https://github.com/andrejbauer/partial-combinatory-algebras",
      "last_time_visited": "2025-04-22T03:12:54.642449+00:00",
      "remote_heads_hash": "136c83911bf8"
    },
    {
      "remote_url": "https://github.com/anlucia/ChromaticPolynomial",
      "last_time_visited": "2025-04-22T03:12:55.172006+00:00",
      "remote_heads_hash": "ea3ff45e09d2"
    },
    {
      "remote_url": "https://github.com/anoma/juvix-lean",
      "last_time_visited": "2025-04-22T03:12:55.717475+00:00",
      "remote_heads_hash": "194798fe5c8d"
    },
    {
      "remote_url": "https://github.com/apnelson1/Matroid",
      "last_time_visited": "2025-04-22T03:12:56.277489+00:00",
      "remote_heads_hash": "f2245d929e98"
    },
    {
      "remote_url": "https://github.com/arademaker/delphin",
      "last_time_visited": "2025-04-22T03:20:40.355263+00:00",
      "remote_heads_hash": "9a189fa3cc01"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/yatima",
      "last_time_visited": "2025-04-22T03:20:40.971546+00:00",
      "remote_heads_hash": "27bd4dd3b298"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Wasm.lean",
      "last_time_visited": "2025-04-22T03:20:41.724481+00:00",
      "remote_heads_hash": "9723673e436f"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/RustFFI.lean",
      "last_time_visited": "2025-04-22T03:20:42.299176+00:00",
      "remote_heads_hash": "1494787a26c1"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Megaparsec.lean",
      "last_time_visited": "2025-04-22T03:20:42.881315+00:00",
      "remote_heads_hash": "b3fcd8401935"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/LSpec",
      "last_time_visited": "2025-04-22T03:20:43.454274+00:00",
      "remote_heads_hash": "a32710bb1221"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Blake3.lean",
      "last_time_visited": "2025-04-22T03:20:44.005096+00:00",
      "remote_heads_hash": "151fd9d4bfe2"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/NumLean",
      "last_time_visited": "2025-04-22T03:20:44.524750+00:00",
      "remote_heads_hash": "c95d37ba3c8c"
    },
    {
      "remote_url": "https://github.com/ATOMSLab/LeanLJ",
      "last_time_visited": "2025-04-22T03:20:44.997302+00:00",
      "remote_heads_hash": "270ed78d3fc9"
    },
    {
      "remote_url": "https://github.com/atrieu/lean-cryptolib",
      "last_time_visited": "2025-04-22T03:20:46.271912+00:00",
      "remote_heads_hash": "af280c966902"
    },
    {
      "remote_url": "https://github.com/austinletson/use-lean-standard-action-with-bare-project",
      "last_time_visited": "2025-04-22T03:20:46.754765+00:00",
      "remote_heads_hash": "840d70a94256"
    },
    {
      "remote_url": "https://github.com/avigad/LeanSudoku",
      "last_time_visited": "2025-04-22T03:20:47.236625+00:00",
      "remote_heads_hash": "cb5ac28c9e23"
    },
    {
      "remote_url": "https://github.com/awodey/joyal",
      "last_time_visited": "2025-04-22T03:20:47.935154+00:00",
      "remote_heads_hash": "a616ad08ef80"
    },
    {
      "remote_url": "https://github.com/axiomed/http",
      "last_time_visited": "2025-04-22T03:20:48.458947+00:00",
      "remote_heads_hash": "b9eedf58de6b"
    },
    {
      "remote_url": "https://github.com/bergmannjg/time",
      "last_time_visited": "2025-04-22T03:20:49.025682+00:00",
      "remote_heads_hash": "a188d26ad6bd"
    },
    {
      "remote_url": "https://github.com/bergmannjg/regex",
      "last_time_visited": "2025-04-22T03:20:49.551843+00:00",
      "remote_heads_hash": "b8c4594aa5df"
    },
    {
      "remote_url": "https://github.com/bergmannjg/leanCurl",
      "last_time_visited": "2025-04-22T03:20:50.109952+00:00",
      "remote_heads_hash": "ff0a6479d879"
    },
    {
      "remote_url": "https://github.com/Bergschaf/Localic-Caratheodory-Extensions",
      "last_time_visited": "2025-04-22T03:20:50.683465+00:00",
      "remote_heads_hash": "ac8eee60c8c4"
    },
    {
      "remote_url": "https://github.com/Bergschaf/lean-banach-tarski",
      "last_time_visited": "2025-04-22T03:20:52.135020+00:00",
      "remote_heads_hash": "f48bdebe8bf5"
    },
    {
      "remote_url": "https://github.com/Bergschaf/banach-tarski",
      "last_time_visited": "2025-04-22T03:20:52.766143+00:00",
      "remote_heads_hash": "16e9b5d0a40f"
    },
    {
      "remote_url": "https://github.com/BoltonBailey/formal-snarks-project",
      "last_time_visited": "2025-04-22T03:20:53.945437+00:00",
      "remote_heads_hash": "8c4e3059ad64"
    },
    {
      "remote_url": "https://github.com/BRonen/sqlite3-lean4",
      "last_time_visited": "2025-04-22T03:20:54.488529+00:00",
      "remote_heads_hash": "a37e6d54423a"
    },
    {
      "remote_url": "https://github.com/cmu-l3/llmlean",
      "last_time_visited": "2025-04-22T03:20:54.963113+00:00",
      "remote_heads_hash": "04624fcb53e2"
    },
    {
      "remote_url": "https://github.com/dagurtomas/LeanCondensed",
      "last_time_visited": "2025-04-22T03:20:55.624573+00:00",
      "remote_heads_hash": "a70a25121b16"
    },
    {
      "remote_url": "https://github.com/Deducteam/lean2dk",
      "last_time_visited": "2025-04-22T03:20:56.146544+00:00",
      "remote_heads_hash": "437e9b26ba70"
    },
    {
      "remote_url": "https://github.com/djvelleman/HTPILeanPackage",
      "last_time_visited": "2025-04-22T03:20:56.707110+00:00",
      "remote_heads_hash": "77cb90320f24"
    },
    {
      "remote_url": "https://github.com/draperlaboratory/ELFSage",
      "last_time_visited": "2025-04-22T03:20:57.246013+00:00",
      "remote_heads_hash": "56692d17d705"
    },
    {
      "remote_url": "https://github.com/dtumad/VCV-io",
      "last_time_visited": "2025-04-22T03:20:57.858234+00:00",
      "remote_heads_hash": "36c443e6bf44"
    },
    {
      "remote_url": "https://github.com/dupuisf/BibtexQuery",
      "last_time_visited": "2025-04-22T03:34:29.625492+00:00",
      "remote_heads_hash": "ff993a7036b7"
    },
    {
      "remote_url": "https://github.com/dwrensha/tryAtEachStep",
      "last_time_visited": "2025-04-22T03:34:30.213665+00:00",
      "remote_heads_hash": "bd22accb361e"
    },
    {
      "remote_url": "https://github.com/dwrensha/lean4-maze",
      "last_time_visited": "2025-04-22T03:34:30.713065+00:00",
      "remote_heads_hash": "da00a1ae7422"
    },
    {
      "remote_url": "https://github.com/dwrensha/compfiles",
      "last_time_visited": "2025-04-22T03:34:31.230156+00:00",
      "remote_heads_hash": "a9e75d0300d5"
    },
    {
      "remote_url": "https://github.com/dwrensha/Chess.lean",
      "last_time_visited": "2025-04-22T03:34:33.398092+00:00",
      "remote_heads_hash": "f046a40be392"
    },
    {
      "remote_url": "https://github.com/dwrensha/animate-lean-proofs",
      "last_time_visited": "2025-04-22T03:34:33.907868+00:00",
      "remote_heads_hash": "7a8d1d4f58a9"
    },
    {
      "remote_url": "https://github.com/ElifUskuplu/Stlc_deBruijn",
      "last_time_visited": "2025-04-22T03:34:34.643864+00:00",
      "remote_heads_hash": "b80b39af1eda"
    },
    {
      "remote_url": "https://github.com/emilyriehl/infinity-cosmos",
      "last_time_visited": "2025-04-22T03:34:35.381406+00:00",
      "remote_heads_hash": "e4af335c6b6a"
    },
    {
      "remote_url": "https://github.com/eric-wieser/lean-matrix-cookbook",
      "last_time_visited": "2025-04-22T03:34:36.101045+00:00",
      "remote_heads_hash": "a4f9f9349dac"
    },
    {
      "remote_url": "https://github.com/fgdorais/lean4-unicode-basic",
      "last_time_visited": "2025-04-22T03:34:36.697828+00:00",
      "remote_heads_hash": "334d616f97bd"
    },
    {
      "remote_url": "https://github.com/fgdorais/lean4-parser",
      "last_time_visited": "2025-04-22T03:34:41.614022+00:00",
      "remote_heads_hash": "a128d0356c0c"
    },
    {
      "remote_url": "https://github.com/fgdorais/extra4",
      "last_time_visited": "2025-04-22T03:34:43.079347+00:00",
      "remote_heads_hash": "c309c1f09f6b"
    },
    {
      "remote_url": "https://github.com/fgdorais/algebra4",
      "last_time_visited": "2025-04-22T03:34:43.599046+00:00",
      "remote_heads_hash": "fad3efc60703"
    },
    {
      "remote_url": "https://github.com/forked-from-1kasper/ground_zero",
      "last_time_visited": "2025-04-22T03:34:44.091203+00:00",
      "remote_heads_hash": "f259deeaa740"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Incompleteness",
      "last_time_visited": "2025-04-22T03:34:44.673350+00:00",
      "remote_heads_hash": "aa43d4d432c4"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Foundation",
      "last_time_visited": "2025-04-22T03:34:45.246721+00:00",
      "remote_heads_hash": "13922a8faf5b"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Arithmetization",
      "last_time_visited": "2025-04-22T03:34:46.360786+00:00",
      "remote_heads_hash": "d0d6f3b5214a"
    },
    {
      "remote_url": "https://github.com/FormalSAT/trestle",
      "last_time_visited": "2025-04-22T03:34:47.104176+00:00",
      "remote_heads_hash": "96a7fcf51e38"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/LeanCourse24",
      "last_time_visited": "2025-04-22T03:38:09.387773+00:00",
      "remote_heads_hash": "9ec29a82bdef"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/carleson",
      "last_time_visited": "2025-04-22T03:38:10.063502+00:00",
      "remote_heads_hash": "a2b8e8ea812d"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/BonnAnalysis",
      "last_time_visited": "2025-04-22T03:38:11.040146+00:00",
      "remote_heads_hash": "a346ac04dd45"
    },
    {
      "remote_url": "https://github.com/FR-vdash-bot/Algorithm",
      "last_time_visited": "2025-04-22T03:38:11.661910+00:00",
      "remote_heads_hash": "731cbd0bc431"
    },
    {
      "remote_url": "https://github.com/frenzymath/jixia",
      "last_time_visited": "2025-04-22T03:38:12.226287+00:00",
      "remote_heads_hash": "c1db5239415c"
    },
    {
      "remote_url": "https://github.com/funexists/raylean",
      "last_time_visited": "2025-04-22T03:38:12.735085+00:00",
      "remote_heads_hash": "72a50b820b10"
    },
    {
      "remote_url": "https://github.com/FWuermse/lean-postgres",
      "last_time_visited": "2025-04-22T03:38:13.574508+00:00",
      "remote_heads_hash": "32be1086f64b"
    },
    {
      "remote_url": "https://github.com/GasStationManager/LeanTool",
      "last_time_visited": "2025-04-22T03:38:14.087639+00:00",
      "remote_heads_hash": "596f1f7bbbb6"
    },
    {
      "remote_url": "https://github.com/GasStationManager/FormalizeWithTest",
      "last_time_visited": "2025-04-22T03:38:14.590769+00:00",
      "remote_heads_hash": "c9bc0ed602e4"
    },
    {
      "remote_url": "https://github.com/GasStationManager/CodeProofTheArena",
      "last_time_visited": "2025-04-22T03:38:15.104435+00:00",
      "remote_heads_hash": "6eaeef733792"
    },
    {
      "remote_url": "https://github.com/gdncc/Cryptography",
      "last_time_visited": "2025-04-22T03:38:15.610480+00:00",
      "remote_heads_hash": "624b9e463546"
    },
    {
      "remote_url": "https://github.com/girving/interval",
      "last_time_visited": "2025-04-22T03:38:16.426764+00:00",
      "remote_heads_hash": "2815a72fe0a0"
    },
    {
      "remote_url": "https://github.com/goens/lost-pop-lean",
      "last_time_visited": "2025-04-22T03:38:16.946007+00:00",
      "remote_heads_hash": "8035a1ab2a5a"
    },
    {
      "remote_url": "https://github.com/google-deepmind/debate",
      "last_time_visited": "2025-04-22T03:38:17.492303+00:00",
      "remote_heads_hash": "5a9708e14c57"
    },
    {
      "remote_url": "https://github.com/gsierra99/ExFormMathL4",
      "last_time_visited": "2025-04-22T03:38:18.069028+00:00",
      "remote_heads_hash": "18bdfe18ef1b"
    },
    {
      "remote_url": "https://github.com/Hagb/lean-groebner",
      "last_time_visited": "2025-04-22T03:38:18.641120+00:00",
      "remote_heads_hash": "8a6f9e6a9967"
    },
    {
      "remote_url": "https://github.com/HannahSantos/FMCn_Lean",
      "last_time_visited": "2025-04-22T03:38:19.130404+00:00",
      "remote_heads_hash": "245f1abf4da5"
    },
    {
      "remote_url": "https://github.com/haruhisa-enomoto/mathlib4-all-tactics",
      "last_time_visited": "2025-04-22T03:38:19.642601+00:00",
      "remote_heads_hash": "c0aa438185da"
    },
    {
      "remote_url": "https://github.com/HEPLean/PhysLean",
      "last_time_visited": "2025-04-22T03:38:20.155159+00:00",
      "remote_heads_hash": "8f53e7fff304"
    },
    {
      "remote_url": "https://github.com/hhu-adam/lean-i18n",
      "last_time_visited": "2025-04-22T03:57:18.936463+00:00",
      "remote_heads_hash": "0f73c0dadeae"
    },
    {
      "remote_url": "https://github.com/hhu-adam/Robo",
      "last_time_visited": "2025-04-22T03:57:19.473856+00:00",
      "remote_heads_hash": "8fb4fda34b5f"
    },
    {
      "remote_url": "https://github.com/igrep/lean-workshop",
      "last_time_visited": "2025-04-22T03:57:22.593414+00:00",
      "remote_heads_hash": "3b2ae8b7d631"
    },
    {
      "remote_url": "https://github.com/imbrem/discretion",
      "last_time_visited": "2025-04-22T03:57:23.076743+00:00",
      "remote_heads_hash": "b5cff868a25d"
    },
    {
      "remote_url": "https://github.com/imbrem/debruijn-ssa",
      "last_time_visited": "2025-04-22T03:57:23.661381+00:00",
      "remote_heads_hash": "333a657f701e"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/M1F-explained",
      "last_time_visited": "2025-04-22T03:57:24.273852+00:00",
      "remote_heads_hash": "3110da3d860a"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/IUM",
      "last_time_visited": "2025-04-22T03:57:24.753263+00:00",
      "remote_heads_hash": "a4cc0b92642f"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/formalising-mathematics-2024",
      "last_time_visited": "2025-04-22T03:57:25.314808+00:00",
      "remote_heads_hash": "e7cfe4f5ab5b"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/FLT",
      "last_time_visited": "2025-04-22T03:57:25.881581+00:00",
      "remote_heads_hash": "ddc3fbf106fd"
    },
    {
      "remote_url": "https://github.com/Ivan-Sergeyev/seymour",
      "last_time_visited": "2025-04-22T03:57:26.563107+00:00",
      "remote_heads_hash": "6239611e7dd7"
    },
    {
      "remote_url": "https://github.com/ivankobe/FactorizationSystems",
      "last_time_visited": "2025-04-22T03:57:27.424022+00:00",
      "remote_heads_hash": "edb00f932869"
    },
    {
      "remote_url": "https://github.com/Izzimach/EffSpec-lean",
      "last_time_visited": "2025-04-22T03:57:28.061568+00:00",
      "remote_heads_hash": "562e30665420"
    },
    {
      "remote_url": "https://github.com/jaalonso/Calculemus2_es",
      "last_time_visited": "2025-04-22T03:57:28.889749+00:00",
      "remote_heads_hash": "515249923b37"
    },
    {
      "remote_url": "https://github.com/jaalonso/Calculemus2",
      "last_time_visited": "2025-04-22T03:57:29.571257+00:00",
      "remote_heads_hash": "ecf1df8ce6b3"
    },
    {
      "remote_url": "https://github.com/JadAbouHawili/KnightsAndKnaves-Lean4Game",
      "last_time_visited": "2025-04-22T03:57:30.564606+00:00",
      "remote_heads_hash": "6dc941541dfa"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/LeanColls",
      "last_time_visited": "2025-04-22T03:57:31.121867+00:00",
      "remote_heads_hash": "1c812dd36af8"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/http",
      "last_time_visited": "2025-04-22T03:57:37.179527+00:00",
      "remote_heads_hash": "533140b90c9c"
    },
    {
      "remote_url": "https://github.com/jeswr/RDF.lean",
      "last_time_visited": "2025-04-22T03:57:37.683108+00:00",
      "remote_heads_hash": "a9f36adc4a2f"
    },
    {
      "remote_url": "https://github.com/joehendrix/lean-crypto",
      "last_time_visited": "2025-04-22T03:57:38.199524+00:00",
      "remote_heads_hash": "3a6516ecfb15"
    },
    {
      "remote_url": "https://github.com/jsm28/AperiodicMonotilesLean",
      "last_time_visited": "2025-04-22T03:57:39.205187+00:00",
      "remote_heads_hash": "9edd7af2f762"
    },
    {
      "remote_url": "https://github.com/katydid/regex-deriv-reproving-agda-in-lean",
      "last_time_visited": "2025-04-22T03:57:39.730055+00:00",
      "remote_heads_hash": "2ca59eba6863"
    },
    {
      "remote_url": "https://github.com/katydid/regex-deriv-lean",
      "last_time_visited": "2025-04-22T03:57:40.316922+00:00",
      "remote_heads_hash": "32f3cca0b2f8"
    },
    {
      "remote_url": "https://github.com/kebekus/ProjectVD",
      "last_time_visited": "2025-04-22T03:57:40.832751+00:00",
      "remote_heads_hash": "a040f96d7f28"
    },
    {
      "remote_url": "https://github.com/keilambda/eocia-lean",
      "last_time_visited": "2025-04-22T03:57:42.301923+00:00",
      "remote_heads_hash": "52b63bb55762"
    },
    {
      "remote_url": "https://github.com/kim-em/lean-training-data",
      "last_time_visited": "2025-04-22T03:57:42.717821+00:00",
      "remote_heads_hash": "7108932d8b3e"
    },
    {
      "remote_url": "https://github.com/KislyjKisel/Raylib.lean",
      "last_time_visited": "2025-04-22T03:57:43.309842+00:00",
      "remote_heads_hash": "5340227f3bd7"
    },
    {
      "remote_url": "https://github.com/KislyjKisel/lean-pod",
      "last_time_visited": "2025-04-22T03:57:43.932954+00:00",
      "remote_heads_hash": "0e4008b19fa0"
    },
    {
      "remote_url": "https://github.com/kkaunda/spgf",
      "last_time_visited": "2025-04-22T03:57:44.459208+00:00",
      "remote_heads_hash": "d044f65aa55f"
    },
    {
      "remote_url": "https://github.com/kmill/lean4-raytracer",
      "last_time_visited": "2025-04-22T03:57:45.042766+00:00",
      "remote_heads_hash": "a93cae6611b5"
    },
    {
      "remote_url": "https://github.com/kmill/LeanTeX-mathlib",
      "last_time_visited": "2025-04-22T03:57:46.566789+00:00",
      "remote_heads_hash": "7eeb12426a64"
    },
    {
      "remote_url": "https://github.com/kmill/LeanTeX",
      "last_time_visited": "2025-04-22T03:57:47.071095+00:00",
      "remote_heads_hash": "f2b67cb68de9"
    },
    {
      "remote_url": "https://github.com/knowsys/CertifyingDatalog",
      "last_time_visited": "2025-04-22T03:57:47.931952+00:00",
      "remote_heads_hash": "78df03fcc80f"
    },
    {
      "remote_url": "https://github.com/kovach/etch",
      "last_time_visited": "2025-04-22T03:57:57.125899+00:00",
      "remote_heads_hash": "4191c72dce05"
    },
    {
      "remote_url": "https://github.com/lean-dojo/LeanCopilot",
      "last_time_visited": "2025-04-22T03:57:58.731311+00:00",
      "remote_heads_hash": "5b8e872772f7"
    },
    {
      "remote_url": "https://github.com/lean-ja/reference-manual-ja",
      "last_time_visited": "2025-04-22T03:57:59.366688+00:00",
      "remote_heads_hash": "87e7e8a81be1"
    },
    {
      "remote_url": "https://github.com/lean-ja/lean99",
      "last_time_visited": "2025-04-22T03:58:01.270195+00:00",
      "remote_heads_hash": "d458dfc3b5c8"
    },
    {
      "remote_url": "https://github.com/lean-ja/lean-by-example",
      "last_time_visited": "2025-04-22T03:58:01.761016+00:00",
      "remote_heads_hash": "f0229358b5da"
    },
    {
      "remote_url": "https://github.com/lean-machines-central/lean-machines",
      "last_time_visited": "2025-04-22T03:58:03.853250+00:00",
      "remote_heads_hash": "150f401098f7"
    },
    {
      "remote_url": "https://github.com/lean-machines-central/lean-machines-examples",
      "last_time_visited": "2025-04-22T03:58:04.460795+00:00",
      "remote_heads_hash": "693936d31735"
    },
    {
      "remote_url": "https://github.com/leanprover-community/tutorials4",
      "last_time_visited": "2025-04-22T03:58:05.023133+00:00",
      "remote_heads_hash": "d2deab6affd4"
    },
    {
      "remote_url": "https://github.com/leanprover-community/sphere-eversion",
      "last_time_visited": "2025-04-22T03:58:05.723239+00:00",
      "remote_heads_hash": "7a1aaaededfd"
    },
    {
      "remote_url": "https://github.com/leanprover-community/quote4",
      "last_time_visited": "2025-04-22T03:58:07.244105+00:00",
      "remote_heads_hash": "f1cec0d144d0"
    },
    {
      "remote_url": "https://github.com/leanprover-community/ProofWidgets4",
      "last_time_visited": "2025-04-22T03:58:07.758521+00:00",
      "remote_heads_hash": "268cce1ef655"
    },
    {
      "remote_url": "https://github.com/leanprover-community/plausible",
      "last_time_visited": "2025-04-22T03:58:08.449537+00:00",
      "remote_heads_hash": "5b8e5e3beaa9"
    },
    {
      "remote_url": "https://github.com/leanprover-community/mathport",
      "last_time_visited": "2025-04-22T03:58:08.973250+00:00",
      "remote_heads_hash": "f1a810136ef9"
    },
    {
      "remote_url": "https://github.com/leanprover-community/mathlib4",
      "last_time_visited": "2025-04-22T03:58:10.066906+00:00",
      "remote_heads_hash": "dd94f2ebd7f3"
    },
    {
      "remote_url": "https://github.com/leanprover-community/llm",
      "last_time_visited": "2025-04-22T04:15:26.518727+00:00",
      "remote_heads_hash": "d239306b7ab7"
    },
    {
      "remote_url": "https://github.com/leanprover-community/LeanSearchClient",
      "last_time_visited": "2025-04-22T04:15:27.065639+00:00",
      "remote_heads_hash": "0674ee6a0314"
    },
    {
      "remote_url": "https://github.com/leanprover-community/lean4-metaprogramming-book",
      "last_time_visited": "2025-04-22T04:15:27.562747+00:00",
      "remote_heads_hash": "d44060733757"
    },
    {
      "remote_url": "https://github.com/leanprover-community/iris-lean",
      "last_time_visited": "2025-04-22T04:15:28.074180+00:00",
      "remote_heads_hash": "84a452297995"
    },
    {
      "remote_url": "https://github.com/leanprover-community/import-graph",
      "last_time_visited": "2025-04-22T04:15:28.629786+00:00",
      "remote_heads_hash": "a97730530fe1"
    },
    {
      "remote_url": "https://github.com/leanprover-community/NNG4",
      "last_time_visited": "2025-04-22T04:15:29.186606+00:00",
      "remote_heads_hash": "6c6fa024917e"
    },
    {
      "remote_url": "https://github.com/leanprover-community/flt-regular",
      "last_time_visited": "2025-04-22T04:15:29.801120+00:00",
      "remote_heads_hash": "de55825908b6"
    },
    {
      "remote_url": "https://github.com/leanprover-community/duper",
      "last_time_visited": "2025-04-22T04:15:30.453232+00:00",
      "remote_heads_hash": "03251bd47001"
    },
    {
      "remote_url": "https://github.com/leanprover-community/con-nf",
      "last_time_visited": "2025-04-22T04:15:31.168230+00:00",
      "remote_heads_hash": "b4e65531e4fe"
    },
    {
      "remote_url": "https://github.com/leanprover-community/batteries",
      "last_time_visited": "2025-04-22T04:15:33.398284+00:00",
      "remote_heads_hash": "3d4a38c3f2ca"
    },
    {
      "remote_url": "https://github.com/leanprover-community/lean-auto",
      "last_time_visited": "2025-04-22T04:17:08.866271+00:00",
      "remote_heads_hash": "2b9686fbeabf"
    },
    {
      "remote_url": "https://github.com/leanprover-community/aesop",
      "last_time_visited": "2025-04-22T04:23:40.245565+00:00",
      "remote_heads_hash": "672607b115e4"
    },
    {
      "remote_url": "https://github.com/leanprover/verso",
      "last_time_visited": "2025-04-22T04:23:41.234995+00:00",
      "remote_heads_hash": "ce1f041c4d4b"
    },
    {
      "remote_url": "https://github.com/leanprover/reference-manual",
      "last_time_visited": "2025-04-22T04:23:41.902993+00:00",
      "remote_heads_hash": "c1d8e254ff7b"
    },
    {
      "remote_url": "https://github.com/leanprover/TensorLib",
      "last_time_visited": "2025-04-22T04:23:46.755204+00:00",
      "remote_heads_hash": "9ed93e3dd73c"
    },
    {
      "remote_url": "https://github.com/leanprover/subverso",
      "last_time_visited": "2025-04-22T04:23:47.338506+00:00",
      "remote_heads_hash": "f50e0260b93b"
    },
    {
      "remote_url": "https://github.com/leanprover/SHerLOC",
      "last_time_visited": "2025-04-22T04:23:47.786520+00:00",
      "remote_heads_hash": "8db31b4878a6"
    },
    {
      "remote_url": "https://github.com/leanprover/SampCert",
      "last_time_visited": "2025-04-22T04:23:48.248601+00:00",
      "remote_heads_hash": "88112051b414"
    },
    {
      "remote_url": "https://github.com/leanprover/LNSym",
      "last_time_visited": "2025-04-22T04:23:48.818064+00:00",
      "remote_heads_hash": "57b8e43d83f5"
    },
    {
      "remote_url": "https://github.com/leanprover/leansat",
      "last_time_visited": "2025-04-22T04:24:13.711241+00:00",
      "remote_heads_hash": "1b9c393441a9"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4export",
      "last_time_visited": "2025-04-22T04:24:14.280478+00:00",
      "remote_heads_hash": "8fde9a477129"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4checker",
      "last_time_visited": "2025-04-22T04:24:15.023373+00:00",
      "remote_heads_hash": "f4e994ff1c98"
    },
    {
      "remote_url": "https://github.com/leanprover/KLR",
      "last_time_visited": "2025-04-22T04:24:15.566032+00:00",
      "remote_heads_hash": "be1b394b4ea8"
    },
    {
      "remote_url": "https://github.com/leanprover/doc-gen4",
      "last_time_visited": "2025-04-22T04:27:52.862430+00:00",
      "remote_heads_hash": "b11bb6fc0eeb"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4-cli",
      "last_time_visited": "2025-04-22T04:27:53.430821+00:00",
      "remote_heads_hash": "81485c108a0e"
    },
    {
      "remote_url": "https://github.com/lecopivo/SciLean",
      "last_time_visited": "2025-04-22T04:27:53.949818+00:00",
      "remote_heads_hash": "d123fd93d8f8"
    },
    {
      "remote_url": "https://github.com/lecopivo/LeanBLAS",
      "last_time_visited": "2025-04-22T04:27:55.488028+00:00",
      "remote_heads_hash": "0d414cf850d5"
    },
    {
      "remote_url": "https://github.com/lecopivo/lean4-karray",
      "last_time_visited": "2025-04-22T04:27:56.062273+00:00",
      "remote_heads_hash": "1277b66d931f"
    },
    {
      "remote_url": "https://github.com/lf-lang/reactor-model",
      "last_time_visited": "2025-04-22T04:27:56.574119+00:00",
      "remote_heads_hash": "43ecefc264f0"
    },
    {
      "remote_url": "https://github.com/lindy-labs/corelib_verification",
      "last_time_visited": "2025-04-22T04:27:57.374380+00:00",
      "remote_heads_hash": "45bff4c1a390"
    },
    {
      "remote_url": "https://github.com/lindy-labs/aegis",
      "last_time_visited": "2025-04-22T04:27:57.903731+00:00",
      "remote_heads_hash": "ae5aa456e8cb"
    },
    {
      "remote_url": "https://github.com/loganrjmurphy/LeanEuclid",
      "last_time_visited": "2025-04-22T04:27:58.488495+00:00",
      "remote_heads_hash": "63d340883186"
    },
    {
      "remote_url": "https://github.com/m4lvin/lean4-pdl",
      "last_time_visited": "2025-04-22T04:27:59.290184+00:00",
      "remote_heads_hash": "3a1b07d290ab"
    },
    {
      "remote_url": "https://github.com/madvorak/vcsp",
      "last_time_visited": "2025-04-22T04:39:08.022523+00:00",
      "remote_heads_hash": "bb3afa1c77cc"
    },
    {
      "remote_url": "https://github.com/madvorak/read-lean",
      "last_time_visited": "2025-04-22T04:39:08.649145+00:00",
      "remote_heads_hash": "14f55738d01a"
    },
    {
      "remote_url": "https://github.com/madvorak/duality",
      "last_time_visited": "2025-04-22T04:39:09.185662+00:00",
      "remote_heads_hash": "fd251538a9e5"
    },
    {
      "remote_url": "https://github.com/Maokami/vqc_in_lean",
      "last_time_visited": "2025-04-22T04:39:09.963788+00:00",
      "remote_heads_hash": "31f759a86b91"
    },
    {
      "remote_url": "https://github.com/marcusrossel/lean-snakebird",
      "last_time_visited": "2025-04-22T04:39:10.484414+00:00",
      "remote_heads_hash": "613f0a2c6dd3"
    },
    {
      "remote_url": "https://github.com/marcusrossel/lean-egg",
      "last_time_visited": "2025-04-22T04:39:10.992230+00:00",
      "remote_heads_hash": "3e594e11b747"
    },
    {
      "remote_url": "https://github.com/math-xmum/gametheory",
      "last_time_visited": "2025-04-22T04:39:11.883253+00:00",
      "remote_heads_hash": "186d87952f5b"
    },
    {
      "remote_url": "https://github.com/mhuisi/Uniq",
      "last_time_visited": "2025-04-22T04:39:12.401545+00:00",
      "remote_heads_hash": "8632f707f342"
    },
    {
      "remote_url": "https://github.com/MichaelStollBayreuth/Weights",
      "last_time_visited": "2025-04-22T04:39:13.050518+00:00",
      "remote_heads_hash": "cab50a1177cf"
    },
    {
      "remote_url": "https://github.com/MichaelStollBayreuth/EulerProducts",
      "last_time_visited": "2025-04-22T04:39:13.531255+00:00",
      "remote_heads_hash": "a475080c281b"
    },
    {
      "remote_url": "https://github.com/mo271/FormalBook",
      "last_time_visited": "2025-04-22T04:39:13.929192+00:00",
      "remote_heads_hash": "205f79a11375"
    },
    {
      "remote_url": "https://github.com/model-checking/rust-lean-models",
      "last_time_visited": "2025-04-22T04:39:14.467552+00:00",
      "remote_heads_hash": "9acadaa1b951"
    },
    {
      "remote_url": "https://github.com/morganfshirley/CommComp",
      "last_time_visited": "2025-04-22T04:39:15.081172+00:00",
      "remote_heads_hash": "bb6b1df5fd9e"
    },
    {
      "remote_url": "https://github.com/mortarsanjaya/IMOSLLean4",
      "last_time_visited": "2025-04-22T04:39:15.615309+00:00",
      "remote_heads_hash": "cd24d3f3c273"
    },
    {
      "remote_url": "https://github.com/NethermindEth/risczero-fv",
      "last_time_visited": "2025-04-22T04:39:16.467577+00:00",
      "remote_heads_hash": "be4562d9e9c0"
    },
    {
      "remote_url": "https://github.com/NethermindEth/EVMYulLean",
      "last_time_visited": "2025-04-22T04:39:17.528082+00:00",
      "remote_heads_hash": "2d3177845d1b"
    },
    {
      "remote_url": "https://github.com/niklasmohrin/lean-seminar-2023",
      "last_time_visited": "2025-04-22T04:39:18.262269+00:00",
      "remote_heads_hash": "11e47f92bf1d"
    },
    {
      "remote_url": "https://github.com/nomeata/loogle",
      "last_time_visited": "2025-04-22T04:39:18.768235+00:00",
      "remote_heads_hash": "7681188b64c3"
    },
    {
      "remote_url": "https://github.com/nomeata/lean-calcify",
      "last_time_visited": "2025-04-22T04:39:19.302154+00:00",
      "remote_heads_hash": "9b5c02bf8403"
    },
    {
      "remote_url": "https://github.com/NUS-Math-Formalization/CalculusSkeleton",
      "last_time_visited": "2025-04-22T04:39:19.738010+00:00",
      "remote_heads_hash": "77b97786a779"
    },
    {
      "remote_url": "https://github.com/objectionary/proof",
      "last_time_visited": "2025-04-22T04:39:20.353795+00:00",
      "remote_heads_hash": "3c07a6860913"
    },
    {
      "remote_url": "https://github.com/opencompl/lean-mlir",
      "last_time_visited": "2025-04-22T04:39:24.581787+00:00",
      "remote_heads_hash": "02ab270f65bb"
    },
    {
      "remote_url": "https://github.com/optsuite/optlib",
      "last_time_visited": "2025-04-22T04:39:51.377771+00:00",
      "remote_heads_hash": "bd52ad3a2cec"
    },
    {
      "remote_url": "https://github.com/or4nge19/NeuralNetworks",
      "last_time_visited": "2025-04-22T04:39:51.962360+00:00",
      "remote_heads_hash": "60bec0958ed3"
    },
    {
      "remote_url": "https://github.com/pandaman64/lean-regex",
      "last_time_visited": "2025-04-22T04:39:52.568946+00:00",
      "remote_heads_hash": "bc4a496c5964"
    },
    {
      "remote_url": "https://github.com/Paper-Proof/paperproof",
      "last_time_visited": "2025-04-22T04:39:53.111979+00:00",
      "remote_heads_hash": "69f0d23a0693"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/verbose-lean4",
      "last_time_visited": "2025-04-22T04:39:59.884987+00:00",
      "remote_heads_hash": "9511f511e9d6"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/GlimpseOfLean",
      "last_time_visited": "2025-04-22T04:40:00.711955+00:00",
      "remote_heads_hash": "ba86fc1bb832"
    },
    {
      "remote_url": "https://github.com/paulch42/lean-spec",
      "last_time_visited": "2025-04-22T04:40:01.326108+00:00",
      "remote_heads_hash": "8264d464e45c"
    },
    {
      "remote_url": "https://github.com/pawelsberg/lean-directory-browser",
      "last_time_visited": "2025-04-22T04:40:01.858431+00:00",
      "remote_heads_hash": "e740683950be"
    },
    {
      "remote_url": "https://github.com/PeterKementzey/graph-library-for-lean4",
      "last_time_visited": "2025-04-22T04:40:02.386612+00:00",
      "remote_heads_hash": "0eb4fa24abc1"
    },
    {
      "remote_url": "https://github.com/pimpale/llm.lean",
      "last_time_visited": "2025-04-22T04:40:02.873162+00:00",
      "remote_heads_hash": "5875eed27aef"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanProject",
      "last_time_visited": "2025-04-22T04:40:03.350990+00:00",
      "remote_heads_hash": "ff6b956197ec"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanInVienna2024",
      "last_time_visited": "2025-04-22T04:40:03.872361+00:00",
      "remote_heads_hash": "bfa3f74922c2"
    },
    {
      "remote_url": "https://github.com/proofs-and-programs/proofs-and-programs-25",
      "last_time_visited": "2025-04-22T04:40:04.474153+00:00",
      "remote_heads_hash": "355d4d9ee3f9"
    },
    {
      "remote_url": "https://github.com/provables/special-numbers",
      "last_time_visited": "2025-04-22T04:40:05.015305+00:00",
      "remote_heads_hash": "3ff028720537"
    },
    {
      "remote_url": "https://github.com/quangvdao/ZKLib-deprecated",
      "last_time_visited": "2025-04-22T04:40:22.240620+00:00",
      "remote_heads_hash": "6f178ea20246"
    },
    {
      "remote_url": "https://github.com/rahul3613/ProofNet-lean4",
      "last_time_visited": "2025-04-22T04:40:22.833337+00:00",
      "remote_heads_hash": "62462040cf28"
    },
    {
      "remote_url": "https://github.com/rahul3613/miniF2F-lean4",
      "last_time_visited": "2025-04-22T04:40:23.713396+00:00",
      "remote_heads_hash": "ed3336e45e16"
    },
    {
      "remote_url": "https://github.com/rami3l/PLFaLean",
      "last_time_visited": "2025-04-22T04:40:24.339284+00:00",
      "remote_heads_hash": "64870ad853f0"
    },
    {
      "remote_url": "https://github.com/reilabs/proven-zk",
      "last_time_visited": "2025-04-22T04:40:24.905579+00:00",
      "remote_heads_hash": "89dfce5717eb"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/testing-lower-bounds",
      "last_time_visited": "2025-04-22T04:40:25.422127+00:00",
      "remote_heads_hash": "fccb394cbbf7"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/kolmogorov_extension4",
      "last_time_visited": "2025-04-22T04:40:26.125755+00:00",
      "remote_heads_hash": "5e5e07d89ae7"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/CLT",
      "last_time_visited": "2025-04-22T04:40:26.730747+00:00",
      "remote_heads_hash": "f48eb5595dc2"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/demontrer2025",
      "last_time_visited": "2025-04-22T04:40:27.248882+00:00",
      "remote_heads_hash": "bd4089796258"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/LFTCM2024",
      "last_time_visited": "2025-04-22T04:40:28.046459+00:00",
      "remote_heads_hash": "1508422fc709"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/flt3",
      "last_time_visited": "2025-04-22T04:40:28.635538+00:00",
      "remote_heads_hash": "70b51e008451"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/kaplanski4",
      "last_time_visited": "2025-04-22T04:40:29.155957+00:00",
      "remote_heads_hash": "b88c997ee624"
    },
    {
      "remote_url": "https://github.com/risc0/risc0-lean4",
      "last_time_visited": "2025-04-22T04:40:29.669788+00:00",
      "remote_heads_hash": "76fff39fd5ca"
    },
    {
      "remote_url": "https://github.com/Seasawher/mk-exercise",
      "last_time_visited": "2025-04-22T04:40:30.412582+00:00",
      "remote_heads_hash": "fe2286bc7c85"
    },
    {
      "remote_url": "https://github.com/Seasawher/mdgen",
      "last_time_visited": "2025-04-22T04:40:30.964935+00:00",
      "remote_heads_hash": "035325c4499d"
    },
    {
      "remote_url": "https://github.com/Seasawher/mathlib4-help",
      "last_time_visited": "2025-04-22T04:40:31.498998+00:00",
      "remote_heads_hash": "42f987825ba2"
    },
    {
      "remote_url": "https://github.com/Seasawher/lean-book",
      "last_time_visited": "2025-04-22T04:40:33.197861+00:00",
      "remote_heads_hash": "f5a57bff0f45"
    },
    {
      "remote_url": "https://github.com/Seasawher/import-all",
      "last_time_visited": "2025-04-22T04:40:33.718234+00:00",
      "remote_heads_hash": "5cfb15f55ac8"
    },
    {
      "remote_url": "https://github.com/Shreyas4991/DGAlgorithms",
      "last_time_visited": "2025-04-22T04:40:34.212047+00:00",
      "remote_heads_hash": "04b99eaf838d"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/Saturn",
      "last_time_visited": "2025-04-22T04:40:34.723611+00:00",
      "remote_heads_hash": "3f2346688f39"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/Polylean",
      "last_time_visited": "2025-04-22T04:40:35.323035+00:00",
      "remote_heads_hash": "e7786906cb32"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/proofs-and-programs-2023",
      "last_time_visited": "2025-04-22T04:40:35.920750+00:00",
      "remote_heads_hash": "f50f15d7d0b0"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/MetaExamples",
      "last_time_visited": "2025-04-22T04:40:36.587131+00:00",
      "remote_heads_hash": "21673a31a16b"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanLion",
      "last_time_visited": "2025-04-22T04:40:37.086082+00:00",
      "remote_heads_hash": "9506b2acf8a3"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanAideTools",
      "last_time_visited": "2025-04-22T04:40:37.597468+00:00",
      "remote_heads_hash": "9555b8513464"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanAide",
      "last_time_visited": "2025-04-22T04:40:38.154831+00:00",
      "remote_heads_hash": "eb2c967d8047"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/lean-loris",
      "last_time_visited": "2025-04-22T04:41:06.310505+00:00",
      "remote_heads_hash": "1e336dd1a8f1"
    },
    {
      "remote_url": "https://github.com/sinhp/LeanFibredCategories",
      "last_time_visited": "2025-04-22T04:41:06.994923+00:00",
      "remote_heads_hash": "cb5cdf9d5b6e"
    },
    {
      "remote_url": "https://github.com/starkware-libs/formal-proofs",
      "last_time_visited": "2025-04-22T04:41:07.575144+00:00",
      "remote_heads_hash": "e7128b1e4414"
    },
    {
      "remote_url": "https://github.com/sven-manthe/A-formalization-of-Borel-determinacy-in-Lean",
      "last_time_visited": "2025-04-22T04:41:08.162713+00:00",
      "remote_heads_hash": "5cfc842b0804"
    },
    {
      "remote_url": "https://github.com/T-Brick/lean-wasm",
      "last_time_visited": "2025-04-22T04:41:08.693952+00:00",
      "remote_heads_hash": "b88e6c28788e"
    },
    {
      "remote_url": "https://github.com/T-Brick/lean2wasm",
      "last_time_visited": "2025-04-22T04:41:09.207437+00:00",
      "remote_heads_hash": "3aa558e05c14"
    },
    {
      "remote_url": "https://github.com/teorth/pfr",
      "last_time_visited": "2025-04-22T04:41:09.692802+00:00",
      "remote_heads_hash": "01e12304c4e8"
    },
    {
      "remote_url": "https://github.com/teorth/expdb",
      "last_time_visited": "2025-04-22T04:41:11.714189+00:00",
      "remote_heads_hash": "f344a09ba88a"
    },
    {
      "remote_url": "https://github.com/teorth/equational_theories",
      "last_time_visited": "2025-04-22T04:41:12.415584+00:00",
      "remote_heads_hash": "c42548c54019"
    },
    {
      "remote_url": "https://github.com/Timeroot/Lean-QuantumInfo",
      "last_time_visited": "2025-04-22T04:41:16.991796+00:00",
      "remote_heads_hash": "7a073c31ea15"
    },
    {
      "remote_url": "https://github.com/Timeroot/ComputableReal",
      "last_time_visited": "2025-04-22T04:41:17.517532+00:00",
      "remote_heads_hash": "8abf2e84860e"
    },
    {
      "remote_url": "https://github.com/todbeibrot/Lean-Oscar",
      "last_time_visited": "2025-04-22T04:41:18.013668+00:00",
      "remote_heads_hash": "5be3ae253c94"
    },
    {
      "remote_url": "https://github.com/Trequetrum/lean4game-logic",
      "last_time_visited": "2025-04-22T04:41:18.586334+00:00",
      "remote_heads_hash": "eebd9da88e9d"
    },
    {
      "remote_url": "https://github.com/tydeu/lean4-alloy",
      "last_time_visited": "2025-04-22T04:41:19.125144+00:00",
      "remote_heads_hash": "607e2d5fe13b"
    },
    {
      "remote_url": "https://github.com/ufmg-smite/lean-smt",
      "last_time_visited": "2025-04-22T04:41:19.658066+00:00",
      "remote_heads_hash": "38596c368e5e"
    },
    {
      "remote_url": "https://github.com/VCA-EPFL/leanses",
      "last_time_visited": "2025-04-22T04:41:20.353247+00:00",
      "remote_heads_hash": "4a086d674a6c"
    },
    {
      "remote_url": "https://github.com/VCA-EPFL/dataflow-rewriter",
      "last_time_visited": "2025-04-22T04:41:20.845610+00:00",
      "remote_heads_hash": "47125c8a3fa1"
    },
    {
      "remote_url": "https://github.com/verified-optimization/CvxLean",
      "last_time_visited": "2025-04-22T04:41:21.490624+00:00",
      "remote_heads_hash": "7a4249e9e921"
    },
    {
      "remote_url": "https://github.com/Verified-zkEVM/ZKLib",
      "last_time_visited": "2025-04-22T04:41:22.260315+00:00",
      "remote_heads_hash": "a64705a0b97f"
    },
    {
      "remote_url": "https://github.com/Verified-zkEVM/clean",
      "last_time_visited": "2025-04-22T04:41:22.966335+00:00",
      "remote_heads_hash": "694861fb15f6"
    },
    {
      "remote_url": "https://github.com/verse-lab/veil",
      "last_time_visited": "2025-04-22T04:47:33.655949+00:00",
      "remote_heads_hash": "c6a42f405bdd"
    },
    {
      "remote_url": "https://github.com/verse-lab/lean-ssr",
      "last_time_visited": "2025-04-22T04:47:34.304707+00:00",
      "remote_heads_hash": "90c340f9e5c7"
    },
    {
      "remote_url": "https://github.com/vihdzp/rubik-lean4",
      "last_time_visited": "2025-04-22T04:47:34.757983+00:00",
      "remote_heads_hash": "1fc48ff90e62"
    },
    {
      "remote_url": "https://github.com/vihdzp/combinatorial-games",
      "last_time_visited": "2025-04-22T04:47:35.289898+00:00",
      "remote_heads_hash": "f521d632a4bd"
    },
    {
      "remote_url": "https://github.com/vltanh/lean4-analysis-tao",
      "last_time_visited": "2025-04-22T04:47:35.791988+00:00",
      "remote_heads_hash": "57996e1217a9"
    },
    {
      "remote_url": "https://github.com/wellecks/ntptutorial",
      "last_time_visited": "2025-04-22T04:47:36.172086+00:00",
      "remote_heads_hash": "ecbb7c378fae"
    },
    {
      "remote_url": "https://github.com/wellecks/llmstep",
      "last_time_visited": "2025-04-22T04:47:36.983950+00:00",
      "remote_heads_hash": "164bd714fab9"
    },
    {
      "remote_url": "https://github.com/wupr/order-p-q",
      "last_time_visited": "2025-04-22T04:47:37.699941+00:00",
      "remote_heads_hash": "b0999047d697"
    },
    {
      "remote_url": "https://github.com/Xiyou-Wu/RiemannianGeometry",
      "last_time_visited": "2025-04-22T04:47:38.265196+00:00",
      "remote_heads_hash": "711e79694735"
    },
    {
      "remote_url": "https://github.com/YaelDillies/Toric",
      "last_time_visited": "2025-04-22T04:47:38.768085+00:00",
      "remote_heads_hash": "f8f7ad360914"
    },
    {
      "remote_url": "https://github.com/YaelDillies/LeanCamCombi",
      "last_time_visited": "2025-04-22T04:47:39.393970+00:00",
      "remote_heads_hash": "e0017197ebf0"
    },
    {
      "remote_url": "https://github.com/YaelDillies/LeanAPAP",
      "last_time_visited": "2025-04-22T04:47:40.057667+00:00",
      "remote_heads_hash": "15c646db28ea"
    },
    {
      "remote_url": "https://github.com/YaelDillies/ChandraFurstLipton",
      "last_time_visited": "2025-04-22T04:47:40.838164+00:00",
      "remote_heads_hash": "c8b483fa1113"
    },
    {
      "remote_url": "https://github.com/yangky11/miniF2F-lean4",
      "last_time_visited": "2025-04-22T04:47:41.340051+00:00",
      "remote_heads_hash": "f520a26cc363"
    },
    {
      "remote_url": "https://github.com/yangky11/lean4-example",
      "last_time_visited": "2025-04-22T04:47:41.916602+00:00",
      "remote_heads_hash": "7e60684c8a6d"
    },
    {
      "remote_url": "https://github.com/YnirPaz/PCF-Theory",
      "last_time_visited": "2025-04-22T04:47:42.439839+00:00",
      "remote_heads_hash": "7b0d1c8f2732"
    },
    {
      "remote_url": "https://github.com/yuma-mizuno/lean-math-workshop",
      "last_time_visited": "2025-04-22T04:47:42.957143+00:00",
      "remote_heads_hash": "21fbc4ec8b2a"
    }
  ],
  "sorries": [
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2275,
        "start_column": 61,
        "end_line": 2275,
        "end_column": 66,
        "file": "PrimeNumberTheoremAnd/Wiener.lean"
      },
      "debug_info": {
        "goal": "A x : \u211d\nG : \u2102 \u2192 \u2102\nf : \u2115 \u2192 \u211d\nhpos : 0 \u2264 f\nhG : ContinuousOn G {s | 1 \u2264 s.re}\nhG' : EqOn G (fun s => LSeries (fun n => \u2191(f n)) s - \u2191A / (s - 1)) {s | 1 < s.re}\nhf : \u2200 (\u03c3' : \u211d), 1 < \u03c3' \u2192 Summable (nterm (fun n => \u2191(f n)) \u03c3')\n\u03c8 : CS 2 \u2102\nh\u03c8pos : \u2200 (y : \u211d), 0 \u2264 (\ud835\udcd5 \u03c8.toFun y).re \u2227 (\ud835\udcd5 \u03c8.toFun y).im = 0\nhx : 1 \u2264 x\n\u22a2 \u2211' (n : \u2115), \u2191(f n) / \u2191n * \ud835\udcd5 \u03c8.toFun (1 / (2 * \u03c0) * Real.log (\u2191n / x)) -\n      \u2191A * \u222b (u : \u211d) in Ici (-Real.log x), \ud835\udcd5 \u03c8.toFun (u / (2 * \u03c0)) =\n    \u222b (t : \u211d), G (1 + \u2191t * I) * \u03c8.toFun t * \u2191x ^ (\u2191t * I)",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2275"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-04-04T12:17:01-07:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "bf42e60cb656be3afbf004c04698b3eaef26c35ce22b8517b85496962752fa3e"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2297,
        "start_column": 90,
        "end_line": 2297,
        "end_column": 95,
        "file": "PrimeNumberTheoremAnd/Wiener.lean"
      },
      "debug_info": {
        "goal": "A : \u211d\nG : \u2102 \u2192 \u2102\nf : \u2115 \u2192 \u211d\nhpos : 0 \u2264 f\nhG : ContinuousOn G {s | 1 \u2264 s.re}\nhG' : EqOn G (fun s => LSeries (fun n => \u2191(f n)) s - \u2191A / (s - 1)) {s | 1 < s.re}\nhf : \u2200 (\u03c3' : \u211d), 1 < \u03c3' \u2192 Summable (nterm (fun n => \u2191(f n)) \u03c3')\n\u03c8 : CS 2 \u2102\nh\u03c8pos : \u2200 (y : \u211d), 0 \u2264 (\ud835\udcd5 \u03c8.toFun y).re \u2227 (\ud835\udcd5 \u03c8.toFun y).im = 0\n\u22a2 \u2203 B, \u2200 (x : \u211d), 0 < x \u2192 \u2016\u2211' (n : \u2115), \u2191(f n) / \u2191n * \ud835\udcd5 \u03c8.toFun (1 / (2 * \u03c0) * Real.log (\u2191n / x))\u2016 \u2264 B",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2297"
      },
      "metadata": {
        "blame_email_hash": "4d01d7c10d46",
        "blame_date": "2024-04-16T02:15:35+02:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "520457e1f0d2e7250f0878b0209d6145b18befc38cc01b64f39f34a1e7dc7d0f"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2315,
        "start_column": 2,
        "end_line": 2315,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/Wiener.lean"
      },
      "debug_info": {
        "goal": "A : \u211d\nG : \u2102 \u2192 \u2102\nf : \u2115 \u2192 \u211d\nhpos : 0 \u2264 f\nhf : \u2200 (\u03c3' : \u211d), 1 < \u03c3' \u2192 Summable (nterm (fun n => \u2191(f n)) \u03c3')\nhG : ContinuousOn G {s | 1 \u2264 s.re}\nhG' : EqOn G (fun s => LSeries (fun n => \u2191(f n)) s - \u2191A / (s - 1)) {s | 1 < s.re}\n\u22a2 cheby fun n => \u2191(f n)",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2315"
      },
      "metadata": {
        "blame_email_hash": "4d01d7c10d46",
        "blame_date": "2024-04-16T02:15:35+02:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "b95d2c7a770490b019b59c2ded7e2de30f5e5f9b2c1006481198e3b0cc5605f3"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 328,
        "start_column": 2,
        "end_line": 328,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "SmoothingF : \u211d \u2192 \u211d\ndiffSmoothingF : ContDiff \u211d 1 SmoothingF\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\nX\u271d : \u211d\nC : \u211d := sorry\nCpos : 0 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\n\u22a2 \u2016\u2191(\u2211' (n : \u2115), \u039b n * Smooth1 SmoothingF \u03b5 (\u2191n / X)) - \u2191((Finset.range \u230aX\u230b\u208a).sum \u21d1\u039b)\u2016 \u2264 C * \u03b5 * X * Real.log X",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L328"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2024-03-11T23:23:22-04:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "5f3104a917032b249932ce6f08c0c08e464ff200ddc7419e5587a268f0caa950"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 319,
        "start_column": 23,
        "end_line": 319,
        "end_column": 28,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "SmoothingF : \u211d \u2192 \u211d\ndiffSmoothingF : ContDiff \u211d 1 SmoothingF\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\nX : \u211d\nC : \u211d := sorry\n\u22a2 0 < C",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L319"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-14T14:09:55-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "d31421907a8b6b41381cf2b924520747406162ce8610f001d46fc402352275bb"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 365,
        "start_column": 2,
        "end_line": 365,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "SmoothingF : \u211d \u2192 \u211d\n\u03b5 : \u211d\n\u03b5_pos : 0 < \u03b5\nX \u03c3\u2080 : \u211d\n\u03c3\u2080_pos : 0 < \u03c3\u2080\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) (Icc \u03c3\u2080 2 \u00d7\u2102 univ \\ {1})\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\n\u22a2 Integrable (fun t => SmoothedChebyshevIntegrand SmoothingF \u03b5 X (2 + \u2191t * I)) volume",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L365"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-28T10:57:09-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "1e012fa8e721c16a5a5609079fc52308969208b5e434f92efa975840c2832c11"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 399,
        "start_column": 2,
        "end_line": 399,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "SmoothingF : \u211d \u2192 \u211d\n\u03b5 : \u211d\n\u03b5_pos : 0 < \u03b5\nX T : \u211d\nT_pos : 0 < T\n\u03c3\u2080 : \u211d\n\u03c3\u2080_pos : 0 < \u03c3\u2080\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) (Icc \u03c3\u2080 2 \u00d7\u2102 univ \\ {1})\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\n\u22a2 (1 / (2 * \u2191\u03c0 * I)) \u2022\n      ((I \u2022 \u222b (t : \u211d) in Iic (-T), SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u21912 + \u2191t * I)) +\n          VIntegral (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) 2 (-T) T +\n        I \u2022 \u222b (t : \u211d) in Ici T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u21912 + \u2191t * I)) =\n    \ud835\udcdc (fun x => \u2191(Smooth1 SmoothingF \u03b5 x)) 1 * \u2191X +\n      1 / (2 * \u2191\u03c0 * I) *\n        (((((I * \u222b (t : \u211d) in Iic (-T), SmoothedChebyshevIntegrand SmoothingF \u03b5 X (2 + \u2191t * I)) -\n                \u222b (s : \u211d) in Icc \u03c3\u2080 2, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191s - \u2191T * I)) +\n              I * \u222b (t : \u211d) in Icc (-T) T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191\u03c3\u2080 + \u2191t * I)) +\n            \u222b (s : \u211d) in Icc \u03c3\u2080 2, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191s + \u2191T * I)) +\n          I * \u222b (t : \u211d) in Ici T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (2 + \u2191t * I))",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L399"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-10T12:59:29-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "8a5f497557d4896ce8c37874eca4b8585364a3abd8ceb30f6ee6171d8482ad06"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 511,
        "start_column": 2,
        "end_line": 511,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "c : \u211d := sorry\ncpos : 0 < c\nC : \u211d := sorry\nX\u2080 : \u211d := sorry\nX : \u211d\nX_ge_X\u2080 : X \u2265 X\u2080\n\u22a2 \u2016(ChebyshevPsi - id) X\u2016 \u2264 C * \u2016X * rexp (-c * Real.log X ^ (1 / 10))\u2016",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L511"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2024-03-11T23:23:22-04:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "06d286d38a1822df79fb6cecfe97f52dcda8255daa248e6e5fdc68bffcf5f982"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 501,
        "start_column": 23,
        "end_line": 501,
        "end_column": 28,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "c : \u211d := sorry\n\u22a2 0 < c",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-14T15:25:09-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "7abbc3ed8d442ac777ee7b24e56250ba81752a871d4e15f84b9af0dfdd5cdc40"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 1843,
        "start_column": 2,
        "end_line": 1843,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/Consequences.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2203 c, (c =o[atTop] fun x => 1) \u2227 \u2200 (n : \u2115), \u2191(nth Nat.Prime n) = (1 + c n) * \u2191n * log \u2191n",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L1843"
      },
      "metadata": {
        "blame_email_hash": "11451cd2f124",
        "blame_date": "2024-02-19T02:44:41-08:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "854705ad4af4af94ae067b9a2008bd912742cbed7e7b331468ef90c00e9a103d"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2574,
        "start_column": 81,
        "end_line": 2574,
        "end_column": 86,
        "file": "PrimeNumberTheoremAnd/Consequences.lean"
      },
      "debug_info": {
        "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, \u03bc n) =o[atTop] fun x => x",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2574"
      },
      "metadata": {
        "blame_email_hash": "5ecb8fcfe98c",
        "blame_date": "2025-02-06T17:41:08+01:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "4c6a0455a8b34b52a7f64e32b417e8316186eaa3044d52e3d6bb7f5dd6b6c930"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2610,
        "start_column": 2,
        "end_line": 2610,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/Consequences.lean"
      },
      "debug_info": {
        "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, (-1) ^ \u03a9 n) =o[atTop] fun x => x",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2610"
      },
      "metadata": {
        "blame_email_hash": "11451cd2f124",
        "blame_date": "2024-02-19T02:44:41-08:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "c7459a88ec8bad35d847133968a3043cc0982421b5b59fe3e1dd7365c8a117a2"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2634,
        "start_column": 98,
        "end_line": 2634,
        "end_column": 103,
        "file": "PrimeNumberTheoremAnd/Consequences.lean"
      },
      "debug_info": {
        "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, \u2191(\u03bc n) / \u2191n) =o[atTop] fun x => 1",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2634"
      },
      "metadata": {
        "blame_email_hash": "5ecb8fcfe98c",
        "blame_date": "2025-02-06T17:41:08+01:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "66776fc89f5135769ea9e5f5bfb90ce7fba07bcf07c1a95cc8a671b1390a8799"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 47,
        "start_column": 28,
        "end_line": 47,
        "end_column": 33,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\n\u22a2 M.rk {e} \u2264 1",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-10T13:43:44-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "7e49c2cd31977f777678b7f90d7c8ed2a923bbdf546d7a170623287651e6f794"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 48,
        "start_column": 67,
        "end_line": 48,
        "end_column": 72,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\n\u22a2 \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "4d380fc1f5e7c0f5dd8e1497baae67b170c08b8c81fae8f69c43b80558c9ed60"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 56,
        "start_column": 6,
        "end_line": 56,
        "end_column": 11,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\n\u22a2 insert e (M.E \\ insert e Y) = M.E \\ Y",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1f19e98e4f46add55bc42e71e4596abda6b53d1dd8d161ab678ecdb9b1d2a9ed"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 57,
        "start_column": 4,
        "end_line": 57,
        "end_column": 9,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhins : insert e (M.E \\ insert e Y) = M.E \\ Y\n\u22a2 \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "82a5aef37a1937633cfa8f0ad86dfac1410727f0e846396cb884875cca33f6c3"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 59,
        "start_column": 4,
        "end_line": 59,
        "end_column": 9,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\n\u22a2 \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L59"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1eeaf815d12cc344fae058d523a5c29135db1883beadb3587fbe8072b3955987"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 64,
        "start_column": 41,
        "end_line": 64,
        "end_column": 46,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\n\u22a2 \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L64"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "36e20e542d0f74e33d886f6dc192f542b74a0706047a72b9fa4ca7f47c414b68"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 66,
        "start_column": 57,
        "end_line": 66,
        "end_column": 62,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\n\u22a2 \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "038e52d203f014e6f5700c346914cbd1febdf9d28b1ecb168ad29c8d3501da7e"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 68,
        "start_column": 59,
        "end_line": 68,
        "end_column": 64,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\n\u22a2 \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "06517ef4d807e887f53e54fdc32bca0b946c8fa7457c71cc61b07f0089b6db3c"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 74,
        "start_column": 4,
        "end_line": 74,
        "end_column": 9,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\nhneed : \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank\n\u22a2 \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) =\n    \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) + (\u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e})))) - 2 * \u2191M.rank",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "e32b01760d1fbf1799648be510c2d1f04b9de5adf0ba4400d944ff0aecbcd8a4"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 79,
        "start_column": 56,
        "end_line": 79,
        "end_column": 61,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\nhneed : \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank\nhf :\n  \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) =\n    \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) + (\u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e})))) - 2 * \u2191M.rank\n\u22a2 (M \uff3c {e}).E \\ X = M.E \\ insert e X",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "13413f22e316f27c537b695a3be6e5d0986da27454087f401c640e21ba8d21b5"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 80,
        "start_column": 58,
        "end_line": 80,
        "end_column": 63,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\nhneed : \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank\nhf :\n  \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) =\n    \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) + (\u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e})))) - 2 * \u2191M.rank\nhdelx : (M \uff3c {e}).E \\ X = M.E \\ insert e X\n\u22a2 (M \uff0f {e}).E \\ Y = M.E \\ insert e Y",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "5fbf178f9925daa46cbf154f103fa3e8900a3dc0c04afbd4a034e8ffd19f3d6a"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\nhneed : \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank\nhf :\n  \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) =\n    \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) + (\u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e})))) - 2 * \u2191M.rank\nhdelx : (M \uff3c {e}).E \\ X = M.E \\ insert e X\nhconYh : (M \uff0f {e}).E \\ Y = M.E \\ insert e Y\nhrkcon : (M \uff0f {e}).rk (M.E \\ {e}) = (M \uff0f {e}).rank\n\u22a2 \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) \u2264 \u2191((M \uff3c {e}).conn X) + \u2191((M \uff0f {e}).conn Y) + 1",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "39ede7a35df3b33bcbe6f287f9795bbaed1fd9441221b3034f9aa05a6d5cd133"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 46,
        "start_column": 2,
        "end_line": 46,
        "end_column": 7,
        "file": "Matroid/Representation/Dual.lean"
      },
      "debug_info": {
        "goal": "case h.refine_2\n\u03b1 : Type u_1\n\ud835\udd3d : Type u_5\nB : Set \u03b1\ninst\u271d\u00b2 : DivisionRing \ud835\udd3d\nM : Matroid \u03b1\ninst\u271d\u00b9 : M.Finitary\ninst\u271d : DecidableEq \u03b1\nhB : M.IsBase B\nhM : M.Representable \ud835\udd3d\nv : M.Rep \ud835\udd3d (\u2191B \u2192\u2080 \ud835\udd3d)\nhv : v.IsStandard\nI : Set \u03b1\nhIE : I \u2286 M.E\n\u22a2 LinearIndepOn \ud835\udd3d (\u21d1v) I \u2194\n    LinearIndepOn \ud835\udd3d (Sum.elim (fun x => Pi.single x 1) fun x y => (v \u2191x) y) (\u21d1(Embedding.sumSet \u22ef) \u207b\u00b9' I) \u2227 I \u2286 B \u222a M.E",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/Dual.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-02-20T08:00:16-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "94543c4e0b78ce48948edfa702a294ecbfad85b7bbca708c6cfb6b4ea3b136bf"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 34,
        "start_column": 4,
        "end_line": 34,
        "end_column": 9,
        "file": "Matroid/Representation/CycleSpace'.lean"
      },
      "debug_info": {
        "goal": "case refine_2.refine_1\n\u03b1 : Type u_1\nW : Type u_3\n\ud835\udd3d : Type u_5\nM : Matroid \u03b1\ninst\u271d\u00b2 : Field \ud835\udd3d\ninst\u271d\u00b9 : AddCommGroup W\ninst\u271d : Module \ud835\udd3d W\nv : M.Rep \ud835\udd3d W\nx : \u03b1 \u2192\u2080 \ud835\udd3d\nx\u271d : (Finsupp.linearCombination \ud835\udd3d \u21d1v) x = 0 \u2227 \u2191x.support \u2286 M.E\nh : (Finsupp.linearCombination \ud835\udd3d \u21d1v) x = 0\nh' : \u2191x.support \u2286 M.E\n\u22a2 (Finsupp.linearCombination \ud835\udd3d fun i => v \u2191i) ((Finsupp.supportedEquivFinsupp M.E) \u27e8x, h'\u27e9) = 0",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "d45e93b2b659071f1815c327498fdb6d48d6d2bcc3ed28dcf726a251e5e2759a"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 36,
        "start_column": 2,
        "end_line": 36,
        "end_column": 7,
        "file": "Matroid/Representation/CycleSpace'.lean"
      },
      "debug_info": {
        "goal": "case refine_2.refine_2\n\u03b1 : Type u_1\nW : Type u_3\n\ud835\udd3d : Type u_5\nM : Matroid \u03b1\ninst\u271d\u00b2 : Field \ud835\udd3d\ninst\u271d\u00b9 : AddCommGroup W\ninst\u271d : Module \ud835\udd3d W\nv : M.Rep \ud835\udd3d W\nx : \u03b1 \u2192\u2080 \ud835\udd3d\nx\u271d : (Finsupp.linearCombination \ud835\udd3d \u21d1v) x = 0 \u2227 \u2191x.support \u2286 M.E\nh : (Finsupp.linearCombination \ud835\udd3d \u21d1v) x = 0\nh' : \u2191x.support \u2286 M.E\n\u22a2 Finsupp.embDomain (Embedding.subtype M.E) ((Finsupp.supportedEquivFinsupp M.E) \u27e8x, h'\u27e9) = x",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1bed17dc72c8b8adf02f3b4206952c7dd36f4631de2837dd1ec90fdfa6468464"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 51,
        "start_column": 2,
        "end_line": 51,
        "end_column": 7,
        "file": "Matroid/Representation/CycleSpace'.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nW : Type u_3\nW' : Type u_4\n\ud835\udd3d : Type u_5\nM : Matroid \u03b1\ninst\u271d\u2074 : Field \ud835\udd3d\ninst\u271d\u00b3 : AddCommGroup W\ninst\u271d\u00b2 : Module \ud835\udd3d W\ninst\u271d\u00b9 : AddCommGroup W'\ninst\u271d : Module \ud835\udd3d W'\nv : M.Rep \ud835\udd3d W\n\u03c6 : W \u2192\u2097[\ud835\udd3d] W'\nh\u03c6 : Disjoint (span \ud835\udd3d (range \u21d1v)) (LinearMap.ker \u03c6)\n\u22a2 (v.comp \u03c6 h\u03c6).subtypeCycleSpace = v.subtypeCycleSpace",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L51"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "411122fc73792ac9d3e0831dd013087871bcedef5d7096e29235921c2589da4a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "8eaae19a6fb47bce0fd524bce75c1e361fbaefa5790485e2f22926c158a8c1e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cce8cbe613cdf9e50328fc14876589861f817f8d982ace4919b1d75549af7fe3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "03fbbc0d1e9f117d5942af6852c90e66aa506b3e8ec477ce19ed73f4dec66e22"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a9b216147bd4fd11b6b0a82a1c020b5c1ce96c5cea743ecc22070f4614a159a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "ad14805154f954720dc6018921922f6ce18b37615b02c5ef9d30ad69ad1472ce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b1c32a76a23ad2cd764affec2af46b2dd0c42217044e36f76ff2a704da69562e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2e17f198f3292f292c8cf373030c741c1c4ff1a5ac0fe75310236c2e431df4f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d5e488b24e4505431f74b283ed58533569640e067d2d945cd6d90943266da643"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "7ad3b18a17e87d243fa8df74f81d9ceb10a625ed3cd248cc7faf72a6077fbc73"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 39,
        "start_column": 2,
        "end_line": 39,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "53956532054bc99201ba437206ebf187e6e07d99352953f4ab64712c7ef6826d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 (x : \u03b1), [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b9f0618fe64d776dc3240dfdb90578b19fe10db23a72bae010bd261614031c5c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\ny : \u03b2\nz : \u03b3\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z|oc x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b81a761929b7a89b694c13d092ed2f731ae07d175153ef34a7510aab98768512"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 56,
        "start_column": 2,
        "end_line": 56,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nr : \u211d\u22650\u221e\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x] / r\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a08d22d212a80c097babbd7d76df05ef7b580fc1ce36e3fb60068609807666c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e62b91f406213124dce9d248afa9880ff4f8d7117acba968a07008f5c921aabf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 2,
        "end_line": 84,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d44a64645ba21b9cf2a44e4e037e5b0aaaff48b431e0a3b591e850e259bdd3f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 2,
        "end_line": 92,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "5793adecd9eea81a25f868fbd31367f1f36efc62e6b7b1ea17d90002cee133ca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e3f2b3db2636b8c86a773fea2faeebc9f1c41189f8ea472fbb860b081ace31b3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2ded7307ec4e2152a717c8e5fe0b46e80839bc7b21835288f600278841966384"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nx : \u03b1\ny : \u03b2\n\u22a2 [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b9ce334c219eebe5a9fcf2c58b39a44758fdb7affdddc33d2eeadbddc3f0db28"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 120,
        "start_column": 2,
        "end_line": 120,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L120"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c574581a4dc0c3c6f65adc6121f229671787f9042fe2a15ebb46c56b86be6761"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f91690706add6c6062bbd00a5b636fafe6042b277df7c1ef8500957932cda7e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 2,
        "end_line": 132,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f9175e77e579e2d226801254c9993049998d20a91a9afdd58a56b2c96a8472fa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 139,
        "start_column": 2,
        "end_line": 139,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f4f7592801bf8ed761c2c2ae0c454778dec5399371f526860db7c87fed31687e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cd305b9506ac1fee5913e45b32e2a7eba66cac21946fd78e587b29fb903a33d5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 159,
        "start_column": 2,
        "end_line": 159,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ny : \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L159"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "1093e1d4bff43282a9775a32b83bf26968dcaf06059e8f891c016fd4e716cced"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nx : \u03b1\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0ffd5b8bdda81cf678b104d8a503876ba4f12c1448515c5f6e6ba91cb97ceaa8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b3\ny : \u03b2\nz : \u03b3 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0f3b97dafe8321f7b13f9d79c28f5251222c418d1362122acfc70a4f3dd1b24c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 176,
        "start_column": 2,
        "end_line": 176,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nf : \u03b2 \u2192 \u03b3\nx : \u03b1\nz : \u03b1 \u00d7 \u03b3\n\u22a2 [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L176"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a184ebca71fe8e9e6a58487dd90a5cacf6791a5f18023f46ae371742c894dfb6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 329,
        "start_column": 10,
        "end_line": 329,
        "end_column": 15,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "case e_a\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] =\n    [=(some s, some s)|do\n      let shared_seed \u2190 liftM (generateSeed spec (update qb i \u2191s) js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n      let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L329"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "16b6cbfbee47e581b383792c31994107a889517790cdbd5598dbe131a79a1049"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 331,
        "start_column": 53,
        "end_line": 331,
        "end_column": 58,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed \u2208 (liftM (generateSeed spec qb js)).support\n\u22a2 \u2191(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L331"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c993dc049ce01ee6b3c138815950ce273bc66240e6577b8d69fa1db2f61f8d0c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 414,
        "start_column": 6,
        "end_line": 414,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L414"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a16b9954ff9136b68fefb29909b5c93e9df63eac17839a4168555c5612730fae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 416,
        "start_column": 6,
        "end_line": 416,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L416"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "56d19462c929c6adede21f66e8929a31c134b816ad9d4d653777a10f2c55bce3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 418,
        "start_column": 6,
        "end_line": 418,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L418"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2d03d97795242b234a6b06cc2987dbb955f025d4aa8f1faf12be3094903c3dfa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 420,
        "start_column": 6,
        "end_line": 420,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L420"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b498fe6a42fd85c6eac6a3f5be95e319d29a3f3349783630c2b471092adde799"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 422,
        "start_column": 6,
        "end_line": 422,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L422"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a3791503bf84fd084b8160df8576a186f7efdc814aed4a9493e9501f3e130b26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 424,
        "start_column": 6,
        "end_line": 424,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L424"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e293c6dd2939d5486ae707cb3d6f59b460caba49a62947336c4366982888db6b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 435,
        "start_column": 2,
        "end_line": 435,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L435"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "712ceb90c1c8dc45626335e5a5e513ed9b2bd721cfa1a9bf864e47ee2ca720b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "27e4b4580471e5542f54d8a2839f3c81d540f486c5b0adac62d63868a4b698c8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c619432707a668be4754021127ca06719fc6d0848e97aaeb75b915e2c52916a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f59947f2e417d84d8fa0b347b7442fd4c4214cf28d8198ee89c1a5fc6c9f0492"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "688b94e5a94f593c58edcee9629ba176f02fe2f78d54f80e5f3c71c31e5ef702"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryTracking/SeededOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      let x \u2190 (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "95662e9793f98bc703ae2eb48083abeea58a0f821e4cc2ef203ff15778d418d6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryTracking/SeededOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "83db22206cd25b249890d03b1e1c7b35e5cd9d4a3f7d64671968026bf9e153e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "3e2977636af8c4cdf98ce8bca149a07d9f8bf0513ea4cb05b869333df6363c18"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "6a3fb8dceb9f3b649e553cea80adb8f969dacd08d7aa79daf84b5c9d4345c0e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "59a34f50dd8e096c7258b9114cfe592d46f9797b7bdad39acd45a5b67ca31123"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "11d5ac846c2b330f0e8fa4162b453bfe21f5b4990ae414731307e93712575e89"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "054894bd214ef6ff718dd17221c535c6ed85f46168ee47cf2b9740307005b7bf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d : DecidableEq spec.QuerySeed\n\u22a2 finSupport (generateSeed spec qc js) \u2260 \u2205",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cbc96af2f56ac240e8ceb7d8748009aff036f8df4d82237400a6becd7aab0525"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "ae1001e3623c20a5405dd5462d10e5796b092c6463642ea971b2075ce0f5214b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed \u2208 support (generateSeed spec qc js)\n\u22a2 [=seed|generateSeed spec qc js] = (\u2191(finSupport (generateSeed spec qc js)).card)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "bc7315ae6fa1eef4dfd05e317d23a56fcdf91990891e7bdefef82c825dcbb730"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b3d925a01835bedf4afe1f2f55ad8e31bd938a6bee38cc6b17396d3db397e63d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "7fa8ffe50d68f98a4a7b04087e7fa5981551de7d4f74c5b6a268e195eee6c700"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2f99bd997c6b2576e4775e0c8103a8e1fe6adf5fa80c3d7f9cb48151ea1d6c64"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "413b9c1db0639ec2348a30906aaf1401bdeaa9b027d09cc42e6950adfd62c2ec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a66e78fac6c30c0e7a99ed92c3d5a8b30eb06e082158f7b4101a2c38ff61c219"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d612e0a4de2163d4a2125ed0763ccf1c07dbbd3bfceb136f04fd47da4bda9af1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a4eef5eee7cd505049d00e7e7c9b9b7974c87a027bca8ba6528d178bf0efa515"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c1f26e966d882c57214106f06eca3fc6070590926984b59ec67129b0bd9ad90e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "8c058b60ba7ea8ae990f0e878c5bebd9e66b6ae2a74d7947867d67301fdb71c0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "68a8196f6c063a22fbd8aa4d5f9164a618ccb2fd7d1d7a47d5f753be79651df0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 303,
        "start_column": 4,
        "end_line": 303,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/List.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c61f0f7a1230681e8eb884dc09e6df77e93c68b7094d7b0cc3b9bd5980310f22"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "57c920922353569e3d1bcd57372abd9ac49353af171709fca7ad487fc09a5e19"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "405467e59cb4a1ea4324f3ad94e692818fb0594500ff8b2ade5beb2b24e98ba8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2356e725e04cc1fbfd6016019f5cb484638bf54c2496167845d3f6783ba0f945"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0d1b151256424e087c10cd6a39e46b8c63da45e120cb65d695afdbac443c9e11"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "570cc1a99199656cba58b29492a5b3de1ddb98804b237328eebe82f368182c26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f1d96497869c853707c56b8b5c0cbef75bdf335186fb36603cb08112bbb4e7af"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "9bde54a4252dc1abe04b09b78e990c1fdd9cf2d482e42c1f29810d8d178951c1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "464ef9f36f85181dd8b8cbb1de6839588d884b2d62f887f2dedbc3b562addf54"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "fbbda320e0e4490c3c9e8d350641d03e678e576bca8ef874bdde4b2dedc957b9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b521175a10f7241d154d6e21bfeb5d218e9ba2571825bd4d008aae8287da02c6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b1210416d185fc86a58fa960d4a4f5b13808a9a6a34e928b09f98491e123b66d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c9a0eff34bfdc486d9b894336a0427071034c9da0e523cc874bcf72b7d72dbc9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "759b881a342c065fe4f4f3b630a2705a3557b432754bfd2aeccbd8e67071efce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "9593771f911a18e56ee841424e2dab9737f1ba2bc6cb57d81b9fda3f1c3a753e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "dfd6c6f127737dc833ddd318e8f4b22dd329ca088794e4cb209e020bff3bfdd5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:18:45-04:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "07445e03a223d2d2257c76f8655c6ba7094bd12bfc423fe6bee60751c8aa5b63"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "e5ae49fdadd634a92d2a67c50946de3995cd10d5780a936269bab80487648e10"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a50e8ab662053bfaaafa4a904c6063678d4b0617e0b467daca29e4cee009f35c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "7b5525fda45516893d8f41bc0eb53b6f3920c40ddef9585346fd9d406983f79b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u_1\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "96d0723dd5f3f37a12d285aa9fd3edaed53565385510b5d9df646d9bbf2756a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [fun x =>\n      match x with\n      | (x\u2081, x\u2082) => cf x\u2081 = some s \u2227 cf x\u2082 = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ecac5f817ee499679c284454c37c64e9693b2179d1c2398755b8821b68c7f4f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "264d7b4b5ec9679a41adf364641636d7c5edbf39fa52cca6f2096d769ba46cef"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] \u2265\n    [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "725acac07cc999fbb119078114e6e60234719f935cf5294967c97e7ceb18c9e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)] =\n    [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "61249e4e60957e885c687292bfa9bfcba093fb62519a7b641d52ea83fbfb3dd7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h \u2265\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c0d497af32a661c559c4c9a0c890ff7ba1cc31ffe657123592b57b009e5a98da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork' qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "08faaac70476f4e09e1cafe584c69abe7b189a63c025e107e6272fe014351635"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a77f440670c23823b3da6f49a28b3c07305168e3b905fd8f196be59daacb20e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "09a8109520c9b0bcc96c5681d9b0d64e2d0a17b40671bf959a6b52e60f1b2827"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "df7cdc06e0b7a0d4d2b131dc6de7d4ffaca789de4f1d3a3434fb3a92c1e0596a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "d952b728a7ad3141898d33769696a85a622c3576e55dd174e4ee5d3a6335625d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ae1109246077326a19672f784559e90ad1bba51d0cad06e720cf8b09b3d8acce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork' qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "cd1157c5b3cba6d7139ac66725cb3a2eed8e2cfa1481688eeccd12ba3bfe4da2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c86317e50cd03e2233534bcb12f96ff07b3be5baec0bb1585e46d3e444739cc7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "7884c8de1338b0317c9309dacbbeadda3a76ca6f0fc5bda48ed9d46a7b862357"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c2163c982743fab32d74e90be3d38a9f42143109bf50e793fa9071eb58f27f65"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "bdddbc833433409f4449eb49859674ad17b2cfd321407be98bad6b39a22c8273"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "41aa623d8480ed28c9eb2e4655e3046551fccfd5c6bb778a7fe1bf741458a3d1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "2dc80265b7106b913001eb573c29c0aa9c1a48bc65a79ffbb35364948a3fa0bc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c396ed454ad67178e0d885e1db3f39f4f62fd77dbdbf90bf586b163abb7d4b92"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "baca9da13f9ff831c3f07ec05a7ff93418bdbc131d57817a452d02d3e606b7a0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "0e7d20f04b3e77b8333b33b2dd76da46bfd1729d6e094a1dd7ae247f320f9848"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c753ada5293f1d409225a2cd13e6ede5f089a64a5116c42c82b7be3d18514185"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a2ac2eb371d75ceafd50ed54992d1f87075f4e89017985d3287923f64f53e13e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "101e065b6ec0ad08ac152291c8ab4b5a3f2508210fc699f81bb1b48587dbdc60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "4bc4174c73defcfbdfbd1bfa40f38acfaba4ef548c4204ec3827f4a27fd9686f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "88b5d50d1dbf202a6aa4c2349fdb229ba5623ad795638e2d668c329d0554fb6f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "0333360592c255fa13e814831800a258b0956902f229410b5ac1a1f369c3ae36"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "259f0f1f75bc2ca58ac165f8050d19f64bb5d286b7ca1fbe6d993494069a2394"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "08d1c0bc44125572805737b92bffaeab3202e0aaef42513fda45a2c70da1d0c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c7656b21fdceebcf49f1e5fe3ead4ee5c95d45ce8c5eaf08dcb1fd54c6038da1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ca00ba0f64c280bac9fcb6d0bcb034fc419480deb33867baa06fa8011c232978"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "97df2c2813870f833b02f5d68f4dc872b3e860fdc9411f6c92760647a38584a5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "e997379989eb5d364c5a0b584c809ac6f902e673f2eec606a82cf7e148b1475c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a33e808fd2e85ddd57d4cb1d727ee3b1d80427d3b7811e8bb339ab9dc5fe2952"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "67b2929d31224faf24729653e61d1823ceeea2b73a03b5de17cb7cdc345d2f5d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b1db7422be13b685dccc9516e05d49d0a17a982be7fa01d69188c983ed54d469"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "13d6502d7b2315268ce45c06dffaa1c8f3e8605cbac38c357862d3c62a0cbfe8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "1dc26895be8c52f687d953388656641fb01a99ca27062157e56a7ec9f7c61ff9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "5edf89545fc18a638becead230211566beebb95a69cb73f74bba9ffc874e313f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "6ca960d4aace0716234dae4c507271ebffaf17508aabca222640fe58698a8680"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "511286fa625484351de10a705784cc81ae907b66770066655e213e60907dff80"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case pos.h\np \u03c7 m : \u2115\nv : Vector (Fin (2 * \u03c7 + 1)) m\nhne : NeZero p\nh : p > 2 * \u03c7\ni : Fin m\nn0 : \u00ac\u03c7 = 0\nhv : \u2191\u03c7 \u2264 v[\u2191i]\n\u22a2 \u2191(Fin.castLE h v[\u2191i] - \u2191\u03c7) \u2264 \u03c7",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-21T12:14:18-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "af80a21e62b0b3e540d50be733d073e623f86f48a5b1ab73dd44a9b9be76037d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 258,
        "start_column": 4,
        "end_line": 258,
        "end_column": 9,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case neg\np \u03c7 m : \u2115\nv : Vector (Fin (2 * \u03c7 + 1)) m\nhne : NeZero p\nh : p > 2 * \u03c7\ni : Fin m\nn0 : \u00ac\u03c7 = 0\nhv : \u00acv[i] \u2265 \u2191\u03c7\n\u22a2 Fin_Bound (Fin.castLE h v[\u2191i] - \u2191\u03c7) \u03c7",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L258"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-21T12:14:18-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5294bcdd3122d94509dc14a6b4fae0ebb0aac63658011079649f228428bd61e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 307,
        "start_column": 6,
        "end_line": 307,
        "end_column": 11,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case false.left\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m \u2192 Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n\u22a2 p / 4 \u2264 \u2191(-((Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e).get \u2b1d\u1d65 rv) - \u2191(p / 2))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L307"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d3a58ce2c2a141ad79acecbe79ad1e7b1db3135df08a358fb9eb3b4581d786fa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 308,
        "start_column": 6,
        "end_line": 308,
        "end_column": 11,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case false.right\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m \u2192 Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n\u22a2 \u2191(s.get \u2b1d\u1d65 A.mulVec rv -\n        (s.get \u2b1d\u1d65 A.mulVec rv + (Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e).get \u2b1d\u1d65 rv + \u2191(p / 2))) \u2264\n    3 * p / 4",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L308"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "77f52dc126d35dcb818f416a73b593271df203889f1553f4b76579a3aa7d3d67"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 309,
        "start_column": 4,
        "end_line": 309,
        "end_column": 9,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case true\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m \u2192 Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n\u22a2 \u2191(-((Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e).get \u2b1d\u1d65 rv)) < p / 4 \u2228\n    3 * p / 4 < \u2191(-((Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e).get \u2b1d\u1d65 rv))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L309"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b4e53af90cf6a6b65733746a7bf8f07faa9f5e0322743458904e2850c359c6fd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d759ec3ff839fc8a444ccfb084ed4b8618b3ddabc0a28ca70fcf0069bfee0de5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "39e96ee559bd512b0fd1e98d97e877c34b8ed945d212706a9205aee0165374f4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2e5f4d4fdf95a34df1a6ec63cfdd9252e1e86fa3ff8d4fd13670c3b4e8304ba2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1029e755136c36fc60f6a8605f9240492251eadb85f099ed5b6f33f4748f00cb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7,
        "file": "Examples/HHS_Elgamal.lean"
      },
      "debug_info": {
        "goal": "G P : Type\ninst\u271d\u2075 : SelectableType G\ninst\u271d\u2074 : SelectableType P\ninst\u271d\u00b3 : AddCommGroup G\ninst\u271d\u00b2 : Group P\ninst\u271d\u00b9 : AddTorsor G P\ninst\u271d : DecidableEq P\nthis : \u2200 (msg x : P) (g\u2081 g\u2082 : G), msg * (g\u2082 +\u1d65 g\u2081 +\u1d65 x) / (g\u2081 +\u1d65 g\u2082 +\u1d65 x) = msg\n\u22a2 neverFails ((fun a => ()) <$> ($\u1d57G))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/HHS_Elgamal.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "70331fb5e129cb4ed26d8b772794f8c84ebac31e4fd87b50cef3edd88aa1d07b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b793ad592d1c0730bdea9f2a61f70ddff185181f603cd4b0f128b4020cb64c60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "4c3ea9d3c5e10f7c9dfbb1a95f5ad0fbbc7076e7ebee3eb0361c7edf57b5a85a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 127,
        "start_column": 88,
        "end_line": 127,
        "end_column": 93,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM q).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L127"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c861879dd3bb3ea4bba88215c0c02907c71d01a12f78568d3fcfb0214d644d9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 60,
        "end_line": 132,
        "end_column": 65,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nq : spec.OracleQuery \u03b1\noa : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 (liftM q >>= oa).neverFails \u2194 \u2200 (x : \u03b1), (oa x).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "fc418150934fef5aae714deb4e466af256347a488f0fb9bb1ba3f18d7335aaa3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200 x \u2208 (snd <$> (simulateQ countingOracle oa).run <|> pure 0).support, x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "de8c1d3cfc1161aa30213e0db9c55767eea728312d255e1e5d00bd2e6fda1905"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "06ddd0929caa7062a5daf6d21a439a383a8237b1ede4d602b7a7bf8f839584e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "7578686b62856172d426796f32f6b616bcc4239331af31529e5b8871aa62e4db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u_1\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2c80a5c7b32d4cde94f63d5bcdb8b14b31c91ab55764b60ce4e284fe609e57c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [fun x =>\n      match x with\n      | (x\u2081, x\u2082) => cf x\u2081 = some s \u2227 cf x\u2082 = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b2bc750909e3f4a80907f814b4c8a698d2ddad61f3067695264e2877a44f5089"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3e168a4968d1743db9071df284e576dd11d259e649847b33d95d378b428ec315"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] \u2265\n    [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3f335e23b703544a8f9403dae234e8cbbf0ce41e9a0168e599b36cfc47fced1d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)] =\n    [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5245d51fa99eb973409ec5292d6cf0d12ac0af4c56adeff99219d624b5470463"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h \u2265\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d8523447162babfd3ad7e422546f518dab2221e361a2bb1240993c86c78befe2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork' qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b340ba5825ab41b1e77d199e30c86a38a61b03fa18b77337788568fe70e3c3e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a98773868c63dad1cbad70464c6593459c35b2b0320bda70cc63b3a99a671c62"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c8a64e5dfdfc9b94362a2217cc28c2e86b892507f235b563edae0169b4416459"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "4ad0620f9cf20f6c4b865f209d14e812d77ef9dbe2d7c37e27ad9bf6b3982ef8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "aff16cd1edac0f32071539208555910b64d1e3901a852afe7656813e92e827c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1f688c669cb8c48c075eeac9bb90b9e843a8ad16050120ccd8f8267015310cfc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork' qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2418ed1624a8e66ea2b20e2a208189b5da417d3f1328f297a639a7e16b9a80eb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "97aeb9e5c4f83493b4f02950445cec7ed251cc9fe39404edb3e076c797b7c069"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1ecdc368fb879dc5f9455150f5ab5f8965f82358d20d089cd022dfdb2b006688"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e81eb973d2c2a86334358f55b91d85a98e3bbbdf5f16fd56132fcc3243538b00"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "8ec06b9bbce6347774d93ae411ec1a518e1c5429e68888c844bd354da7e0636c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "86b879f150c6bd23b102c75a96a4a00b4ab2cf153063f645b6baeef69ea3aab6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e720bd17eb414a86cf6905c1c87b8bae59b0693cf14ed8847d0bc932860da084"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "051f33bc70f1e6bc7b1033155e091281621e1dde6e1192eedd19351abaaefd5f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case zero\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm : \u2115\ninst\u271d : SelectableType \u03b1\nx y : Matrix (Fin 0) (Fin m) \u03b1\n\u22a2 (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2652d13923f1a4e9b6ced53cf8a7b744364064b900d9fffc12578ac4a805e159"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  \u2200 (x y : Matrix (Fin m) (Fin m\u271d) \u03b1),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m\u271d) \u03b1\n\u22a2 [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c99abda0a6581a5fa036c1a6caec7b75366a612454a3477239b25fe7a6473191"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  [\u22a5|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n\u22a2 \u2200 (x : Vector \u03b1 m\u271d),\n    neverFails\n      (Fin.cons x.get <$>\n        Nat.rec (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            Fin.cons top.get <$> ihn)\n          m)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a5442637e769d45375677177aa33a5c0c9a62e22b78432a56805071b1db1588e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "9fad12416ef37ae5f038d8bd9ffcc90d15dfd965968cbe8935deab9143ec23e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "88d748c02149ca3ce3c574b5c63a44b1a7efe860e9469f30f4aa26c081fe108d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "487b8988b357f9905c9281ddea459876481282a070b881092a9bddb178c8a092"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "68eb423f465b34c186603ce518ba94f494f285707d909cbd65dc22e480745d46"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e4a43a64a1013ca454545156396e0b9310780fd80675e5962dee3cec00b3876d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "9647b3f0e6c87c5dc74e1fa026fb8649ca25d4927b3e6da067a339b2aa3c9153"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "83b1d75861d2063b82bfd247c33dd757324c4a975befbe44412c960ad5007c28"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a81382801feb60b20183a20fa1d67be4ffbdb611d65cfa0ac53dd42db9ec9001"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "776e044513d87ff8267d39244c43887e211221a6c51d1230aaed3aa1d3cdb7b3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "72a71440c3574467c120dea728560e132c1e945a1586f3373a9f0daf765b7367"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3bc8d8e8df2418ff5ea7b2d5c861d2143e33dad9eafd729fb4ac7fe070f088b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1cc0599c962dccab309df070738ef11b298fa1c2e71913b7f1fe11e2bab8b8bd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5199d4a1695e2eb43c24ed755eb5df83417330cc01d5388637b527238b55225d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e306d97df1423ac0f1293a4d45bccc631e70f35cea5600c8d1fb396be0e58720"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "acf49e57bc530a740c8172fd2fa9ec6e32c3b51ddd7d0ea49fc1c60256ac9b08"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "64c0c9800277d0ed008843f3eebda11300efc514d1b302e8a75fdfd3811c1444"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "35c7ac15b96645bd1b60dac3bcb6c94cdf8da00a9a320efe9dd81c679e041da5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "bc4585f1f67862be2be952da4feaffd9e7ea16bd3c858cedf937b02aea796c23"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3567bafe685954c8ea749d95239813d633ab904102161efdadd6baa77b6d9b63"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a881ac9f2913e39de5e84e1e3682a127118174fee7b46d982bfb7e0c305622e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3a19cd6b439041f17ec09580a61e4a96ef3414ec4926aa73268924813605cbbc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b0344e5cea1d7a6315b3ab41113f2a8c03e74d3cb3976846b36922ea962c5d4d"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 37,
        "start_column": 64,
        "end_line": 37,
        "end_column": 69,
        "file": "BatteriesTest/lintsimp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d : Mul \u03b1\na x y : \u03b1\u1d50\u1d52\u1d56\n\u22a2 SemiconjBy a.unop y.unop x.unop \u2194 SemiconjBy a x y",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lintsimp.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "8a7dcd08b95f",
        "blame_date": "2022-12-18T15:51:52-05:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "fad15d300a3f6046664fe6934ff4f955311261103402fe05a7081f02cc9f2b55"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 7,
        "start_column": 2,
        "end_line": 7,
        "end_column": 7,
        "file": "BatteriesTest/lintunused.lean"
      },
      "debug_info": {
        "goal": "h : 1 = 1\n\u22a2 True",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lintunused.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-08T02:17:31+02:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "ce5d2f09f7f0ca5994740d3dec48da1a983bb4ad946d671132b63fcf458e7bf5"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 23,
        "start_column": 2,
        "end_line": 24,
        "end_column": 5,
        "file": "BatteriesTest/lint_unreachableTactic.lean"
      },
      "debug_info": {
        "goal": "\u22a2 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lint_unreachableTactic.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "3ff163f60db5f07cec68b6c10904be4f75c4dba100353cf27e9814851e79eee8"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 31,
        "start_column": 33,
        "end_line": 31,
        "end_column": 38,
        "file": "BatteriesTest/lint_unreachableTactic.lean"
      },
      "debug_info": {
        "goal": "aa : Nat\n\u22a2 aa = 0 \u2192 t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lint_unreachableTactic.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "d4cdb8fb54c40434ee2115e05afbae83c4d3d5d22952a0e43f007443bb10e06b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36,
        "file": "Pdl/SemQuot.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a b : Formula\u2984, a \u2248 b \u2192 (~a) \u2248 (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2eb1f4f5b0d46887dbe591c2c24e1021b9dd7a7e50ebcc3382f21060f51d6a83"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37,
        "file": "Pdl/SemQuot.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a\u2081 a\u2082 : Formula\u2984, a\u2081 \u2248 a\u2082 \u2192 \u2200 \u2983b\u2081 b\u2082 : Formula\u2984, b\u2081 \u2248 b\u2082 \u2192 a\u2081\u22c0b\u2081 \u2248 a\u2082\u22c0b\u2082",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "b2dfcac6663f023bf2e51df32e14cb636ed87bc438a576d119787f4e5736a83d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 344,
        "start_column": 99,
        "end_line": 344,
        "end_column": 104,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nn : \u2115\nys : List.Vector \u03b1 n.succ\n\u22a2 ys.head = ys.get 0",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L344"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f09f3df4a3f3533b4de3d740b4ada74ec61110eda112a6569642a294865eaa6f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 380,
        "start_column": 12,
        "end_line": 380,
        "end_column": 17,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\nHist\u271d : History\nX\u271d : Sequent\na\u271d : Tableau Hist\u271d X\u271d\na : PathIn (tabAt PathIn.nil).snd.snd\n\u22a2 (PathIn.nil.append a).rewind 1 = PathIn.nil",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L380"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "a02b8c73bade425a256f0c17c83da4d67e9170c467636f275b2b4b01383fa490"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 384,
        "start_column": 4,
        "end_line": 384,
        "end_column": 9,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nHist0 : History\nX0 : Sequent\nnrep : \u00acrep Hist0 X0\nnbas : \u00acX0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf lt \u2192 Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y \u2208 endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\n\u22a2 \u00ac1 = Fin.last (List.length ((tail.append a).toHistory ++ [X0]))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "0f6776ba54cdfb52feed34fcda3058810dcacf35cd715839e9770ba79d9fa439"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 387,
        "start_column": 2,
        "end_line": 387,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nHist0 : History\nX0 : Sequent\nnrep : \u00acrep Hist0 X0\nnbas : \u00acX0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf lt \u2192 Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y \u2208 endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\nh : \u00ac1 = Fin.last (List.length (PathIn.loc Y_in (tail.append a)).toHistory)\n\u22a2 (tail.append a).rewind \u27e81, \u22ef\u27e9 = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L387"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "67ea8bd016c83b2fc80b12044c0b36f1fc40ab10a3e4de5807de30596156d90c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 389,
        "start_column": 118,
        "end_line": 389,
        "end_column": 123,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nY : History\nZ X0 : Sequent\nnrep : \u00acrep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\n\u22a2 \u00ac1 = Fin.last (List.length (tail.append a).pdl.toHistory)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L389"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e4d2eda764455934a4a1becbfb9961ea06cd289a6d6e104d115fb8fbe0ee0532"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 392,
        "start_column": 2,
        "end_line": 392,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nY : History\nZ X0 : Sequent\nnrep : \u00acrep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\nh : \u00ac1 = Fin.last (List.length (tail.append a).pdl.toHistory)\n\u22a2 (tail.append a).rewind \u27e81, \u22ef\u27e9 = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L392"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "3e54535ce70293ca2a65eb321265ba24d8c34238fe2602221dbee9b12ef7bb03"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 464,
        "start_column": 15,
        "end_line": 464,
        "end_column": 20,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\n\u22a2 (b.rewind m).rewind \u21910 = b.rewind m",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "cbc890b2924f2b7103045caa85de6f4cad802f47ccf6a425091be8d212f7d6c8"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 465,
        "start_column": 20,
        "end_line": 465,
        "end_column": 25,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\nk : Fin (List.length b.toHistory)\nih : (b.rewind m).rewind \u2191\u2191k.castSucc = b.rewind (m + k.castSucc)\n\u22a2 (b.rewind m).rewind \u2191\u2191k.succ = b.rewind (m + k.succ)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L465"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "89f76e43ebeb97ad4e4260d83502df4c605e31328f27b31bc2ce40328511981e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 479,
        "start_column": 30,
        "end_line": 479,
        "end_column": 35,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h\na\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\na b\u271d c b : PathIn tab\na_c : Relation.TransGen edge a c\nc_b : c \u22d6_ b\nih : \u2203 k, c.rewind k = a\nk : Fin (List.length c.toHistory + 1)\nc_re_k_is_a : c.rewind k = a\nb_re_1_is_c : b.rewind 1 = c\nb_re_is_a : (b.rewind 1).rewind \u2191\u2191k = a\n\u22a2 b.rewind (\u2191\u2191k + 1) = (b.rewind 1).rewind \u2191\u2191k",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L479"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "5d5949551498af93931672702de5648c858e9a820928d594210a716bcd42be4a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 490,
        "start_column": 22,
        "end_line": 490,
        "end_column": 27,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.left\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na : PathIn tab\na_b : a \u22d6_ b\nb_re_1_is_a : (c.rewind k').rewind 1 = a\n\u22a2 c.rewind \u2191\u2191k'.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L490"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "caef7f0ed063e54119dcf7c3d2501b173886a7cb1a97952a261e182c234f7f58"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 495,
        "start_column": 24,
        "end_line": 495,
        "end_column": 29,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.right.right\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\na : PathIn tab\na_b : a \u22d6_ b\nb_re_1_is_a : b.rewind 1 = a\nk'_val : \u2115\nk'_hyp : k'_val < List.length c.toHistory + 1\nc_re_k'_is_b : c.rewind \u27e8k'_val, k'_hyp\u27e9 = b\n\u22a2 \u27e8k'_val, k'_hyp\u27e9 \u2264 \u2191(k'_val + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L495"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8fe46da029cf912882dd6f22b30f07bfdf128d47b0bb198bedf833906c444a6a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 502,
        "start_column": 29,
        "end_line": 502,
        "end_column": 34,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.left\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a \u22d6_ d\nd_b : Relation.TransGen edge d b\nih : \u2203 k k', c.rewind k = d \u2227 c.rewind k' = b \u2227 k' \u2264 k\nn n' : Fin (List.length c.toHistory + 1)\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' \u2264 n\nd_re_1_is_a : (c.rewind n).rewind 1 = a\n\u22a2 c.rewind \u2191\u2191n.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L502"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f2da169f12a90bac16b0cd9889226be339abf2d3d23f4794002a959fb1ea6fc3"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 506,
        "start_column": 31,
        "end_line": 506,
        "end_column": 36,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.right.right\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a \u22d6_ d\nd_b : Relation.TransGen edge d b\nn n' : Fin (List.length c.toHistory + 1)\nih : \u2203 k, c.rewind k = d \u2227 \u2203 x, c.rewind x = b \u2227 x \u2264 k\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' \u2264 n\n\u22a2 n' \u2264 \u2191(\u2191n + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L506"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4ea80749c19fc1d3fb381e92b44c78445104c8d96e1cbfab6a5b864571cef28e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 510,
        "start_column": 11,
        "end_line": 510,
        "end_column": 16,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nt : PathIn tab\nlpr : LoadedPathRepeat (tabAt t).fst (tabAt t).snd.fst\nh : (tabAt t).snd.snd = Tableau.lrep lpr\n\u22a2 \u2200 k \u2264 \u2191\u2191\u2191lpr, (nodeAt (t.rewind k)).isLoaded = true",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L510"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "c1b0141060c9cb1e3fd8cfd90ff44061761388586c9427380c16f6e92a2b0ede"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 532,
        "start_column": 77,
        "end_line": 532,
        "end_column": 82,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a : Sequent\ntab : Tableau [] a\nt l c : PathIn tab\nt_free : (nodeAt t).isFree = true\nt_above_l : t < l\nl_hearts_c : l \u2665 c\nlpr : LoadedPathRepeat (tabAt l).fst (tabAt l).snd.fst\ntabAt_l_def : (tabAt l).snd.snd = Tableau.lrep lpr\nc_def : c = companionOf l lpr tabAt_l_def\nhyp : \u00act < c\nc_above_l : c < l\ncomp_leq_t : c \u2264 t\ncomp_lt_t : c < t\nk k' : Fin (List.length l.toHistory + 1)\ndef_c : l.rewind k = c\ndef_t : l.rewind k' = t\nk'_lt_k : k' \u2264 k\n\u22a2 \u2191\u2191\u2191lpr = k",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L532"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4ad273f4309c97939dd61c8fc78d2f99499acaccbac787c59bcd8621a2fb2b45"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 833,
        "start_column": 10,
        "end_line": 833,
        "end_column": 15,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 sorry \u2208 endNodesOf (next (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u22ef)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L833"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8fc89ec685ce3a3f05ae2e48703a28c3b120e7d161085ff07e9e689acd824443"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 834,
        "start_column": 10,
        "end_line": 834,
        "end_column": 15,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 (M, v)\u22a8sorry \u2227\n    (sorry.isFree = true \u2228\n      \u2203 F \u03b3,\n        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side sorry \u2227\n          relateSeq M \u03b3 v w \u2227\n            (\u2200 f \u2208 F, evaluate M v f) \u2227\n              (F, \u03b3) \u2208 H \u03b1 \u2227 (sorry.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L834"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e3aff06fbf13bff66171729ab264586f3d872d22eb6ef2556618e2b4901171c0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 837,
        "start_column": 8,
        "end_line": 837,
        "end_column": 13,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203 Y,\n    (\u2203 l, (\u2203 a, \u2203 (h : a \u2208 B), endNodesOf (next a \u22ef) = l) \u2227 Y \u2208 l) \u2227\n      (M, v)\u22a8Y \u2227\n        (Y.isFree = true \u2228\n          \u2203 F \u03b3,\n            (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n              relateSeq M \u03b3 v w \u2227\n                (\u2200 f \u2208 F, evaluate M v f) \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L837"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "7c45da9f3544c38c02882922f28e16c56902ff5fcf9a7a864874330597700b26"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 841,
        "start_column": 6,
        "end_line": 841,
        "end_column": 11,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227 (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L841"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "d41057ab3c0bffc6baa57f8cc076038203a9243943fff3e7affd21f50010be2e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 965,
        "start_column": 2,
        "end_line": 965,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\n\u22a2 \u2203 s,\n    t \u25c3\u207a s \u2227\n      satisfiable (nodeAt s) \u2227\n        (\u00acs \u2261\u1d9c t \u2228 (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L965"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "81f9e8e4ed12782c0b53cc60ac8f11717c13d026f5811f837f38100b8762b2a6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1143,
        "start_column": 16,
        "end_line": 1143,
        "end_column": 21,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : t \u25c3\u207a sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : \u2115\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u00b7a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : M.Rel a\u271d v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u00b7a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : \u03b4[\u2191k] = \u00b7a\u271d\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1143"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "a3763bd90f3c4f0aa9c1e075b527bcc1776e6e0c0a1ae97f6e13b07c1de8e559"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1147,
        "start_column": 16,
        "end_line": 1147,
        "end_column": 21,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : t \u25c3\u207a sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : Relation.ReflTransGen (relate M a\u271d) v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram \u03b4[\u2191k] \u2264 1 + lengthOfProgram a\u271d\n\u22a2 lengthOfProgram \u03b4[\u2191k] < 1 + lengthOfProgram a\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1147"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "9927bc3e61bd5ed0f338ee59caccd85921241b8affaeb8dd11bec26d5cbcbda6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1485,
        "start_column": 6,
        "end_line": 1485,
        "end_column": 11,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\nIH :\n  t = s \u2192\n    \u2203 s_1,\n      s \u25c3\u207a s_1 \u2227\n        (satisfiable (nodeAt s_1) \u2227 \u00acs_1 \u2261\u1d9c s \u2228\n          (~''\u03be).in_side side (nodeAt s_1) \u2227 (M, w)\u22a8nodeAt s_1 \u2227 ((nodeAt s_1).without (~''\u03be)).isFree = true)\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.lrep lpr\u27e9\u27e9\n\u22a2 (tabAt t).snd.snd = Tableau.lrep (\u22ef \u25b8 lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1485"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "b2f35a29ae272387a60e9c12c5bd78d7b32397cb37a10f45029d380bc4bf0345"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (p next : Sequent \u2295 Sequent \u00d7 Formula \u00d7 Rule), next \u2208 sorry p \u2192 sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e30a965cf401eb1028ac5b1fb8997193d7d37018dd5c9bb09c819983e3cc58d6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Prover\nh : winning (Sum.inl X) s\n\u22a2 Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "59892c331bd01cfd235b15fa9269bb702cec9e28e7ca37b09491a50d8b533f28"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Builder\nh : winning (Sum.inl X) s\n\u22a2 \u2203 WS mg, X.toFinset \u2208 WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "61c7dfb82a42f1f366ce20164c288f3a3eb2f785e71f33aca2ba9a1bcba8b7da"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\n\u03c4 : Formula\n\u03c4_in : \u03c4 \u2208 testsOfProgram \u03b1\n\u03c8_in : (~\u03c4) \u2208 L\nx_in_voc_\u03c8 : x \u2208 \u03c4.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1a16853574c0e1389689b0c0374a730b619a6c9afc41e84b788fff2055198a42"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\na : \u2115\n\u03b4 : List Program\n\u03c8_in : (\u2308\u00b7a\u2309\u2308\u2308\u03b4\u2309\u2309\u03c6) \u2208 L\nright\u271d : \u00b7a \u2208 subprograms \u03b1 \u2227 \u2200 a \u2208 \u03b4, a \u2208 subprograms \u03b1\nx_in_voc_\u03c8 : x = Sum.inr a \u2228 x \u2208 \u03b4.pvoc \u222a \u03c6.voc\n\u22a2 x \u2208 \u03b1.voc \u2228 x \u2208 \u03c6.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8c02b15417d4a37888580c91065d5571ba92a9d9f306db59ed2c1100e56474d2"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nFs : List Formula\n\u03b4 : List Program\nin_H : (Fs, \u03b4) \u2208 H \u03b1\nthis : \u2200 (\u03b1 : Program) {Fs : List Formula} {\u03b4 : List Program}, (Fs, \u03b4) \u2208 H \u03b1 \u2192 \u03b4 = [] \u2228 \u2203 a \u03b4', \u03b4 = \u00b7a :: \u03b4'\n\u03b1' : Program\n\u03b1'_in : \u03b1' \u2208 \u03b4\nx_in : x \u2208 \u03b1'.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1f7887a7ba8fd6e935a44fde9f08c54839cd8807713ea7dfc96f720d19a7112d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : \u2115 \u2295 \u2115\nress : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7 : LoadFormula\nlrule : LoadRule (~'\u03c7) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) \u2208 ress\n\u03c6 : Formula\n\u03c6_in_L : \u03c6 \u2208 L\nbla : x \u2208 \u03c6.voc\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2f67f0c83af93f117e68b68a6d9654afea689965a78d23a9a599275dd119ce54"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.1.fvoc \u2286 Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e8e3f108eef90eeb184755549356b0f73a5a9c6260ae089b20dd83a062c86744"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.2.voc \u2286 Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "beda03ebbb337d47d56c7affe0efe5b2a6b35dcad867d8a2187f88d35ce44e2b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L \u2227 Rcond.Subperm R \u2227 Ocond \u2286 O\ncL cR : List Formula\ncO : Olf\nx : \u2115 \u2295 \u2115\nx_in_voc_C :\n  (x \u2208 Vocab.fromList (List.map Formula.voc cL) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc cO.toForms)) \u2227\n    (x \u2208 Vocab.fromList (List.map Formula.voc cR) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc cO.toForms))\nthis : \u2200 res \u2208 ress, res.1.fvoc \u2286 Lcond.fvoc\nC_in : (cL, cR, cO) \u2208 applyLocalRule lrule (L, R, O)\n\u22a2 x \u2208 jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "044738aad1cad1d72bab8ea33683b8ea3d840fe795c80ceb2227dc209c8ed6b4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nL_and_n\u03b8_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2e4cefd4a86039f9b10c90587298f8c8e5d99a7080dd92612bf47e7797ba1965"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nR_and_\u03b8_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f88b9bad6db0a65e5b0c6dd5f76d1de8b4bb5df2a6a7b55f5c50c30c3b7c68cd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nL_and_n\u03b8_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "889557d15eb5a5f2d6cb022a223bad71c7dab516cbc30ae1462714f49b6e54a1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nR_and_\u03b8_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4269b0f1ecae19445160d255c776e287efe72c0e09da2d9bb0dc934a80a75b10"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7,
        "file": "Pdl/TableauExamples.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308\u2217a\u2309~\u2308a\u2309p)\u22c0(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1bc471d2a3c8fd428d044fb82a40f15f692f1163edc09e129246b2131fa21e8a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7,
        "file": "Pdl/TableauExamples.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308a\u2309\u2308\u2217a\u2309p)\u22c0(~\u2308a\u2309\u2308\u2217a\u2309q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "458d78feeb071e03f1374427eafe699fc50756ba31558c703318b3337fc40a56"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "Clean/Examples/Add32LawfulCircuit.lean"
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : \u2115\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n\u22a2 (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) \u2227\n    (True \u2192 env.get (i0 + 1) = 0 \u2228 env.get (i0 + 1) = 1) \u2227\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 \u2227\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n          (True \u2192 env.get (i0 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1) = 1) \u2227\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 \u2227\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                (True \u2192 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 \u2227\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                      (True \u2192\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Examples/Add32LawfulCircuit.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "6ec9da772fad80566ff1f014d301a32759843a78d4d5adf775914464ce663742"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 65,
        "start_column": 18,
        "end_line": 65,
        "end_column": 23,
        "file": "Clean/Gadgets/Rotation64/Rotation64.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n\u22a2 Soundness (F p) assumptions (spec off)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Rotation64/Rotation64.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-01T17:43:17+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "f61fe6bdef37c610032e5497845579abfa0c4a975398c88c7e5dfdf814859601"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 21,
        "end_line": 66,
        "end_column": 26,
        "file": "Clean/Gadgets/Rotation64/Rotation64.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n\u22a2 Completeness (F p) U64 assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Rotation64/Rotation64.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-02-27T17:02:29+01:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "b793bbdc2299fb8ad97fcdddd9201d6f29cad9ebe681454fbb8ea91e8106d678"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaD.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[\u21914]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 16))).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 48))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[\u21913])) \u2227\n            (eval env state_var[1]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 80))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[\u21914])) \u2227\n        (eval env state_var[2]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 112))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[\u21913]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaD.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "548cd88bbe76aa22401be64ebdbb5051b01b9ec2ad67477579247de82ffeac27"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaXor.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b9 : Fact (Nat.Prime p)\ninst\u271d : Fact (p > 512)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var Inputs (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : Inputs (F p)\nh_assumptions : assumptions state\nh_input : { state := eval env state_var.state, d := eval env state_var.d } = state\n\u22a2 (((((((((((((((((((((((((eval env state_var.state[0]).is_normalized \u2227 (eval env state_var.d[0]).is_normalized) \u2227\n                                                  (eval env state_var.state[1]).is_normalized \u2227\n                                                    (eval env state_var.d[0]).is_normalized) \u2227\n                                                (eval env state_var.state[2]).is_normalized \u2227\n                                                  (eval env state_var.d[0]).is_normalized) \u2227\n                                              (eval env state_var.state[\u21913]).is_normalized \u2227\n                                                (eval env state_var.d[0]).is_normalized) \u2227\n                                            (eval env state_var.state[\u21914]).is_normalized \u2227\n                                              (eval env state_var.d[0]).is_normalized) \u2227\n                                          (eval env state_var.state[\u21915]).is_normalized \u2227\n                                            (eval env state_var.d[1]).is_normalized) \u2227\n                                        (eval env state_var.state[\u21916]).is_normalized \u2227\n                                          (eval env state_var.d[1]).is_normalized) \u2227\n                                      (eval env state_var.state[\u21917]).is_normalized \u2227\n                                        (eval env state_var.d[1]).is_normalized) \u2227\n                                    (eval env state_var.state[\u21918]).is_normalized \u2227\n                                      (eval env state_var.d[1]).is_normalized) \u2227\n                                  (eval env state_var.state[\u21919]).is_normalized \u2227\n                                    (eval env state_var.d[1]).is_normalized) \u2227\n                                (eval env state_var.state[\u219110]).is_normalized \u2227\n                                  (eval env state_var.d[2]).is_normalized) \u2227\n                              (eval env state_var.state[\u219111]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                            (eval env state_var.state[\u219112]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                          (eval env state_var.state[\u219113]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                        (eval env state_var.state[\u219114]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                      (eval env state_var.state[\u219115]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                    (eval env state_var.state[\u219116]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                  (eval env state_var.state[\u219117]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                (eval env state_var.state[\u219118]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n              (eval env state_var.state[\u219119]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n            (eval env state_var.state[\u219120]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n          (eval env state_var.state[\u219121]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n        (eval env state_var.state[\u219122]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n      (eval env state_var.state[\u219123]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n    (eval env state_var.state[\u219124]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaXor.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T16:27:02+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "1bdcdd008daf8da2529448af21e4c551e8408c741910c34999b888a8e84d7885"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaC.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b9 : Fact (Nat.Prime p)\ninst\u271d : Fact (p > 512)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env : env.uses_local_witnesses_completeness ((theta_c state_var).operations i0)\nstate : KeccakState (F p)\nh_assumptions : \u2200 (i : Fin 25), state[i].is_normalized\nh_input : Vector.map (eval env) state_var = state\ns : \u2200 (i : Fin 25), (eval env state_var[\u2191i]).is_normalized = True\n\u22a2 ((((((((((((((eval env (var_from_offset U64 i0)).is_normalized \u2227\n                              (eval env (var_from_offset U64 (i0 + 8))).is_normalized) \u2227\n                            (eval env (var_from_offset U64 (i0 + 16))).is_normalized) \u2227\n                          (eval env (var_from_offset U64 (i0 + 32))).is_normalized) \u2227\n                        (eval env (var_from_offset U64 (i0 + 40))).is_normalized) \u2227\n                      (eval env (var_from_offset U64 (i0 + 48))).is_normalized) \u2227\n                    (eval env (var_from_offset U64 (i0 + 64))).is_normalized) \u2227\n                  (eval env (var_from_offset U64 (i0 + 72))).is_normalized) \u2227\n                (eval env (var_from_offset U64 (i0 + 80))).is_normalized) \u2227\n              (eval env (var_from_offset U64 (i0 + 96))).is_normalized) \u2227\n            (eval env (var_from_offset U64 (i0 + 104))).is_normalized) \u2227\n          (eval env (var_from_offset U64 (i0 + 112))).is_normalized) \u2227\n        (eval env (var_from_offset U64 (i0 + 128))).is_normalized) \u2227\n      (eval env (var_from_offset U64 (i0 + 136))).is_normalized) \u2227\n    (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaC.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-03T17:31:42+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "1cc1a51d335fc9901192033089f368517f40bfedbbb1eab49bcad52de58dbdb9"
    }
  ]
}