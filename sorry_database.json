{
  "repos": [
    {
      "remote_url": "https://github.com/0art0/lean-slides",
      "last_time_visited": "2025-04-22T03:00:42.729081+00:00",
      "remote_heads_hash": "ea1fca1fe87f"
    },
    {
      "remote_url": "https://github.com/0art0/kimina",
      "last_time_visited": "2025-04-22T03:00:43.231470+00:00",
      "remote_heads_hash": "ba10e4d794e2"
    },
    {
      "remote_url": "https://github.com/abdoo8080/lean-cvc5",
      "last_time_visited": "2025-04-22T03:00:43.692336+00:00",
      "remote_heads_hash": "8a80dbcde9ca"
    },
    {
      "remote_url": "https://github.com/acmepjz/md4lean",
      "last_time_visited": "2025-04-22T03:00:44.271527+00:00",
      "remote_heads_hash": "78f0fe311a3f"
    },
    {
      "remote_url": "https://github.com/adamtopaz/NodeGraph",
      "last_time_visited": "2025-04-22T03:00:44.798511+00:00",
      "remote_heads_hash": "ccd524ebf6b4"
    },
    {
      "remote_url": "https://github.com/adamtopaz/lean_extras",
      "last_time_visited": "2025-04-22T03:00:45.440234+00:00",
      "remote_heads_hash": "6b9cfc280153"
    },
    {
      "remote_url": "https://github.com/adomani/advents",
      "last_time_visited": "2025-04-22T03:00:46.024121+00:00",
      "remote_heads_hash": "c4eb517ab2cb"
    },
    {
      "remote_url": "https://github.com/AdrienChampion/safeIdx",
      "last_time_visited": "2025-04-22T03:00:46.941856+00:00",
      "remote_heads_hash": "f362cca5ed0c"
    },
    {
      "remote_url": "https://github.com/ah1112/synthetic_euclid_4",
      "last_time_visited": "2025-04-22T03:00:47.515754+00:00",
      "remote_heads_hash": "ffe525d762dd"
    },
    {
      "remote_url": "https://github.com/alexf91/lean4-ctypes",
      "last_time_visited": "2025-04-22T03:00:48.105105+00:00",
      "remote_heads_hash": "4034301ddd2f"
    },
    {
      "remote_url": "https://github.com/alexjbest/leaff",
      "last_time_visited": "2025-04-22T03:00:48.651017+00:00",
      "remote_heads_hash": "4dc694ebc489"
    },
    {
      "remote_url": "https://github.com/alexkeizer/QpfTypes",
      "last_time_visited": "2025-04-22T03:00:49.225286+00:00",
      "remote_heads_hash": "e872072f74fd"
    },
    {
      "remote_url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
      "last_time_visited": "2025-04-22T03:00:49.885183+00:00",
      "remote_heads_hash": "79e0a27fa876"
    },
    {
      "remote_url": "https://github.com/alok/lean-inf",
      "last_time_visited": "2025-04-22T03:12:52.492166+00:00",
      "remote_heads_hash": "590910f95db9"
    },
    {
      "remote_url": "https://github.com/alok/AsciiPlot",
      "last_time_visited": "2025-04-22T03:12:53.102637+00:00",
      "remote_heads_hash": "b3900aad52ab"
    },
    {
      "remote_url": "https://github.com/ammkrn/timelib",
      "last_time_visited": "2025-04-22T03:12:53.584485+00:00",
      "remote_heads_hash": "40bbd08a1411"
    },
    {
      "remote_url": "https://github.com/ammkrn/printiest",
      "last_time_visited": "2025-04-22T03:12:54.145265+00:00",
      "remote_heads_hash": "4a58b9aba192"
    },
    {
      "remote_url": "https://github.com/andrejbauer/partial-combinatory-algebras",
      "last_time_visited": "2025-04-22T03:12:54.642449+00:00",
      "remote_heads_hash": "136c83911bf8"
    },
    {
      "remote_url": "https://github.com/anlucia/ChromaticPolynomial",
      "last_time_visited": "2025-04-22T03:12:55.172006+00:00",
      "remote_heads_hash": "ea3ff45e09d2"
    },
    {
      "remote_url": "https://github.com/anoma/juvix-lean",
      "last_time_visited": "2025-04-22T03:12:55.717475+00:00",
      "remote_heads_hash": "194798fe5c8d"
    },
    {
      "remote_url": "https://github.com/apnelson1/Matroid",
      "last_time_visited": "2025-04-23T03:00:46.782716+00:00",
      "remote_heads_hash": "80d279c1df66"
    },
    {
      "remote_url": "https://github.com/arademaker/delphin",
      "last_time_visited": "2025-04-22T03:20:40.355263+00:00",
      "remote_heads_hash": "9a189fa3cc01"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/yatima",
      "last_time_visited": "2025-04-22T03:20:40.971546+00:00",
      "remote_heads_hash": "27bd4dd3b298"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Wasm.lean",
      "last_time_visited": "2025-04-22T03:20:41.724481+00:00",
      "remote_heads_hash": "9723673e436f"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/RustFFI.lean",
      "last_time_visited": "2025-04-22T03:20:42.299176+00:00",
      "remote_heads_hash": "1494787a26c1"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Megaparsec.lean",
      "last_time_visited": "2025-04-22T03:20:42.881315+00:00",
      "remote_heads_hash": "b3fcd8401935"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/LSpec",
      "last_time_visited": "2025-04-22T03:20:43.454274+00:00",
      "remote_heads_hash": "a32710bb1221"
    },
    {
      "remote_url": "https://github.com/argumentcomputer/Blake3.lean",
      "last_time_visited": "2025-04-22T03:20:44.005096+00:00",
      "remote_heads_hash": "151fd9d4bfe2"
    },
    {
      "remote_url": "https://github.com/arthurpaulino/NumLean",
      "last_time_visited": "2025-04-22T03:20:44.524750+00:00",
      "remote_heads_hash": "c95d37ba3c8c"
    },
    {
      "remote_url": "https://github.com/ATOMSLab/LeanLJ",
      "last_time_visited": "2025-04-23T03:00:50.757069+00:00",
      "remote_heads_hash": "7a7832e9c54a"
    },
    {
      "remote_url": "https://github.com/atrieu/lean-cryptolib",
      "last_time_visited": "2025-04-22T03:20:46.271912+00:00",
      "remote_heads_hash": "af280c966902"
    },
    {
      "remote_url": "https://github.com/austinletson/use-lean-standard-action-with-bare-project",
      "last_time_visited": "2025-04-22T03:20:46.754765+00:00",
      "remote_heads_hash": "840d70a94256"
    },
    {
      "remote_url": "https://github.com/avigad/LeanSudoku",
      "last_time_visited": "2025-04-22T03:20:47.236625+00:00",
      "remote_heads_hash": "cb5ac28c9e23"
    },
    {
      "remote_url": "https://github.com/awodey/joyal",
      "last_time_visited": "2025-04-22T03:20:47.935154+00:00",
      "remote_heads_hash": "a616ad08ef80"
    },
    {
      "remote_url": "https://github.com/axiomed/http",
      "last_time_visited": "2025-04-22T03:20:48.458947+00:00",
      "remote_heads_hash": "b9eedf58de6b"
    },
    {
      "remote_url": "https://github.com/bergmannjg/time",
      "last_time_visited": "2025-04-22T03:20:49.025682+00:00",
      "remote_heads_hash": "a188d26ad6bd"
    },
    {
      "remote_url": "https://github.com/bergmannjg/regex",
      "last_time_visited": "2025-04-22T03:20:49.551843+00:00",
      "remote_heads_hash": "b8c4594aa5df"
    },
    {
      "remote_url": "https://github.com/bergmannjg/leanCurl",
      "last_time_visited": "2025-04-22T03:20:50.109952+00:00",
      "remote_heads_hash": "ff0a6479d879"
    },
    {
      "remote_url": "https://github.com/Bergschaf/Localic-Caratheodory-Extensions",
      "last_time_visited": "2025-04-22T03:20:50.683465+00:00",
      "remote_heads_hash": "ac8eee60c8c4"
    },
    {
      "remote_url": "https://github.com/Bergschaf/lean-banach-tarski",
      "last_time_visited": "2025-04-22T03:20:52.135020+00:00",
      "remote_heads_hash": "f48bdebe8bf5"
    },
    {
      "remote_url": "https://github.com/Bergschaf/banach-tarski",
      "last_time_visited": "2025-04-22T03:20:52.766143+00:00",
      "remote_heads_hash": "16e9b5d0a40f"
    },
    {
      "remote_url": "https://github.com/BoltonBailey/formal-snarks-project",
      "last_time_visited": "2025-04-22T03:20:53.945437+00:00",
      "remote_heads_hash": "8c4e3059ad64"
    },
    {
      "remote_url": "https://github.com/BRonen/sqlite3-lean4",
      "last_time_visited": "2025-04-22T03:20:54.488529+00:00",
      "remote_heads_hash": "a37e6d54423a"
    },
    {
      "remote_url": "https://github.com/cmu-l3/llmlean",
      "last_time_visited": "2025-04-22T03:20:54.963113+00:00",
      "remote_heads_hash": "04624fcb53e2"
    },
    {
      "remote_url": "https://github.com/dagurtomas/LeanCondensed",
      "last_time_visited": "2025-04-22T03:20:55.624573+00:00",
      "remote_heads_hash": "a70a25121b16"
    },
    {
      "remote_url": "https://github.com/Deducteam/lean2dk",
      "last_time_visited": "2025-04-23T03:00:54.736543+00:00",
      "remote_heads_hash": "3a031b957836"
    },
    {
      "remote_url": "https://github.com/djvelleman/HTPILeanPackage",
      "last_time_visited": "2025-04-22T03:20:56.707110+00:00",
      "remote_heads_hash": "77cb90320f24"
    },
    {
      "remote_url": "https://github.com/draperlaboratory/ELFSage",
      "last_time_visited": "2025-04-22T03:20:57.246013+00:00",
      "remote_heads_hash": "56692d17d705"
    },
    {
      "remote_url": "https://github.com/dtumad/VCV-io",
      "last_time_visited": "2025-04-23T03:07:19.312887+00:00",
      "remote_heads_hash": "4b93fa307f80"
    },
    {
      "remote_url": "https://github.com/dupuisf/BibtexQuery",
      "last_time_visited": "2025-04-22T03:34:29.625492+00:00",
      "remote_heads_hash": "ff993a7036b7"
    },
    {
      "remote_url": "https://github.com/dwrensha/tryAtEachStep",
      "last_time_visited": "2025-04-22T03:34:30.213665+00:00",
      "remote_heads_hash": "bd22accb361e"
    },
    {
      "remote_url": "https://github.com/dwrensha/lean4-maze",
      "last_time_visited": "2025-04-22T03:34:30.713065+00:00",
      "remote_heads_hash": "da00a1ae7422"
    },
    {
      "remote_url": "https://github.com/dwrensha/compfiles",
      "last_time_visited": "2025-04-23T03:28:51.671675+00:00",
      "remote_heads_hash": "2b4fa959e792"
    },
    {
      "remote_url": "https://github.com/dwrensha/Chess.lean",
      "last_time_visited": "2025-04-22T03:34:33.398092+00:00",
      "remote_heads_hash": "f046a40be392"
    },
    {
      "remote_url": "https://github.com/dwrensha/animate-lean-proofs",
      "last_time_visited": "2025-04-22T03:34:33.907868+00:00",
      "remote_heads_hash": "7a8d1d4f58a9"
    },
    {
      "remote_url": "https://github.com/ElifUskuplu/Stlc_deBruijn",
      "last_time_visited": "2025-04-22T03:34:34.643864+00:00",
      "remote_heads_hash": "b80b39af1eda"
    },
    {
      "remote_url": "https://github.com/emilyriehl/infinity-cosmos",
      "last_time_visited": "2025-04-22T03:34:35.381406+00:00",
      "remote_heads_hash": "e4af335c6b6a"
    },
    {
      "remote_url": "https://github.com/eric-wieser/lean-matrix-cookbook",
      "last_time_visited": "2025-04-22T03:34:36.101045+00:00",
      "remote_heads_hash": "a4f9f9349dac"
    },
    {
      "remote_url": "https://github.com/fgdorais/lean4-unicode-basic",
      "last_time_visited": "2025-04-23T03:28:54.751181+00:00",
      "remote_heads_hash": "7e33f923987a"
    },
    {
      "remote_url": "https://github.com/fgdorais/lean4-parser",
      "last_time_visited": "2025-04-22T03:34:41.614022+00:00",
      "remote_heads_hash": "a128d0356c0c"
    },
    {
      "remote_url": "https://github.com/fgdorais/extra4",
      "last_time_visited": "2025-04-22T03:34:43.079347+00:00",
      "remote_heads_hash": "c309c1f09f6b"
    },
    {
      "remote_url": "https://github.com/fgdorais/algebra4",
      "last_time_visited": "2025-04-22T03:34:43.599046+00:00",
      "remote_heads_hash": "fad3efc60703"
    },
    {
      "remote_url": "https://github.com/forked-from-1kasper/ground_zero",
      "last_time_visited": "2025-04-22T03:34:44.091203+00:00",
      "remote_heads_hash": "f259deeaa740"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Incompleteness",
      "last_time_visited": "2025-04-22T03:34:44.673350+00:00",
      "remote_heads_hash": "aa43d4d432c4"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Foundation",
      "last_time_visited": "2025-04-23T03:29:01.115925+00:00",
      "remote_heads_hash": "dc05ab4bb977"
    },
    {
      "remote_url": "https://github.com/FormalizedFormalLogic/Arithmetization",
      "last_time_visited": "2025-04-22T03:34:46.360786+00:00",
      "remote_heads_hash": "d0d6f3b5214a"
    },
    {
      "remote_url": "https://github.com/FormalSAT/trestle",
      "last_time_visited": "2025-04-22T03:34:47.104176+00:00",
      "remote_heads_hash": "96a7fcf51e38"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/LeanCourse24",
      "last_time_visited": "2025-04-22T03:38:09.387773+00:00",
      "remote_heads_hash": "9ec29a82bdef"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/carleson",
      "last_time_visited": "2025-04-23T03:48:24.845741+00:00",
      "remote_heads_hash": "2fbee0228423"
    },
    {
      "remote_url": "https://github.com/fpvandoorn/BonnAnalysis",
      "last_time_visited": "2025-04-22T03:38:11.040146+00:00",
      "remote_heads_hash": "a346ac04dd45"
    },
    {
      "remote_url": "https://github.com/FR-vdash-bot/Algorithm",
      "last_time_visited": "2025-04-22T03:38:11.661910+00:00",
      "remote_heads_hash": "731cbd0bc431"
    },
    {
      "remote_url": "https://github.com/frenzymath/jixia",
      "last_time_visited": "2025-04-22T03:38:12.226287+00:00",
      "remote_heads_hash": "c1db5239415c"
    },
    {
      "remote_url": "https://github.com/funexists/raylean",
      "last_time_visited": "2025-04-22T03:38:12.735085+00:00",
      "remote_heads_hash": "72a50b820b10"
    },
    {
      "remote_url": "https://github.com/FWuermse/lean-postgres",
      "last_time_visited": "2025-04-22T03:38:13.574508+00:00",
      "remote_heads_hash": "32be1086f64b"
    },
    {
      "remote_url": "https://github.com/GasStationManager/LeanTool",
      "last_time_visited": "2025-04-23T03:48:30.326321+00:00",
      "remote_heads_hash": "00005e3e8936"
    },
    {
      "remote_url": "https://github.com/GasStationManager/FormalizeWithTest",
      "last_time_visited": "2025-04-22T03:38:14.590769+00:00",
      "remote_heads_hash": "c9bc0ed602e4"
    },
    {
      "remote_url": "https://github.com/GasStationManager/CodeProofTheArena",
      "last_time_visited": "2025-04-22T03:38:15.104435+00:00",
      "remote_heads_hash": "6eaeef733792"
    },
    {
      "remote_url": "https://github.com/gdncc/Cryptography",
      "last_time_visited": "2025-04-22T03:38:15.610480+00:00",
      "remote_heads_hash": "624b9e463546"
    },
    {
      "remote_url": "https://github.com/girving/interval",
      "last_time_visited": "2025-04-22T03:38:16.426764+00:00",
      "remote_heads_hash": "2815a72fe0a0"
    },
    {
      "remote_url": "https://github.com/goens/lost-pop-lean",
      "last_time_visited": "2025-04-22T03:38:16.946007+00:00",
      "remote_heads_hash": "8035a1ab2a5a"
    },
    {
      "remote_url": "https://github.com/google-deepmind/debate",
      "last_time_visited": "2025-04-22T03:38:17.492303+00:00",
      "remote_heads_hash": "5a9708e14c57"
    },
    {
      "remote_url": "https://github.com/gsierra99/ExFormMathL4",
      "last_time_visited": "2025-04-22T03:38:18.069028+00:00",
      "remote_heads_hash": "18bdfe18ef1b"
    },
    {
      "remote_url": "https://github.com/Hagb/lean-groebner",
      "last_time_visited": "2025-04-22T03:38:18.641120+00:00",
      "remote_heads_hash": "8a6f9e6a9967"
    },
    {
      "remote_url": "https://github.com/HannahSantos/FMCn_Lean",
      "last_time_visited": "2025-04-22T03:38:19.130404+00:00",
      "remote_heads_hash": "245f1abf4da5"
    },
    {
      "remote_url": "https://github.com/haruhisa-enomoto/mathlib4-all-tactics",
      "last_time_visited": "2025-04-22T03:38:19.642601+00:00",
      "remote_heads_hash": "c0aa438185da"
    },
    {
      "remote_url": "https://github.com/HEPLean/PhysLean",
      "last_time_visited": "2025-04-23T03:48:33.854187+00:00",
      "remote_heads_hash": "4107984df634"
    },
    {
      "remote_url": "https://github.com/hhu-adam/lean-i18n",
      "last_time_visited": "2025-04-22T03:57:18.936463+00:00",
      "remote_heads_hash": "0f73c0dadeae"
    },
    {
      "remote_url": "https://github.com/hhu-adam/Robo",
      "last_time_visited": "2025-04-22T03:57:19.473856+00:00",
      "remote_heads_hash": "8fb4fda34b5f"
    },
    {
      "remote_url": "https://github.com/igrep/lean-workshop",
      "last_time_visited": "2025-04-23T04:08:29.130070+00:00",
      "remote_heads_hash": "93ba21786a7a"
    },
    {
      "remote_url": "https://github.com/imbrem/discretion",
      "last_time_visited": "2025-04-22T03:57:23.076743+00:00",
      "remote_heads_hash": "b5cff868a25d"
    },
    {
      "remote_url": "https://github.com/imbrem/debruijn-ssa",
      "last_time_visited": "2025-04-22T03:57:23.661381+00:00",
      "remote_heads_hash": "333a657f701e"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/M1F-explained",
      "last_time_visited": "2025-04-22T03:57:24.273852+00:00",
      "remote_heads_hash": "3110da3d860a"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/IUM",
      "last_time_visited": "2025-04-22T03:57:24.753263+00:00",
      "remote_heads_hash": "a4cc0b92642f"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/formalising-mathematics-2024",
      "last_time_visited": "2025-04-22T03:57:25.314808+00:00",
      "remote_heads_hash": "e7cfe4f5ab5b"
    },
    {
      "remote_url": "https://github.com/ImperialCollegeLondon/FLT",
      "last_time_visited": "2025-04-23T04:09:01.128831+00:00",
      "remote_heads_hash": "786ae59f5d75"
    },
    {
      "remote_url": "https://github.com/Ivan-Sergeyev/seymour",
      "last_time_visited": "2025-04-22T03:57:26.563107+00:00",
      "remote_heads_hash": "6239611e7dd7"
    },
    {
      "remote_url": "https://github.com/ivankobe/FactorizationSystems",
      "last_time_visited": "2025-04-22T03:57:27.424022+00:00",
      "remote_heads_hash": "edb00f932869"
    },
    {
      "remote_url": "https://github.com/Izzimach/EffSpec-lean",
      "last_time_visited": "2025-04-22T03:57:28.061568+00:00",
      "remote_heads_hash": "562e30665420"
    },
    {
      "remote_url": "https://github.com/jaalonso/Calculemus2_es",
      "last_time_visited": "2025-04-22T03:57:28.889749+00:00",
      "remote_heads_hash": "515249923b37"
    },
    {
      "remote_url": "https://github.com/jaalonso/Calculemus2",
      "last_time_visited": "2025-04-22T03:57:29.571257+00:00",
      "remote_heads_hash": "ecf1df8ce6b3"
    },
    {
      "remote_url": "https://github.com/JadAbouHawili/KnightsAndKnaves-Lean4Game",
      "last_time_visited": "2025-04-23T04:09:06.349712+00:00",
      "remote_heads_hash": "e5fe193e31b3"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/LeanColls",
      "last_time_visited": "2025-04-22T03:57:31.121867+00:00",
      "remote_heads_hash": "1c812dd36af8"
    },
    {
      "remote_url": "https://github.com/JamesGallicchio/http",
      "last_time_visited": "2025-04-22T03:57:37.179527+00:00",
      "remote_heads_hash": "533140b90c9c"
    },
    {
      "remote_url": "https://github.com/jeswr/RDF.lean",
      "last_time_visited": "2025-04-22T03:57:37.683108+00:00",
      "remote_heads_hash": "a9f36adc4a2f"
    },
    {
      "remote_url": "https://github.com/joehendrix/lean-crypto",
      "last_time_visited": "2025-04-22T03:57:38.199524+00:00",
      "remote_heads_hash": "3a6516ecfb15"
    },
    {
      "remote_url": "https://github.com/jsm28/AperiodicMonotilesLean",
      "last_time_visited": "2025-04-22T03:57:39.205187+00:00",
      "remote_heads_hash": "9edd7af2f762"
    },
    {
      "remote_url": "https://github.com/katydid/regex-deriv-reproving-agda-in-lean",
      "last_time_visited": "2025-04-22T03:57:39.730055+00:00",
      "remote_heads_hash": "2ca59eba6863"
    },
    {
      "remote_url": "https://github.com/katydid/regex-deriv-lean",
      "last_time_visited": "2025-04-22T03:57:40.316922+00:00",
      "remote_heads_hash": "32f3cca0b2f8"
    },
    {
      "remote_url": "https://github.com/kebekus/ProjectVD",
      "last_time_visited": "2025-04-23T04:11:08.322809+00:00",
      "remote_heads_hash": "fd69380c65de"
    },
    {
      "remote_url": "https://github.com/keilambda/eocia-lean",
      "last_time_visited": "2025-04-22T03:57:42.301923+00:00",
      "remote_heads_hash": "52b63bb55762"
    },
    {
      "remote_url": "https://github.com/kim-em/lean-training-data",
      "last_time_visited": "2025-04-22T03:57:42.717821+00:00",
      "remote_heads_hash": "7108932d8b3e"
    },
    {
      "remote_url": "https://github.com/KislyjKisel/Raylib.lean",
      "last_time_visited": "2025-04-22T03:57:43.309842+00:00",
      "remote_heads_hash": "5340227f3bd7"
    },
    {
      "remote_url": "https://github.com/KislyjKisel/lean-pod",
      "last_time_visited": "2025-04-22T03:57:43.932954+00:00",
      "remote_heads_hash": "0e4008b19fa0"
    },
    {
      "remote_url": "https://github.com/kkaunda/spgf",
      "last_time_visited": "2025-04-22T03:57:44.459208+00:00",
      "remote_heads_hash": "d044f65aa55f"
    },
    {
      "remote_url": "https://github.com/kmill/lean4-raytracer",
      "last_time_visited": "2025-04-22T03:57:45.042766+00:00",
      "remote_heads_hash": "a93cae6611b5"
    },
    {
      "remote_url": "https://github.com/kmill/LeanTeX-mathlib",
      "last_time_visited": "2025-04-22T03:57:46.566789+00:00",
      "remote_heads_hash": "7eeb12426a64"
    },
    {
      "remote_url": "https://github.com/kmill/LeanTeX",
      "last_time_visited": "2025-04-22T03:57:47.071095+00:00",
      "remote_heads_hash": "f2b67cb68de9"
    },
    {
      "remote_url": "https://github.com/knowsys/CertifyingDatalog",
      "last_time_visited": "2025-04-22T03:57:47.931952+00:00",
      "remote_heads_hash": "78df03fcc80f"
    },
    {
      "remote_url": "https://github.com/kovach/etch",
      "last_time_visited": "2025-04-22T03:57:57.125899+00:00",
      "remote_heads_hash": "4191c72dce05"
    },
    {
      "remote_url": "https://github.com/lean-dojo/LeanCopilot",
      "last_time_visited": "2025-04-22T03:57:58.731311+00:00",
      "remote_heads_hash": "5b8e872772f7"
    },
    {
      "remote_url": "https://github.com/lean-ja/reference-manual-ja",
      "last_time_visited": "2025-04-22T03:57:59.366688+00:00",
      "remote_heads_hash": "87e7e8a81be1"
    },
    {
      "remote_url": "https://github.com/lean-ja/lean99",
      "last_time_visited": "2025-04-22T03:58:01.270195+00:00",
      "remote_heads_hash": "d458dfc3b5c8"
    },
    {
      "remote_url": "https://github.com/lean-ja/lean-by-example",
      "last_time_visited": "2025-04-22T03:58:01.761016+00:00",
      "remote_heads_hash": "f0229358b5da"
    },
    {
      "remote_url": "https://github.com/lean-machines-central/lean-machines",
      "last_time_visited": "2025-04-22T03:58:03.853250+00:00",
      "remote_heads_hash": "150f401098f7"
    },
    {
      "remote_url": "https://github.com/lean-machines-central/lean-machines-examples",
      "last_time_visited": "2025-04-22T03:58:04.460795+00:00",
      "remote_heads_hash": "693936d31735"
    },
    {
      "remote_url": "https://github.com/leanprover-community/tutorials4",
      "last_time_visited": "2025-04-22T03:58:05.023133+00:00",
      "remote_heads_hash": "d2deab6affd4"
    },
    {
      "remote_url": "https://github.com/leanprover-community/sphere-eversion",
      "last_time_visited": "2025-04-22T03:58:05.723239+00:00",
      "remote_heads_hash": "7a1aaaededfd"
    },
    {
      "remote_url": "https://github.com/leanprover-community/quote4",
      "last_time_visited": "2025-04-22T03:58:07.244105+00:00",
      "remote_heads_hash": "f1cec0d144d0"
    },
    {
      "remote_url": "https://github.com/leanprover-community/ProofWidgets4",
      "last_time_visited": "2025-04-23T04:11:13.718031+00:00",
      "remote_heads_hash": "10d94d1b33e2"
    },
    {
      "remote_url": "https://github.com/leanprover-community/plausible",
      "last_time_visited": "2025-04-22T03:58:08.449537+00:00",
      "remote_heads_hash": "5b8e5e3beaa9"
    },
    {
      "remote_url": "https://github.com/leanprover-community/mathport",
      "last_time_visited": "2025-04-22T03:58:08.973250+00:00",
      "remote_heads_hash": "f1a810136ef9"
    },
    {
      "remote_url": "https://github.com/leanprover-community/mathlib4",
      "last_time_visited": "2025-04-23T04:12:01.825855+00:00",
      "remote_heads_hash": "6ee753dc8fd6"
    },
    {
      "remote_url": "https://github.com/leanprover-community/llm",
      "last_time_visited": "2025-04-22T04:15:26.518727+00:00",
      "remote_heads_hash": "d239306b7ab7"
    },
    {
      "remote_url": "https://github.com/leanprover-community/LeanSearchClient",
      "last_time_visited": "2025-04-22T04:15:27.065639+00:00",
      "remote_heads_hash": "0674ee6a0314"
    },
    {
      "remote_url": "https://github.com/leanprover-community/lean4-metaprogramming-book",
      "last_time_visited": "2025-04-22T04:15:27.562747+00:00",
      "remote_heads_hash": "d44060733757"
    },
    {
      "remote_url": "https://github.com/leanprover-community/iris-lean",
      "last_time_visited": "2025-04-22T04:15:28.074180+00:00",
      "remote_heads_hash": "84a452297995"
    },
    {
      "remote_url": "https://github.com/leanprover-community/import-graph",
      "last_time_visited": "2025-04-22T04:15:28.629786+00:00",
      "remote_heads_hash": "a97730530fe1"
    },
    {
      "remote_url": "https://github.com/leanprover-community/NNG4",
      "last_time_visited": "2025-04-22T04:15:29.186606+00:00",
      "remote_heads_hash": "6c6fa024917e"
    },
    {
      "remote_url": "https://github.com/leanprover-community/flt-regular",
      "last_time_visited": "2025-04-22T04:15:29.801120+00:00",
      "remote_heads_hash": "de55825908b6"
    },
    {
      "remote_url": "https://github.com/leanprover-community/duper",
      "last_time_visited": "2025-04-22T04:15:30.453232+00:00",
      "remote_heads_hash": "03251bd47001"
    },
    {
      "remote_url": "https://github.com/leanprover-community/con-nf",
      "last_time_visited": "2025-04-22T04:15:31.168230+00:00",
      "remote_heads_hash": "b4e65531e4fe"
    },
    {
      "remote_url": "https://github.com/leanprover-community/batteries",
      "last_time_visited": "2025-04-23T04:31:36.568260+00:00",
      "remote_heads_hash": "1bf78435e005"
    },
    {
      "remote_url": "https://github.com/leanprover-community/lean-auto",
      "last_time_visited": "2025-04-22T04:17:08.866271+00:00",
      "remote_heads_hash": "2b9686fbeabf"
    },
    {
      "remote_url": "https://github.com/leanprover-community/aesop",
      "last_time_visited": "2025-04-22T04:23:40.245565+00:00",
      "remote_heads_hash": "672607b115e4"
    },
    {
      "remote_url": "https://github.com/leanprover/verso",
      "last_time_visited": "2025-04-23T04:33:14.166215+00:00",
      "remote_heads_hash": "a23bf91fb890"
    },
    {
      "remote_url": "https://github.com/leanprover/reference-manual",
      "last_time_visited": "2025-04-23T04:33:16.808623+00:00",
      "remote_heads_hash": "1edd7f9da7e6"
    },
    {
      "remote_url": "https://github.com/leanprover/TensorLib",
      "last_time_visited": "2025-04-22T04:23:46.755204+00:00",
      "remote_heads_hash": "9ed93e3dd73c"
    },
    {
      "remote_url": "https://github.com/leanprover/subverso",
      "last_time_visited": "2025-04-22T04:23:47.338506+00:00",
      "remote_heads_hash": "f50e0260b93b"
    },
    {
      "remote_url": "https://github.com/leanprover/SHerLOC",
      "last_time_visited": "2025-04-22T04:23:47.786520+00:00",
      "remote_heads_hash": "8db31b4878a6"
    },
    {
      "remote_url": "https://github.com/leanprover/SampCert",
      "last_time_visited": "2025-04-22T04:23:48.248601+00:00",
      "remote_heads_hash": "88112051b414"
    },
    {
      "remote_url": "https://github.com/leanprover/LNSym",
      "last_time_visited": "2025-04-22T04:23:48.818064+00:00",
      "remote_heads_hash": "57b8e43d83f5"
    },
    {
      "remote_url": "https://github.com/leanprover/leansat",
      "last_time_visited": "2025-04-22T04:24:13.711241+00:00",
      "remote_heads_hash": "1b9c393441a9"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4export",
      "last_time_visited": "2025-04-22T04:24:14.280478+00:00",
      "remote_heads_hash": "8fde9a477129"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4checker",
      "last_time_visited": "2025-04-22T04:24:15.023373+00:00",
      "remote_heads_hash": "f4e994ff1c98"
    },
    {
      "remote_url": "https://github.com/leanprover/KLR",
      "last_time_visited": "2025-04-23T04:33:36.548652+00:00",
      "remote_heads_hash": "d32150fe954a"
    },
    {
      "remote_url": "https://github.com/leanprover/doc-gen4",
      "last_time_visited": "2025-04-22T04:27:52.862430+00:00",
      "remote_heads_hash": "b11bb6fc0eeb"
    },
    {
      "remote_url": "https://github.com/leanprover/lean4-cli",
      "last_time_visited": "2025-04-22T04:27:53.430821+00:00",
      "remote_heads_hash": "81485c108a0e"
    },
    {
      "remote_url": "https://github.com/lecopivo/SciLean",
      "last_time_visited": "2025-04-22T04:27:53.949818+00:00",
      "remote_heads_hash": "d123fd93d8f8"
    },
    {
      "remote_url": "https://github.com/lecopivo/LeanBLAS",
      "last_time_visited": "2025-04-22T04:27:55.488028+00:00",
      "remote_heads_hash": "0d414cf850d5"
    },
    {
      "remote_url": "https://github.com/lecopivo/lean4-karray",
      "last_time_visited": "2025-04-22T04:27:56.062273+00:00",
      "remote_heads_hash": "1277b66d931f"
    },
    {
      "remote_url": "https://github.com/lf-lang/reactor-model",
      "last_time_visited": "2025-04-22T04:27:56.574119+00:00",
      "remote_heads_hash": "43ecefc264f0"
    },
    {
      "remote_url": "https://github.com/lindy-labs/corelib_verification",
      "last_time_visited": "2025-04-23T04:37:30.629527+00:00",
      "remote_heads_hash": "889c1b81ac16"
    },
    {
      "remote_url": "https://github.com/lindy-labs/aegis",
      "last_time_visited": "2025-04-23T04:37:32.173511+00:00",
      "remote_heads_hash": "2889b11ca8f9"
    },
    {
      "remote_url": "https://github.com/loganrjmurphy/LeanEuclid",
      "last_time_visited": "2025-04-22T04:27:58.488495+00:00",
      "remote_heads_hash": "63d340883186"
    },
    {
      "remote_url": "https://github.com/m4lvin/lean4-pdl",
      "last_time_visited": "2025-04-23T04:37:33.597991+00:00",
      "remote_heads_hash": "c672f8a8301a"
    },
    {
      "remote_url": "https://github.com/madvorak/vcsp",
      "last_time_visited": "2025-04-22T04:39:08.022523+00:00",
      "remote_heads_hash": "bb3afa1c77cc"
    },
    {
      "remote_url": "https://github.com/madvorak/read-lean",
      "last_time_visited": "2025-04-22T04:39:08.649145+00:00",
      "remote_heads_hash": "14f55738d01a"
    },
    {
      "remote_url": "https://github.com/madvorak/duality",
      "last_time_visited": "2025-04-22T04:39:09.185662+00:00",
      "remote_heads_hash": "fd251538a9e5"
    },
    {
      "remote_url": "https://github.com/Maokami/vqc_in_lean",
      "last_time_visited": "2025-04-22T04:39:09.963788+00:00",
      "remote_heads_hash": "31f759a86b91"
    },
    {
      "remote_url": "https://github.com/marcusrossel/lean-snakebird",
      "last_time_visited": "2025-04-22T04:39:10.484414+00:00",
      "remote_heads_hash": "613f0a2c6dd3"
    },
    {
      "remote_url": "https://github.com/marcusrossel/lean-egg",
      "last_time_visited": "2025-04-23T04:48:52.899710+00:00",
      "remote_heads_hash": "c6007b26951a"
    },
    {
      "remote_url": "https://github.com/math-xmum/gametheory",
      "last_time_visited": "2025-04-22T04:39:11.883253+00:00",
      "remote_heads_hash": "186d87952f5b"
    },
    {
      "remote_url": "https://github.com/mhuisi/Uniq",
      "last_time_visited": "2025-04-22T04:39:12.401545+00:00",
      "remote_heads_hash": "8632f707f342"
    },
    {
      "remote_url": "https://github.com/MichaelStollBayreuth/Weights",
      "last_time_visited": "2025-04-22T04:39:13.050518+00:00",
      "remote_heads_hash": "cab50a1177cf"
    },
    {
      "remote_url": "https://github.com/MichaelStollBayreuth/EulerProducts",
      "last_time_visited": "2025-04-22T04:39:13.531255+00:00",
      "remote_heads_hash": "a475080c281b"
    },
    {
      "remote_url": "https://github.com/mo271/FormalBook",
      "last_time_visited": "2025-04-22T04:39:13.929192+00:00",
      "remote_heads_hash": "205f79a11375"
    },
    {
      "remote_url": "https://github.com/model-checking/rust-lean-models",
      "last_time_visited": "2025-04-22T04:39:14.467552+00:00",
      "remote_heads_hash": "9acadaa1b951"
    },
    {
      "remote_url": "https://github.com/morganfshirley/CommComp",
      "last_time_visited": "2025-04-22T04:39:15.081172+00:00",
      "remote_heads_hash": "bb6b1df5fd9e"
    },
    {
      "remote_url": "https://github.com/mortarsanjaya/IMOSLLean4",
      "last_time_visited": "2025-04-22T04:39:15.615309+00:00",
      "remote_heads_hash": "cd24d3f3c273"
    },
    {
      "remote_url": "https://github.com/NethermindEth/risczero-fv",
      "last_time_visited": "2025-04-22T04:39:16.467577+00:00",
      "remote_heads_hash": "be4562d9e9c0"
    },
    {
      "remote_url": "https://github.com/NethermindEth/EVMYulLean",
      "last_time_visited": "2025-04-22T04:39:17.528082+00:00",
      "remote_heads_hash": "2d3177845d1b"
    },
    {
      "remote_url": "https://github.com/niklasmohrin/lean-seminar-2023",
      "last_time_visited": "2025-04-22T04:39:18.262269+00:00",
      "remote_heads_hash": "11e47f92bf1d"
    },
    {
      "remote_url": "https://github.com/nomeata/loogle",
      "last_time_visited": "2025-04-22T04:39:18.768235+00:00",
      "remote_heads_hash": "7681188b64c3"
    },
    {
      "remote_url": "https://github.com/nomeata/lean-calcify",
      "last_time_visited": "2025-04-22T04:39:19.302154+00:00",
      "remote_heads_hash": "9b5c02bf8403"
    },
    {
      "remote_url": "https://github.com/NUS-Math-Formalization/CalculusSkeleton",
      "last_time_visited": "2025-04-22T04:39:19.738010+00:00",
      "remote_heads_hash": "77b97786a779"
    },
    {
      "remote_url": "https://github.com/objectionary/proof",
      "last_time_visited": "2025-04-22T04:39:20.353795+00:00",
      "remote_heads_hash": "3c07a6860913"
    },
    {
      "remote_url": "https://github.com/opencompl/lean-mlir",
      "last_time_visited": "2025-04-23T04:49:21.340343+00:00",
      "remote_heads_hash": "aa0a13bb4a1c"
    },
    {
      "remote_url": "https://github.com/optsuite/optlib",
      "last_time_visited": "2025-04-22T04:39:51.377771+00:00",
      "remote_heads_hash": "bd52ad3a2cec"
    },
    {
      "remote_url": "https://github.com/or4nge19/NeuralNetworks",
      "last_time_visited": "2025-04-22T04:39:51.962360+00:00",
      "remote_heads_hash": "60bec0958ed3"
    },
    {
      "remote_url": "https://github.com/pandaman64/lean-regex",
      "last_time_visited": "2025-04-22T04:39:52.568946+00:00",
      "remote_heads_hash": "bc4a496c5964"
    },
    {
      "remote_url": "https://github.com/Paper-Proof/paperproof",
      "last_time_visited": "2025-04-22T04:39:53.111979+00:00",
      "remote_heads_hash": "69f0d23a0693"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/verbose-lean4",
      "last_time_visited": "2025-04-23T04:49:48.248781+00:00",
      "remote_heads_hash": "6aab674d2c01"
    },
    {
      "remote_url": "https://github.com/PatrickMassot/GlimpseOfLean",
      "last_time_visited": "2025-04-23T04:53:37.974535+00:00",
      "remote_heads_hash": "95a3bd8a4c72"
    },
    {
      "remote_url": "https://github.com/paulch42/lean-spec",
      "last_time_visited": "2025-04-22T04:40:01.326108+00:00",
      "remote_heads_hash": "8264d464e45c"
    },
    {
      "remote_url": "https://github.com/pawelsberg/lean-directory-browser",
      "last_time_visited": "2025-04-22T04:40:01.858431+00:00",
      "remote_heads_hash": "e740683950be"
    },
    {
      "remote_url": "https://github.com/PeterKementzey/graph-library-for-lean4",
      "last_time_visited": "2025-04-22T04:40:02.386612+00:00",
      "remote_heads_hash": "0eb4fa24abc1"
    },
    {
      "remote_url": "https://github.com/pimpale/llm.lean",
      "last_time_visited": "2025-04-22T04:40:02.873162+00:00",
      "remote_heads_hash": "5875eed27aef"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanProject",
      "last_time_visited": "2025-04-22T04:40:03.350990+00:00",
      "remote_heads_hash": "ff6b956197ec"
    },
    {
      "remote_url": "https://github.com/pitmonticone/LeanInVienna2024",
      "last_time_visited": "2025-04-22T04:40:03.872361+00:00",
      "remote_heads_hash": "bfa3f74922c2"
    },
    {
      "remote_url": "https://github.com/proofs-and-programs/proofs-and-programs-25",
      "last_time_visited": "2025-04-22T04:40:04.474153+00:00",
      "remote_heads_hash": "355d4d9ee3f9"
    },
    {
      "remote_url": "https://github.com/provables/special-numbers",
      "last_time_visited": "2025-04-22T04:40:05.015305+00:00",
      "remote_heads_hash": "3ff028720537"
    },
    {
      "remote_url": "https://github.com/quangvdao/ZKLib-deprecated",
      "last_time_visited": "2025-04-22T04:40:22.240620+00:00",
      "remote_heads_hash": "6f178ea20246"
    },
    {
      "remote_url": "https://github.com/rahul3613/ProofNet-lean4",
      "last_time_visited": "2025-04-22T04:40:22.833337+00:00",
      "remote_heads_hash": "62462040cf28"
    },
    {
      "remote_url": "https://github.com/rahul3613/miniF2F-lean4",
      "last_time_visited": "2025-04-22T04:40:23.713396+00:00",
      "remote_heads_hash": "ed3336e45e16"
    },
    {
      "remote_url": "https://github.com/rami3l/PLFaLean",
      "last_time_visited": "2025-04-22T04:40:24.339284+00:00",
      "remote_heads_hash": "64870ad853f0"
    },
    {
      "remote_url": "https://github.com/reilabs/proven-zk",
      "last_time_visited": "2025-04-22T04:40:24.905579+00:00",
      "remote_heads_hash": "89dfce5717eb"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/testing-lower-bounds",
      "last_time_visited": "2025-04-22T04:40:25.422127+00:00",
      "remote_heads_hash": "fccb394cbbf7"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/kolmogorov_extension4",
      "last_time_visited": "2025-04-22T04:40:26.125755+00:00",
      "remote_heads_hash": "5e5e07d89ae7"
    },
    {
      "remote_url": "https://github.com/RemyDegenne/CLT",
      "last_time_visited": "2025-04-23T04:53:42.674710+00:00",
      "remote_heads_hash": "405859b7d6a7"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/demontrer2025",
      "last_time_visited": "2025-04-22T04:40:27.248882+00:00",
      "remote_heads_hash": "bd4089796258"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/LFTCM2024",
      "last_time_visited": "2025-04-22T04:40:28.046459+00:00",
      "remote_heads_hash": "1508422fc709"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/flt3",
      "last_time_visited": "2025-04-22T04:40:28.635538+00:00",
      "remote_heads_hash": "70b51e008451"
    },
    {
      "remote_url": "https://github.com/riccardobrasca/kaplanski4",
      "last_time_visited": "2025-04-22T04:40:29.155957+00:00",
      "remote_heads_hash": "b88c997ee624"
    },
    {
      "remote_url": "https://github.com/risc0/risc0-lean4",
      "last_time_visited": "2025-04-22T04:40:29.669788+00:00",
      "remote_heads_hash": "76fff39fd5ca"
    },
    {
      "remote_url": "https://github.com/Seasawher/mk-exercise",
      "last_time_visited": "2025-04-22T04:40:30.412582+00:00",
      "remote_heads_hash": "fe2286bc7c85"
    },
    {
      "remote_url": "https://github.com/Seasawher/mdgen",
      "last_time_visited": "2025-04-22T04:40:30.964935+00:00",
      "remote_heads_hash": "035325c4499d"
    },
    {
      "remote_url": "https://github.com/Seasawher/mathlib4-help",
      "last_time_visited": "2025-04-23T04:53:46.674164+00:00",
      "remote_heads_hash": "27e69de62fdd"
    },
    {
      "remote_url": "https://github.com/Seasawher/lean-book",
      "last_time_visited": "2025-04-22T04:40:33.197861+00:00",
      "remote_heads_hash": "f5a57bff0f45"
    },
    {
      "remote_url": "https://github.com/Seasawher/import-all",
      "last_time_visited": "2025-04-22T04:40:33.718234+00:00",
      "remote_heads_hash": "5cfb15f55ac8"
    },
    {
      "remote_url": "https://github.com/Shreyas4991/DGAlgorithms",
      "last_time_visited": "2025-04-23T04:53:48.912160+00:00",
      "remote_heads_hash": "f8e6e81245a0"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/Saturn",
      "last_time_visited": "2025-04-22T04:40:34.723611+00:00",
      "remote_heads_hash": "3f2346688f39"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/Polylean",
      "last_time_visited": "2025-04-23T04:53:50.334144+00:00",
      "remote_heads_hash": "dd3cef356d86"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/proofs-and-programs-2023",
      "last_time_visited": "2025-04-22T04:40:35.920750+00:00",
      "remote_heads_hash": "f50f15d7d0b0"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/MetaExamples",
      "last_time_visited": "2025-04-22T04:40:36.587131+00:00",
      "remote_heads_hash": "21673a31a16b"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanLion",
      "last_time_visited": "2025-04-22T04:40:37.086082+00:00",
      "remote_heads_hash": "9506b2acf8a3"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanAideTools",
      "last_time_visited": "2025-04-22T04:40:37.597468+00:00",
      "remote_heads_hash": "9555b8513464"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/LeanAide",
      "last_time_visited": "2025-04-22T04:40:38.154831+00:00",
      "remote_heads_hash": "eb2c967d8047"
    },
    {
      "remote_url": "https://github.com/siddhartha-gadgil/lean-loris",
      "last_time_visited": "2025-04-22T04:41:06.310505+00:00",
      "remote_heads_hash": "1e336dd1a8f1"
    },
    {
      "remote_url": "https://github.com/sinhp/LeanFibredCategories",
      "last_time_visited": "2025-04-22T04:41:06.994923+00:00",
      "remote_heads_hash": "cb5cdf9d5b6e"
    },
    {
      "remote_url": "https://github.com/starkware-libs/formal-proofs",
      "last_time_visited": "2025-04-22T04:41:07.575144+00:00",
      "remote_heads_hash": "e7128b1e4414"
    },
    {
      "remote_url": "https://github.com/sven-manthe/A-formalization-of-Borel-determinacy-in-Lean",
      "last_time_visited": "2025-04-22T04:41:08.162713+00:00",
      "remote_heads_hash": "5cfc842b0804"
    },
    {
      "remote_url": "https://github.com/T-Brick/lean-wasm",
      "last_time_visited": "2025-04-22T04:41:08.693952+00:00",
      "remote_heads_hash": "b88e6c28788e"
    },
    {
      "remote_url": "https://github.com/T-Brick/lean2wasm",
      "last_time_visited": "2025-04-22T04:41:09.207437+00:00",
      "remote_heads_hash": "3aa558e05c14"
    },
    {
      "remote_url": "https://github.com/teorth/pfr",
      "last_time_visited": "2025-04-22T04:41:09.692802+00:00",
      "remote_heads_hash": "01e12304c4e8"
    },
    {
      "remote_url": "https://github.com/teorth/expdb",
      "last_time_visited": "2025-04-22T04:41:11.714189+00:00",
      "remote_heads_hash": "f344a09ba88a"
    },
    {
      "remote_url": "https://github.com/teorth/equational_theories",
      "last_time_visited": "2025-04-22T04:41:12.415584+00:00",
      "remote_heads_hash": "c42548c54019"
    },
    {
      "remote_url": "https://github.com/Timeroot/Lean-QuantumInfo",
      "last_time_visited": "2025-04-22T04:41:16.991796+00:00",
      "remote_heads_hash": "7a073c31ea15"
    },
    {
      "remote_url": "https://github.com/Timeroot/ComputableReal",
      "last_time_visited": "2025-04-22T04:41:17.517532+00:00",
      "remote_heads_hash": "8abf2e84860e"
    },
    {
      "remote_url": "https://github.com/todbeibrot/Lean-Oscar",
      "last_time_visited": "2025-04-22T04:41:18.013668+00:00",
      "remote_heads_hash": "5be3ae253c94"
    },
    {
      "remote_url": "https://github.com/Trequetrum/lean4game-logic",
      "last_time_visited": "2025-04-22T04:41:18.586334+00:00",
      "remote_heads_hash": "eebd9da88e9d"
    },
    {
      "remote_url": "https://github.com/tydeu/lean4-alloy",
      "last_time_visited": "2025-04-22T04:41:19.125144+00:00",
      "remote_heads_hash": "607e2d5fe13b"
    },
    {
      "remote_url": "https://github.com/ufmg-smite/lean-smt",
      "last_time_visited": "2025-04-22T04:41:19.658066+00:00",
      "remote_heads_hash": "38596c368e5e"
    },
    {
      "remote_url": "https://github.com/VCA-EPFL/leanses",
      "last_time_visited": "2025-04-22T04:41:20.353247+00:00",
      "remote_heads_hash": "4a086d674a6c"
    },
    {
      "remote_url": "https://github.com/VCA-EPFL/dataflow-rewriter",
      "last_time_visited": "2025-04-23T04:53:56.322302+00:00",
      "remote_heads_hash": "b5953f866ef2"
    },
    {
      "remote_url": "https://github.com/verified-optimization/CvxLean",
      "last_time_visited": "2025-04-22T04:41:21.490624+00:00",
      "remote_heads_hash": "7a4249e9e921"
    },
    {
      "remote_url": "https://github.com/Verified-zkEVM/ZKLib",
      "last_time_visited": "2025-04-23T04:53:58.266134+00:00",
      "remote_heads_hash": "01833145f899"
    },
    {
      "remote_url": "https://github.com/Verified-zkEVM/clean",
      "last_time_visited": "2025-04-23T05:11:43.221935+00:00",
      "remote_heads_hash": "fad9f204b325"
    },
    {
      "remote_url": "https://github.com/verse-lab/veil",
      "last_time_visited": "2025-04-22T04:47:33.655949+00:00",
      "remote_heads_hash": "c6a42f405bdd"
    },
    {
      "remote_url": "https://github.com/verse-lab/lean-ssr",
      "last_time_visited": "2025-04-22T04:47:34.304707+00:00",
      "remote_heads_hash": "90c340f9e5c7"
    },
    {
      "remote_url": "https://github.com/vihdzp/rubik-lean4",
      "last_time_visited": "2025-04-22T04:47:34.757983+00:00",
      "remote_heads_hash": "1fc48ff90e62"
    },
    {
      "remote_url": "https://github.com/vihdzp/combinatorial-games",
      "last_time_visited": "2025-04-22T04:47:35.289898+00:00",
      "remote_heads_hash": "f521d632a4bd"
    },
    {
      "remote_url": "https://github.com/vltanh/lean4-analysis-tao",
      "last_time_visited": "2025-04-22T04:47:35.791988+00:00",
      "remote_heads_hash": "57996e1217a9"
    },
    {
      "remote_url": "https://github.com/wellecks/ntptutorial",
      "last_time_visited": "2025-04-22T04:47:36.172086+00:00",
      "remote_heads_hash": "ecbb7c378fae"
    },
    {
      "remote_url": "https://github.com/wellecks/llmstep",
      "last_time_visited": "2025-04-22T04:47:36.983950+00:00",
      "remote_heads_hash": "164bd714fab9"
    },
    {
      "remote_url": "https://github.com/wupr/order-p-q",
      "last_time_visited": "2025-04-22T04:47:37.699941+00:00",
      "remote_heads_hash": "b0999047d697"
    },
    {
      "remote_url": "https://github.com/Xiyou-Wu/RiemannianGeometry",
      "last_time_visited": "2025-04-22T04:47:38.265196+00:00",
      "remote_heads_hash": "711e79694735"
    },
    {
      "remote_url": "https://github.com/YaelDillies/Toric",
      "last_time_visited": "2025-04-23T05:17:46.103017+00:00",
      "remote_heads_hash": "14a55bf60b9a"
    },
    {
      "remote_url": "https://github.com/YaelDillies/LeanCamCombi",
      "last_time_visited": "2025-04-22T04:47:39.393970+00:00",
      "remote_heads_hash": "e0017197ebf0"
    },
    {
      "remote_url": "https://github.com/YaelDillies/LeanAPAP",
      "last_time_visited": "2025-04-22T04:47:40.057667+00:00",
      "remote_heads_hash": "15c646db28ea"
    },
    {
      "remote_url": "https://github.com/YaelDillies/ChandraFurstLipton",
      "last_time_visited": "2025-04-22T04:47:40.838164+00:00",
      "remote_heads_hash": "c8b483fa1113"
    },
    {
      "remote_url": "https://github.com/yangky11/miniF2F-lean4",
      "last_time_visited": "2025-04-22T04:47:41.340051+00:00",
      "remote_heads_hash": "f520a26cc363"
    },
    {
      "remote_url": "https://github.com/yangky11/lean4-example",
      "last_time_visited": "2025-04-22T04:47:41.916602+00:00",
      "remote_heads_hash": "7e60684c8a6d"
    },
    {
      "remote_url": "https://github.com/YnirPaz/PCF-Theory",
      "last_time_visited": "2025-04-22T04:47:42.439839+00:00",
      "remote_heads_hash": "7b0d1c8f2732"
    },
    {
      "remote_url": "https://github.com/yuma-mizuno/lean-math-workshop",
      "last_time_visited": "2025-04-22T04:47:42.957143+00:00",
      "remote_heads_hash": "21fbc4ec8b2a"
    }
  ],
  "sorries": [
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2275,
        "start_column": 61,
        "end_line": 2275,
        "end_column": 66,
        "file": "PrimeNumberTheoremAnd/Wiener.lean"
      },
      "debug_info": {
        "goal": "A x : \u211d\nG : \u2102 \u2192 \u2102\nf : \u2115 \u2192 \u211d\nhpos : 0 \u2264 f\nhG : ContinuousOn G {s | 1 \u2264 s.re}\nhG' : EqOn G (fun s => LSeries (fun n => \u2191(f n)) s - \u2191A / (s - 1)) {s | 1 < s.re}\nhf : \u2200 (\u03c3' : \u211d), 1 < \u03c3' \u2192 Summable (nterm (fun n => \u2191(f n)) \u03c3')\n\u03c8 : CS 2 \u2102\nh\u03c8pos : \u2200 (y : \u211d), 0 \u2264 (\ud835\udcd5 \u03c8.toFun y).re \u2227 (\ud835\udcd5 \u03c8.toFun y).im = 0\nhx : 1 \u2264 x\n\u22a2 \u2211' (n : \u2115), \u2191(f n) / \u2191n * \ud835\udcd5 \u03c8.toFun (1 / (2 * \u03c0) * Real.log (\u2191n / x)) -\n      \u2191A * \u222b (u : \u211d) in Ici (-Real.log x), \ud835\udcd5 \u03c8.toFun (u / (2 * \u03c0)) =\n    \u222b (t : \u211d), G (1 + \u2191t * I) * \u03c8.toFun t * \u2191x ^ (\u2191t * I)",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2275"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2024-04-04T12:17:01-07:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "bf42e60cb656be3afbf004c04698b3eaef26c35ce22b8517b85496962752fa3e"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2297,
        "start_column": 90,
        "end_line": 2297,
        "end_column": 95,
        "file": "PrimeNumberTheoremAnd/Wiener.lean"
      },
      "debug_info": {
        "goal": "A : \u211d\nG : \u2102 \u2192 \u2102\nf : \u2115 \u2192 \u211d\nhpos : 0 \u2264 f\nhG : ContinuousOn G {s | 1 \u2264 s.re}\nhG' : EqOn G (fun s => LSeries (fun n => \u2191(f n)) s - \u2191A / (s - 1)) {s | 1 < s.re}\nhf : \u2200 (\u03c3' : \u211d), 1 < \u03c3' \u2192 Summable (nterm (fun n => \u2191(f n)) \u03c3')\n\u03c8 : CS 2 \u2102\nh\u03c8pos : \u2200 (y : \u211d), 0 \u2264 (\ud835\udcd5 \u03c8.toFun y).re \u2227 (\ud835\udcd5 \u03c8.toFun y).im = 0\n\u22a2 \u2203 B, \u2200 (x : \u211d), 0 < x \u2192 \u2016\u2211' (n : \u2115), \u2191(f n) / \u2191n * \ud835\udcd5 \u03c8.toFun (1 / (2 * \u03c0) * Real.log (\u2191n / x))\u2016 \u2264 B",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2297"
      },
      "metadata": {
        "blame_email_hash": "4d01d7c10d46",
        "blame_date": "2024-04-16T02:15:35+02:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "520457e1f0d2e7250f0878b0209d6145b18befc38cc01b64f39f34a1e7dc7d0f"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2315,
        "start_column": 2,
        "end_line": 2315,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/Wiener.lean"
      },
      "debug_info": {
        "goal": "A : \u211d\nG : \u2102 \u2192 \u2102\nf : \u2115 \u2192 \u211d\nhpos : 0 \u2264 f\nhf : \u2200 (\u03c3' : \u211d), 1 < \u03c3' \u2192 Summable (nterm (fun n => \u2191(f n)) \u03c3')\nhG : ContinuousOn G {s | 1 \u2264 s.re}\nhG' : EqOn G (fun s => LSeries (fun n => \u2191(f n)) s - \u2191A / (s - 1)) {s | 1 < s.re}\n\u22a2 cheby fun n => \u2191(f n)",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Wiener.lean#L2315"
      },
      "metadata": {
        "blame_email_hash": "4d01d7c10d46",
        "blame_date": "2024-04-16T02:15:35+02:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "b95d2c7a770490b019b59c2ded7e2de30f5e5f9b2c1006481198e3b0cc5605f3"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 328,
        "start_column": 2,
        "end_line": 328,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "SmoothingF : \u211d \u2192 \u211d\ndiffSmoothingF : ContDiff \u211d 1 SmoothingF\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\nX\u271d : \u211d\nC : \u211d := sorry\nCpos : 0 < C\nX : \u211d\nX_ge_C : C < X\n\u03b5 : \u211d\n\u03b5pos : 0 < \u03b5\n\u03b5_lt_one : \u03b5 < 1\n\u22a2 \u2016\u2191(\u2211' (n : \u2115), \u039b n * Smooth1 SmoothingF \u03b5 (\u2191n / X)) - \u2191((Finset.range \u230aX\u230b\u208a).sum \u21d1\u039b)\u2016 \u2264 C * \u03b5 * X * Real.log X",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L328"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2024-03-11T23:23:22-04:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "5f3104a917032b249932ce6f08c0c08e464ff200ddc7419e5587a268f0caa950"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 319,
        "start_column": 23,
        "end_line": 319,
        "end_column": 28,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "SmoothingF : \u211d \u2192 \u211d\ndiffSmoothingF : ContDiff \u211d 1 SmoothingF\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\nX : \u211d\nC : \u211d := sorry\n\u22a2 0 < C",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L319"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-14T14:09:55-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "d31421907a8b6b41381cf2b924520747406162ce8610f001d46fc402352275bb"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 365,
        "start_column": 2,
        "end_line": 365,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "SmoothingF : \u211d \u2192 \u211d\n\u03b5 : \u211d\n\u03b5_pos : 0 < \u03b5\nX \u03c3\u2080 : \u211d\n\u03c3\u2080_pos : 0 < \u03c3\u2080\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) (Icc \u03c3\u2080 2 \u00d7\u2102 univ \\ {1})\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\n\u22a2 Integrable (fun t => SmoothedChebyshevIntegrand SmoothingF \u03b5 X (2 + \u2191t * I)) volume",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L365"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-28T10:57:09-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "1e012fa8e721c16a5a5609079fc52308969208b5e434f92efa975840c2832c11"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 399,
        "start_column": 2,
        "end_line": 399,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "SmoothingF : \u211d \u2192 \u211d\n\u03b5 : \u211d\n\u03b5_pos : 0 < \u03b5\nX T : \u211d\nT_pos : 0 < T\n\u03c3\u2080 : \u211d\n\u03c3\u2080_pos : 0 < \u03c3\u2080\nholoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) (Icc \u03c3\u2080 2 \u00d7\u2102 univ \\ {1})\nsuppSmoothingF : support SmoothingF \u2286 Icc (1 / 2) 2\nSmoothingFnonneg : \u2200 x > 0, 0 \u2264 SmoothingF x\nmass_one : \u222b (x : \u211d) in Ioi 0, SmoothingF x / x = 1\n\u22a2 (1 / (2 * \u2191\u03c0 * I)) \u2022\n      ((I \u2022 \u222b (t : \u211d) in Iic (-T), SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u21912 + \u2191t * I)) +\n          VIntegral (SmoothedChebyshevIntegrand SmoothingF \u03b5 X) 2 (-T) T +\n        I \u2022 \u222b (t : \u211d) in Ici T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u21912 + \u2191t * I)) =\n    \ud835\udcdc (fun x => \u2191(Smooth1 SmoothingF \u03b5 x)) 1 * \u2191X +\n      1 / (2 * \u2191\u03c0 * I) *\n        (((((I * \u222b (t : \u211d) in Iic (-T), SmoothedChebyshevIntegrand SmoothingF \u03b5 X (2 + \u2191t * I)) -\n                \u222b (s : \u211d) in Icc \u03c3\u2080 2, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191s - \u2191T * I)) +\n              I * \u222b (t : \u211d) in Icc (-T) T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191\u03c3\u2080 + \u2191t * I)) +\n            \u222b (s : \u211d) in Icc \u03c3\u2080 2, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (\u2191s + \u2191T * I)) +\n          I * \u222b (t : \u211d) in Ici T, SmoothedChebyshevIntegrand SmoothingF \u03b5 X (2 + \u2191t * I))",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L399"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-10T12:59:29-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "8a5f497557d4896ce8c37874eca4b8585364a3abd8ceb30f6ee6171d8482ad06"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 511,
        "start_column": 2,
        "end_line": 511,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "c : \u211d := sorry\ncpos : 0 < c\nC : \u211d := sorry\nX\u2080 : \u211d := sorry\nX : \u211d\nX_ge_X\u2080 : X \u2265 X\u2080\n\u22a2 \u2016(ChebyshevPsi - id) X\u2016 \u2264 C * \u2016X * rexp (-c * Real.log X ^ (1 / 10))\u2016",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L511"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2024-03-11T23:23:22-04:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "06d286d38a1822df79fb6cecfe97f52dcda8255daa248e6e5fdc68bffcf5f982"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 501,
        "start_column": 23,
        "end_line": 501,
        "end_column": 28,
        "file": "PrimeNumberTheoremAnd/MediumPNT.lean"
      },
      "debug_info": {
        "goal": "c : \u211d := sorry\n\u22a2 0 < c",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/MediumPNT.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-02-14T15:25:09-05:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "7abbc3ed8d442ac777ee7b24e56250ba81752a871d4e15f84b9af0dfdd5cdc40"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 1843,
        "start_column": 2,
        "end_line": 1843,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/Consequences.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2203 c, (c =o[atTop] fun x => 1) \u2227 \u2200 (n : \u2115), \u2191(nth Nat.Prime n) = (1 + c n) * \u2191n * log \u2191n",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L1843"
      },
      "metadata": {
        "blame_email_hash": "11451cd2f124",
        "blame_date": "2024-02-19T02:44:41-08:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "854705ad4af4af94ae067b9a2008bd912742cbed7e7b331468ef90c00e9a103d"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2574,
        "start_column": 81,
        "end_line": 2574,
        "end_column": 86,
        "file": "PrimeNumberTheoremAnd/Consequences.lean"
      },
      "debug_info": {
        "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, \u03bc n) =o[atTop] fun x => x",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2574"
      },
      "metadata": {
        "blame_email_hash": "5ecb8fcfe98c",
        "blame_date": "2025-02-06T17:41:08+01:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "4c6a0455a8b34b52a7f64e32b417e8316186eaa3044d52e3d6bb7f5dd6b6c930"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2610,
        "start_column": 2,
        "end_line": 2610,
        "end_column": 7,
        "file": "PrimeNumberTheoremAnd/Consequences.lean"
      },
      "debug_info": {
        "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, (-1) ^ \u03a9 n) =o[atTop] fun x => x",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2610"
      },
      "metadata": {
        "blame_email_hash": "11451cd2f124",
        "blame_date": "2024-02-19T02:44:41-08:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "c7459a88ec8bad35d847133968a3043cc0982421b5b59fe3e1dd7365c8a117a2"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "89c431184f7af947a3127c71c18730224e168bda",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 2634,
        "start_column": 98,
        "end_line": 2634,
        "end_column": 103,
        "file": "PrimeNumberTheoremAnd/Consequences.lean"
      },
      "debug_info": {
        "goal": "\u22a2 (fun x => \u2211 n \u2208 range \u230ax\u230b\u208a, \u2191(\u03bc n) / \u2191n) =o[atTop] fun x => 1",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/89c431184f7af947a3127c71c18730224e168bda/PrimeNumberTheoremAnd/Consequences.lean#L2634"
      },
      "metadata": {
        "blame_email_hash": "5ecb8fcfe98c",
        "blame_date": "2025-02-06T17:41:08+01:00",
        "inclusion_date": "2025-04-22T03:00:50.389637+00:00"
      },
      "id": "66776fc89f5135769ea9e5f5bfb90ce7fba07bcf07c1a95cc8a671b1390a8799"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 47,
        "start_column": 28,
        "end_line": 47,
        "end_column": 33,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\n\u22a2 M.rk {e} \u2264 1",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-10T13:43:44-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "7e49c2cd31977f777678b7f90d7c8ed2a923bbdf546d7a170623287651e6f794"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 48,
        "start_column": 67,
        "end_line": 48,
        "end_column": 72,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\n\u22a2 \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "4d380fc1f5e7c0f5dd8e1497baae67b170c08b8c81fae8f69c43b80558c9ed60"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 56,
        "start_column": 6,
        "end_line": 56,
        "end_column": 11,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\n\u22a2 insert e (M.E \\ insert e Y) = M.E \\ Y",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1f19e98e4f46add55bc42e71e4596abda6b53d1dd8d161ab678ecdb9b1d2a9ed"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 57,
        "start_column": 4,
        "end_line": 57,
        "end_column": 9,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhins : insert e (M.E \\ insert e Y) = M.E \\ Y\n\u22a2 \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L57"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "82a5aef37a1937633cfa8f0ad86dfac1410727f0e846396cb884875cca33f6c3"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 59,
        "start_column": 4,
        "end_line": 59,
        "end_column": 9,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\n\u22a2 \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L59"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1eeaf815d12cc344fae058d523a5c29135db1883beadb3587fbe8072b3955987"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 64,
        "start_column": 41,
        "end_line": 64,
        "end_column": 46,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\n\u22a2 \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L64"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "36e20e542d0f74e33d886f6dc192f542b74a0706047a72b9fa4ca7f47c414b68"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 66,
        "start_column": 57,
        "end_line": 66,
        "end_column": 62,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\n\u22a2 \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "038e52d203f014e6f5700c346914cbd1febdf9d28b1ecb168ad29c8d3501da7e"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 68,
        "start_column": 59,
        "end_line": 68,
        "end_column": 64,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\n\u22a2 \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "06517ef4d807e887f53e54fdc32bca0b946c8fa7457c71cc61b07f0089b6db3c"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 74,
        "start_column": 4,
        "end_line": 74,
        "end_column": 9,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\nhneed : \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank\n\u22a2 \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) =\n    \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) + (\u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e})))) - 2 * \u2191M.rank",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "e32b01760d1fbf1799648be510c2d1f04b9de5adf0ba4400d944ff0aecbcd8a4"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 79,
        "start_column": 56,
        "end_line": 79,
        "end_column": 61,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\nhneed : \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank\nhf :\n  \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) =\n    \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) + (\u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e})))) - 2 * \u2191M.rank\n\u22a2 (M \uff3c {e}).E \\ X = M.E \\ insert e X",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "13413f22e316f27c537b695a3be6e5d0986da27454087f401c640e21ba8d21b5"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 80,
        "start_column": 58,
        "end_line": 80,
        "end_column": 63,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\nhneed : \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank\nhf :\n  \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) =\n    \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) + (\u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e})))) - 2 * \u2191M.rank\nhdelx : (M \uff3c {e}).E \\ X = M.E \\ insert e X\n\u22a2 (M \uff0f {e}).E \\ Y = M.E \\ insert e Y",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-04-19T14:50:16-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "5fbf178f9925daa46cbf154f103fa3e8900a3dc0c04afbd4a034e8ffd19f3d6a"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "Matroid/Exercises/DRp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nM : Matroid \u03b1\ninst\u271d : M.RankFinite\nX Y : Set \u03b1\ne : \u03b1\nhe : e \u2208 M.E\nheX : e \u2209 X\nheY : e \u2209 Y\nthis : M.rk {e} \u2264 1\nhconY : \u2191(M.rk (insert e Y)) - 1 = \u2191((M \uff0f {e}).rk Y)\nhconEY : \u2191(M.rk (M.E \\ Y)) - 1 = \u2191((M \uff0f {e}).rk (M.E \\ insert e Y))\nhconE : \u2191M.rank - 1 = \u2191((M \uff0f {e}).rk (M.E \\ {e}))\nhsub1 : \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) \u2264 \u2191(M.rk X) + \u2191(M.rk (insert e Y))\nhsub2 : \u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e}))) \u2264 \u2191(M.rk (M.E \\ insert e X)) + \u2191(M.rk (M.E \\ Y))\nhneed : \u2191(M \uff3c {e}).rank \u2264 \u2191M.rank\nhf :\n  \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) =\n    \u2191(M.rk (X \u222a Y \u222a {e})) + \u2191(M.rk (X \u2229 Y)) + (\u2191(M.rk (M.E \\ (X \u2229 Y))) + \u2191(M.rk (M.E \\ (X \u222a Y \u222a {e})))) - 2 * \u2191M.rank\nhdelx : (M \uff3c {e}).E \\ X = M.E \\ insert e X\nhconYh : (M \uff0f {e}).E \\ Y = M.E \\ insert e Y\nhrkcon : (M \uff0f {e}).rk (M.E \\ {e}) = (M \uff0f {e}).rank\n\u22a2 \u2191(M.conn (X \u2229 Y)) + \u2191(M.conn (X \u222a Y \u222a {e})) \u2264 \u2191((M \uff3c {e}).conn X) + \u2191((M \uff0f {e}).conn Y) + 1",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Exercises/DRp.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "97cb4e7e7f28",
        "blame_date": "2025-02-07T13:40:41-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "39ede7a35df3b33bcbe6f287f9795bbaed1fd9441221b3034f9aa05a6d5cd133"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 46,
        "start_column": 2,
        "end_line": 46,
        "end_column": 7,
        "file": "Matroid/Representation/Dual.lean"
      },
      "debug_info": {
        "goal": "case h.refine_2\n\u03b1 : Type u_1\n\ud835\udd3d : Type u_5\nB : Set \u03b1\ninst\u271d\u00b2 : DivisionRing \ud835\udd3d\nM : Matroid \u03b1\ninst\u271d\u00b9 : M.Finitary\ninst\u271d : DecidableEq \u03b1\nhB : M.IsBase B\nhM : M.Representable \ud835\udd3d\nv : M.Rep \ud835\udd3d (\u2191B \u2192\u2080 \ud835\udd3d)\nhv : v.IsStandard\nI : Set \u03b1\nhIE : I \u2286 M.E\n\u22a2 LinearIndepOn \ud835\udd3d (\u21d1v) I \u2194\n    LinearIndepOn \ud835\udd3d (Sum.elim (fun x => Pi.single x 1) fun x y => (v \u2191x) y) (\u21d1(Embedding.sumSet \u22ef) \u207b\u00b9' I) \u2227 I \u2286 B \u222a M.E",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/Dual.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-02-20T08:00:16-05:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "94543c4e0b78ce48948edfa702a294ecbfad85b7bbca708c6cfb6b4ea3b136bf"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 34,
        "start_column": 4,
        "end_line": 34,
        "end_column": 9,
        "file": "Matroid/Representation/CycleSpace'.lean"
      },
      "debug_info": {
        "goal": "case refine_2.refine_1\n\u03b1 : Type u_1\nW : Type u_3\n\ud835\udd3d : Type u_5\nM : Matroid \u03b1\ninst\u271d\u00b2 : Field \ud835\udd3d\ninst\u271d\u00b9 : AddCommGroup W\ninst\u271d : Module \ud835\udd3d W\nv : M.Rep \ud835\udd3d W\nx : \u03b1 \u2192\u2080 \ud835\udd3d\nx\u271d : (Finsupp.linearCombination \ud835\udd3d \u21d1v) x = 0 \u2227 \u2191x.support \u2286 M.E\nh : (Finsupp.linearCombination \ud835\udd3d \u21d1v) x = 0\nh' : \u2191x.support \u2286 M.E\n\u22a2 (Finsupp.linearCombination \ud835\udd3d fun i => v \u2191i) ((Finsupp.supportedEquivFinsupp M.E) \u27e8x, h'\u27e9) = 0",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "d45e93b2b659071f1815c327498fdb6d48d6d2bcc3ed28dcf726a251e5e2759a"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 36,
        "start_column": 2,
        "end_line": 36,
        "end_column": 7,
        "file": "Matroid/Representation/CycleSpace'.lean"
      },
      "debug_info": {
        "goal": "case refine_2.refine_2\n\u03b1 : Type u_1\nW : Type u_3\n\ud835\udd3d : Type u_5\nM : Matroid \u03b1\ninst\u271d\u00b2 : Field \ud835\udd3d\ninst\u271d\u00b9 : AddCommGroup W\ninst\u271d : Module \ud835\udd3d W\nv : M.Rep \ud835\udd3d W\nx : \u03b1 \u2192\u2080 \ud835\udd3d\nx\u271d : (Finsupp.linearCombination \ud835\udd3d \u21d1v) x = 0 \u2227 \u2191x.support \u2286 M.E\nh : (Finsupp.linearCombination \ud835\udd3d \u21d1v) x = 0\nh' : \u2191x.support \u2286 M.E\n\u22a2 Finsupp.embDomain (Embedding.subtype M.E) ((Finsupp.supportedEquivFinsupp M.E) \u27e8x, h'\u27e9) = x",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "1bed17dc72c8b8adf02f3b4206952c7dd36f4631de2837dd1ec90fdfa6468464"
    },
    {
      "repo": {
        "remote": "https://github.com/apnelson1/Matroid",
        "branch": "main",
        "commit": "35369531a016ba8a3857f0480bc420c9efce8298",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 51,
        "start_column": 2,
        "end_line": 51,
        "end_column": 7,
        "file": "Matroid/Representation/CycleSpace'.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nW : Type u_3\nW' : Type u_4\n\ud835\udd3d : Type u_5\nM : Matroid \u03b1\ninst\u271d\u2074 : Field \ud835\udd3d\ninst\u271d\u00b3 : AddCommGroup W\ninst\u271d\u00b2 : Module \ud835\udd3d W\ninst\u271d\u00b9 : AddCommGroup W'\ninst\u271d : Module \ud835\udd3d W'\nv : M.Rep \ud835\udd3d W\n\u03c6 : W \u2192\u2097[\ud835\udd3d] W'\nh\u03c6 : Disjoint (span \ud835\udd3d (range \u21d1v)) (LinearMap.ker \u03c6)\n\u22a2 (v.comp \u03c6 h\u03c6).subtypeCycleSpace = v.subtypeCycleSpace",
        "url": "https://github.com/apnelson1/Matroid/blob/35369531a016ba8a3857f0480bc420c9efce8298/Matroid/Representation/CycleSpace'.lean#L51"
      },
      "metadata": {
        "blame_email_hash": "1790ea15e0cd",
        "blame_date": "2025-03-10T08:10:34-04:00",
        "inclusion_date": "2025-04-22T03:12:56.905261+00:00"
      },
      "id": "411122fc73792ac9d3e0831dd013087871bcedef5d7096e29235921c2589da4a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "8eaae19a6fb47bce0fd524bce75c1e361fbaefa5790485e2f22926c158a8c1e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cce8cbe613cdf9e50328fc14876589861f817f8d982ace4919b1d75549af7fe3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "03fbbc0d1e9f117d5942af6852c90e66aa506b3e8ec477ce19ed73f4dec66e22"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a9b216147bd4fd11b6b0a82a1c020b5c1ce96c5cea743ecc22070f4614a159a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "ad14805154f954720dc6018921922f6ce18b37615b02c5ef9d30ad69ad1472ce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b1c32a76a23ad2cd764affec2af46b2dd0c42217044e36f76ff2a704da69562e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2e17f198f3292f292c8cf373030c741c1c4ff1a5ac0fe75310236c2e431df4f9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d5e488b24e4505431f74b283ed58533569640e067d2d945cd6d90943266da643"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "7ad3b18a17e87d243fa8df74f81d9ceb10a625ed3cd248cc7faf72a6077fbc73"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 39,
        "start_column": 2,
        "end_line": 39,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "53956532054bc99201ba437206ebf187e6e07d99352953f4ab64712c7ef6826d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 (x : \u03b1), [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b9f0618fe64d776dc3240dfdb90578b19fe10db23a72bae010bd261614031c5c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\ny : \u03b2\nz : \u03b3\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z|oc x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b81a761929b7a89b694c13d092ed2f731ae07d175153ef34a7510aab98768512"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 56,
        "start_column": 2,
        "end_line": 56,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nr : \u211d\u22650\u221e\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x] / r\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a08d22d212a80c097babbd7d76df05ef7b580fc1ce36e3fb60068609807666c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e62b91f406213124dce9d248afa9880ff4f8d7117acba968a07008f5c921aabf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 2,
        "end_line": 84,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d44a64645ba21b9cf2a44e4e037e5b0aaaff48b431e0a3b591e850e259bdd3f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 2,
        "end_line": 92,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "5793adecd9eea81a25f868fbd31367f1f36efc62e6b7b1ea17d90002cee133ca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e3f2b3db2636b8c86a773fea2faeebc9f1c41189f8ea472fbb860b081ace31b3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2ded7307ec4e2152a717c8e5fe0b46e80839bc7b21835288f600278841966384"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nx : \u03b1\ny : \u03b2\n\u22a2 [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b9ce334c219eebe5a9fcf2c58b39a44758fdb7affdddc33d2eeadbddc3f0db28"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 120,
        "start_column": 2,
        "end_line": 120,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L120"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c574581a4dc0c3c6f65adc6121f229671787f9042fe2a15ebb46c56b86be6761"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f91690706add6c6062bbd00a5b636fafe6042b277df7c1ef8500957932cda7e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 2,
        "end_line": 132,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f9175e77e579e2d226801254c9993049998d20a91a9afdd58a56b2c96a8472fa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 139,
        "start_column": 2,
        "end_line": 139,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f4f7592801bf8ed761c2c2ae0c454778dec5399371f526860db7c87fed31687e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cd305b9506ac1fee5913e45b32e2a7eba66cac21946fd78e587b29fb903a33d5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 159,
        "start_column": 2,
        "end_line": 159,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ny : \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L159"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "1093e1d4bff43282a9775a32b83bf26968dcaf06059e8f891c016fd4e716cced"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nx : \u03b1\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0ffd5b8bdda81cf678b104d8a503876ba4f12c1448515c5f6e6ba91cb97ceaa8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b3\ny : \u03b2\nz : \u03b3 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0f3b97dafe8321f7b13f9d79c28f5251222c418d1362122acfc70a4f3dd1b24c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 176,
        "start_column": 2,
        "end_line": 176,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nf : \u03b2 \u2192 \u03b3\nx : \u03b1\nz : \u03b1 \u00d7 \u03b3\n\u22a2 [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L176"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a184ebca71fe8e9e6a58487dd90a5cacf6791a5f18023f46ae371742c894dfb6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 329,
        "start_column": 10,
        "end_line": 329,
        "end_column": 15,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "case e_a\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] =\n    [=(some s, some s)|do\n      let shared_seed \u2190 liftM (generateSeed spec (update qb i \u2191s) js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n      let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L329"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "16b6cbfbee47e581b383792c31994107a889517790cdbd5598dbe131a79a1049"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 331,
        "start_column": 53,
        "end_line": 331,
        "end_column": 58,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed \u2208 (liftM (generateSeed spec qb js)).support\n\u22a2 \u2191(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L331"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c993dc049ce01ee6b3c138815950ce273bc66240e6577b8d69fa1db2f61f8d0c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 414,
        "start_column": 6,
        "end_line": 414,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L414"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a16b9954ff9136b68fefb29909b5c93e9df63eac17839a4168555c5612730fae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 416,
        "start_column": 6,
        "end_line": 416,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L416"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "56d19462c929c6adede21f66e8929a31c134b816ad9d4d653777a10f2c55bce3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 418,
        "start_column": 6,
        "end_line": 418,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L418"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2d03d97795242b234a6b06cc2987dbb955f025d4aa8f1faf12be3094903c3dfa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 420,
        "start_column": 6,
        "end_line": 420,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L420"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b498fe6a42fd85c6eac6a3f5be95e319d29a3f3349783630c2b471092adde799"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 422,
        "start_column": 6,
        "end_line": 422,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L422"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a3791503bf84fd084b8160df8576a186f7efdc814aed4a9493e9501f3e130b26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 424,
        "start_column": 6,
        "end_line": 424,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L424"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "e293c6dd2939d5486ae707cb3d6f59b460caba49a62947336c4366982888db6b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 435,
        "start_column": 2,
        "end_line": 435,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/Fork.lean#L435"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "712ceb90c1c8dc45626335e5a5e513ed9b2bd721cfa1a9bf864e47ee2ca720b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "27e4b4580471e5542f54d8a2839f3c81d540f486c5b0adac62d63868a4b698c8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c619432707a668be4754021127ca06719fc6d0848e97aaeb75b915e2c52916a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f59947f2e417d84d8fa0b347b7442fd4c4214cf28d8198ee89c1a5fc6c9f0492"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "688b94e5a94f593c58edcee9629ba176f02fe2f78d54f80e5f3c71c31e5ef702"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryTracking/SeededOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      let x \u2190 (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "95662e9793f98bc703ae2eb48083abeea58a0f821e4cc2ef203ff15778d418d6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryTracking/SeededOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "83db22206cd25b249890d03b1e1c7b35e5cd9d4a3f7d64671968026bf9e153e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "3e2977636af8c4cdf98ce8bca149a07d9f8bf0513ea4cb05b869333df6363c18"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "6a3fb8dceb9f3b649e553cea80adb8f969dacd08d7aa79daf84b5c9d4345c0e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "59a34f50dd8e096c7258b9114cfe592d46f9797b7bdad39acd45a5b67ca31123"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "11d5ac846c2b330f0e8fa4162b453bfe21f5b4990ae414731307e93712575e89"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "054894bd214ef6ff718dd17221c535c6ed85f46168ee47cf2b9740307005b7bf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d : DecidableEq spec.QuerySeed\n\u22a2 finSupport (generateSeed spec qc js) \u2260 \u2205",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "cbc96af2f56ac240e8ceb7d8748009aff036f8df4d82237400a6becd7aab0525"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "ae1001e3623c20a5405dd5462d10e5796b092c6463642ea971b2075ce0f5214b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed \u2208 support (generateSeed spec qc js)\n\u22a2 [=seed|generateSeed spec qc js] = (\u2191(finSupport (generateSeed spec qc js)).card)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "bc7315ae6fa1eef4dfd05e317d23a56fcdf91990891e7bdefef82c825dcbb730"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "b3d925a01835bedf4afe1f2f55ad8e31bd938a6bee38cc6b17396d3db397e63d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "7fa8ffe50d68f98a4a7b04087e7fa5981551de7d4f74c5b6a268e195eee6c700"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2f99bd997c6b2576e4775e0c8103a8e1fe6adf5fa80c3d7f9cb48151ea1d6c64"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "413b9c1db0639ec2348a30906aaf1401bdeaa9b027d09cc42e6950adfd62c2ec"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a66e78fac6c30c0e7a99ed92c3d5a8b30eb06e082158f7b4101a2c38ff61c219"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "d612e0a4de2163d4a2125ed0763ccf1c07dbbd3bfceb136f04fd47da4bda9af1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "a4eef5eee7cd505049d00e7e7c9b9b7974c87a027bca8ba6528d178bf0efa515"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c1f26e966d882c57214106f06eca3fc6070590926984b59ec67129b0bd9ad90e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "8c058b60ba7ea8ae990f0e878c5bebd9e66b6ae2a74d7947867d67301fdb71c0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "68a8196f6c063a22fbd8aa4d5f9164a618ccb2fd7d1d7a47d5f753be79651df0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 303,
        "start_column": 4,
        "end_line": 303,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/DistSemantics/List.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "c61f0f7a1230681e8eb884dc09e6df77e93c68b7094d7b0cc3b9bd5980310f22"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "57c920922353569e3d1bcd57372abd9ac49353af171709fca7ad487fc09a5e19"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "405467e59cb4a1ea4324f3ad94e692818fb0594500ff8b2ade5beb2b24e98ba8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "2356e725e04cc1fbfd6016019f5cb484638bf54c2496167845d3f6783ba0f945"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "0d1b151256424e087c10cd6a39e46b8c63da45e120cb65d695afdbac443c9e11"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "570cc1a99199656cba58b29492a5b3de1ddb98804b237328eebe82f368182c26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "f1d96497869c853707c56b8b5c0cbef75bdf335186fb36603cb08112bbb4e7af"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "9bde54a4252dc1abe04b09b78e990c1fdd9cf2d482e42c1f29810d8d178951c1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "464ef9f36f85181dd8b8cbb1de6839588d884b2d62f887f2dedbc3b562addf54"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "3bba0a247c89666747497fbe3f1603024d60b544",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/3bba0a247c89666747497fbe3f1603024d60b544/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:20:58.291744+00:00"
      },
      "id": "fbbda320e0e4490c3c9e8d350641d03e678e576bca8ef874bdde4b2dedc957b9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b521175a10f7241d154d6e21bfeb5d218e9ba2571825bd4d008aae8287da02c6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b1210416d185fc86a58fa960d4a4f5b13808a9a6a34e928b09f98491e123b66d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c9a0eff34bfdc486d9b894336a0427071034c9da0e523cc874bcf72b7d72dbc9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "759b881a342c065fe4f4f3b630a2705a3557b432754bfd2aeccbd8e67071efce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "9593771f911a18e56ee841424e2dab9737f1ba2bc6cb57d81b9fda3f1c3a753e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "dfd6c6f127737dc833ddd318e8f4b22dd329ca088794e4cb209e020bff3bfdd5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:18:45-04:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "07445e03a223d2d2257c76f8655c6ba7094bd12bfc423fe6bee60751c8aa5b63"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "e5ae49fdadd634a92d2a67c50946de3995cd10d5780a936269bab80487648e10"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a50e8ab662053bfaaafa4a904c6063678d4b0617e0b467daca29e4cee009f35c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "7b5525fda45516893d8f41bc0eb53b6f3920c40ddef9585346fd9d406983f79b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u_1\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "96d0723dd5f3f37a12d285aa9fd3edaed53565385510b5d9df646d9bbf2756a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [fun x =>\n      match x with\n      | (x\u2081, x\u2082) => cf x\u2081 = some s \u2227 cf x\u2082 = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ecac5f817ee499679c284454c37c64e9693b2179d1c2398755b8821b68c7f4f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "264d7b4b5ec9679a41adf364641636d7c5edbf39fa52cca6f2096d769ba46cef"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] \u2265\n    [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "725acac07cc999fbb119078114e6e60234719f935cf5294967c97e7ceb18c9e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)] =\n    [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "61249e4e60957e885c687292bfa9bfcba093fb62519a7b641d52ea83fbfb3dd7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h \u2265\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c0d497af32a661c559c4c9a0c890ff7ba1cc31ffe657123592b57b009e5a98da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork' qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "08faaac70476f4e09e1cafe584c69abe7b189a63c025e107e6272fe014351635"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a77f440670c23823b3da6f49a28b3c07305168e3b905fd8f196be59daacb20e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "09a8109520c9b0bcc96c5681d9b0d64e2d0a17b40671bf959a6b52e60f1b2827"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "df7cdc06e0b7a0d4d2b131dc6de7d4ffaca789de4f1d3a3434fb3a92c1e0596a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "d952b728a7ad3141898d33769696a85a622c3576e55dd174e4ee5d3a6335625d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ae1109246077326a19672f784559e90ad1bba51d0cad06e720cf8b09b3d8acce"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork' qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "cd1157c5b3cba6d7139ac66725cb3a2eed8e2cfa1481688eeccd12ba3bfe4da2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c86317e50cd03e2233534bcb12f96ff07b3be5baec0bb1585e46d3e444739cc7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "7884c8de1338b0317c9309dacbbeadda3a76ca6f0fc5bda48ed9d46a7b862357"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c2163c982743fab32d74e90be3d38a9f42143109bf50e793fa9071eb58f27f65"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "bdddbc833433409f4449eb49859674ad17b2cfd321407be98bad6b39a22c8273"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "41aa623d8480ed28c9eb2e4655e3046551fccfd5c6bb778a7fe1bf741458a3d1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "2dc80265b7106b913001eb573c29c0aa9c1a48bc65a79ffbb35364948a3fa0bc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c396ed454ad67178e0d885e1db3f39f4f62fd77dbdbf90bf586b163abb7d4b92"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "baca9da13f9ff831c3f07ec05a7ff93418bdbc131d57817a452d02d3e606b7a0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "0e7d20f04b3e77b8333b33b2dd76da46bfd1729d6e094a1dd7ae247f320f9848"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c753ada5293f1d409225a2cd13e6ede5f089a64a5116c42c82b7be3d18514185"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a2ac2eb371d75ceafd50ed54992d1f87075f4e89017985d3287923f64f53e13e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "101e065b6ec0ad08ac152291c8ab4b5a3f2508210fc699f81bb1b48587dbdc60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "4bc4174c73defcfbdfbd1bfa40f38acfaba4ef548c4204ec3827f4a27fd9686f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "88b5d50d1dbf202a6aa4c2349fdb229ba5623ad795638e2d668c329d0554fb6f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "0333360592c255fa13e814831800a258b0956902f229410b5ac1a1f369c3ae36"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "259f0f1f75bc2ca58ac165f8050d19f64bb5d286b7ca1fbe6d993494069a2394"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "08d1c0bc44125572805737b92bffaeab3202e0aaef42513fda45a2c70da1d0c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "c7656b21fdceebcf49f1e5fe3ead4ee5c95d45ce8c5eaf08dcb1fd54c6038da1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "ca00ba0f64c280bac9fcb6d0bcb034fc419480deb33867baa06fa8011c232978"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "97df2c2813870f833b02f5d68f4dc872b3e860fdc9411f6c92760647a38584a5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "e997379989eb5d364c5a0b584c809ac6f902e673f2eec606a82cf7e148b1475c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "a33e808fd2e85ddd57d4cb1d727ee3b1d80427d3b7811e8bb339ab9dc5fe2952"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "67b2929d31224faf24729653e61d1823ceeea2b73a03b5de17cb7cdc345d2f5d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "b1db7422be13b685dccc9516e05d49d0a17a982be7fa01d69188c983ed54d469"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "13d6502d7b2315268ce45c06dffaa1c8f3e8605cbac38c357862d3c62a0cbfe8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "1dc26895be8c52f687d953388656641fb01a99ca27062157e56a7ec9f7c61ff9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "5edf89545fc18a638becead230211566beebb95a69cb73f74bba9ffc874e313f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "6ca960d4aace0716234dae4c507271ebffaf17508aabca222640fe58698a8680"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/7053f5bb9c3dfa0dcc47a444e1eda19f40f99ec2/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:26:43.768712+00:00"
      },
      "id": "511286fa625484351de10a705784cc81ae907b66770066655e213e60907dff80"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case pos.h\np \u03c7 m : \u2115\nv : Vector (Fin (2 * \u03c7 + 1)) m\nhne : NeZero p\nh : p > 2 * \u03c7\ni : Fin m\nn0 : \u00ac\u03c7 = 0\nhv : \u2191\u03c7 \u2264 v[\u2191i]\n\u22a2 \u2191(Fin.castLE h v[\u2191i] - \u2191\u03c7) \u2264 \u03c7",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-21T12:14:18-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "af80a21e62b0b3e540d50be733d073e623f86f48a5b1ab73dd44a9b9be76037d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 258,
        "start_column": 4,
        "end_line": 258,
        "end_column": 9,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case neg\np \u03c7 m : \u2115\nv : Vector (Fin (2 * \u03c7 + 1)) m\nhne : NeZero p\nh : p > 2 * \u03c7\ni : Fin m\nn0 : \u00ac\u03c7 = 0\nhv : \u00acv[i] \u2265 \u2191\u03c7\n\u22a2 Fin_Bound (Fin.castLE h v[\u2191i] - \u2191\u03c7) \u03c7",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L258"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-21T12:14:18-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5294bcdd3122d94509dc14a6b4fae0ebb0aac63658011079649f228428bd61e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 307,
        "start_column": 6,
        "end_line": 307,
        "end_column": 11,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case false.left\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m \u2192 Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n\u22a2 p / 4 \u2264 \u2191(-((Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e).get \u2b1d\u1d65 rv) - \u2191(p / 2))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L307"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d3a58ce2c2a141ad79acecbe79ad1e7b1db3135df08a358fb9eb3b4581d786fa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 308,
        "start_column": 6,
        "end_line": 308,
        "end_column": 11,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case false.right\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m \u2192 Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n\u22a2 \u2191(s.get \u2b1d\u1d65 A.mulVec rv -\n        (s.get \u2b1d\u1d65 A.mulVec rv + (Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e).get \u2b1d\u1d65 rv + \u2191(p / 2))) \u2264\n    3 * p / 4",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L308"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "77f52dc126d35dcb818f416a73b593271df203889f1553f4b76579a3aa7d3d67"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 309,
        "start_column": 4,
        "end_line": 309,
        "end_column": 9,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case true\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Fin m \u2192 Fin p\nh1 : (Vector.map (Fin.castLE hp2) r).get = rv\npne0 : NeZero p\n\u22a2 \u2191(-((Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e).get \u2b1d\u1d65 rv)) < p / 4 \u2228\n    3 * p / 4 < \u2191(-((Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e).get \u2b1d\u1d65 rv))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/Regev.lean#L309"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b4e53af90cf6a6b65733746a7bf8f07faa9f5e0322743458904e2850c359c6fd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d759ec3ff839fc8a444ccfb084ed4b8618b3ddabc0a28ca70fcf0069bfee0de5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "39e96ee559bd512b0fd1e98d97e877c34b8ed945d212706a9205aee0165374f4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2e5f4d4fdf95a34df1a6ec63cfdd9252e1e86fa3ff8d4fd13670c3b4e8304ba2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1029e755136c36fc60f6a8605f9240492251eadb85f099ed5b6f33f4748f00cb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7,
        "file": "Examples/HHS_Elgamal.lean"
      },
      "debug_info": {
        "goal": "G P : Type\ninst\u271d\u2075 : SelectableType G\ninst\u271d\u2074 : SelectableType P\ninst\u271d\u00b3 : AddCommGroup G\ninst\u271d\u00b2 : Group P\ninst\u271d\u00b9 : AddTorsor G P\ninst\u271d : DecidableEq P\nthis : \u2200 (msg x : P) (g\u2081 g\u2082 : G), msg * (g\u2082 +\u1d65 g\u2081 +\u1d65 x) / (g\u2081 +\u1d65 g\u2082 +\u1d65 x) = msg\n\u22a2 neverFails ((fun a => ()) <$> ($\u1d57G))",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/Examples/HHS_Elgamal.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "70331fb5e129cb4ed26d8b772794f8c84ebac31e4fd87b50cef3edd88aa1d07b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b793ad592d1c0730bdea9f2a61f70ddff185181f603cd4b0f128b4020cb64c60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "4c3ea9d3c5e10f7c9dfbb1a95f5ad0fbbc7076e7ebee3eb0361c7edf57b5a85a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 127,
        "start_column": 88,
        "end_line": 127,
        "end_column": 93,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM q).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L127"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c861879dd3bb3ea4bba88215c0c02907c71d01a12f78568d3fcfb0214d644d9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 60,
        "end_line": 132,
        "end_column": 65,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nq : spec.OracleQuery \u03b1\noa : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 (liftM q >>= oa).neverFails \u2194 \u2200 (x : \u03b1), (oa x).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Traversal.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "fc418150934fef5aae714deb4e466af256347a488f0fb9bb1ba3f18d7335aaa3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200 x \u2208 (snd <$> (simulateQ countingOracle oa).run <|> pure 0).support, x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "de8c1d3cfc1161aa30213e0db9c55767eea728312d255e1e5d00bd2e6fda1905"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "06ddd0929caa7062a5daf6d21a439a383a8237b1ede4d602b7a7bf8f839584e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "7578686b62856172d426796f32f6b616bcc4239331af31529e5b8871aa62e4db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u_1\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2c80a5c7b32d4cde94f63d5bcdb8b14b31c91ab55764b60ce4e284fe609e57c4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [fun x =>\n      match x with\n      | (x\u2081, x\u2082) => cf x\u2081 = some s \u2227 cf x\u2082 = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b2bc750909e3f4a80907f814b4c8a698d2ddad61f3067695264e2877a44f5089"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3e168a4968d1743db9071df284e576dd11d259e649847b33d95d378b428ec315"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] \u2265\n    [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3f335e23b703544a8f9403dae234e8cbbf0ce41e9a0168e599b36cfc47fced1d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)] =\n    [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5245d51fa99eb973409ec5292d6cf0d12ac0af4c56adeff99219d624b5470463"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h \u2265\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "d8523447162babfd3ad7e422546f518dab2221e361a2bb1240993c86c78befe2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork' qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b340ba5825ab41b1e77d199e30c86a38a61b03fa18b77337788568fe70e3c3e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a98773868c63dad1cbad70464c6593459c35b2b0320bda70cc63b3a99a671c62"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c8a64e5dfdfc9b94362a2217cc28c2e86b892507f235b563edae0169b4416459"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "4ad0620f9cf20f6c4b865f209d14e812d77ef9dbe2d7c37e27ad9bf6b3982ef8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "aff16cd1edac0f32071539208555910b64d1e3901a852afe7656813e92e827c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1f688c669cb8c48c075eeac9bb90b9e843a8ad16050120ccd8f8267015310cfc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork' qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2418ed1624a8e66ea2b20e2a208189b5da417d3f1328f297a639a7e16b9a80eb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "97aeb9e5c4f83493b4f02950445cec7ed251cc9fe39404edb3e076c797b7c069"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1ecdc368fb879dc5f9455150f5ab5f8965f82358d20d089cd022dfdb2b006688"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e81eb973d2c2a86334358f55b91d85a98e3bbbdf5f16fd56132fcc3243538b00"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "8ec06b9bbce6347774d93ae411ec1a518e1c5429e68888c844bd354da7e0636c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "86b879f150c6bd23b102c75a96a4a00b4ab2cf153063f645b6baeef69ea3aab6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e720bd17eb414a86cf6905c1c87b8bae59b0693cf14ed8847d0bc932860da084"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "051f33bc70f1e6bc7b1033155e091281621e1dde6e1192eedd19351abaaefd5f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case zero\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm : \u2115\ninst\u271d : SelectableType \u03b1\nx y : Matrix (Fin 0) (Fin m) \u03b1\n\u22a2 (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "2652d13923f1a4e9b6ced53cf8a7b744364064b900d9fffc12578ac4a805e159"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  \u2200 (x y : Matrix (Fin m) (Fin m\u271d) \u03b1),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m\u271d) \u03b1\n\u22a2 [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "c99abda0a6581a5fa036c1a6caec7b75366a612454a3477239b25fe7a6473191"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  [\u22a5|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n\u22a2 \u2200 (x : Vector \u03b1 m\u271d),\n    neverFails\n      (Fin.cons x.get <$>\n        Nat.rec (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            Fin.cons top.get <$> ihn)\n          m)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a5442637e769d45375677177aa33a5c0c9a62e22b78432a56805071b1db1588e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "9fad12416ef37ae5f038d8bd9ffcc90d15dfd965968cbe8935deab9143ec23e7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "88d748c02149ca3ce3c574b5c63a44b1a7efe860e9469f30f4aa26c081fe108d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "487b8988b357f9905c9281ddea459876481282a070b881092a9bddb178c8a092"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "68eb423f465b34c186603ce518ba94f494f285707d909cbd65dc22e480745d46"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e4a43a64a1013ca454545156396e0b9310780fd80675e5962dee3cec00b3876d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "9647b3f0e6c87c5dc74e1fa026fb8649ca25d4927b3e6da067a339b2aa3c9153"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "83b1d75861d2063b82bfd247c33dd757324c4a975befbe44412c960ad5007c28"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a81382801feb60b20183a20fa1d67be4ffbdb611d65cfa0ac53dd42db9ec9001"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "776e044513d87ff8267d39244c43887e211221a6c51d1230aaed3aa1d3cdb7b3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "72a71440c3574467c120dea728560e132c1e945a1586f3373a9f0daf765b7367"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3bc8d8e8df2418ff5ea7b2d5c861d2143e33dad9eafd729fb4ac7fe070f088b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "1cc0599c962dccab309df070738ef11b298fa1c2e71913b7f1fe11e2bab8b8bd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "5199d4a1695e2eb43c24ed755eb5df83417330cc01d5388637b527238b55225d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "e306d97df1423ac0f1293a4d45bccc631e70f35cea5600c8d1fb396be0e58720"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "acf49e57bc530a740c8172fd2fa9ec6e32c3b51ddd7d0ea49fc1c60256ac9b08"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "64c0c9800277d0ed008843f3eebda11300efc514d1b302e8a75fdfd3811c1444"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "35c7ac15b96645bd1b60dac3bcb6c94cdf8da00a9a320efe9dd81c679e041da5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "bc4585f1f67862be2be952da4feaffd9e7ea16bd3c858cedf937b02aea796c23"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3567bafe685954c8ea749d95239813d633ab904102161efdadd6baa77b6d9b63"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "a881ac9f2913e39de5e84e1e3682a127118174fee7b46d982bfb7e0c305622e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "3a19cd6b439041f17ec09580a61e4a96ef3414ec4926aa73268924813605cbbc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "f31e8e194392e0243fad7d88cfd9def487097ae8",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/f31e8e194392e0243fad7d88cfd9def487097ae8/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-22T03:30:31.902617+00:00"
      },
      "id": "b0344e5cea1d7a6315b3ab41113f2a8c03e74d3cb3976846b36922ea962c5d4d"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 37,
        "start_column": 64,
        "end_line": 37,
        "end_column": 69,
        "file": "BatteriesTest/lintsimp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d : Mul \u03b1\na x y : \u03b1\u1d50\u1d52\u1d56\n\u22a2 SemiconjBy a.unop y.unop x.unop \u2194 SemiconjBy a x y",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lintsimp.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "8a7dcd08b95f",
        "blame_date": "2022-12-18T15:51:52-05:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "fad15d300a3f6046664fe6934ff4f955311261103402fe05a7081f02cc9f2b55"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 7,
        "start_column": 2,
        "end_line": 7,
        "end_column": 7,
        "file": "BatteriesTest/lintunused.lean"
      },
      "debug_info": {
        "goal": "h : 1 = 1\n\u22a2 True",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lintunused.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-08T02:17:31+02:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "ce5d2f09f7f0ca5994740d3dec48da1a983bb4ad946d671132b63fcf458e7bf5"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 23,
        "start_column": 2,
        "end_line": 24,
        "end_column": 5,
        "file": "BatteriesTest/lint_unreachableTactic.lean"
      },
      "debug_info": {
        "goal": "\u22a2 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lint_unreachableTactic.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "3ff163f60db5f07cec68b6c10904be4f75c4dba100353cf27e9814851e79eee8"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "86bbec03f28444c38c342564467db39644ecad43",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 31,
        "start_column": 33,
        "end_line": 31,
        "end_column": 38,
        "file": "BatteriesTest/lint_unreachableTactic.lean"
      },
      "debug_info": {
        "goal": "aa : Nat\n\u22a2 aa = 0 \u2192 t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/86bbec03f28444c38c342564467db39644ecad43/BatteriesTest/lint_unreachableTactic.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-22T04:15:36.864217+00:00"
      },
      "id": "d4cdb8fb54c40434ee2115e05afbae83c4d3d5d22952a0e43f007443bb10e06b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36,
        "file": "Pdl/SemQuot.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a b : Formula\u2984, a \u2248 b \u2192 (~a) \u2248 (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2eb1f4f5b0d46887dbe591c2c24e1021b9dd7a7e50ebcc3382f21060f51d6a83"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37,
        "file": "Pdl/SemQuot.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a\u2081 a\u2082 : Formula\u2984, a\u2081 \u2248 a\u2082 \u2192 \u2200 \u2983b\u2081 b\u2082 : Formula\u2984, b\u2081 \u2248 b\u2082 \u2192 a\u2081\u22c0b\u2081 \u2248 a\u2082\u22c0b\u2082",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "b2dfcac6663f023bf2e51df32e14cb636ed87bc438a576d119787f4e5736a83d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 344,
        "start_column": 99,
        "end_line": 344,
        "end_column": 104,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nn : \u2115\nys : List.Vector \u03b1 n.succ\n\u22a2 ys.head = ys.get 0",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L344"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f09f3df4a3f3533b4de3d740b4ada74ec61110eda112a6569642a294865eaa6f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 380,
        "start_column": 12,
        "end_line": 380,
        "end_column": 17,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\nHist\u271d : History\nX\u271d : Sequent\na\u271d : Tableau Hist\u271d X\u271d\na : PathIn (tabAt PathIn.nil).snd.snd\n\u22a2 (PathIn.nil.append a).rewind 1 = PathIn.nil",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L380"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "a02b8c73bade425a256f0c17c83da4d67e9170c467636f275b2b4b01383fa490"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 384,
        "start_column": 4,
        "end_line": 384,
        "end_column": 9,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nHist0 : History\nX0 : Sequent\nnrep : \u00acrep Hist0 X0\nnbas : \u00acX0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf lt \u2192 Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y \u2208 endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\n\u22a2 \u00ac1 = Fin.last (List.length ((tail.append a).toHistory ++ [X0]))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "0f6776ba54cdfb52feed34fcda3058810dcacf35cd715839e9770ba79d9fa439"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 387,
        "start_column": 2,
        "end_line": 387,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nHist0 : History\nX0 : Sequent\nnrep : \u00acrep Hist0 X0\nnbas : \u00acX0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf lt \u2192 Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y \u2208 endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\nh : \u00ac1 = Fin.last (List.length (PathIn.loc Y_in (tail.append a)).toHistory)\n\u22a2 (tail.append a).rewind \u27e81, \u22ef\u27e9 = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L387"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "67ea8bd016c83b2fc80b12044c0b36f1fc40ab10a3e4de5807de30596156d90c"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 389,
        "start_column": 118,
        "end_line": 389,
        "end_column": 123,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nY : History\nZ X0 : Sequent\nnrep : \u00acrep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\n\u22a2 \u00ac1 = Fin.last (List.length (tail.append a).pdl.toHistory)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L389"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e4d2eda764455934a4a1becbfb9961ea06cd289a6d6e104d115fb8fbe0ee0532"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 392,
        "start_column": 2,
        "end_line": 392,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nY : History\nZ X0 : Sequent\nnrep : \u00acrep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\nh : \u00ac1 = Fin.last (List.length (tail.append a).pdl.toHistory)\n\u22a2 (tail.append a).rewind \u27e81, \u22ef\u27e9 = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L392"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "3e54535ce70293ca2a65eb321265ba24d8c34238fe2602221dbee9b12ef7bb03"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 464,
        "start_column": 15,
        "end_line": 464,
        "end_column": 20,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\n\u22a2 (b.rewind m).rewind \u21910 = b.rewind m",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "cbc890b2924f2b7103045caa85de6f4cad802f47ccf6a425091be8d212f7d6c8"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 465,
        "start_column": 20,
        "end_line": 465,
        "end_column": 25,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\nk : Fin (List.length b.toHistory)\nih : (b.rewind m).rewind \u2191\u2191k.castSucc = b.rewind (m + k.castSucc)\n\u22a2 (b.rewind m).rewind \u2191\u2191k.succ = b.rewind (m + k.succ)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L465"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "89f76e43ebeb97ad4e4260d83502df4c605e31328f27b31bc2ce40328511981e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 479,
        "start_column": 30,
        "end_line": 479,
        "end_column": 35,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h\na\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\na b\u271d c b : PathIn tab\na_c : Relation.TransGen edge a c\nc_b : c \u22d6_ b\nih : \u2203 k, c.rewind k = a\nk : Fin (List.length c.toHistory + 1)\nc_re_k_is_a : c.rewind k = a\nb_re_1_is_c : b.rewind 1 = c\nb_re_is_a : (b.rewind 1).rewind \u2191\u2191k = a\n\u22a2 b.rewind (\u2191\u2191k + 1) = (b.rewind 1).rewind \u2191\u2191k",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L479"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "5d5949551498af93931672702de5648c858e9a820928d594210a716bcd42be4a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 490,
        "start_column": 22,
        "end_line": 490,
        "end_column": 27,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.left\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na : PathIn tab\na_b : a \u22d6_ b\nb_re_1_is_a : (c.rewind k').rewind 1 = a\n\u22a2 c.rewind \u2191\u2191k'.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L490"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "caef7f0ed063e54119dcf7c3d2501b173886a7cb1a97952a261e182c234f7f58"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 495,
        "start_column": 24,
        "end_line": 495,
        "end_column": 29,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.right.right\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\na : PathIn tab\na_b : a \u22d6_ b\nb_re_1_is_a : b.rewind 1 = a\nk'_val : \u2115\nk'_hyp : k'_val < List.length c.toHistory + 1\nc_re_k'_is_b : c.rewind \u27e8k'_val, k'_hyp\u27e9 = b\n\u22a2 \u27e8k'_val, k'_hyp\u27e9 \u2264 \u2191(k'_val + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L495"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8fe46da029cf912882dd6f22b30f07bfdf128d47b0bb198bedf833906c444a6a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 502,
        "start_column": 29,
        "end_line": 502,
        "end_column": 34,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.left\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a \u22d6_ d\nd_b : Relation.TransGen edge d b\nih : \u2203 k k', c.rewind k = d \u2227 c.rewind k' = b \u2227 k' \u2264 k\nn n' : Fin (List.length c.toHistory + 1)\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' \u2264 n\nd_re_1_is_a : (c.rewind n).rewind 1 = a\n\u22a2 c.rewind \u2191\u2191n.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L502"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f2da169f12a90bac16b0cd9889226be339abf2d3d23f4794002a959fb1ea6fc3"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 506,
        "start_column": 31,
        "end_line": 506,
        "end_column": 36,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.right.right\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a \u22d6_ d\nd_b : Relation.TransGen edge d b\nn n' : Fin (List.length c.toHistory + 1)\nih : \u2203 k, c.rewind k = d \u2227 \u2203 x, c.rewind x = b \u2227 x \u2264 k\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' \u2264 n\n\u22a2 n' \u2264 \u2191(\u2191n + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L506"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4ea80749c19fc1d3fb381e92b44c78445104c8d96e1cbfab6a5b864571cef28e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 510,
        "start_column": 11,
        "end_line": 510,
        "end_column": 16,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nt : PathIn tab\nlpr : LoadedPathRepeat (tabAt t).fst (tabAt t).snd.fst\nh : (tabAt t).snd.snd = Tableau.lrep lpr\n\u22a2 \u2200 k \u2264 \u2191\u2191\u2191lpr, (nodeAt (t.rewind k)).isLoaded = true",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L510"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "c1b0141060c9cb1e3fd8cfd90ff44061761388586c9427380c16f6e92a2b0ede"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 532,
        "start_column": 77,
        "end_line": 532,
        "end_column": 82,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a : Sequent\ntab : Tableau [] a\nt l c : PathIn tab\nt_free : (nodeAt t).isFree = true\nt_above_l : t < l\nl_hearts_c : l \u2665 c\nlpr : LoadedPathRepeat (tabAt l).fst (tabAt l).snd.fst\ntabAt_l_def : (tabAt l).snd.snd = Tableau.lrep lpr\nc_def : c = companionOf l lpr tabAt_l_def\nhyp : \u00act < c\nc_above_l : c < l\ncomp_leq_t : c \u2264 t\ncomp_lt_t : c < t\nk k' : Fin (List.length l.toHistory + 1)\ndef_c : l.rewind k = c\ndef_t : l.rewind k' = t\nk'_lt_k : k' \u2264 k\n\u22a2 \u2191\u2191\u2191lpr = k",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L532"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4ad273f4309c97939dd61c8fc78d2f99499acaccbac787c59bcd8621a2fb2b45"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 833,
        "start_column": 10,
        "end_line": 833,
        "end_column": 15,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 sorry \u2208 endNodesOf (next (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u22ef)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L833"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8fc89ec685ce3a3f05ae2e48703a28c3b120e7d161085ff07e9e689acd824443"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 834,
        "start_column": 10,
        "end_line": 834,
        "end_column": 15,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 (M, v)\u22a8sorry \u2227\n    (sorry.isFree = true \u2228\n      \u2203 F \u03b3,\n        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side sorry \u2227\n          relateSeq M \u03b3 v w \u2227\n            (\u2200 f \u2208 F, evaluate M v f) \u2227\n              (F, \u03b3) \u2208 H \u03b1 \u2227 (sorry.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L834"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e3aff06fbf13bff66171729ab264586f3d872d22eb6ef2556618e2b4901171c0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 837,
        "start_column": 8,
        "end_line": 837,
        "end_column": 13,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203 Y,\n    (\u2203 l, (\u2203 a, \u2203 (h : a \u2208 B), endNodesOf (next a \u22ef) = l) \u2227 Y \u2208 l) \u2227\n      (M, v)\u22a8Y \u2227\n        (Y.isFree = true \u2228\n          \u2203 F \u03b3,\n            (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n              relateSeq M \u03b3 v w \u2227\n                (\u2200 f \u2208 F, evaluate M v f) \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L837"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "7c45da9f3544c38c02882922f28e16c56902ff5fcf9a7a864874330597700b26"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 841,
        "start_column": 6,
        "end_line": 841,
        "end_column": 11,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227 (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L841"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "d41057ab3c0bffc6baa57f8cc076038203a9243943fff3e7affd21f50010be2e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 965,
        "start_column": 2,
        "end_line": 965,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\n\u22a2 \u2203 s,\n    t \u25c3\u207a s \u2227\n      satisfiable (nodeAt s) \u2227\n        (\u00acs \u2261\u1d9c t \u2228 (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L965"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "81f9e8e4ed12782c0b53cc60ac8f11717c13d026f5811f837f38100b8762b2a6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1143,
        "start_column": 16,
        "end_line": 1143,
        "end_column": 21,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : t \u25c3\u207a sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : \u2115\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u00b7a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : M.Rel a\u271d v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u00b7a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : \u03b4[\u2191k] = \u00b7a\u271d\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1143"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "a3763bd90f3c4f0aa9c1e075b527bcc1776e6e0c0a1ae97f6e13b07c1de8e559"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1147,
        "start_column": 16,
        "end_line": 1147,
        "end_column": 21,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : t \u25c3\u207a sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : Relation.ReflTransGen (relate M a\u271d) v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram \u03b4[\u2191k] \u2264 1 + lengthOfProgram a\u271d\n\u22a2 lengthOfProgram \u03b4[\u2191k] < 1 + lengthOfProgram a\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1147"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "9927bc3e61bd5ed0f338ee59caccd85921241b8affaeb8dd11bec26d5cbcbda6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1485,
        "start_column": 6,
        "end_line": 1485,
        "end_column": 11,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\nIH :\n  t = s \u2192\n    \u2203 s_1,\n      s \u25c3\u207a s_1 \u2227\n        (satisfiable (nodeAt s_1) \u2227 \u00acs_1 \u2261\u1d9c s \u2228\n          (~''\u03be).in_side side (nodeAt s_1) \u2227 (M, w)\u22a8nodeAt s_1 \u2227 ((nodeAt s_1).without (~''\u03be)).isFree = true)\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.lrep lpr\u27e9\u27e9\n\u22a2 (tabAt t).snd.snd = Tableau.lrep (\u22ef \u25b8 lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/Soundness.lean#L1485"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "b2f35a29ae272387a60e9c12c5bd78d7b32397cb37a10f45029d380bc4bf0345"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (p next : Sequent \u2295 Sequent \u00d7 Formula \u00d7 Rule), next \u2208 sorry p \u2192 sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e30a965cf401eb1028ac5b1fb8997193d7d37018dd5c9bb09c819983e3cc58d6"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Prover\nh : winning (Sum.inl X) s\n\u22a2 Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "59892c331bd01cfd235b15fa9269bb702cec9e28e7ca37b09491a50d8b533f28"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Builder\nh : winning (Sum.inl X) s\n\u22a2 \u2203 WS mg, X.toFinset \u2208 WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "61c7dfb82a42f1f366ce20164c288f3a3eb2f785e71f33aca2ba9a1bcba8b7da"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\n\u03c4 : Formula\n\u03c4_in : \u03c4 \u2208 testsOfProgram \u03b1\n\u03c8_in : (~\u03c4) \u2208 L\nx_in_voc_\u03c8 : x \u2208 \u03c4.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1a16853574c0e1389689b0c0374a730b619a6c9afc41e84b788fff2055198a42"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\na : \u2115\n\u03b4 : List Program\n\u03c8_in : (\u2308\u00b7a\u2309\u2308\u2308\u03b4\u2309\u2309\u03c6) \u2208 L\nright\u271d : \u00b7a \u2208 subprograms \u03b1 \u2227 \u2200 a \u2208 \u03b4, a \u2208 subprograms \u03b1\nx_in_voc_\u03c8 : x = Sum.inr a \u2228 x \u2208 \u03b4.pvoc \u222a \u03c6.voc\n\u22a2 x \u2208 \u03b1.voc \u2228 x \u2208 \u03c6.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "8c02b15417d4a37888580c91065d5571ba92a9d9f306db59ed2c1100e56474d2"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nFs : List Formula\n\u03b4 : List Program\nin_H : (Fs, \u03b4) \u2208 H \u03b1\nthis : \u2200 (\u03b1 : Program) {Fs : List Formula} {\u03b4 : List Program}, (Fs, \u03b4) \u2208 H \u03b1 \u2192 \u03b4 = [] \u2228 \u2203 a \u03b4', \u03b4 = \u00b7a :: \u03b4'\n\u03b1' : Program\n\u03b1'_in : \u03b1' \u2208 \u03b4\nx_in : x \u2208 \u03b1'.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1f7887a7ba8fd6e935a44fde9f08c54839cd8807713ea7dfc96f720d19a7112d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : \u2115 \u2295 \u2115\nress : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7 : LoadFormula\nlrule : LoadRule (~'\u03c7) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) \u2208 ress\n\u03c6 : Formula\n\u03c6_in_L : \u03c6 \u2208 L\nbla : x \u2208 \u03c6.voc\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2f67f0c83af93f117e68b68a6d9654afea689965a78d23a9a599275dd119ce54"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.1.fvoc \u2286 Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "e8e3f108eef90eeb184755549356b0f73a5a9c6260ae089b20dd83a062c86744"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.2.voc \u2286 Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "beda03ebbb337d47d56c7affe0efe5b2a6b35dcad867d8a2187f88d35ce44e2b"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L \u2227 Rcond.Subperm R \u2227 Ocond \u2286 O\ncL cR : List Formula\ncO : Olf\nx : \u2115 \u2295 \u2115\nx_in_voc_C :\n  (x \u2208 Vocab.fromList (List.map Formula.voc cL) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc cO.toForms)) \u2227\n    (x \u2208 Vocab.fromList (List.map Formula.voc cR) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc cO.toForms))\nthis : \u2200 res \u2208 ress, res.1.fvoc \u2286 Lcond.fvoc\nC_in : (cL, cR, cO) \u2208 applyLocalRule lrule (L, R, O)\n\u22a2 x \u2208 jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "044738aad1cad1d72bab8ea33683b8ea3d840fe795c80ceb2227dc209c8ed6b4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nL_and_n\u03b8_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "2e4cefd4a86039f9b10c90587298f8c8e5d99a7080dd92612bf47e7797ba1965"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nR_and_\u03b8_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "f88b9bad6db0a65e5b0c6dd5f76d1de8b4bb5df2a6a7b55f5c50c30c3b7c68cd"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nL_and_n\u03b8_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "889557d15eb5a5f2d6cb022a223bad71c7dab516cbc30ae1462714f49b6e54a1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nR_and_\u03b8_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "4269b0f1ecae19445160d255c776e287efe72c0e09da2d9bb0dc934a80a75b10"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7,
        "file": "Pdl/TableauExamples.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308\u2217a\u2309~\u2308a\u2309p)\u22c0(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "1bc471d2a3c8fd428d044fb82a40f15f692f1163edc09e129246b2131fa21e8a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "11bfeb236c92a1f42bb288b737242a4257971f78",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7,
        "file": "Pdl/TableauExamples.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308a\u2309\u2308\u2217a\u2309p)\u22c0(~\u2308a\u2309\u2308\u2217a\u2309q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/11bfeb236c92a1f42bb288b737242a4257971f78/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-22T04:27:59.747739+00:00"
      },
      "id": "458d78feeb071e03f1374427eafe699fc50756ba31558c703318b3337fc40a56"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "Clean/Examples/Add32LawfulCircuit.lean"
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : \u2115\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n\u22a2 (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) \u2227\n    (True \u2192 env.get (i0 + 1) = 0 \u2228 env.get (i0 + 1) = 1) \u2227\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 \u2227\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n          (True \u2192 env.get (i0 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1) = 1) \u2227\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 \u2227\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                (True \u2192 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 \u2227\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                      (True \u2192\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Examples/Add32LawfulCircuit.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "6ec9da772fad80566ff1f014d301a32759843a78d4d5adf775914464ce663742"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 65,
        "start_column": 18,
        "end_line": 65,
        "end_column": 23,
        "file": "Clean/Gadgets/Rotation64/Rotation64.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n\u22a2 Soundness (F p) assumptions (spec off)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Rotation64/Rotation64.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-01T17:43:17+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "f61fe6bdef37c610032e5497845579abfa0c4a975398c88c7e5dfdf814859601"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 21,
        "end_line": 66,
        "end_column": 26,
        "file": "Clean/Gadgets/Rotation64/Rotation64.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n\u22a2 Completeness (F p) U64 assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Rotation64/Rotation64.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-02-27T17:02:29+01:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "b793bbdc2299fb8ad97fcdddd9201d6f29cad9ebe681454fbb8ea91e8106d678"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaD.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[\u21914]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 16))).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 48))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[\u21913])) \u2227\n            (eval env state_var[1]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 80))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[\u21914])) \u2227\n        (eval env state_var[2]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 112))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[\u21913]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaD.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "548cd88bbe76aa22401be64ebdbb5051b01b9ec2ad67477579247de82ffeac27"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaXor.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b9 : Fact (Nat.Prime p)\ninst\u271d : Fact (p > 512)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var Inputs (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : Inputs (F p)\nh_assumptions : assumptions state\nh_input : { state := eval env state_var.state, d := eval env state_var.d } = state\n\u22a2 (((((((((((((((((((((((((eval env state_var.state[0]).is_normalized \u2227 (eval env state_var.d[0]).is_normalized) \u2227\n                                                  (eval env state_var.state[1]).is_normalized \u2227\n                                                    (eval env state_var.d[0]).is_normalized) \u2227\n                                                (eval env state_var.state[2]).is_normalized \u2227\n                                                  (eval env state_var.d[0]).is_normalized) \u2227\n                                              (eval env state_var.state[\u21913]).is_normalized \u2227\n                                                (eval env state_var.d[0]).is_normalized) \u2227\n                                            (eval env state_var.state[\u21914]).is_normalized \u2227\n                                              (eval env state_var.d[0]).is_normalized) \u2227\n                                          (eval env state_var.state[\u21915]).is_normalized \u2227\n                                            (eval env state_var.d[1]).is_normalized) \u2227\n                                        (eval env state_var.state[\u21916]).is_normalized \u2227\n                                          (eval env state_var.d[1]).is_normalized) \u2227\n                                      (eval env state_var.state[\u21917]).is_normalized \u2227\n                                        (eval env state_var.d[1]).is_normalized) \u2227\n                                    (eval env state_var.state[\u21918]).is_normalized \u2227\n                                      (eval env state_var.d[1]).is_normalized) \u2227\n                                  (eval env state_var.state[\u21919]).is_normalized \u2227\n                                    (eval env state_var.d[1]).is_normalized) \u2227\n                                (eval env state_var.state[\u219110]).is_normalized \u2227\n                                  (eval env state_var.d[2]).is_normalized) \u2227\n                              (eval env state_var.state[\u219111]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                            (eval env state_var.state[\u219112]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                          (eval env state_var.state[\u219113]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                        (eval env state_var.state[\u219114]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                      (eval env state_var.state[\u219115]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                    (eval env state_var.state[\u219116]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                  (eval env state_var.state[\u219117]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                (eval env state_var.state[\u219118]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n              (eval env state_var.state[\u219119]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n            (eval env state_var.state[\u219120]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n          (eval env state_var.state[\u219121]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n        (eval env state_var.state[\u219122]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n      (eval env state_var.state[\u219123]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n    (eval env state_var.state[\u219124]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaXor.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T16:27:02+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "1bdcdd008daf8da2529448af21e4c551e8408c741910c34999b888a8e84d7885"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "c58021b279da4f8f4f3a33ad5abc41d0eb860731",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaC.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b9 : Fact (Nat.Prime p)\ninst\u271d : Fact (p > 512)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env : env.uses_local_witnesses_completeness ((theta_c state_var).operations i0)\nstate : KeccakState (F p)\nh_assumptions : \u2200 (i : Fin 25), state[i].is_normalized\nh_input : Vector.map (eval env) state_var = state\ns : \u2200 (i : Fin 25), (eval env state_var[\u2191i]).is_normalized = True\n\u22a2 ((((((((((((((eval env (var_from_offset U64 i0)).is_normalized \u2227\n                              (eval env (var_from_offset U64 (i0 + 8))).is_normalized) \u2227\n                            (eval env (var_from_offset U64 (i0 + 16))).is_normalized) \u2227\n                          (eval env (var_from_offset U64 (i0 + 32))).is_normalized) \u2227\n                        (eval env (var_from_offset U64 (i0 + 40))).is_normalized) \u2227\n                      (eval env (var_from_offset U64 (i0 + 48))).is_normalized) \u2227\n                    (eval env (var_from_offset U64 (i0 + 64))).is_normalized) \u2227\n                  (eval env (var_from_offset U64 (i0 + 72))).is_normalized) \u2227\n                (eval env (var_from_offset U64 (i0 + 80))).is_normalized) \u2227\n              (eval env (var_from_offset U64 (i0 + 96))).is_normalized) \u2227\n            (eval env (var_from_offset U64 (i0 + 104))).is_normalized) \u2227\n          (eval env (var_from_offset U64 (i0 + 112))).is_normalized) \u2227\n        (eval env (var_from_offset U64 (i0 + 128))).is_normalized) \u2227\n      (eval env (var_from_offset U64 (i0 + 136))).is_normalized) \u2227\n    (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/c58021b279da4f8f4f3a33ad5abc41d0eb860731/Clean/Gadgets/Keccak/ThetaC.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-03T17:31:42+02:00",
        "inclusion_date": "2025-04-22T04:41:23.368628+00:00"
      },
      "id": "1cc1a51d335fc9901192033089f368517f40bfedbbb1eab49bcad52de58dbdb9"
    },
    {
      "repo": {
        "remote": "https://github.com/Deducteam/lean2dk",
        "branch": "module-output",
        "commit": "c489425d61a930194a1aafdb4fc1487ead07b118",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 21,
        "start_column": 2,
        "end_line": 21,
        "end_column": 7,
        "file": "fixtures/Temp.lean"
      },
      "debug_info": {
        "goal": "A : Type u\nU V : A \u2192 Type v\nhAUBV : ((a : A) \u2192 U a) = ((a : A) \u2192 V a)\n\u22a2 U = V",
        "url": "https://github.com/Deducteam/lean2dk/blob/c489425d61a930194a1aafdb4fc1487ead07b118/fixtures/Temp.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "3dade9baec16",
        "blame_date": "2024-05-02T19:15:48+02:00",
        "inclusion_date": "2025-04-23T03:00:55.107492+00:00"
      },
      "id": "24ee8953c7f8ddc974cc35ec19033c1b9b44004d9a11dc9754ce16403658ea55"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "e6b03e9a1ea88017a3eb2841df5c36a97d741584d3e92416fde8438b296d34cb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "7686aa6cd3c03bb8d0ad23b098f4a2afcb491b24169fdd36d4c10597d93077a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "86ba38664f3f4fa44f60982b6de8c6532af202bf3c2ae5686ed4d67d96cc300a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "618985386d468d0eb597c55ecd2ee50c7fee9cf05c6769e9ce35cd685ecad483"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 83,
        "start_column": 4,
        "end_line": 83,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Traversal.lean#L83"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "aecb058722e10ee568a33f3465519c23273ae1bcac0fc3a6dd133b416163fa1e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 117,
        "start_column": 36,
        "end_line": 117,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Traversal.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "b39edab4d2d7bd9c27873abfbd799e1bc7836778134115ca8ea59dd3523fa759"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "0f71a88d2b6e5541935cf1773df6c5b7ca2f08bd6f12efd095b1076c17cd65fb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f4ae0b116a385038259714bd8324a841d6c85e8131aa68fbc0ac145fbb651577"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "fdd10dd8d590951c0956dceee2077f47359cfe9ac317e3c8d098d40859bd0ed2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 39,
        "start_column": 2,
        "end_line": 39,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "e8e2adc083a44dc14de7ce8ba5baf74b9949f4abdda429d184e2ac8a4e195209"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 44,
        "start_column": 2,
        "end_line": 44,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nh : \u2200 (x : \u03b1), [=y|ob\u2081 x] = [=y|ob\u2082 x]\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L44"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "659f2a83b2ab78da914a97d0749c93e99b8d616d98108cfe07422fd4cf02a7a2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 50,
        "start_column": 2,
        "end_line": 50,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\ny : \u03b2\nz : \u03b3\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z|oc x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "59b922e7c8df5577b131a5fcd48440e6ef4f6e10379756451e267a2239987a78"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 56,
        "start_column": 2,
        "end_line": 56,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob\u2081 ob\u2082 : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\nr : \u211d\u22650\u221e\nh : \u2200 x \u2208 oa.support, [=y|ob\u2081 x] = [=y|ob\u2082 x] / r\n\u22a2 [=y|oa >>= ob\u2081] = [=y|oa >>= ob\u2082] / r",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L56"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "5cb20691119a6cfcd554df6265169c3437e5036975f8cfd2656333a834e30170"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "cecb892de6268a35c3dd0bfafdb01c094212bea6539dcc25ef8a020db459db2e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 2,
        "end_line": 84,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] + [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] + [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "378e7a5f689a029a63774b442206eb1196288603337271218d822ccb17b67fbd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 2,
        "end_line": 92,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=y|ob x] \u2264 [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x]\n\u22a2 [=y|oa >>= ob] \u2264 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "d3ec865fe2dcaee1170d4d57e2a4e83e17416213cafd79f7c89636a66406da7f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type v\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type u\ninst\u271d : spec.FiniteRange\n\u03b3\u2081 \u03b3\u2082 : Type u\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc\u2081 : \u03b1 \u2192 OracleComp spec \u03b3\u2081\noc\u2082 : \u03b1 \u2192 OracleComp spec \u03b3\u2082\ny : \u03b2\nz\u2081 : \u03b3\u2081\nz\u2082 : \u03b3\u2082\nh : \u2200 x \u2208 oa.support, [=z\u2081|oc\u2081 x] - [=z\u2082|oc\u2082 x] \u2264 [=y|ob x]\n\u22a2 [=z\u2081|oa >>= oc\u2081] - [=z\u2082|oa >>= oc\u2082] \u2264 [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f8e77ea852da1383dac9a3768a1a57267f11c83d1f869cdedff5c65071786273"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=z.1|oa] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "d47ffd5fc77bdd52a24cac8031eafe4c81e3914b88be8841241d5473de245850"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nx : \u03b1\ny : \u03b2\n\u22a2 [=(x, y)|(fun x1 x2 => (x1, x2)) <$> oa <*> ob] = [=x|oa] * [=y|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "176b772f347d4b69c6d57da896af46968cdd044cf9b00ecfad65e9119684283d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 120,
        "start_column": 2,
        "end_line": 120,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L120"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "29c6aa662cc693bdf6744f7c03215dec79a32800865c2d63bd7b3624dd6d0cb9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 2,
        "end_line": 126,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|(fun x1 x2 => (f x1, g x2)) <$> oa <*> ob] = [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "34523be2e92d872b37eca7c51fa5395da11a4344d5f7008517a46cd747376813"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 2,
        "end_line": 132,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nz : \u03b3 \u00d7 \u03b4\n\u22a2 [=z|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=z.1|f <$> oa] * [=z.2|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "cb523e7f925950102e8405332927cee7dff01479ec7db13d41b5a77f662e63c5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 139,
        "start_column": 2,
        "end_line": 139,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 \u03b4 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : OracleComp spec \u03b2\nf : \u03b1 \u2192 \u03b3\ng : \u03b2 \u2192 \u03b4\nx : \u03b3\ny : \u03b4\n\u22a2 [=(x, y)|do\n      let x \u2190 oa\n      let y \u2190 ob\n      pure (f x, g y)] =\n    [=x|f <$> oa] * [=y|g <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "a8b69aa0f42e8b1936cb56e08dbb074cf98481f4c34011b220cbc5dce534194f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "ecc5d7a4a5087a49fdcc25c24118a0d448de37688ab7d5900fd9e9cf8310b5da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 159,
        "start_column": 2,
        "end_line": 159,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ny : \u03b2\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (x, y)) <$> oa] = [=z.1|oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L159"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "60fa5bc0e39f10116df2425a32c35de26de18cb39ed64f27e97e5a44b32287ca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nx : \u03b1\nz : \u03b1 \u00d7 \u03b2\n\u22a2 [=z|(fun x_1 => (x, x_1)) <$> ob] = [=z.1|pure x] * [=z.2|ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "fac8f12500e7669d213352070cf918f470f6170b7a19bf0f8a79104ca4620ec1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b3\ny : \u03b2\nz : \u03b3 \u00d7 \u03b2\n\u22a2 [=z|(fun x => (f x, y)) <$> oa] = [=z.1|f <$> oa] * [=z.2|pure y]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "2d2c1057ee4dcc5f375a338e405f5bbfdec186e2cf31f812a0353e38d73fab33"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 176,
        "start_column": 2,
        "end_line": 176,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 \u03b3 : Type v\ninst\u271d : spec.FiniteRange\nob : OracleComp spec \u03b2\nf : \u03b2 \u2192 \u03b3\nx : \u03b1\nz : \u03b1 \u00d7 \u03b3\n\u22a2 [=z|(fun x_1 => (x, f x_1)) <$> ob] = [=z.1|pure x] * [=z.2|f <$> ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L176"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "fe851569705d051b9012e7bb421fce3e6b61abfaef5b17775e92d435f0fb8b14"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 232,
        "start_column": 2,
        "end_line": 232,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> main.fork qb js i cf).support = (fun s => (s, s)) '' (cf <$> main).support",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "3e2bac3895a24a97e95eb5497f22692c388c0deefbaa7547e0c762d5291d7a5b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 236,
        "start_column": 2,
        "end_line": 236,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\n\u22a2 (Prod.map cf cf <$> main.fork qb js i cf).finSupport = Finset.image (fun s => (s, s)) (cf <$> main).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L236"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "41bc0c0b5b50f00399011570c8e95455ebddbc2c55da4bb90f26dc093783c4f2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 240,
        "start_column": 2,
        "end_line": 240,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork qb js i cf).support\n\u22a2 cf x\u2081 = cf x\u2082",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L240"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "8ecf8eebdad441b04b9ab3bbb1364c4b72214a7943d28cf3f83a1c30a5429e61"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 244,
        "start_column": 2,
        "end_line": 244,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(none, s)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L244"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "e1a3b12afdbcb9f382b637b12fa3a1fa08508c493714e3d80464f0f5266525c0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 248,
        "start_column": 2,
        "end_line": 248,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Option (Fin (qb i + 1))\n\u22a2 [=(s, none)|Prod.map cf cf <$> main.fork qb js i cf] = 0",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "a0cb64447148ecf9ddbacdecba21e6f4ca10f68d8f64641d6b584f93f4b7744c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 259,
        "start_column": 2,
        "end_line": 259,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L259"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "a6806fcde61c1fd97f1a264e9c09a7fb525d4ae9480975e1f69c097cf5a380c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 362,
        "start_column": 10,
        "end_line": 362,
        "end_column": 15,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "case e_a\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] =\n    [=(some s, some s)|do\n      let shared_seed \u2190 liftM (generateSeed spec (update qb i \u2191s) js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n      let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L362"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "9e51a981514a3560ebc38f53f8dcd07d350b528d3fe1576658fd9dc480927fba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 364,
        "start_column": 53,
        "end_line": 364,
        "end_column": 58,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nthis\u271d : DecidableEq \u03b1\nthis : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nhseed : seed \u2208 (liftM (generateSeed spec qb js)).support\n\u22a2 \u2191(s + 1) < (seed i).length",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L364"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T02:23:11-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "17a78cc88338d25ea51519d3698bee930190b740546d6e04b6e769b0bd2b07db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 464,
        "start_column": 6,
        "end_line": 464,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 \u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h \u2264\n    \u2211 s, ([=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "165cc55f949501e6d769c1e2d593e142618a11d86e9d0921fbace5a6353f8286"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 466,
        "start_column": 6,
        "end_line": 466,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=some s|cf <$> main] ^ 2 - \u2211 s, [=some s|cf <$> main] / h) =\n    1 - \u2211 s, [=some s|cf <$> main] ^ 2 + \u2211 s, [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L466"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "d32b9ffdae32cfae2e5d1a18eb9a3eed4c193d378dd2a6f71301245196df1e1a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 486,
        "start_column": 8,
        "end_line": 486,
        "end_column": 13,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := \u2211 s, [=some s|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 acc * h\u207b\u00b9 + (1 - acc ^ 2 * (\u2191q)\u207b\u00b9) = 1 - (acc ^ 2 * (\u2191q)\u207b\u00b9 - acc * h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/Fork.lean#L486"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "6b1009e745b6c7c1bde2727d9a4963ad185fffef3e0a26190b37b7c6d8dc37b6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "275120196218ca161f90c08aba520048788c34f4791209384ca31a8b59bbeeb1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f50645f2ede54ddb78403d4024c825d5d07e47cf7f154254637bfb7038945f94"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "dd590514568d76eb53d57908a3e4ed1271ef14655b21badabd881f9ba79a806d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "a58976bcb6cee5fd69fc3f508fa852a7df1c0c0c253822f618242473ba82cec5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 74,
        "start_column": 2,
        "end_line": 74,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryTracking/SeededOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      let x \u2190 (simulateQ seededOracle oa).run seed\n      ob x] =\n    [=y|oa >>= ob]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L74"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "3ad59f06cd97be2f9ac3dce345ff11050814ff38597e641ca8b8f654f23c7459"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryTracking/SeededOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\ninst\u271d : spec.FiniteRange\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\ny : \u03b2\n\u22a2 [=y|do\n      let seed \u2190 liftComp (generateSeed spec qc js) spec\n      f <$> (simulateQ seededOracle oa).run seed] =\n    [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryTracking/SeededOracle.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-16T12:40:27-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "b1066c8374af9cb8dcc1985b6835d08b1a17d9e5ca3e0426b63ddc99b458e598"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f4622d1aec2dc4c748f8a79da37e45397468611d88a094412779d92fcb3410a1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "048803923c68b8f5fd37c8369b2cf41c7f56acca31901e65434f55038f268ee2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "ac06d3443945f92dce14ee886df070cae22243f869e11d5f8f41dabf18e10dff"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "97aa051d8e2fc4c9d7a7e771b0d711210ea83630e2e2fb963beb24602a4acd26"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f5fa788823da7bfb1769ccb0d02e1685b498973f3e9f11fbbea3c64038767b56"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 117,
        "start_column": 2,
        "end_line": 117,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d : DecidableEq spec.QuerySeed\n\u22a2 finSupport (generateSeed spec qc js) \u2260 \u2205",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "b228fc238d148d789a994826e7590dc08f1a9177533dd2a920dde43178aea1bc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 4,
        "end_line": 134,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "878ef450387448930021976f0d6f6869f55472f1ee2bcb0cd36c0dbe5d2458c7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 141,
        "start_column": 2,
        "end_line": 141,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b2 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : DecidableEq spec.QuerySeed\nseed : spec.QuerySeed\nh : seed \u2208 support (generateSeed spec qc js)\n\u22a2 [=seed|generateSeed spec qc js] = (\u2191(finSupport (generateSeed spec qc js)).card)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/Constructions/GenerateSeed.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "8e96c33f3943a188e16aa73dc351f2ea0709f0d5902a5ead8f913ffb30671ae6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 233,
        "start_column": 2,
        "end_line": 233,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d\u00b9 : spec.FiniteRange\ninst\u271d : Fintype \u03b2\noa : OracleComp spec \u03b1\nf : \u03b1 \u2192 \u03b2\n\u22a2 [\u22a5|oa] = 1 - \u2211 y, [=y|f <$> oa]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L233"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-22T10:26:40-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "ac4a5074ceec8edf47a0a9a817bbb38b5433e5107f1bd8abdaefb12d245a580f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 725,
        "start_column": 83,
        "end_line": 725,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "39afbde7bdb5e4286ce0cdb02e3ccb01c2232275a72757a6a2a567d10045c471"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 731,
        "start_column": 73,
        "end_line": 731,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L731"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "4738335beb4b0c90d08ac806d63e307278cc6d8de1131e2bee4ca6efb55586e9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 69,
        "end_line": 736,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "5623c4485b75327953256efec6672f40ca3b1b10173309d6bddcd53f6e3dda0c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 740,
        "start_column": 59,
        "end_line": 740,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L740"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "8d6e4902aaca4fdea14705812817c7aae3a212abdcfed4f2e2747147d375d8d5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 932,
        "start_column": 2,
        "end_line": 932,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L932"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "c679b9edecf8a891b19fe060dc4ee919f2e196ad3849243ffe2acf8eb2089aa1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 940,
        "start_column": 2,
        "end_line": 940,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/EvalDist.lean#L940"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "71c05dad055be141c26d333f248d31cdfb286d36b59fb657fa5ce74a8f00b735"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "73bf5e74c51b6e08ab4dd535a5af6aa09ef72d55cce0142e59ec0823fe7d28e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "de8c552c87297e6e0b66f3706ef560b549fdbc8e6894960cf81fc7529d0311d4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "f681cbe64848d10909389d477bda5209969535850850972afddaf288542f856d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "bf02304d67e9873a7ab6d021dd3db74bdd7b8cf285c4c62443d16b80bede8da9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 303,
        "start_column": 4,
        "end_line": 303,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/DistSemantics/List.lean#L303"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-21T04:51:25-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "ca29bbb36df413400c19bd3a7eadbe4709b728f9968497aebd9ac2792bf47728"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "7e0adb2e379cbb4aba288d4655e8cb194517205975a0c67337616fce4b2e19e6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "0cf06351a45949dc61558816cde0e97c1c70538ec686c86de60d275b60fb75af"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "90f44e33b7b4755be51a42b4efca30c273059916c25bda53de2bedf29c02aa2b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "76f02a76b0e59aa3a19494b5a6d73fef262a33702ef8e53cc4f32b830eeedcde"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "19e3fc9bd5817961529b0d74c2345783e3fa49bb462916ab97d4acc2df3a0325"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "18bb3ddba781644dd3a9aff290e150af753a2be8f92f6a66a3007b4ebff361b1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "8f302fdde91e9b2f8d2c090264981fbd7d776ce58f5f96fba829221b5c51ff73"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "4b0534e596512e78757d367ff9737d91a3e764bedd4dc5dc683a6755aa2fb316"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "fixes",
        "commit": "9e88366b81972fef726d1a51ae4cd3f103bbd203",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/9e88366b81972fef726d1a51ae4cd3f103bbd203/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:07:19.714126+00:00"
      },
      "id": "d2072712f67632fdb2c7871fe2282db3eafb44fc806b0e11952c236216769f59"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "d803812ef88c8468b5923baeb72811ba9e4ce853037bb25f4c69c05a54e0e579"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "45b1dc2b02f67aefcbc932dec258a4837dd97c0d34378506f40c5efe98c83829"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "36e171c460dc3c767125269c5a7ad9bb153208d0bb2e5be681f0ce4c4efe30a4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "ff39eb1413e18535b06933e76cffda7eb4089f889947b3f55fe76355d850b821"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "9f235152aadec330def84617bf52a83056fd66466e58eb6e4ab8fd6aa45d7ab7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "d3679d609b17b286a4b35ec7b732f8845f26651f2dc6960c3fc1e636b5a49ec3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:30:34-04:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "c77d54a68a74cfef9bc96070e5fed88c41a2fa1a701b51be78cd2bd04bc65b0e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "e212732c9b97c513911f66a76b7fc775aec6869eb5ce8cb40af551e9e10579e2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "efdf3e512c5adf97ae27cc2e9702dc1c0865ef9ad9eceef4d7652f8b95d2b7db"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "39f6747ea88e28c471d90b5434e0e4655463a2689ec6b6fa4a9be5e34d9fde59"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u_1\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "a7c051e63def742c0658d661f071828cf540bc327bf350541ec607ffdda9eff9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [fun x =>\n      match x with\n      | (x\u2081, x\u2082) => cf x\u2081 = some s \u2227 cf x\u2082 = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "2201676bef37726703af8ebadab2f1f26773579b96320f13c91c0dbedf6017da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "17ebd5943ec463c26a62aaf9ebd4fb74eb4ccbfc5b0e9c7f21f56a1a35e6783d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] \u2265\n    [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "99147732da27150ea67f0f18697f5d1628f90429ce687eca97492d498705e376"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)] =\n    [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "447ba43ec2eb60e9d3c583c65bd5560ef818eccec6ac96c041148f80893c820a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h \u2265\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "facc2d812bdda701eb9aebf25a75962ea057c8d75e7435232f7b64c64ec77451"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork' qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "f233604b798b55ceec3ada3429adc47f16676e27e9e3c2dd782380635af378e4"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "175324adff29e49cfc0b269030dbc7754f8dc83ed9d9318b0348bd3fe374bbaf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "01541763fb74b703625776f01d717c8b2b997b4577b60276fd59e50236abad48"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "c4259a4b36674217f60969a29ecddac7320fcabe3c824c7080ec07785a2e319a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "e6b78cc9621ffe93fc581fd6b98e691733223a665b8fbe13b00c58049fcc195f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "03ca88176363e4874f5d7667019648c4678c7e94635c254bfef7b659056616e1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork' qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "1ebbdc34ee4bdb46149b1f5efb242e0ca34d5a898ff35b081e86faa5af65864d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "dd62fc44047ccb2681af0b79074a17e2fe5bac937a0dc9bff082933eb0eb2c97"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "cfd5ca7db15940f8c3d04de86812aa5ad4ed65b2950274699400564af8ce7a9e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "345d541e03721122d43ae1255ccc4434c89f83ad37e5bdd98682a0ef2307b888"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "602092c9059d463046441e512da72efde5d64ecf9da059bffca7d58481b7d85b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "fca9337e1b9fbeb7648612fda17d513d78486d9bec21f3863f0ef515dad95852"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "9877ade2853d73702cf6dd1fc65a2d05eac3d0ababae06141f3b4c0c99b21d81"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "db20b8227700ae4602e754012b770f8ce4bebf939de3e25ff81d9ae6d19bf44b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "7439da5b5b62909a52c3724dc078868fa8982b110ce595767be396ae93bd04de"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "4aaa843def5f1660c6838d9a45cd999e65f5e6d0900ad40820f6ce0d837e2c2f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "8c4fe997f1b41f6bdf3ccd840cb2667d22c2aa38bfada3f73f04fa6ff2b54ffb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "2f91b4971c23292b16d7f8d69b001ac6616371d9e43e761e6d77e03279df4682"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "020af47d9b823b3d3b92de0f0409cf73a695e782408f41436bd168503d29a468"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "9c35daa7217ca8cba030ac3de4c58cf437164ae8ea89cb1aeab1a476ee1859c8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "19ec004f64f5f3e30f6bca0958bddfb92629b0045459cbbbcd41e5c71a888b21"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "4e7aadf9b875fbf22de54d6cb2e2421d042c19773c808cd7f8d04260ae8566ab"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "d767364ae17204aceee87b2bb2b6af02e29cb5b6bc8a2ace45aae64ab4d44870"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "4a5064c0089fd85c85e603c635832feed813fa00d2fdb1598995dbae2d37609c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "d4ada68760710569bcb109834955244ca837afb64719e24532f04108c1df21dd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "8c7abc06334349a6dde06dc9e61e147ed09592833118bdb7926671e59cc324ae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "68d5330b114e143decdb1ab79fe9c5b656aae20fdd717f8c239407e0b65fc8b8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "9661bf9f3b9e1109c0581fd40f20aed72184e78e93eb312fdaf2dd8b6995e92a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "1f30206a84b9251f67efbb9a91ada4ba3132ca1e27213af69d8d0c05a219b981"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "a4ad91b9f626ee321a0fa2e57d80b9e30d2cf75f8c0020c128fec631022a278a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "67680ec4487bd6a8ab3f00cea7a6b3cae41aa9f35841d65d54f4f5d3a4855d27"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "34771cc22547c121fd229a9799b4a2380b092415cf5e4908c550422f71b70fc2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "a0f904f4bf4ae77020ce386f7f41ae1a710f4e43455468a01cdc20d95158f746"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "6364983057eb5bbfda649f9c5ff59232ac35fcb23e30ebcc1d2da459f7d2ad61"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "231c16b361f09d64becb037de77412ca3865156dcdbf02a64557301e52ba9b31"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "master",
        "commit": "0661c91a3c5066f7484446a4559166e445a15fbc",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/0661c91a3c5066f7484446a4559166e445a15fbc/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:13:31.643485+00:00"
      },
      "id": "5db0d7be82455dfc931fbe229183907444a558f21e573300472c38a0b1b99aad"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "9d3227f18d2878b60dad8a509fedebd60d851538c4411db7364e3a33fc164dbc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "d7c78f0a132cb71ff3139f13a59ed16881ccb1248de5a5f28d8880834b2ee017"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "2d64ea32a4771f5ba92fbe4ed04f521b7bf9adab8821d212fad0956ce4468dcb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "f29008736f7c3b6df4d2194d3018d7b21913acdd48ad3dd92cff1dd44e58964b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "4f1e94c6510cb5e3da31a7e32275354dd3f519577e724e4bcec1cd69862b882a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "f86475c96cb7cf492016fa558498c231bcd664745e7a83048a961617c928d95a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:18:45-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "ad83693ff67d645543db05b8e722aeec437e87c16c431d166abedf53f4236e41"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "203c42ee052abb549784809080b63691497372f72387d8651b5709c580f00a0d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "5376d371cb5b3695115070af3954c41659f2d8ce25254ef248cafee6b8721bfe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "c6c6a8457a712b7d04721350654b495f98888935c9ad55be9b279f511ae306da"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u_1\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "7f345f9abc919481e1c7623d01f99eb9cf24ff3dc6fa2b0df4dddc4e01a618cc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [fun x =>\n      match x with\n      | (x\u2081, x\u2082) => cf x\u2081 = some s \u2227 cf x\u2082 = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "1f29405825f5297676255698d08730370369e4b6d0bfca1f0c6ba365c14fe364"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "39b52f32af94b1f379b1e4d0efceea5db4460d44f3736a1f19be15b5dd952498"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] \u2265\n    [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "856fd0f15ed7a45f1be347b8d66cd987cd8d5a66824ba4891a477b9476b5985e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)] =\n    [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "5ffad4d718c9e519c1e98de4bba09c862771f204a940ba1b43d491b2ed9b41cc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h \u2265\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "5008ffe7975e97a7b48bdea7b365eb75adb948dc5d03e5825891272573805c4c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork' qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "49962eac545bf187cb8ff3fa6eb69fcf93c76b0c9cb59688dd8f6ee0ceee8ef3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "3fe6471254afab3267b98120c7c58a25c5b2f545fffce81b5b3b5e87e7b1c14f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "2842b135cfdf19a2e57473294da7c7dfe1fe55af5ceb38d27def23d422986054"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "700c789ab9006366d6455bb80ba66457aa6e6ba2dd92b6b8d62f9027126d7366"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "d6da0615fb5bbfb46127f1e5bd8f3e59343b701a7edd8fa964974161716c8d96"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "1a9c67ec913d094fefb83b7750e4093ccb74bd05e2fc00b20bed761c6ef51b0b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork' qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "1d570a98ebe351b06be23a6127f96f44a473009b2c7c65c209daea1ce1c32ed7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b7b0f1a722e04408db5b9df5d013229912a9b3df59d95e0611dae5b38f6b222a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "efd9423129d264f0de02520bc4247aaba746e6b5482700a5516b04138cd7dc95"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "0ed143ee8f7c056dcc8a9df59e36f0315abec92497b9d57b88aa2c53272d62b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "c8c48bcf8e6ec9702991af5741d33eb83085629fa0c687ca6aa9cb925504efca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "225527407898525faa6b64e736874eb31515103a12eabfe5d9e48834e653f88c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "d51e2f4db6ee5c1d5b9227e93280a668b31570e7809440925971b6015ada61e8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "341a022c77fd4c25b8dce3182b02b8991af1fec5d2e6e0d7529a5deb346dd6ba"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "86f0e2889799b00addd1acc30a822a1a1e6da621187cf8b5cc7f98a84e3d70fe"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "765ebc6b0e1a98adb9a27c7ce31bc4643e00845ec527f8ff2f50e59537aeddac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "25a0f66a22a1e9d651dc8902ea8b12b56b66b52f890c508c8bd6caccd9dd4d97"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "5e8fc5ce0ad758c4f7578cc77b8a18a1f39d55e1ea9b04ad19c1b0b307bb91b2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "0a84073e2b06e93c7cbcb73f644b6e258f23f51782dd21db126b2d44c608a7dc"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "bc1de32d41ba38d0fb058d683baac839c1091524c114f2f0dccdc50da1ea4b85"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b8ace97713b6e754ce3e7f797fe448d9b34282a569f9967333d49536be36175d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "dbbb7a9d3f63cb16b3f7af523d86fb3afdb9e6f0de4f6ecaf0258e088d680baa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "d4cb47400bd26294c1d2d77bc77968fb8cc9d33f2c7b9a71dc3c852977867f43"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "10c7bf9f63f2c7be44cb0472d94ade9f4ca7016601f9eab6a719ac3bbc934771"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "55bcdb23fdb495cfc7fde18a2bd193829e0e5797d263e46ecc18a224620b2f9e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "74a663e2e162b7fd60794850b641ba9df23f6677c39e1ad92c54b4c883df0aeb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "666215cb5b1ef7a12b0dc1158405da9742a8cdb520af651b2850877ad91350d2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b44a6959d6546f7bea0177fff9b2551c50ac293387709d918d70059641f828fb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "779cb3a0bd2bab9c9400806d6236aeedce0a9dbd2334520e570c46e3d925ba15"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 234,
        "start_column": 8,
        "end_line": 234,
        "end_column": 13,
        "file": "ToMathlib/PFunctor/Free.lean"
      },
      "debug_info": {
        "goal": "case mk.mk.inl.h.e_4\nP : PFunctor.{max ?u.16582 ?u.16581}\n\u03b1 : Type (max ?u.16581 ?u.16582)\na : PUnit.{(max ?u.16581 ?u.16582) + 1}\nf : PEmpty.{(max ?u.16581 ?u.16582) + 1} \u2192 WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inl a) f) \u2192 \u03b1\n\u22a2 HEq (fun x => g FreePos.here) g",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "4b50622c3a8c930b037641d5a929c1fd72d6fc37d0b95fc10db1ff5c0222e6eb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 237,
        "start_column": 18,
        "end_line": 237,
        "end_column": 23,
        "file": "ToMathlib/PFunctor/Free.lean"
      },
      "debug_info": {
        "goal": "case mk.mk.inr.h.e_3.h.e_f.h\nP : PFunctor.{max ?u.16582 ?u.16581}\n\u03b1 : Type (max ?u.16581 ?u.16582)\na : P.A\nf : P.B a \u2192 WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inr a) f) \u2192 \u03b1\nx : P.B a\n\u22a2 (FreeM.construct (fun x => \u27e8WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x\u27e9)\n        (fun a x ih =>\n          \u27e8WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n            match p with\n            | FreePos.there b tail => (ih b).snd tail\u27e9)\n        (freeToFreeMAux (f x) fun tail => g (FreePos.there x tail))).fst =\n    f x",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L237"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "7cd3422d55309a5254adf74309d0587401f1ae8811f13442117cc507bb600a6d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 238,
        "start_column": 8,
        "end_line": 238,
        "end_column": 13,
        "file": "ToMathlib/PFunctor/Free.lean"
      },
      "debug_info": {
        "goal": "case mk.mk.inr.h.e_4\nP : PFunctor.{max ?u.16582 ?u.16581}\n\u03b1 : Type (max ?u.16581 ?u.16582)\na : P.A\nf : P.B a \u2192 WType (Sum.elim one.B P.B)\ng : P.FreePos (WType.mk (Sum.inr a) f) \u2192 \u03b1\n\u22a2 HEq\n    (fun p =>\n      match p with\n      | FreePos.there b tail =>\n        (FreeM.construct (fun x => \u27e8WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x\u27e9)\n              (fun a x ih =>\n                \u27e8WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                  match p with\n                  | FreePos.there b tail => (ih b).snd tail\u27e9)\n              (freeToFreeMAux (f b) fun tail => g (FreePos.there b tail))).snd\n          tail)\n    g",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L238"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "0af4558305baa2ddfbd61bd4292c152dc400f361c86e6354fcb1fb1871e73347"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 248,
        "start_column": 20,
        "end_line": 248,
        "end_column": 25,
        "file": "ToMathlib/PFunctor/Free.lean"
      },
      "debug_info": {
        "goal": "case roll.h.inl.h_1\nP : PFunctor.{max ?u.16582 ?u.16581}\n\u03b1 : Type (max ?u.16581 ?u.16582)\na : P.A\nr : P.B a \u2192 P.FreeM \u03b1\nx : P.B a\nc : (1 + P).W\nd : P.FreePos c \u2192 \u03b1\ne : A 1\na\u271d : (1 + P).A\nf\u271d\u00b9 : (1 + P).B a\u271d \u2192 WType (1 + P).B\ng\u271d\u00b9 : P.FreePos (WType.mk a\u271d f\u271d\u00b9) \u2192 \u03b1\nf\u271d : (1 + P).B (Sum.inl PUnit.unit) \u2192 WType (1 + P).B\ng\u271d : P.FreePos (WType.mk (Sum.inl PUnit.unit) f\u271d) \u2192 \u03b1\nheq\u271d : e = PUnit.unit\nh :\n  (FreeM.construct (fun x => \u27e8WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x\u27e9)\n        (fun a x ih =>\n          \u27e8WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n            match p with\n            | FreePos.there b tail => (ih b).snd tail\u27e9)\n        (r x)).fst =\n    WType.mk (Sum.inl e) f\u271d\nh' :\n  HEq\n    (fun tail =>\n      (FreeM.construct (fun x => \u27e8WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x\u27e9)\n            (fun a x ih =>\n              \u27e8WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                match p with\n                | FreePos.there b tail => (ih b).snd tail\u27e9)\n            (r x)).snd\n        tail)\n    g\u271d\n\u22a2 FreeM.pure (g\u271d FreePos.here) = r x",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L248"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "54425b96f0cd03a6b4b556238a93535630be1bb282987fb50997ba49b1263b90"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 263,
        "start_column": 10,
        "end_line": 263,
        "end_column": 15,
        "file": "ToMathlib/PFunctor/Free.lean"
      },
      "debug_info": {
        "goal": "case roll.h.inr.roll\nP : PFunctor.{max ?u.16582 ?u.16581}\n\u03b1 : Type (max ?u.16581 ?u.16582)\na : P.A\nr : P.B a \u2192 P.FreeM \u03b1\nx : P.B a\nc : (1 + P).W\nd : P.FreePos c \u2192 \u03b1\ne : P.A\nf : (1 + P).B (Sum.inr e) \u2192 WType (1 + P).B\ng : P.FreePos (WType.mk (Sum.inr e) f) \u2192 \u03b1\ny : P.A\nr' : P.B y \u2192 P.FreeM \u03b1\nh' :\n  HEq\n    (fun tail =>\n      match tail with\n      | FreePos.there b tail =>\n        (FreeM.construct (fun x => \u27e8WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x\u27e9)\n              (fun a x ih =>\n                \u27e8WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n                  match p with\n                  | FreePos.there b tail => (ih b).snd tail\u27e9)\n              (r' b)).snd\n          tail)\n    g\nhrx : r x = FreeM.roll y r'\nh :\n  (WType.mk (Sum.inr y) fun b =>\n      (FreeM.construct (fun x => \u27e8WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x\u27e9)\n          (fun a x ih =>\n            \u27e8WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n              match p with\n              | FreePos.there b tail => (ih b).snd tail\u27e9)\n          (r' b)).fst) =\n    WType.mk (Sum.inr e) f\nh1 : Sum.inr y = Sum.inr e\nh2 :\n  HEq\n    (fun b =>\n      (FreeM.construct (fun x => \u27e8WType.mk (Sum.inl PUnit.unit) PEmpty.elim, fun x_1 => x\u27e9)\n          (fun a x ih =>\n            \u27e8WType.mk (Sum.inr a) fun b => (ih b).fst, fun p =>\n              match p with\n              | FreePos.there b tail => (ih b).snd tail\u27e9)\n          (r' b)).fst)\n    f\nh1' : y = e\n\u22a2 HEq\n    (fun b =>\n      match f b, fun tail => g (FreePos.there b tail) with\n      | WType.mk a f, g =>\n        match a, f, g with\n        | Sum.inl PUnit.unit, f, g => FreeM.pure (g FreePos.here)\n        | Sum.inr a, f, g => FreeM.roll a fun b => freeToFreeMAux (f b) fun tail => g (FreePos.there b tail))\n    r'",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/PFunctor/Free.lean#L263"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T21:29:47-04:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b64c23513038457ea54242cd0a6f68a2c3b0344e046b5c4ba87368dcce1b51a7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "b335b52e779bb1f4ff9742144cd380083fd697b43ee9c74dc61b474540b27b60"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "8b4500e3db7703d789187bf85c3a2c01120e5d11e43cb8c5ffc9e13d5b8b1a8a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "6a3f165f4ce67f326313e9582936c75ebb7994831345a3af5cfcc9a00b091757"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "c9fb15960bc65112c621293998c65488b0da96bfbc3a3e6b8cb3c8a49bb9303f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "7055bcf08fba56409f95d0e51100a2519bade26b7c33f94299a4769b15b5b8c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "261f12547e626d4eba2826a238be67b6253b853da94096acbdf9caed317b88f1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "polynomial-functors",
        "commit": "5e6bb8f51692d19ccd8c1b062879b61c715bb797",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/5e6bb8f51692d19ccd8c1b062879b61c715bb797/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:17:16.595859+00:00"
      },
      "id": "429349f993361f8aa1d5a97800362f060bc3aa977675956a6014b94ef03ca360"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "83098dbf2af39f3dd3a9f187388f1931d790f27adbf38acf4604d1741979b878"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "4626cec4cff418c35b3bbeb75ab24d1cc7362223d0d549ff7d26560c543147a9"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "eb7ddc59889e0aad8df49333d25192ded6aa215627f48d64a28609584605258d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "e428b27b698d008a781546104fc1f508a5c51dafecee30201549421045337c03"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "87c776dd373a0280ca148f159c22bf9eff86e199c89ac52f7a5dae02dfd875f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "56ed2a4be31f4d8d1a3079512954965d54deea3d1d56913c6a4d44ff100e7672"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 4,
        "end_line": 257,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nf : \u03b1 \u2192 OracleComp spec \u03b2\nx : \u03b1\nxs : List \u03b1\nas : Array \u03b1\nh : \u2200 x \u2208 as, (f x).neverFails\nha : as.toList = x :: xs\nih : as.toList = xs \u2192 (List.mapM f as.toList).neverFails\n\u22a2 (f x).neverFails \u2227 \u2200 x_1 \u2208 (f x).support, (List.mapM f xs).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Traversal.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-20T19:30:34-04:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "bf447d8d1a7591590c6e0c167b5f8dc1aa9d17e25982502375ffe45330fd9a1d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200\n      x \u2208\n        if oa.neverFails then snd '' (simulateQ countingOracle oa).run.support\n        else insert 0 (snd '' (simulateQ countingOracle oa).run.support),\n      x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "1eb42660f35771548b419190b9a1da120cd08ae944e92a069c2b6910a7f1f363"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "59c3048abb9e7edc27dbc573d9310f6a6a83a2a944af074430720bbfe583c535"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "361b12ce137ec6c1fd9846ad743fb4af4e50e51551aef09418d4acdab42d767a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u_1\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "8264aac2e1718b23b24d7d7a3b25757649a018c4a6664ec9b2201a0fa94217e5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [fun x =>\n      match x with\n      | (x\u2081, x\u2082) => cf x\u2081 = some s \u2227 cf x\u2082 = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "d9e1175d3ca0a4b93f8b8e9fd7bb93657f0d14e863978d42479c43fbc75b6680"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "98b712f3feccbf9b14d9f957890c3bf7659a633f5222c574459ab9161d6eca8f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] \u2265\n    [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "89a166aff30d8cec1c2c1f8dda314a5d9ad8fa0afa645d1abc18b00734aca814"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)] =\n    [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "a36d6b490ebc6e2e87743d02f44911cebefb48b79405919b48b1f7c71a8c2258"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h \u2265\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "376fb4b78a83a938b9b84e781bd0ba30cfeab561097dd4c3de598805660424a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork' qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "7ef9679c5df973fb513b2f7b759cedc4505e3f56860ab9e3c77a7d8506b6b91c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "cc89b503229373c706351b8e38a88f922176737852b5a296e5eb4b40e9bc7b01"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "424a2ddf329ee8561b09e4d5184666cfe9d6dd4615f146f5fd1cc1f099d88c0a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "0cf002d3eb3ec882207f823502949e1125cd774abc49f85924c99b18300328d0"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "4b9d26349de85f20e0ca2ef46f9c1928ed97a61137b94e1775f791a487c944ac"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "3c5381b76ffbc234ea02198d96fb771702851e7d4a47bf529e67d1d46f0e1498"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork' qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "3f9ad7ccde262eda7c44b656e0072cdb6d9d9633156d155436c38e40efa0f3c2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "23a1c2a9f493cc78f3e3e5a670e51f191599c29293f18b7b64b76e38276a3303"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "e51efe0e472842f172c3fb39cabec9a4c2ed34c7e7edbf4bf89dde0f77ede27e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "252f8110ce484dfd0117377fc7aa0c1ea2454324e8cf6553cbffdefa7ae18306"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "843249f95c3be1a18ab570cf07e21c66fb24687d031cbdf10d00a60e2811974c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "aa48b3723270200577520f42e38d13cafecab0a5189a470fe2b226bfa4f01edd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "9184b9bbc35b3dd62740204c074135dd053e7dcb18d011cf7e53b53bd4f77926"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "1c00322a53ddcd33dbed6ab27030520550b4114f37371c816d2b58ef62c5a162"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "bc645bc2d29e4eabd7e173525002d8891457cb3c138a9b4f790560b35432c1c7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "94fbfb2cdc955b110163ca3130958c9378b37cfadc36a9568464f86de6886d88"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "dbeaded251aa7b2372300d500e680341914ec9d65a5baacf1ad28d84ab698796"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "71a8ec56d548aafa8ac82623541556314fb28dd210466e6a8a01594b557912c1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "3440b7994171e83db3d50991bddbeb408e0d9a0a8fd97a76d15cdd4da3353d46"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "a3941e55c4d0e4e131e0e124d079c097c55b7c55ff98ce687c5bc4732a236e62"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "3a5a9c8d32549429a1378b06759b77799a7d113d9b3e20bb03dfcbc26b8086f5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "54e19d441bd19392a0ec3eb14cfcb313e9cc433b305cbe7575d3482770dded91"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "88e16e4fab32d56118e6415ff49deda847971e4afae59c5fa22dbb849f190b9c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "632a5b5c68ead47e51af61457288358011677abac3f8c1af089f96b89298e671"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "8a34ea1a61e55b5c2b9f13b6bd885c653a7f3995ed3f8e7f019d1dfa285ed99c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "03a29159ed8ff17ea5cdd06c4128e880f6b327aa0519c9ee1b59cc59c65ce1b5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "4b0445349b3604f87aa6a8d011673d36aa56fe01f5a5810a164da128430c01ab"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "368850b9df5aa3f6eb588fb3039907610023bc3e4f1159b381304da6291f3621"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "c4f0c00a9d91c092f866c0f16f90034a586a4cf089fc00b53581648bf0c23ba7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "381f17442da4c06f49fc0119b8578ed308cbeaad285674f93232b53e22e303ae"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "930aabbf83c78809b4d27f1c37bcb3e8b882fc07f88fcc98527a305c907d0015"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "1c23722d77a6a39296c9200f2d3f65c40e410751346ab7a018864a32f403bd65"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "ba2641e2fa4d8654d44366fe45514c628630044066e3338fc3773be53db01463"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "2fecb26b2bc00b8be45608ceba2c927f1be317f7a90d74a06e19c9be814f71a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "e4a140bd421d28c555972e04d2247768cf7734faa4ac12319e7e688baf8641cd"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "readme",
        "commit": "fb0abad8737dd5292ffe7f9134def53458d2152d",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/fb0abad8737dd5292ffe7f9134def53458d2152d/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:21:12.995447+00:00"
      },
      "id": "5e33956c96b56b65d6fd17ff836c853d323c1adc19e8f8df53dff7deecb42cd3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 341,
        "start_column": 6,
        "end_line": 341,
        "end_column": 11,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case false.left\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Vector (Fin p) m\nh1 : Vector.map (Fin.castLE hp2) r = rv\npne0 : NeZero p\nerr : Vector (Fin p) m\nh2 : Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e = err\nmask : Fin p\nh3 : -(err.get \u2b1d\u1d65 rv.get) = mask\nmask_bound : Fin_Bound mask (\u03c7 * 2 * m)\n\u22a2 p / 4 \u2264 \u2191(mask - \u2191(p / 2))",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/Regev.lean#L341"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "115d06b862eefa964a056e266c4fd7a4c8b919d30c4ac027c4e21075963c0111"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 342,
        "start_column": 6,
        "end_line": 342,
        "end_column": 11,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case false.right\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Vector (Fin p) m\nh1 : Vector.map (Fin.castLE hp2) r = rv\npne0 : NeZero p\nerr : Vector (Fin p) m\nh2 : Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e = err\nmask : Fin p\nh3 : -(err.get \u2b1d\u1d65 rv.get) = mask\nmask_bound : Fin_Bound mask (\u03c7 * 2 * m)\n\u22a2 \u2191(mask - \u2191(p / 2)) \u2264 p * 3 / 4",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/Regev.lean#L342"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-18T21:39:40-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "cc93efd77b3171f03471f147e41e525d251b6f010cbae122a0d21f58be1c9afb"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 344,
        "start_column": 4,
        "end_line": 344,
        "end_column": 9,
        "file": "Examples/Regev.lean"
      },
      "debug_info": {
        "goal": "case true\nn m \u03c7 p : \u2115\nherr : p > 2 * \u03c7\nhp2 : p > 1\nA : Matrix (Fin n) (Fin m) (Fin p)\ns : Vector (Fin p) n\ne : Vector (Fin (2 * \u03c7 + 1)) m\nr : Vector (Fin 2) m\nrv : Vector (Fin p) m\nh1 : Vector.map (Fin.castLE hp2) r = rv\npne0 : NeZero p\nerr : Vector (Fin p) m\nh2 : Vector.map (fun t => Fin.castLE herr t - \u2191\u03c7) e = err\nmask : Fin p\nh3 : -(err.get \u2b1d\u1d65 rv.get) = mask\nmask_bound : Fin_Bound mask (\u03c7 * 2 * m)\n\u22a2 \u2191mask < p / 4 \u2228 3 * p / 4 < \u2191mask",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/Regev.lean#L344"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-22T01:08:46-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "1cc7d9c402b1bd25a3e1c610c34a8062909f6caadaa910d8cde1ceed5f65776c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 223,
        "start_column": 2,
        "end_line": 223,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "bv : BitVec 256\n\u22a2 String.foldl (fun acc c => acc <<< 8 + BitVec.ofNat 256 c.toNat) 0#256\n      { data := bitvec_to_string.chars bv.toNat [] } =\n    bv",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/FrankingProtocol.lean#L223"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "4e2dbf29900c0d548c0f5e6292b000e6d4371a24490d45af61606cdb7fc16b84"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 (\u2200 (x : BitVec 256),\n      (if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            pure\n              (some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x })\n          else pure none).neverFails \u2227\n        \u2200\n          x_1 \u2208\n            if\n                mock_hmac_sha256 x\n                    (serialize_message_data\n                        (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                  mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n              {some\n                  { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                    nonce := x }}\n            else {none},\n          (match x_1 with\n              | none => pure none\n              | some verified_msg =>\n                pure\n                  (some\n                    { verified_msg := verified_msg,\n                      message_package :=\n                        {\n                          encrypted_message :=\n                            { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                          franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                          reporting_tag :=\n                            {\n                              tag :=\n                                mock_hmac_sha256 (123456789#256)\n                                  (string_to_bitvec\n                                    (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                      (bitvec_to_string 1730230302#256))) },\n                          context :=\n                            { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                              message_id := 123 },\n                          nonce := x },\n                      facebook_key := 123456789#256 })).neverFails \u2227\n            \u2200\n              x_2 \u2208\n                (match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })).support,\n              (match x_2 with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).neverFails) \u2227\n    (\u2200 (x : BitVec 256),\n        false \u2209\n          (do\n              let x_1 \u2190\n                if\n                      mock_hmac_sha256 x\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content x).1, x)).1 x).1 =\n                        mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                          nonce := x })\n                  else pure none\n              let maybeData \u2190\n                match x_1 with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := x },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport) \u2227\n      \u2203 a,\n        true \u2208\n          (do\n              let x \u2190\n                if\n                      mock_hmac_sha256 a\n                          (serialize_message_data\n                              (deserialize_message_data ((serialize_message_data message_content a).1, a)).1 a).1 =\n                        mock_hmac_sha256 a (serialize_message_data message_content a).1 then\n                    pure\n                      (some\n                        { content := (deserialize_message_data ((serialize_message_data message_content a).1, a)).1,\n                          nonce := a })\n                  else pure none\n              let maybeData \u2190\n                match x with\n                  | none => pure none\n                  | some verified_msg =>\n                    pure\n                      (some\n                        { verified_msg := verified_msg,\n                          message_package :=\n                            {\n                              encrypted_message :=\n                                { ciphertext := mock_encrypt (serialize_message_data message_content a).1 },\n                              franking_tag :=\n                                { tag := mock_hmac_sha256 a (serialize_message_data message_content a).1 },\n                              reporting_tag :=\n                                {\n                                  tag :=\n                                    mock_hmac_sha256 (123456789#256)\n                                      (string_to_bitvec\n                                        (String.append (mock_hmac_sha256 a (serialize_message_data message_content a).1)\n                                          (bitvec_to_string 1730230302#256))) },\n                              context :=\n                                { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                  message_id := 123 },\n                              nonce := a },\n                          facebook_key := 123456789#256 })\n              match maybeData with\n                | none => pure false\n                | some data =>\n                  pure\n                    (decide\n                        (mock_hmac_sha256 data.verified_msg.nonce\n                            (serialize_message_data data.verified_msg.content data.verified_msg.nonce).1 =\n                          data.message_package.franking_tag.tag) &&\n                      decide\n                        (mock_hmac_sha256 data.facebook_key\n                            (string_to_bitvec\n                              (String.append data.message_package.franking_tag.tag\n                                (bitvec_to_string (BitVec.ofNat 256 data.message_package.context.timestamp)))) =\n                          data.message_package.reporting_tag.tag))).finSupport",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/FrankingProtocol.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "f78b4540360d",
        "blame_date": "2025-02-05T21:14:45-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "f00879d766c590def018ede0600f8c219684d836a129fcde79aa00576bed86ad"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 2,
        "end_line": 269,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "message_content : String\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n            mock_hmac_sha256 x\n                (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                    x).1 =\n              mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n          pure\n            (some\n              { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n        else pure none).neverFails \u2227\n      \u2200\n        x_1 \u2208\n          if\n              mock_hmac_sha256 x\n                  (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                      x).1 =\n                mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n            {some\n                { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1,\n                  nonce := x }}\n          else {none},\n        (match x_1 with\n            | none => pure none\n            | some verified_msg =>\n              pure\n                (some\n                  { verified_msg := verified_msg,\n                    message_package :=\n                      {\n                        encrypted_message :=\n                          { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                        franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                        reporting_tag :=\n                          {\n                            tag :=\n                              mock_hmac_sha256 (123456789#256)\n                                (string_to_bitvec\n                                  (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                    (bitvec_to_string 1730230302#256))) },\n                        context :=\n                          { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                            message_id := 123 },\n                        nonce := x },\n                    facebook_key := 123456789#256 })).neverFails \u2227\n          \u2200\n            x_2 \u2208\n              (match x_1 with\n                | none => pure none\n                | some verified_msg =>\n                  pure\n                    (some\n                      { verified_msg := verified_msg,\n                        message_package :=\n                          {\n                            encrypted_message :=\n                              { ciphertext := mock_encrypt (serialize_message_data message_content x).1 },\n                            franking_tag := { tag := mock_hmac_sha256 x (serialize_message_data message_content x).1 },\n                            reporting_tag :=\n                              {\n                                tag :=\n                                  mock_hmac_sha256 (123456789#256)\n                                    (string_to_bitvec\n                                      (String.append (mock_hmac_sha256 x (serialize_message_data message_content x).1)\n                                        (bitvec_to_string 1730230302#256))) },\n                            context :=\n                              { sender_id := 1001#256, recipient_id := 1002#256, timestamp := 1730230302,\n                                message_id := 123 },\n                            nonce := x },\n                        facebook_key := 123456789#256 })).support,\n            (match x_2 with\n              | none => pure true\n              | some val => pure false).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/FrankingProtocol.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "4ed87bc068f8c72f9784ef2181fb3d8761535c40afdfab7d0863b53281c11606"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 290,
        "start_column": 2,
        "end_line": 290,
        "end_column": 7,
        "file": "Examples/FrankingProtocol.lean"
      },
      "debug_info": {
        "goal": "facebook_key : BitVec 256\nmessage_content : String\ncontext : Context\n\u22a2 \u2200 (x : BitVec 256),\n    (if\n          mock_hmac_sha256 x\n              (serialize_message_data (deserialize_message_data ((serialize_message_data message_content x).1, x)).1\n                  x).1 =\n            mock_hmac_sha256 x (serialize_message_data message_content x).1 then\n        pure\n          (some\n            { content := (deserialize_message_data ((serialize_message_data message_content x).1, x)).1, nonce := x })\n      else pure none).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/FrankingProtocol.lean#L290"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-09T11:17:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "854694ddbb498663ded6bc4112ed013bde972cc9eeb980d9618f91bea267517e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7,
        "file": "Examples/HHS_Elgamal.lean"
      },
      "debug_info": {
        "goal": "G P : Type\ninst\u271d\u2075 : SelectableType G\ninst\u271d\u2074 : SelectableType P\ninst\u271d\u00b3 : AddCommGroup G\ninst\u271d\u00b2 : Group P\ninst\u271d\u00b9 : AddTorsor G P\ninst\u271d : DecidableEq P\nthis : \u2200 (msg x : P) (g\u2081 g\u2082 : G), msg * (g\u2082 +\u1d65 g\u2081 +\u1d65 x) / (g\u2081 +\u1d65 g\u2082 +\u1d65 x) = msg\n\u22a2 neverFails ((fun a => ()) <$> ($\u1d57G))",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/Examples/HHS_Elgamal.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "fa8c96e8b3e4ea0e411c9395eb6c3136ee36bd7f36fc695680cb756ee86d8d7f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 71,
        "start_column": 4,
        "end_line": 71,
        "end_column": 9,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nQ : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Prop\nF : Prop\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh :\n  \u2200 (u : spec.range i),\n    allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u >>= ob) \u2194\n      allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa u) \u2227\n        \u2200 x \u2208 (oa u).supportWhen fun {\u03b1} => possible_outputs,\n          allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)\n\u22a2 (Q (query i t) \u2227\n      \u2200 x \u2208 possible_outputs (query i t),\n        allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x) \u2227\n          \u2200 x_1 \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x),\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x_1)) \u2194\n    (Q (query i t) \u2227\n        \u2200 x \u2208 possible_outputs (query i t), allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (oa x)) \u2227\n      \u2200 (x : \u03b1),\n        \u2200 x_1 \u2208 possible_outputs (query i t),\n          x \u2208 OracleComp.construct (fun x => {x}) (fun {\u03b2} q oa f => \u22c3 u \u2208 possible_outputs q, f u) \u2205 (oa x_1) \u2192\n            allWhen (fun {\u03b1} => Q) F (fun {\u03b1} => possible_outputs) (ob x)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Traversal.lean#L71"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "5cdeb42013bec0627138016506eda8f01acf52bf32d4ad8d07dc8dc83c41c0df"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 36,
        "end_line": 112,
        "end_column": 41,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\n\u03b9' : Type u_1\nspec' : OracleSpec \u03b9'\noa : OracleComp spec \u03b1\npossible_outputs : {\u03b1 : Type v} \u2192 spec.OracleQuery \u03b1 \u2192 Set \u03b1\nh : oa.neverFailsWhen fun {\u03b1} => possible_outputs\nso : QueryImpl spec (OracleComp spec')\nh' : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).support \u2286 possible_outputs q\nhso : \u2200 {\u03b1 : Type v} (q : spec.OracleQuery \u03b1), (so.impl q).neverFails\n\u22a2 (simulateQ so oa).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Traversal.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "8d9890ce5f98657d0e4c39b3e1d8c09f9742cf67627c6ab39708d8a7555b5c2e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 127,
        "start_column": 88,
        "end_line": 127,
        "end_column": 93,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM q).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Traversal.lean#L127"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "5d84daba3ae3b1890b6e92bc1397cea3058de1453f8b6f26ba378c5d66b4dd6d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 60,
        "end_line": 132,
        "end_column": 65,
        "file": "VCVio/OracleComp/Traversal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type v\nq : spec.OracleQuery \u03b1\noa : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 (liftM q >>= oa).neverFails \u2194 \u2200 (x : \u03b1), (oa x).neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Traversal.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "6aae7a63220ab2f90ca59f57ec2e846b284a54459b7b931ed3b93f5bb5a33aca"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "VCVio/OracleComp/QueryBound.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\n\u22a2 (\u2200 (qc : spec.QueryCount) (x : \u03b1), (x, qc) \u2208 (simulateQ countingOracle oa).run.support \u2192 qc \u2264 qb) \u2194\n    \u2200 x \u2208 (snd <$> (simulateQ countingOracle oa).run <|> pure 0).support, x \u2264 qb",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/QueryBound.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "7c5f310fae2b9adc48daa35398583ed30857ae68e347435519b74bb27b1ce78c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 2,
        "end_line": 29,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 x \u2208 oa.support, [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "75bbb2c4427f397627e029a7f3a96570e458775d6f99af51c8809966fff24a32"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\noc : \u03b1 \u2192 OracleComp spec \u03b3\nh : \u2200 (x : \u03b1), [\u22a5|ob x] = [\u22a5|oc x]\n\u22a2 [\u22a5|oa >>= ob] = [\u22a5|oa >>= oc]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "db8ab08370e9a3f2f5fb401c68d87af25763917f69dd254808073817dc38ec3c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 41,
        "start_column": 4,
        "end_line": 41,
        "end_column": 9,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 \u03b2 \u03b3 : Type\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u03c3 : Type u_1\ns : Finset \u03c3\noc : \u03c3 \u2192 \u03b1 \u2192 OracleComp spec \u03b3\n\u22a2 [\u22a5|oa >>= ob] = \u2211 x \u2208 s, [\u22a5|oa >>= oc x]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L41"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "75c2c647dd8cc16c1fee4c43f995aae4ecc00f2223f5a997253d07336ecd5d4b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 75,
        "end_line": 80,
        "end_column": 80,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [fun x =>\n      match x with\n      | (x\u2081, x\u2082) => cf x\u2081 = some s \u2227 cf x\u2082 = some s|main.fork' qb js i cf] =\n    [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "bfe94435f4f8dcbac79f9f5b9bdd44de7ca6b20420a93e99f0032caf4115003d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 89,
        "start_column": 36,
        "end_line": 89,
        "end_column": 41,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|Prod.map cf cf <$> main.fork' qb js i cf] =\n    [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "2315a3d8fc8e59e9d3871e1dccb0f7be47518bed6cbbd512cccd246e753dc8be"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 29,
        "end_line": 103,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n      let seed \u2190 liftM (generateSeed spec qb js)\n      let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n      let u \u2190 liftM ($\u1d57spec.range i)\n      _root_.guard ((seed i)[s + 1]? \u2260 some u)\n      let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n      let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n      pure (cf x\u2081, cf x\u2082)] \u2265\n    [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "df4a1c0ee0421132e086b6e5fc6d97c4c147d2d92c8984f39fbb3a8fed0f16fa"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 113,
        "start_column": 33,
        "end_line": 113,
        "end_column": 38,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        let seed' : spec.QuerySeed := (seed.takeAtIndex i \u2191s).addValue i u\n        let x\u2082 \u2190 (simulateQ seededOracle main).run seed'\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n        let seed \u2190 liftM (generateSeed spec qb js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n        let u \u2190 liftM ($\u1d57spec.range i)\n        _root_.guard ((seed i)[s + 1]? = some u)\n        pure (cf x\u2081)] =\n    [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "f680425b46f716c95b5328d32ec8f92db8fdc16b81f88df24a364c5a43218244"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 114,
        "start_column": 71,
        "end_line": 114,
        "end_column": 76,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\ns : Fin (qb i + 1)\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [=(some s, some s)|do\n        let shared_seed \u2190 liftM (generateSeed spec (update qb i q) js)\n        let x\u2081 \u2190 (simulateQ seededOracle main).run shared_seed\n        let x\u2082 \u2190 (simulateQ seededOracle main).run shared_seed\n        pure (cf x\u2081, cf x\u2082)] -\n      [=some s|do\n          let seed \u2190 liftM (generateSeed spec qb js)\n          let x\u2081 \u2190 (simulateQ seededOracle main).run seed\n          pure (cf x\u2081)] /\n        h \u2265\n    [=some s|cf <$> main] ^ 2 - [=some s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "c6528a322907230b9e794c0c99a6227fad0eb292ef932a68856c4ec209306fa2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 126,
        "start_column": 6,
        "end_line": 126,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 [\u22a5|main.fork' qb js i cf] = 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L126"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "38a43b5feab3250170f56a61b0664448da2090bbf52dc9d3369a7e9ea929a870"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 6,
        "end_line": 128,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=(s, s)|Prod.map cf cf <$> main.fork' qb js i cf] \u2264 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "2e921d16dace740b1aaa2217e4d7c58e32947a817881168e9b9c05039fc83904"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 130,
        "start_column": 6,
        "end_line": 130,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, ([=s|cf <$> main] ^ 2 - [=s|cf <$> main] / h) = 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L130"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "493085cfe3194ca3413eb561f960769bfee7ea29693bea87875c3272be38cd79"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 132,
        "start_column": 6,
        "end_line": 132,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - \u2211 s, [=s|cf <$> main] ^ 2 - \u2211 s, [=s|cf <$> main] / h \u2264\n    1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L132"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "ea677bf0887f5faef47ca04dceacf945f21cdd7ef69133239ac3e90dbc2aa6f2"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 134,
        "start_column": 6,
        "end_line": 134,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - (\u2211 s, [=s|cf <$> main]) ^ 2 / \u2191q - (\u2211 s, [=s|cf <$> main]) / h \u2264 1 - acc ^ 2 / \u2191q + acc / h",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "9ff400a6ade4e0d974b4b058e8307a4483184902a347b3993b1fc2b6c9f0b415"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 136,
        "start_column": 6,
        "end_line": 136,
        "end_column": 11,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nacc : \u211d\u22650\u221e := 1 - [=none|cf <$> main]\nh : \u211d\u22650\u221e := \u2191(Fintype.card (spec.range i))\nq : \u2115 := qb i + 1\n\u22a2 1 - acc ^ 2 / \u2191q + acc / h = 1 - acc * (acc / \u2191q - h\u207b\u00b9)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L136"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "90a3c4ec3d8fc55559c09037a92cb797c613516e3ee1e9c0aa78b15a87cfb7a3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 147,
        "start_column": 2,
        "end_line": 147,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/Fork.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b3 : (i : \u03b9) \u2192 SelectableType (spec.range i)\ninst\u271d\u00b2 : spec.DecidableEq\ninst\u271d\u00b9 : unifSpec \u2282\u2092 spec\n\u03b1 : Type\nmain : OracleComp spec \u03b1\nqb : \u03b9 \u2192 \u2115\njs : List \u03b9\ni : \u03b9\ncf : \u03b1 \u2192 Option (Fin (qb i + 1))\ninst\u271d : spec.FiniteRange\nx\u2081 x\u2082 : \u03b1\nh : (x\u2081, x\u2082) \u2208 (main.fork' qb js i cf).support\n\u22a2 \u2203 s,\n    cf x\u2081 = some s \u2227\n      cf x\u2082 = some s \u2227\n        \u2203 log\u2081,\n          \u2203 (hcf\u2081 : \u2191s < log\u2081.countQ i),\n            \u2203 log\u2082,\n              \u2203 (hcf\u2081_1 : \u2191s < log\u2082.countQ i),\n                (log\u2081.getQ i)[s].1 = (log\u2082.getQ i)[s].1 \u2227\n                  (log\u2081.getQ i)[s].2 \u2260 (log\u2082.getQ i)[s].2 \u2227\n                    (x\u2081, log\u2081) \u2208 (simulateQ loggingOracle main).run.support \u2227\n                      (x\u2082, log\u2082) \u2208 (simulateQ loggingOracle main).run.support",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/Fork.lean#L147"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "0a31d3594e8bf33dddf69cfd59eae7f1c14250da58482f6ec6007dc36d944ee5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "VCVio/CryptoFoundations/SymmEncAlg.lean"
      },
      "debug_info": {
        "goal": "m : Type \u2192 Type v\nM K C : Type\ninst\u271d\u2075 : AlternativeMonad m\ninst\u271d\u2074 : LawfulAlternative m\ninst\u271d\u00b3 : Fintype M\ninst\u271d\u00b2 : Fintype K\ninst\u271d\u00b9 : Fintype C\nencAlg : SymmEncAlg m M K C\ninst\u271d : encAlg.Complete\nh1 : Fintype.card M = Fintype.card K\nh2 : Fintype.card K = Fintype.card C\n\u22a2 encAlg.perfectSecrecy \u2194\n    (\u2200 (k : K), [=k|encAlg.exec encAlg.keygen] = (\u2191(Fintype.card K))\u207b\u00b9) \u2227\n      \u2200 (m_1 : M) (c : m C), \u2203! k, k \u2208 support (encAlg.exec encAlg.keygen) \u2227 encAlg.encrypt k m_1 = c",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/SymmEncAlg.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "daba05ddc2e817b0f6caae7fe78b6f8b7752e6c427f0c117e6cac09b22fe3ae8"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 29,
        "end_line": 79,
        "end_column": 34,
        "file": "VCVio/CryptoFoundations/FiatShamir.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\n\u03c3 X W PC SC \u03a9 P : Type\np : X \u2192 W \u2192 Bool\ninst\u271d\u2075 : SelectableType X\ninst\u271d\u2074 : SelectableType W\ninst\u271d\u00b3 : DecidableEq PC\ninst\u271d\u00b2 : DecidableEq \u03a9\ninst\u271d\u00b9 : SelectableType \u03a9\nsigmaAlg : SigmaAlg X W PC SC \u03a9 P p\nhr : GenerableRelation X W p\nM : Type\ninst\u271d : DecidableEq M\n\u03b1\u271d : Type\nc : ProbComp \u03b1\u271d\n\u22a2 (fun {\u03b1} comp =>\n        let so := idOracle ++\u209b\u2092 randomOracle;\n        (simulateQ so comp).run' \u2205)\n      ((fun {\u03b1} => monadLift) c) =\n    c",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/CryptoFoundations/FiatShamir.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "c007482d915bf06be2a28378cc0f64e882df25db986d705178a337a5f1ed6c2f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 79,
        "start_column": 2,
        "end_line": 79,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\nsuperSpec : OracleSpec \u03c4\n\u03b1 : Type w\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\ninst\u271d\u2074 : spec.DecidableEq\ninst\u271d\u00b3 : superSpec.DecidableEq\ninst\u271d\u00b2 : superSpec.FiniteRange\ninst\u271d\u00b9 : DecidableEq \u03b1\ninst\u271d : Fintype \u03b1\nq : spec.OracleQuery \u03b1\n\u22a2 (liftM (MonadLift.monadLift q)).finSupport = Finset.univ",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Coercions/SubSpec.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "4f591485152f6c863afb7fe7a044e99d784bcab774734bf6dcaddaceb23b2f79"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 2,
        "end_line": 186,
        "end_column": 7,
        "file": "VCVio/OracleComp/Coercions/SubSpec.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\n\u03c4 : Type v\nspec : OracleSpec \u03b9\n\u03b1 : Type w\nsuperSpec : OracleSpec \u03c4\nh : MonadLift spec.OracleQuery superSpec.OracleQuery\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ { impl := fun {\u03b1} => liftM } oa).neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Coercions/SubSpec.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "43a8d14854e09defdd9cc5693a903d0199e03f9a30729fc7bb9aee2b2778a65c"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 53,
        "end_line": 69,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/CountingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\ninst\u271d : DecidableEq \u03b9\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (countingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/QueryTracking/CountingOracle.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "9060bcfa9e8ccc70d109e04bc0fdafb190e259ce044cfd8001ef8012cce828a7"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 72,
        "start_column": 53,
        "end_line": 72,
        "end_column": 58,
        "file": "VCVio/OracleComp/QueryTracking/LoggingOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa : OracleComp spec \u03b1\n\u22a2 \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (loggingOracle.impl q).run.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/QueryTracking/LoggingOracle.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "a989a271a3829cc0db9ba386c0f5db265d06e12c30367212c3bdf34be1487e53"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 280,
        "start_column": 2,
        "end_line": 280,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nh\u03b1 : SelectableType \u03b1\n\u22a2 neverFails ($\u1d57\u03b1)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/UniformSelect.lean#L280"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "a9ef383432ae7e7ea4eee1ec2067836afacec44c89de7fa178828b2c525d0755"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 405,
        "start_column": 4,
        "end_line": 405,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case zero\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm : \u2115\ninst\u271d : SelectableType \u03b1\nx y : Matrix (Fin 0) (Fin m) \u03b1\n\u22a2 (if x = Matrix.of ![] then 1 else 0) = if y = Matrix.of ![] then 1 else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/UniformSelect.lean#L405"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "eb3ccb8f464c36e0f90b9e3fcd212f395ad8bc28a3fce928486c89f78d9d33c3"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 407,
        "start_column": 4,
        "end_line": 407,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  \u2200 (x y : Matrix (Fin m) (Fin m\u271d) \u03b1),\n    [=x|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m] =\n      [=y|Nat.recAux (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            let bot \u2190 ihn\n            pure (Fin.cons top.get bot))\n          m]\nx y : Matrix (Fin (m + 1)) (Fin m\u271d) \u03b1\n\u22a2 [=x|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)] =\n    [=y|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        (m + 1)]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/UniformSelect.lean#L407"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-11T19:25:10-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "3cdadcbcf9a386394a0e70ffc45a91a6ef7e0381a70b3cc6d2f24bdfd86c5757"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 412,
        "start_column": 4,
        "end_line": 412,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/UniformSelect.lean"
      },
      "debug_info": {
        "goal": "case succ\n\u03b1\u271d : Type\nh\u03b1 : SelectableType \u03b1\u271d\n\u03b1 : Type\nm\u271d : \u2115\ninst\u271d : SelectableType \u03b1\nm : \u2115\nih :\n  [\u22a5|Nat.recAux (pure (Matrix.of ![]))\n        (fun n ihn => do\n          let top \u2190 $\u1d57Vector \u03b1 m\u271d\n          let bot \u2190 ihn\n          pure (Fin.cons top.get bot))\n        m] =\n    0\n\u22a2 \u2200 (x : Vector \u03b1 m\u271d),\n    neverFails\n      (Fin.cons x.get <$>\n        Nat.rec (pure (Matrix.of ![]))\n          (fun n ihn => do\n            let top \u2190 $\u1d57Vector \u03b1 m\u271d\n            Fin.cons top.get <$> ihn)\n          m)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/UniformSelect.lean#L412"
      },
      "metadata": {
        "blame_email_hash": "e3ee0297a915",
        "blame_date": "2025-04-15T17:06:48-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "37c86e394c4c0fb47d5b1e04bdfd3debb706d26ccf27de1fbc88d9a245f3ece5"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 76,
        "start_column": 2,
        "end_line": 76,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\nj : \u03b9\njs : List \u03b9\n\u22a2 (do\n      let x \u2190 replicate (qc j) ($\u1d57spec.range j)\n      forIn js (QuerySeed.addValues x fun x => []) fun j r =>\n          replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)) =\n    do\n    let _ \u2190 replicate (qc j) ($\u1d57spec.range j)\n    forIn js (fun x => []) fun j r =>\n        replicate (qc j) ($\u1d57spec.range j) >>= pure \u2218 fun a => ForInStep.yield (QuerySeed.addValues a r)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/GenerateSeed.lean#L76"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "f6377af3e8c200c624dcf264f2ca0bc9d39d4ac93364153581510b68eb190d96"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 2,
        "end_line": 85,
        "end_column": 7,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b9 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs : List \u03b9\n\u22a2 support (generateSeed spec qc js) = {seed | \u2200 (i : \u03b9), (seed i).length = qc i * List.count i js}",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/GenerateSeed.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2024-12-05T21:45:03-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "41e9292e0b51280c8e4a31f587c4854734f469a53a442290e2bf2b085356a0a6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 128,
        "start_column": 4,
        "end_line": 128,
        "end_column": 9,
        "file": "VCVio/OracleComp/Constructions/GenerateSeed.lean"
      },
      "debug_info": {
        "goal": "case append_singleton\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\nspec : OracleSpec \u03b9\ninst\u271d\u00b9 : (i : \u03b9) \u2192 SelectableType (spec.range i)\nqc : \u03b9 \u2192 \u2115\njs\u271d : List \u03b9\ninst\u271d : spec.FiniteRange\nj : List \u03b9\njs : \u03b9\nhjs :\n  \u2200 seed \u2208 support (generateSeed spec qc j),\n    [=seed|generateSeed spec qc j] = 1 / \u2191(List.map (fun j => Fintype.card (spec.range j) ^ qc j) j).prod\nseed : spec.QuerySeed\nhs : seed \u2208 support (generateSeed spec qc (j ++ [js]))\n\u22a2 [=seed|do\n      let a \u2190\n        foldlM\n            (fun b a =>\n              match b with\n              | ForInStep.yield b =>\n                (fun a_1 => ForInStep.yield (QuerySeed.addValues a_1 b)) <$> replicate (qc a) ($\u1d57spec.range a)\n              | ForInStep.done b => pure (ForInStep.done b))\n            (ForInStep.yield fun x => []) j\n      ForInStep.value <$>\n          match a with\n          | ForInStep.yield b =>\n            (fun a => ForInStep.yield (QuerySeed.addValues a b)) <$> replicate (qc js) ($\u1d57spec.range js)\n          | ForInStep.done b => pure (ForInStep.done b)] =\n    ((List.map (Nat.cast \u2218 fun j => Fintype.card (spec.range j) ^ qc j) j).prod *\n        \u2191(Fintype.card (spec.range js)) ^ qc js)\u207b\u00b9",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/Constructions/GenerateSeed.lean#L128"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-16T01:24:48-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "6602464d6c2730a5cce3973a06be13cf8e89b85f06a757eb9f8aed6a586f8b9a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 721,
        "start_column": 83,
        "end_line": 721,
        "end_column": 88,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + (1 - s) * r",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L721"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "e1ff7dcfc65c51924c1f55afd3304b92ebf48c9f620b0b644afdeb5212cd8a6b"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 727,
        "start_column": 73,
        "end_line": 727,
        "end_column": 78,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\ns : \u211d\u22650\u221e\nh' : [\u22a5|oa] = s\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 s + r",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L727"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "e603940228637fa42dd0e440ff753d2d9a540cc71997adfa83bcd4681eacc8f1"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 732,
        "start_column": 69,
        "end_line": 732,
        "end_column": 74,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh' : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\nr : \u211d\u22650\u221e\nhr : \u2200 x \u2208 oa.support, [\u22a5|ob x] \u2264 r\n\u22a2 [\u22a5|oa >>= ob] \u2264 r",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L732"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "2fb5f50d95fff67ae81c9ab4058275404571808f7fadb4fde13701c1cf52bb76"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 736,
        "start_column": 59,
        "end_line": 736,
        "end_column": 64,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03b2 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\nh : oa.neverFails\nob : \u03b1 \u2192 OracleComp spec \u03b2\n\u22a2 [\u22a5|oa >>= ob] = \u2211' (x : \u03b1), [=x|oa] * [\u22a5|ob x]",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L736"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "711079b954d08db862569dea19cd4523871357e460eecf8a782d97fa807d4fcf"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 928,
        "start_column": 2,
        "end_line": 928,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 [\u22a5|oa] = 0 \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L928"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "9625bca9072a59b6e58d3934de1c0b49d957f9b2fb58868825b8cfc2c3dd7373"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 936,
        "start_column": 2,
        "end_line": 936,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/EvalDist.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type w\ninst\u271d : spec.FiniteRange\noa : OracleComp spec \u03b1\n\u22a2 0 < [\u22a5|oa] \u2194 \u00acoa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/EvalDist.lean#L936"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "5abd0fc8d779178d8aec0be025e1b323b577b964f526e31a0edf7ebc8a4b3b6d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 26,
        "start_column": 35,
        "end_line": 26,
        "end_column": 40,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case pure\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh : spec.FiniteRange\noa' : OracleComp spec \u03b1\nx : \u03b1\n\u22a2 (pure x <|> oa').evalDist = (pure x <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/Alternative.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T14:51:55-04:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "a1c0805359e4f4ee9ebe4088b3c867958c98f2f1e2f21eccb03a84ba9566e902"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 29,
        "start_column": 4,
        "end_line": 29,
        "end_column": 9,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "case query_bind\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type v\nh\u271d : spec.FiniteRange\noa' : OracleComp spec \u03b1\ni : \u03b9\nt : spec.domain i\noa : spec.range i \u2192 OracleComp spec \u03b1\nh : \u2200 (u : spec.range i), (oa u <|> oa').evalDist = ((oa u).evalDist <|> oa'.evalDist)\n\u22a2 (liftM (OracleSpec.query i t) >>= oa <|> oa').evalDist =\n    ((liftM (OracleSpec.query i t) >>= oa).evalDist <|> oa'.evalDist)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/Alternative.lean#L29"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "95a31b8457d67034be504df84d713aae0af7e11be265de0613531e306d0bc1f6"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 2,
        "end_line": 52,
        "end_column": 7,
        "file": "VCVio/OracleComp/DistSemantics/Alternative.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u\noa oa' : OracleComp spec \u03b1\ninst\u271d : Decidable oa.neverFails\n\u22a2 (oa <|> oa').support = if oa.neverFails then oa.support else oa.support \u222a oa'.support",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/Alternative.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "f912fe2983db942ab163a7bda71511d2ea0d1c6e861db48fa942b7bcc97c734f"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 170,
        "start_column": 8,
        "end_line": 170,
        "end_column": 13,
        "file": "VCVio/OracleComp/DistSemantics/List.lean"
      },
      "debug_info": {
        "goal": "case pos.append_singleton.cons\n\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d\u00b9 : DecidableEq \u03b2\ninst\u271d : spec.FiniteRange\nf : \u03b1 \u2192 OracleComp spec \u03b2\nys zs : List \u03b2\nz : \u03b2\nh : take ys.length (zs ++ [z]) = ys.reverse\nx : \u03b1\nxs : List \u03b1\nhzs :\n  take ys.length zs = ys.reverse \u2192\n    [=drop ys.length zs|mapM.loop f (x :: xs) []] =\n      if zs.length = (x :: xs).length + ys.length then\n        (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length zs)).prod\n      else 0\n\u22a2 [=drop ys.length (zs ++ [z])|do\n      let __do_lift \u2190 f x\n      mapM.loop f xs [__do_lift]] =\n    if zs.length = xs.length + ys.length then\n      (zipWith (fun x z => [=z|f x]) (x :: xs) (drop ys.length (zs ++ [z]))).prod\n    else 0",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/DistSemantics/List.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-01-28T07:23:40-06:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "8751d626b2f9a09c08a848a3699715da34859524940e7cd8179d70624dbc8098"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/StateT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nspec : OracleSpec \u03b9\n\u03c3 : Type u\ninst\u271d : Subsingleton \u03c3\n\u03b1 : Type u\nso : QueryImpl spec (StateT \u03c3 (OracleComp spec))\nh : \u2200 (\u03b1 : Type u) (q : spec.OracleQuery \u03b1) (s : \u03c3), (so.impl q).run' s = liftM q\noa : OracleComp spec \u03b1\ns : \u03c3\n\u22a2 (simulateQ so oa).run' s = oa",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/SimSemantics/StateT.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "536902f74887316e576c839005b5d5103ed6d85346cedd8e0d0f32dfa5a3cf90"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 61,
        "start_column": 2,
        "end_line": 61,
        "end_column": 7,
        "file": "VCVio/OracleComp/SimSemantics/WriterT.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type u\nspec : OracleSpec \u03b9\n\u03b1 \u03c9 : Type u\ninst\u271d : Monoid \u03c9\nso : QueryImpl spec (WriterT \u03c9 (OracleComp spec))\nhso : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (fst <$> (so.impl q).run).support = \u22a4\nhso' : \u2200 {\u03b1 : Type u} (q : spec.OracleQuery \u03b1), (so.impl q).run.neverFails\noa : OracleComp spec \u03b1\n\u22a2 (simulateQ so oa).run.neverFails \u2194 oa.neverFails",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/VCVio/OracleComp/SimSemantics/WriterT.lean#L61"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "656784daf874a7689d55754e826e601c134ac3b6b87fc26bc206929a9cbf3456"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 84,
        "start_column": 4,
        "end_line": 84,
        "end_column": 9,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\na : \u03b1\nb : \u03b2\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh1 : Prod.fst <$> c = some <$> PMF.pure a\nh2 : Prod.snd <$> c = some <$> PMF.pure b\nthis : \u2200 (x : Option \u03b1), (Prod.fst <$> c) x = (some <$> PMF.pure a) x\n\u22a2 c = pure (a, b)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L84"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "180a41530ce2bb15007c139d2d224dd201acca9b62628892404320b40939229e"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 91,
        "start_column": 13,
        "end_line": 91,
        "end_column": 18,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mp\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c.IsCoupling OptionT.fail OptionT.fail\n\u22a2 c = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L91"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "18928d0e50a7f5d03115c03bdd576876d600a2c5644909ec885f8a5571b7451d"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_fst\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.fst <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "6faf5344b603aae66bbeb9555f7384e16afeb38c2f90a401e4e30822c0ea9b9a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 42,
        "end_line": 92,
        "end_column": 47,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mpr.map_snd\n\u03b1 \u03b2 : Type u\nc : SPMF (\u03b1 \u00d7 \u03b2)\nh : c = OptionT.fail\n\u22a2 Prod.snd <$> OptionT.fail = OptionT.fail",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "6b00f5f3bea1319dab5dc38ea5f81a09b7207effb595849f88e73de07da56d48"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 59,
        "end_line": 102,
        "end_column": 64,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_fst.e_a.h\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\na\u2081 : \u03b1\u2081\na\u2082 : \u03b1\u2082\nthis : \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\n\u22a2 Prod.fst <$> d (a\u2081, a\u2082).1 (a\u2081, a\u2082).2 = f (a\u2081, a\u2082).1",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "a5a382e859edf00562b930444b20baf06a90c0574a3266468a2672b1c90ea283"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 18,
        "end_line": 103,
        "end_column": 23,
        "file": "ToMathlib/ProbabilityTheory/Coupling.lean"
      },
      "debug_info": {
        "goal": "case mk.map_snd\n\u03b1\u2081 \u03b1\u2082 \u03b2\u2081 \u03b2\u2082 : Type u\np : SPMF \u03b1\u2081\nq : SPMF \u03b1\u2082\nf : \u03b1\u2081 \u2192 SPMF \u03b2\u2081\ng : \u03b1\u2082 \u2192 SPMF \u03b2\u2082\nc : p.Coupling q\nd : \u03b1\u2081 \u2192 \u03b1\u2082 \u2192 SPMF (\u03b2\u2081 \u00d7 \u03b2\u2082)\nh : \u2200 (a\u2081 : \u03b1\u2081) (a\u2082 : \u03b1\u2082), \u2191\u2191c (some (a\u2081, a\u2082)) \u2260 0 \u2192 (d a\u2081 a\u2082).IsCoupling (f a\u2081) (g a\u2082)\nhc\u2081 : Prod.fst <$> \u2191c = p\nhc\u2082 : Prod.snd <$> \u2191c = q\n\u22a2 (do\n      let a \u2190 \u2191c\n      Prod.snd <$> d a.1 a.2) =\n    do\n    let a \u2190 \u2191c\n    g a.2",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/ProbabilityTheory/Coupling.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T16:46:26-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "99f5830a307d103daed6950eb4ccd3cf3ce944ab3abaa87ce4130b7d9ae1ec6a"
    },
    {
      "repo": {
        "remote": "https://github.com/dtumad/VCV-io",
        "branch": "regev",
        "commit": "da29b16e026f45004ff96a3ed575c838649380ea",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 39,
        "end_line": 95,
        "end_column": 44,
        "file": "ToMathlib/Control/WriterT.lean"
      },
      "debug_info": {
        "goal": "m : Type u \u2192 Type v\ninst\u271d\u00b3 : AlternativeMonad m\n\u03c9 \u03b1 \u03b2 \u03b3 : Type u\ninst\u271d\u00b2 : Monoid \u03c9\ninst\u271d\u00b9 : LawfulMonad m\ninst\u271d : LawfulAlternative m\n\u22a2 LawfulAlternative (WriterT \u03c9 m)",
        "url": "https://github.com/dtumad/VCV-io/blob/da29b16e026f45004ff96a3ed575c838649380ea/ToMathlib/Control/WriterT.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-04-15T06:05:56-05:00",
        "inclusion_date": "2025-04-23T03:24:55.175622+00:00"
      },
      "id": "e5750786b63e07da351efe39f20705b271cb189d646c8abce0971293833ad98e"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 232,
        "start_column": 8,
        "end_line": 232,
        "end_column": 13,
        "file": "Foundation/Modal/Hilbert/NNFormula.lean"
      },
      "debug_info": {
        "goal": "\u03c6 : NNFormula \u2115\n\u22a2 \u2203 \u03c8, \u03c8.isModalCNF \u2227 Hilbert.K \u22a2! \u03c6.toFormula \u2b64 \u03c8.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Hilbert/NNFormula.lean#L232"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "cd8925a7578e3fd1ec23a50fdbcff59ac504775be5f40a2f0bb5a8bcafdeb831"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 236,
        "start_column": 8,
        "end_line": 236,
        "end_column": 13,
        "file": "Foundation/Modal/Hilbert/NNFormula.lean"
      },
      "debug_info": {
        "goal": "\u03c6 : NNFormula \u2115\n\u22a2 \u2203 \u03c8, \u03c8.isModalDNF \u2227 Hilbert.K \u22a2! \u03c6.toFormula \u2b64 \u03c8.toFormula",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Hilbert/NNFormula.lean#L236"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "54bf4cc9ab075278febe5d0fef9724b59c5a45d1dfef24ea9c1f88689cba363d"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 27,
        "start_column": 25,
        "end_line": 27,
        "end_column": 30,
        "file": "Foundation/Modal/Maximal/Makinson.lean"
      },
      "debug_info": {
        "goal": "L : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\n\u22a2 \u03b3 \u2208 L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L27"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "c084bca3f9aef533d553839211b6de4a8ea7457e2c6d432e1753bc9ff51542fa"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 28,
        "start_column": 33,
        "end_line": 28,
        "end_column": 38,
        "file": "Foundation/Modal/Maximal/Makinson.lean"
      },
      "debug_info": {
        "goal": "L : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\n\u22a2 \u03b3 \u2209 Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L28"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "5a9e77f9f729eb29d4651099c2c81a099e62c84c2830efdc83fbdb262ce38896"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 31,
        "start_column": 4,
        "end_line": 31,
        "end_column": 9,
        "file": "Foundation/Modal/Maximal/Makinson.lean"
      },
      "debug_info": {
        "goal": "L : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\nh\u03b3V : \u03b3 \u2209 Logic.Ver\n\u22a2 \u2203 \u03b4 \u2208 \u0393, (\u2191\u03b4).toFormula \u2208 L \u2227 (\u2191\u03b4).toFormula \u2209 Logic.Ver",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "e740fd040672f4fcc10fb7e988d599db5f1ead9edcb14a8d7a814401234a6125"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 36,
        "start_column": 4,
        "end_line": 36,
        "end_column": 9,
        "file": "Foundation/Modal/Maximal/Makinson.lean"
      },
      "debug_info": {
        "goal": "case mk.intro\nL : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis\u271d : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\nh\u03b3V : \u03b3 \u2209 Logic.Ver\n\u0394 : List { \u03c8 // \u03c8.isPrebox \u2228 \u03c8.isPredia \u2228 \u03c8.degree = 0 }\nh\u03b4\u0393 : \u27e8\u22c1\u0394.unattach, \u22ef\u27e9 \u2208 \u0393\nh\u03b4L : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2208 L\nh\u03b4V : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2209 Logic.Ver\n\u03be : NNFormula \u2115\nproperty\u271d : (\u25a1\u03be).isPrebox \u2228 (\u25a1\u03be).isPredia \u2228 (\u25a1\u03be).degree = 0\nh\u03c8\u2081 : \u27e8\u25a1\u03be, property\u271d\u27e9 \u2208 \u0394\nh\u03c8\u2082 : (\u2191\u27e8\u25a1\u03be, property\u271d\u27e9).isPrebox\nthis : \u25a1\u03be.toFormula \u2208 Logic.Ver\n\u22a2 False",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L36"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "e1695b651db01d4616a427a74792e55d9e56ac21c422b8ff8f290aa9d5bc09df"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 38,
        "start_column": 49,
        "end_line": 38,
        "end_column": 54,
        "file": "Foundation/Modal/Maximal/Makinson.lean"
      },
      "debug_info": {
        "goal": "L : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u03c6 \u2209 Logic.Ver\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\nh\u03b3V : \u03b3 \u2209 Logic.Ver\n\u0394 : List { \u03c8 // \u03c8.isPrebox \u2228 \u03c8.isPredia \u2228 \u03c8.degree = 0 }\nh\u03b4\u0393 : \u27e8\u22c1\u0394.unattach, \u22ef\u27e9 \u2208 \u0393\nh\u03b4L : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2208 L\nh\u03b4V : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2209 Logic.Ver\nh\u0394\u2081 : \u2200 \u03c8 \u2208 \u0394, \u00ac(\u2191\u03c8).isPrebox\n\u22a2 \u2203 \u0393, \u03c6 \u2b64 \u22c0\u0393 \u2208 L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "66b5348e6f514ec8d2637a4e75d6ab34c5f893ca51c1539eaf969400d5829746"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 40,
        "start_column": 2,
        "end_line": 40,
        "end_column": 7,
        "file": "Foundation/Modal/Maximal/Makinson.lean"
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.mk.intro.intro.intro\nL : Logic\ninst\u271d\u00b9 : L.Normal\ninst\u271d : L.Consistent\n\u03c6 : Formula \u2115\nhL : \u03c6 \u2208 L\nhV : \u00acHilbert.Ver \u22a2! \u03c6\n\u0393 : List { \u03c8 // \u03c8.isModalCNFPart }\n\u03b3 : Formula \u2115\ne\u03b3 : (\u22c0\u0393.unattach).toFormula = \u03b3\nh : Hilbert.K \u22a2! \u03c6.toNNFormula.toFormula \u2b64 \u03b3\nthis\u271d : \u03c6.toNNFormula.toFormula \u2b64 \u03b3 \u2208 L\nh\u03b3L : \u03b3 \u2208 L\nh\u03b3V : \u03b3 \u2209 Logic.Ver\n\u0394 : List { \u03c8 // \u03c8.isPrebox \u2228 \u03c8.isPredia \u2228 \u03c8.degree = 0 }\nh\u03b4\u0393 : \u27e8\u22c1\u0394.unattach, \u22ef\u27e9 \u2208 \u0393\nh\u03b4L : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2208 L\nh\u03b4V : (\u2191\u27e8\u22c1\u0394.unattach, \u22ef\u27e9).toFormula \u2209 Logic.Ver\nh\u0394\u2081 : \u2200 \u03c8 \u2208 \u0394, \u00ac(\u2191\u03c8).isPrebox\nthis : \u2203 \u0393, \u03c6 \u2b64 \u22c0\u0393 \u2208 L\n\u22a2 \u2203 \u03c8, \u25c7\u03c8 \u2208 L",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Maximal/Makinson.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-10T09:06:15+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "d99d0ab55f542c45bea9e7da4c087dcf5af53c6b1fabf50cd0e172f68541ec1e"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 42,
        "start_column": 4,
        "end_line": 42,
        "end_column": 9,
        "file": "Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 {\u03c6 : Formula \u2115}, Grz.miniCanonicalFrame Hilbert.GrzPoint3 \u03c6 \u2208 FrameClass.finite_connected_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Kripke/Hilbert/GrzPoint3.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "dd3f2d1ee7c1622bf78398bb7c1c810959b5c4333709085d0bffec78dff32d6d"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 33,
        "start_column": 101,
        "end_line": 33,
        "end_column": 106,
        "file": "Foundation/Modal/Kripke/Hilbert/GLPoint3.lean"
      },
      "debug_info": {
        "goal": "\u22a2 Complete Hilbert.GLPoint3 FrameClass.finite_strict_linear_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Kripke/Hilbert/GLPoint3.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-17T22:57:50+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "03647850b20caa42bd4ed5ddabbb952322a5f7028761c7554b4abab16ac6679c"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "frame-skeleton",
        "commit": "08b717a177f07bbd3f52e99c1c99d12c14a96235",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 35,
        "start_column": 4,
        "end_line": 35,
        "end_column": 9,
        "file": "Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 {\u03c6 : Formula \u2115}, Grz.miniCanonicalFrame Hilbert.GrzPoint2 \u03c6 \u2208 FrameClass.finite_confluent_partial_order",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/08b717a177f07bbd3f52e99c1c99d12c14a96235/Foundation/Modal/Kripke/Hilbert/GrzPoint2.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-03-14T14:50:18+09:00",
        "inclusion_date": "2025-04-23T03:29:02.090377+00:00"
      },
      "id": "aef4460638c4224f5bc131ecac102afb659413de0bfa3d3f43ff930ec172b25d"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "jnlindsay/feat/restricted-Lorentz-group",
        "commit": "fb8055bcc098d7a6f87175ddb0ed2803cf67282f",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 52,
        "start_column": 14,
        "end_line": 52,
        "end_column": 19,
        "file": "PhysLean/Relativity/Lorentz/Group/Restricted.lean"
      },
      "debug_info": {
        "goal": "d : \u2115\nx\u271d : \u2191(\ud835\udcdb d)\n\u22a2 x\u271d \u2208 { carrier := Restricted d, mul_mem' := \u22ef, one_mem' := \u22ef }.carrier \u2192\n    x\u271d\u207b\u00b9 \u2208 { carrier := Restricted d, mul_mem' := \u22ef, one_mem' := \u22ef }.carrier",
        "url": "https://github.com/HEPLean/PhysLean/blob/fb8055bcc098d7a6f87175ddb0ed2803cf67282f/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L52"
      },
      "metadata": {
        "blame_email_hash": "f5ab4f28bed3",
        "blame_date": "2025-04-23T00:56:21+10:00",
        "inclusion_date": "2025-04-23T03:48:35.976628+00:00"
      },
      "id": "273751bcf52c7f4d050c0db836fa78aee7dea568c9d237f00561c0ff3936272e"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "mariainesdff/isup_lemmas",
        "commit": "9171df48f3adfe318101adbbbae9771dff90a0e2",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 455,
        "start_column": 33,
        "end_line": 455,
        "end_column": 38,
        "file": "Mathlib/Analysis/SpecialFunctions/Pow/NNReal.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Sort u_1\ninst\u271d : Nonempty \u03b9\nf : \u03b9 \u2192 \u211d\nhf : \u2200 (i : \u03b9), 0 \u2264 f i\nn : \u2115\nhn : n \u2260 0\nhf_bdd : \u2200 (x : \u211d), \u2203 y \u2208 Set.range f, x < y\nx : \u211d\na : \u03b9\nhax : x ^ (1 / \u2191n) < f a\n\u22a2 0 < \u2191n",
        "url": "https://github.com/leanprover-community/mathlib4/blob/9171df48f3adfe318101adbbbae9771dff90a0e2/Mathlib/Analysis/SpecialFunctions/Pow/NNReal.lean#L455"
      },
      "metadata": {
        "blame_email_hash": "b2f50b2f722a",
        "blame_date": "2025-04-22T17:56:46+02:00",
        "inclusion_date": "2025-04-23T04:26:06.448018+00:00"
      },
      "id": "be413472e395f4ada0f788c69719eae4047ed10b0ea6fe684e77bd040a5d13ac"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "8b2c6bb629570ca44d5217890c2218e202eb9160",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 37,
        "start_column": 64,
        "end_line": 37,
        "end_column": 69,
        "file": "BatteriesTest/lintsimp.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d : Mul \u03b1\na x y : \u03b1\u1d50\u1d52\u1d56\n\u22a2 SemiconjBy a.unop y.unop x.unop \u2194 SemiconjBy a x y",
        "url": "https://github.com/leanprover-community/batteries/blob/8b2c6bb629570ca44d5217890c2218e202eb9160/BatteriesTest/lintsimp.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "8a7dcd08b95f",
        "blame_date": "2022-12-18T15:51:52-05:00",
        "inclusion_date": "2025-04-23T04:31:39.975158+00:00"
      },
      "id": "ac65a26000d288f420f51a6446c65564a1fd01d81b3ca09bf6b956eff2609859"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "8b2c6bb629570ca44d5217890c2218e202eb9160",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 7,
        "start_column": 2,
        "end_line": 7,
        "end_column": 7,
        "file": "BatteriesTest/lintunused.lean"
      },
      "debug_info": {
        "goal": "h : 1 = 1\n\u22a2 True",
        "url": "https://github.com/leanprover-community/batteries/blob/8b2c6bb629570ca44d5217890c2218e202eb9160/BatteriesTest/lintunused.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-08T02:17:31+02:00",
        "inclusion_date": "2025-04-23T04:31:39.975158+00:00"
      },
      "id": "9a8f972018ef15e61bb9d42c8edae501b7240b6742bc5712461b1fb4b848f8da"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "8b2c6bb629570ca44d5217890c2218e202eb9160",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 23,
        "start_column": 2,
        "end_line": 24,
        "end_column": 5,
        "file": "BatteriesTest/lint_unreachableTactic.lean"
      },
      "debug_info": {
        "goal": "\u22a2 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/8b2c6bb629570ca44d5217890c2218e202eb9160/BatteriesTest/lint_unreachableTactic.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-23T04:31:39.975158+00:00"
      },
      "id": "71518fe1bc1f2d2fb32d6236546c9c48b7dd928b58a9fdbde75ca7bbacaffa6f"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "8b2c6bb629570ca44d5217890c2218e202eb9160",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 31,
        "start_column": 33,
        "end_line": 31,
        "end_column": 38,
        "file": "BatteriesTest/lint_unreachableTactic.lean"
      },
      "debug_info": {
        "goal": "aa : Nat\n\u22a2 aa = 0 \u2192 t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/8b2c6bb629570ca44d5217890c2218e202eb9160/BatteriesTest/lint_unreachableTactic.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-04-23T04:31:39.975158+00:00"
      },
      "id": "ab0df0e3f6765e87b2db3473f012b3a1ac87f28999a6fbf74b51aa82421eec90"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 22,
        "start_column": 31,
        "end_line": 22,
        "end_column": 36,
        "file": "Pdl/SemQuot.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a b : Formula\u2984, a \u2248 b \u2192 (~a) \u2248 (~b)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/SemQuot.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "bf244fa66a289f770e799652c37b4cd6ee410aa32272a63c8456cd9f560ff620"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 25,
        "start_column": 32,
        "end_line": 25,
        "end_column": 37,
        "file": "Pdl/SemQuot.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 \u2983a\u2081 a\u2082 : Formula\u2984, a\u2081 \u2248 a\u2082 \u2192 \u2200 \u2983b\u2081 b\u2082 : Formula\u2984, b\u2081 \u2248 b\u2082 \u2192 a\u2081\u22c0b\u2081 \u2248 a\u2082\u22c0b\u2082",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/SemQuot.lean#L25"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-22T18:21:35+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "ca4c81edb1a073afbbee68af5e3087cf94d8da3bed1b1ab8b5de08fed18f6a01"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 344,
        "start_column": 99,
        "end_line": 344,
        "end_column": 104,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type\nn : \u2115\nys : List.Vector \u03b1 n.succ\n\u22a2 ys.head = ys.get 0",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L344"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "a6e87c7fedcecdcd2204c776ee27f93d7b26f10d1755b0aac044be8e7c4b062d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 380,
        "start_column": 12,
        "end_line": 380,
        "end_column": 17,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\nHist\u271d : History\nX\u271d : Sequent\na\u271d : Tableau Hist\u271d X\u271d\na : PathIn (tabAt PathIn.nil).snd.snd\n\u22a2 (PathIn.nil.append a).rewind 1 = PathIn.nil",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L380"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T23:51:39+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "dbe3278e09f29a33a2b1127f9dd717e6517d4377ef7ab350608c796c19876b32"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 384,
        "start_column": 4,
        "end_line": 384,
        "end_column": 9,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nHist0 : History\nX0 : Sequent\nnrep : \u00acrep Hist0 X0\nnbas : \u00acX0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf lt \u2192 Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y \u2208 endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\n\u22a2 \u00ac1 = Fin.last (List.length ((tail.append a).toHistory ++ [X0]))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L384"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "4b6e36fe8faaa8dbd8582562490a37bcb9c8cba89e3c5cd232ffac72fa392752"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 387,
        "start_column": 2,
        "end_line": 387,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nHist0 : History\nX0 : Sequent\nnrep : \u00acrep Hist0 X0\nnbas : \u00acX0.basic\nlt : LocalTableau X0\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf lt \u2192 Tableau (X0 :: Hist0) Y\nY : Sequent\nY_in : Y \u2208 endNodesOf lt\ntail : PathIn (next Y Y_in)\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt (PathIn.loc Y_in tail)).snd.snd\nh : \u00ac1 = Fin.last (List.length (PathIn.loc Y_in (tail.append a)).toHistory)\n\u22a2 (tail.append a).rewind \u27e81, \u22ef\u27e9 = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L387"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "6922c62a455b6645b32e9927480d154dbdf74523bdcbeefc72f7c9d2b689d2b9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 389,
        "start_column": 118,
        "end_line": 389,
        "end_column": 123,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nY : History\nZ X0 : Sequent\nnrep : \u00acrep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\n\u22a2 \u00ac1 = Fin.last (List.length (tail.append a).pdl.toHistory)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L389"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "07d108df630c12efde3b8811670570255828851c87870a4780b50b51d49cf57d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 392,
        "start_column": 2,
        "end_line": 392,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nY : History\nZ X0 : Sequent\nnrep : \u00acrep Y Z\nbas : Z.basic\nr : PdlRule Z X0\nnext : Tableau (Z :: Y) X0\ntail : PathIn next\nIH : \u2200 {a : PathIn (tabAt tail).snd.snd}, (tail.append a).rewind 1 = tail\na : PathIn (tabAt tail.pdl).snd.snd\nh : \u00ac1 = Fin.last (List.length (tail.append a).pdl.toHistory)\n\u22a2 (tail.append a).rewind \u27e81, \u22ef\u27e9 = tail",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L392"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "4b29784b5ea2c683c2c4a899c795a505de9d01128a6606f2f7dcdb20a010d879"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 464,
        "start_column": 15,
        "end_line": 464,
        "end_column": 20,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\n\u22a2 (b.rewind m).rewind \u21910 = b.rewind m",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L464"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "c0bd90da615643ab7a35ee71c3bae423a91cbe9df8dd9c00d732930a2cf5fb68"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 465,
        "start_column": 20,
        "end_line": 465,
        "end_column": 25,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nb : PathIn tab\nm : Fin (List.length b.toHistory + 1)\nk : Fin (List.length b.toHistory)\nih : (b.rewind m).rewind \u2191\u2191k.castSucc = b.rewind (m + k.castSucc)\n\u22a2 (b.rewind m).rewind \u2191\u2191k.succ = b.rewind (m + k.succ)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L465"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "41bb965bd45d738f6b6556cf6e7880ae76939c60b96e09f9176afdaf6bc56bb9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 480,
        "start_column": 30,
        "end_line": 480,
        "end_column": 35,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h\na\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\na b\u271d c b : PathIn tab\na_c : Relation.TransGen edge a c\nc_b : c \u22d6_ b\nih : \u2203 k, c.rewind k = a\nk : Fin (List.length c.toHistory + 1)\nc_re_k_is_a : c.rewind k = a\nb_re_1_is_c : b.rewind 1 = c\nb_re_is_a : (b.rewind 1).rewind \u2191\u2191k = a\n\u22a2 b.rewind (\u2191\u2191k + 1) = (b.rewind 1).rewind \u2191\u2191k",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L480"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "c021780b75ffa39e4f2f63996e165022c2974f6f0d3f90cb8a10d980a7f3d781"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 492,
        "start_column": 22,
        "end_line": 492,
        "end_column": 27,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.left\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na : PathIn tab\na_b : a \u22d6_ b\nb_re_1_is_a : (c.rewind k').rewind 1 = a\n\u22a2 c.rewind \u2191\u2191k'.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L492"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "02fcb99deeb293ea8a6598ce5e9dcf750d4129ccebe4b92ba017e73a2506ad16"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 497,
        "start_column": 24,
        "end_line": 497,
        "end_column": 29,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.right.right\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\na : PathIn tab\na_b : a \u22d6_ b\nb_re_1_is_a : b.rewind 1 = a\nk'_val : \u2115\nk'_hyp : k'_val < List.length c.toHistory + 1\nc_re_k'_is_b : c.rewind \u27e8k'_val, k'_hyp\u27e9 = b\n\u22a2 \u27e8k'_val, k'_hyp\u27e9 \u2264 \u2191(k'_val + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "d0e9c5e469d9b055692f5b223f450dec70824369db4961e06ada4a6eb290c42f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 504,
        "start_column": 29,
        "end_line": 504,
        "end_column": 34,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.left\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a \u22d6_ d\nd_b : Relation.TransGen edge d b\nih : \u2203 k k', c.rewind k = d \u2227 c.rewind k' = b \u2227 k' \u2264 k\nn n' : Fin (List.length c.toHistory + 1)\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' \u2264 n\nd_re_1_is_a : (c.rewind n).rewind 1 = a\n\u22a2 c.rewind \u2191\u2191n.succ = a",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L504"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "ebcf54c2f1328bdaf9b1e42e017430e1a4e5fc23e13a4972b3fd721c64a30171"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 508,
        "start_column": 31,
        "end_line": 508,
        "end_column": 36,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case h.right.right\na\u271d\u00b2 : History\na\u271d\u00b9 : Sequent\ntab : Tableau a\u271d\u00b2 a\u271d\u00b9\na\u271d b c : PathIn tab\nh' : b < c\nk' : Fin (List.length c.toHistory + 1)\nc_re_k'_is_b : c.rewind k' = b\na d : PathIn tab\na_d : a \u22d6_ d\nd_b : Relation.TransGen edge d b\nn n' : Fin (List.length c.toHistory + 1)\nih : \u2203 k, c.rewind k = d \u2227 \u2203 x, c.rewind x = b \u2227 x \u2264 k\nc_re_n_is_d : c.rewind n = d\nc_re_n'_is_b : c.rewind n' = b\nn'_lt_n : n' \u2264 n\n\u22a2 n' \u2264 \u2191(\u2191n + 1)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L508"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-21T17:43:13+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "21c2b168a8bcb7b9081037d9c0f68c31ca5583f196e54129b4ba8b86ccb678f5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 533,
        "start_column": 0,
        "end_line": 533,
        "end_column": 5,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a\u271d\u00b9 : History\na\u271d : Sequent\ntab : Tableau a\u271d\u00b9 a\u271d\nc t : PathIn tab\nk k' : Fin (List.length t.toHistory + 1)\nh1 : t.rewind k = c\nh2 : t.rewind k' = c\n\u22a2 \u2191k = \u2191k'",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L533"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-22T18:20:05+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "873b4a963741f49575148f3e512767be00c4ad0cb3b7715be283c52e9cfc3ab1"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 564,
        "start_column": 46,
        "end_line": 564,
        "end_column": 51,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "a : Sequent\ntab : Tableau [] a\nt l c : PathIn tab\nt_free : (nodeAt t).isFree = true\nt_above_l : t < l\nl_hearts_c : l \u2665 c\nlpr : LoadedPathRepeat (tabAt l).fst (tabAt l).snd.fst\ntabAt_l_def : (tabAt l).snd.snd = Tableau.lrep lpr\nc_def : c = l.rewind (\u22ef \u25b8 \u2191lpr).succ\nhyp : \u00act < c\nc_above_l : c < l\ncomp_leq_t : c \u2264 t\ncomp_lt_t : c < t\nk k' : Fin (List.length l.toHistory + 1)\ndef_c : l.rewind k = c\ndef_t : l.rewind k' = t\nk'_lt_k : \u2191k' \u2264 \u2191k\nthis : \u2191(cast \u22ef \u2191lpr) + 1 = \u2191k\n\u22a2 \u2191(cast \u22ef \u2191lpr) = \u2191\u2191lpr",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L564"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-22T18:20:05+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "e84f790fa31759e2d1afb071932a3b953a262f5e69e16d5f60ff5bc4224c88d7"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 864,
        "start_column": 10,
        "end_line": 864,
        "end_column": 15,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case refine_1\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 sorry \u2208 endNodesOf (next (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u22ef)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L864"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "78c237ba5920400fa3047b79d10548f27b9c81b4d91f0982e2457087da0d59b4"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 865,
        "start_column": 10,
        "end_line": 865,
        "end_column": 15,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "case refine_2\nX : Sequent\nW : Type\nM : KripkeModel W\nv w : W\nside : Side\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03c7' : LoadFormula\nw_n\u03be : (M, w)\u22a8~''(AnyFormula.loaded \u03c7')\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230bAnyFormula.loaded \u03c7'))).in_side side (L, R, O)\n\u03b1'_not_atomic : \u00ac\u03b1.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1\u230bAnyFormula.loaded \u03c7')) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1\u230bAnyFormula.loaded \u03c7') (LoadRule.dia \u03b1'_not_atomic)) (L, R, O)\nclaim : (L ++ F, R, some (Sum.inl (~'\u230a\u230a\u03b4\u230b\u230b\u03c7'))) \u2208 B\n\u22a2 (M, v)\u22a8sorry \u2227\n    (sorry.isFree = true \u2228\n      \u2203 F \u03b3,\n        (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7'))).in_side side sorry \u2227\n          relateSeq M \u03b3 v w \u2227\n            (\u2200 f \u2208 F, evaluate M v f) \u2227\n              (F, \u03b3) \u2208 H \u03b1 \u2227 (sorry.without (~''(AnyFormula.loadBoxes \u03b3 (AnyFormula.loaded \u03c7')))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L865"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "d43a320ac459688b63abbd55c93486aa53aa9d3d4560f84cd6e7c18b0da5e5f5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 868,
        "start_column": 8,
        "end_line": 868,
        "end_column": 13,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (\u2200 f \u2208 F, evaluate M v f) \u2227\n                        (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nF : List Formula\n\u03b4 : List Program\n_in_H : (F, \u03b4) \u2208 H \u03b1\nv_F : \u2200 f \u2208 F, evaluate M v f\nv_\u03b4_w : relateSeq M \u03b4 v w\n\u03b1' : Program\n\u03c6 : Formula\n\u03b1'_not_atomic : \u00ac\u03b1'.isAtomic\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inl (~'\u230a\u03b1'\u230bAnyFormula.normal \u03c6)) \u2286 O\nB_def_apply_r_LRO :\n  B = applyLocalRule (LocalRule.loadedL (\u230a\u03b1'\u230bAnyFormula.normal \u03c6) (LoadRule.dia' \u03b1'_not_atomic)) (L, R, O)\n\u22a2 \u2203 Y,\n    (\u2203 l, (\u2203 a, \u2203 (h : a \u2208 B), endNodesOf (next a \u22ef) = l) \u2227 Y \u2208 l) \u2227\n      (M, v)\u22a8Y \u2227\n        (Y.isFree = true \u2228\n          \u2203 F \u03b3,\n            (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n              relateSeq M \u03b3 v w \u2227\n                (\u2200 f \u2208 F, evaluate M v f) \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L868"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "6598185278b14802c0cee8023aa7b10a997edb495eca395a5cfd96b14b511aa3"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 872,
        "start_column": 6,
        "end_line": 872,
        "end_column": 11,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\nW : Type\nM : KripkeModel W\nv w : W\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\nB : List Sequent\nnext : (Y : Sequent) \u2192 Y \u2208 B \u2192 LocalTableau Y\nIH :\n  \u2200 (Y : Sequent) (a : Y \u2208 B) (\u03b1 : Program),\n    relate M \u03b1 v w \u2192\n      (M, v)\u22a8Y \u2192\n        (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side Y \u2192\n          \u2203 Y_1 \u2208 endNodesOf (next Y a),\n            (M, v)\u22a8Y_1 \u2227\n              (Y_1.isFree = true \u2228\n                \u2203 F \u03b3,\n                  (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y_1 \u2227\n                    relateSeq M \u03b3 v w \u2227\n                      (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y_1.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)\n\u03b1 : Program\nv_\u03b1_w : relate M \u03b1 v w\nL R : List Formula\nO : Olf\nv_t : (M, v)\u22a8(L, R, O)\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (L, R, O)\nlocRulTru : \u2200 (w : W), (M, w)\u22a8(L, R, O) \u2194 \u2203 Ci \u2208 B, (M, w)\u22a8Ci\nress\u271d : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7\u271d : LoadFormula\nlrule\u271d : LoadRule (~'\u03c7\u271d) ress\u271d\nprecons : \u2205.Subperm L \u2227 \u2205.Subperm R \u2227 some (Sum.inr (~'\u03c7\u271d)) \u2286 O\nB_def_apply_r_LRO : B = applyLocalRule (LocalRule.loadedR \u03c7\u271d lrule\u271d) (L, R, O)\n\u22a2 \u2203\n    Y \u2208\n      endNodesOf\n        (LocalTableau.byLocalRule (LocalRuleApp.mk \u2205 \u2205 (some (Sum.inr (~'\u03c7\u271d))) (LocalRule.loadedR \u03c7\u271d lrule\u271d) precons)\n          next),\n    (M, v)\u22a8Y \u2227\n      (Y.isFree = true \u2228\n        \u2203 F \u03b3,\n          (~''(AnyFormula.loadBoxes \u03b3 \u03be)).in_side side Y \u2227\n            relateSeq M \u03b3 v w \u2227 (M, v)\u22a8F \u2227 (F, \u03b3) \u2208 H \u03b1 \u2227 (Y.without (~''(AnyFormula.loadBoxes \u03b3 \u03be))).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L872"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-15T19:37:25+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "42ac1da21c13d5abb6a2284a2b95b6efc71e2bd91e779e6464b4f87091b2751f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 996,
        "start_column": 2,
        "end_line": 996,
        "end_column": 7,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\n\u22a2 \u2203 s,\n    t \u25c3\u207a s \u2227\n      satisfiable (nodeAt s) \u2227\n        (\u00acs \u2261\u1d9c t \u2228 (~''\u03be).in_side side (nodeAt s) \u2227 (M, w)\u22a8nodeAt s \u2227 ((nodeAt s).without (~''\u03be)).isFree = true)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L996"
      },
      "metadata": {
        "blame_email_hash": "cc8f18f5e466",
        "blame_date": "2025-04-09T11:04:11+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "c13397dcc805e5042421604c17670f8639652316309ecf2a1183570223a1ee53"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1174,
        "start_column": 16,
        "end_line": 1174,
        "end_column": 21,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : t \u25c3\u207a sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : \u2115\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u00b7a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : M.Rel a\u271d v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u00b7a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : \u03b4[\u2191k] = \u00b7a\u271d\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L1174"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "37f7f963bad281debc1b1ba7e8d137f4564b4ce13bc2967f3b69e0a720ec3432"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1178,
        "start_column": 16,
        "end_line": 1178,
        "end_column": 21,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nnbas : \u00acZ.basic\nltZ : LocalTableau Z\nnrep : \u00acrep Hist Z\nnext : (Y : Sequent) \u2192 Y \u2208 endNodesOf ltZ \u2192 Tableau (Z :: Hist) Y\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.loc nrep nbas ltZ next\u27e9\u27e9\nY : Sequent\nY_in : Y \u2208 endNodesOf ltZ\nw_Y : (M, v)\u22a8Y\nt_to_s1 : PathIn (tabAt t).snd.snd := \u22ef \u25b8 PathIn.loc Y_in PathIn.nil\ns1 : PathIn tab := t.append t_to_s1\nt_s : t \u22d6_ s1\ntabAt_s_def : tabAt s1 = \u27e8Z :: Hist, \u27e8Y, next Y Y_in\u27e9\u27e9\nv_s1 : (M, v)\u22a8nodeAt s1\nF : List Formula\n\u03b4 : List Program\nanf_in_Y : (~''(AnyFormula.loadBoxes \u03b4 \u03be)).in_side side Y\nv_seq_w : relateSeq M \u03b4 v w\nv_F : \u2200 f \u2208 F, evaluate M v f\nY_almost_free : (Y.without (~''(AnyFormula.loadBoxes \u03b4 \u03be))).isFree = true\nh\u271d : \u00ac\u03b4 = []\nws : List.Vector W \u03b4.length.succ\nv_def : v = ws.head\nw_def : w = ws.last\nk : Fin \u03b4.length\nsk : PathIn tab\nt_sk : t \u25c3\u207a sk\n_in_node_sk : (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be)).in_side side (nodeAt sk)\nwsk_sk : (M, ws[\u2191k])\u22a8nodeAt sk\nanf_in_sk : ((nodeAt sk).without (~''(AnyFormula.loadBoxes (List.drop (\u2191k) \u03b4) \u03be))).isFree = true\na\u271d : Program\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u2217a\u271d\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : Relation.ReflTransGen (relate M a\u271d) v w\nF\u03b4_in_H : (F, \u03b4) \u2208 H (\u2217a\u271d)\nws_rel : \u2200 (i : Fin \u03b4.length), relate M \u03b4[\u2191i] (ws.get i.castSucc) (ws.get i.succ)\nthis : lengthOfProgram \u03b4[\u2191k] \u2264 1 + lengthOfProgram a\u271d\n\u22a2 lengthOfProgram \u03b4[\u2191k] < 1 + lengthOfProgram a\u271d",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L1178"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-21T00:03:28+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "93710b47c33f90e87112d464867e22a0e2038cbdff93e51e558dfb01b96461db"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 1516,
        "start_column": 6,
        "end_line": 1516,
        "end_column": 11,
        "file": "Pdl/Soundness.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Program\nX : Sequent\ntab : Tableau [] X\nroot_free : X.isFree = true\nt : PathIn tab\nW : Type\nM : KripkeModel W\nv w : W\nv_t : (M, v)\u22a8nodeAt t\n\u03be : AnyFormula\nside : Side\nnegLoad_in : (~''(AnyFormula.loaded (\u230a\u03b1\u230b\u03be))).in_side side (nodeAt t)\nv_\u03b1_w : relate M \u03b1 v w\nw_n\u03be : (M, w)\u22a8~''\u03be\ns : PathIn tab\nIH :\n  t = s \u2192\n    \u2203 s_1,\n      s \u25c3\u207a s_1 \u2227\n        (satisfiable (nodeAt s_1) \u2227 \u00acs_1 \u2261\u1d9c s \u2228\n          (~''\u03be).in_side side (nodeAt s_1) \u2227 (M, w)\u22a8nodeAt s_1 \u2227 ((nodeAt s_1).without (~''\u03be)).isFree = true)\ns_t0 : s \u22d6_ t\nHist : History\nZ : Sequent\nlpr : LoadedPathRepeat Hist Z\ntabAt_t_def : tabAt t = \u27e8Hist, \u27e8Z, Tableau.lrep lpr\u27e9\u27e9\n\u22a2 (tabAt t).snd.snd = Tableau.lrep (\u22ef \u25b8 lpr)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/Soundness.lean#L1516"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-11-21T22:55:48+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "3db65f106c86ab029b4fb5408b486dbff274c930a545524c665dbb89ebbdaa7a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 21,
        "start_column": 13,
        "end_line": 21,
        "end_column": 18,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u2200 (p next : Sequent \u2295 Sequent \u00d7 Formula \u00d7 Rule), next \u2208 sorry p \u2192 sorry next < sorry p",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauGame.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-03T14:06:27+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "d33dbf525963efe4f931af302e1666e781949c071f5c9da516961cf0a431166f"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 42,
        "start_column": 2,
        "end_line": 42,
        "end_column": 7,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Prover\nh : winning (Sum.inl X) s\n\u22a2 Nonempty (Tableau [] X)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauGame.lean#L42"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "5ce7333f085e51a12544a414e812953ff007d73265deea8d34ad5d6af59b8433"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 49,
        "start_column": 2,
        "end_line": 49,
        "end_column": 7,
        "file": "Pdl/TableauGame.lean"
      },
      "debug_info": {
        "goal": "X : Sequent\ns : Strategy tableauGame Builder\nh : winning (Sum.inl X) s\n\u22a2 \u2203 WS mg, X.toFinset \u2208 WS",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauGame.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-12-26T00:40:09+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "3b5e7f08cd8d134fe113c502032ea8f65c851581b844900ae226e45393952516"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 40,
        "start_column": 4,
        "end_line": 40,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case inr.inl.intro.intro.h\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\n\u03c4 : Formula\n\u03c4_in : \u03c4 \u2208 testsOfProgram \u03b1\n\u03c8_in : (~\u03c4) \u2208 L\nx_in_voc_\u03c8 : x \u2208 \u03c4.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "76118658e28be607a4eb68cf4b24b0a5ed677f8b7a2692a9ea7c488cf5482004"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 43,
        "start_column": 4,
        "end_line": 43,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case inr.inr.intro.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nL : List Formula\nL_in : L \u2208 unfoldBox \u03b1 \u03c6\na : \u2115\n\u03b4 : List Program\n\u03c8_in : (\u2308\u00b7a\u2309\u2308\u2308\u03b4\u2309\u2309\u03c6) \u2208 L\nright\u271d : \u00b7a \u2208 subprograms \u03b1 \u2227 \u2200 a \u2208 \u03b4, a \u2208 subprograms \u03b1\nx_in_voc_\u03c8 : x = Sum.inr a \u2228 x \u2208 \u03b4.pvoc \u222a \u03c6.voc\n\u22a2 x \u2208 \u03b1.voc \u2228 x \u2208 \u03c6.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "b9ebb2f6bf3b1160d368092f5ae45832b164f4350dd4114d2a38063e26de6a31"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 70,
        "start_column": 6,
        "end_line": 70,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case h.intro.intro\nx : \u2115 \u2295 \u2115\n\u03b1 : Program\n\u03c6 : Formula\nFs : List Formula\n\u03b4 : List Program\nin_H : (Fs, \u03b4) \u2208 H \u03b1\nthis : \u2200 (\u03b1 : Program) {Fs : List Formula} {\u03b4 : List Program}, (Fs, \u03b4) \u2208 H \u03b1 \u2192 \u03b4 = [] \u2228 \u2203 a \u03b4', \u03b4 = \u00b7a :: \u03b4'\n\u03b1' : Program\n\u03b1'_in : \u03b1' \u2208 \u03b4\nx_in : x \u2208 \u03b1'.voc\n\u22a2 x \u2208 \u03b1.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "7930328dd56ac5a0ce696ca02781143e0f0f95cd0c440f7a50e75b588d60dfe0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 108,
        "start_column": 4,
        "end_line": 108,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case intro.intro.intro.intro.intro\nx : \u2115 \u2295 \u2115\nress : List (List Formula \u00d7 Option NegLoadFormula)\n\u03c7 : LoadFormula\nlrule : LoadRule (~'\u03c7) ress\nL : List Formula\nlnf : Option NegLoadFormula\nin_ress : (L, lnf) \u2208 ress\n\u03c6 : Formula\n\u03c6_in_L : \u03c6 \u2208 L\nbla : x \u2208 \u03c6.voc\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-10-18T22:57:53+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "f754d9a019611c964350735056c090c586a24248ddc8e6379675d02b8cf0dd40"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.1.fvoc \u2286 Rcond.fvoc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "f4305abbb7c12aaa275e651a8ba5a4279dbedff4bbed306b7078ade1fbd1a63a"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 118,
        "start_column": 2,
        "end_line": 118,
        "end_column": 7,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "Lcond Rcond : List Formula\nOcond : Olf\nress : List Sequent\nrule : LocalRule (Lcond, Rcond, Ocond) ress\n\u22a2 \u2200 res \u2208 ress, res.2.2.voc \u2286 Ocond.voc",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "b3d5b608ba7a2dc927f796c41d32c64bafecb7a7cef4cbae2f6a38fd7d3cd614"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 129,
        "start_column": 4,
        "end_line": 129,
        "end_column": 9,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case mk.mk\nX : Sequent\nC : List Sequent\nruleA : LocalRuleApp X C\nL R : List Formula\nress : List Sequent\nO : Olf\nLcond Rcond : List Formula\nOcond : Olf\nlrule : LocalRule (Lcond, Rcond, Ocond) ress\npreconditionProof : Lcond.Subperm L \u2227 Rcond.Subperm R \u2227 Ocond \u2286 O\ncL cR : List Formula\ncO : Olf\nx : \u2115 \u2295 \u2115\nx_in_voc_C :\n  (x \u2208 Vocab.fromList (List.map Formula.voc cL) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc cO.toForms)) \u2227\n    (x \u2208 Vocab.fromList (List.map Formula.voc cR) \u2228 x \u2208 Vocab.fromList (List.map Formula.voc cO.toForms))\nthis : \u2200 res \u2208 ress, res.1.fvoc \u2286 Lcond.fvoc\nC_in : (cL, cR, cO) \u2208 applyLocalRule lrule (L, R, O)\n\u22a2 x \u2208 jvoc (L, R, O)",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "065e69c1c744bdb1f7e522e56b1d9ebf948332b1f17cc783e2cd0e589e6d4dd9"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 154,
        "start_column": 8,
        "end_line": 154,
        "end_column": 13,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.right.left\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nL_and_n\u03b8_sat : satisfiable ((~dis interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L154"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "d6ad9ed86b84bda63b0e879573d7b49c4c19efae68c6c81141512541bf808c42"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 156,
        "start_column": 8,
        "end_line": 156,
        "end_column": 13,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.right.right\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nLcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Lcond ress\u271d\nprecondProof : Lcond.Subperm L \u2227 \u2205.Subperm R \u2227 none \u2286 o\nrule : LocalRule (Lcond, \u2205, none) (List.map (fun res => (res, \u2205, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk Lcond \u2205 none rule precondProof\ndef_rule : rule = LocalRule.oneSidedL orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nR_and_\u03b8_sat : satisfiable (dis interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-07-11T22:21:56+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "94107f9eef0118106124c05e646fae7c15e4a0d50efa5d83a02c50d3d480347e"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 170,
        "start_column": 6,
        "end_line": 170,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.refine_2\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nL_and_n\u03b8_sat : satisfiable ((~Con interList) :: Sequent.left (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "2a2625acf2ca2aef00f70a1d2a3ec859b26758e5fdaf7565d87ead1c5daf70a5"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 172,
        "start_column": 6,
        "end_line": 172,
        "end_column": 11,
        "file": "Pdl/PartInterpolation.lean"
      },
      "debug_info": {
        "goal": "case property.refine_3\nC : List Sequent\nL R : List Formula\no : Olf\nruleA : LocalRuleApp (L, R, o) C\nsub\u03b8s : (c : Sequent) \u2192 c \u2208 C \u2192 PartInterpolant c\nRcond : List Formula\nress\u271d : List (List Formula)\norule : OneSidedLocalRule Rcond ress\u271d\nprecondProof : \u2205.Subperm L \u2227 Rcond.Subperm R \u2227 none \u2286 o\nrule : LocalRule (\u2205, Rcond, none) (List.map (fun res => (\u2205, res, none)) ress\u271d)\nhc : C = applyLocalRule rule (L, R, o)\ndef_ruleA : ruleA = LocalRuleApp.mk \u2205 Rcond none rule precondProof\ndef_rule : rule = LocalRule.oneSidedR orule\ninterList : List Formula :=\n  List.map\n    (fun x =>\n      match x with\n      | \u27e8c, cinC\u27e9 => \u2191(sub\u03b8s c cinC))\n    C.attach\nR_and_\u03b8_sat : satisfiable (Con interList :: Sequent.right (L, R, o))\n\u22a2 False",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/PartInterpolation.lean#L172"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2024-09-13T00:22:40+02:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "293ae2d2ac32d3507fc34328e356bd1549e82110f4f03ced052d75fce75b97b0"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 165,
        "start_column": 2,
        "end_line": 165,
        "end_column": 7,
        "file": "Pdl/TableauExamples.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308\u2217a\u2309~\u2308a\u2309p)\u22c0(~p))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauExamples.lean#L165"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "b07d7ce6002ec454c6ef833225b2e003b4624ac4fad36758febbeba35a0a708d"
    },
    {
      "repo": {
        "remote": "https://github.com/m4lvin/lean4-pdl",
        "branch": "loadedDiamondPaths",
        "commit": "b4ee4d85ab374584e789fcd5caeed0dab902cb95",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 170,
        "start_column": 2,
        "end_line": 170,
        "end_column": 7,
        "file": "Pdl/TableauExamples.lean"
      },
      "debug_info": {
        "goal": "\u22a2 \u00acprovable (~(\u2308a\u2309\u2308\u2217a\u2309p)\u22c0(~\u2308a\u2309\u2308\u2217a\u2309q))",
        "url": "https://github.com/m4lvin/lean4-pdl/blob/b4ee4d85ab374584e789fcd5caeed0dab902cb95/Pdl/TableauExamples.lean#L170"
      },
      "metadata": {
        "blame_email_hash": "f9cc4b9ec8ec",
        "blame_date": "2025-01-24T21:13:32+01:00",
        "inclusion_date": "2025-04-23T04:37:34.009120+00:00"
      },
      "id": "1a93a96117c8a61542e2dc3abbf005e9d9c433f7b569e61dc6e2b5e18ded6f8c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 60,
        "start_column": 9,
        "end_line": 60,
        "end_column": 14,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 ToOracle (OStatement i)\nWitEquiv : Type\ninst\u271d : ToOracle WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "5d4df24f59bd07f72a0648fe55601ce37aa0399e16df3618443fdc24a7af23da"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 78,
        "start_column": 2,
        "end_line": 78,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 ToOracle (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : ToOracle WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "2e61cc3a3c233104a792acd6e119f57fd1958d0534216783124f88baa8e5fcbc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 138,
        "start_column": 9,
        "end_line": 138,
        "end_column": 14,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d : (i : \u03b9\u209b\u1d62) \u2192 ToOracle (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "93ba09b2d337817d388c188e4336f817e87a73d7a2c16a53547656e5e7bce21a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b2 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 ToOracle (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4ddc7c464908d16439a92b833b7dedfdec02df06b046194e05a423596e44c68a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 255,
        "start_column": 2,
        "end_line": 255,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b2 : ToOracle OStatement\ninst\u271d\u00b9 : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Components.lean#L255"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "9ab89baca680ddef1c75d80464f1868236672bcfcc0b3f8181fd1e4f7377e5f7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Execution.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190 (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "c8aa6d09dcf9ac82e98b94842d3e619b8cf09bce062bbb6330f277d1cd342c15"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Execution.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | \u27e80, isLt\u27e9 => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "98992c8fa435d058999c933bcb98b066d8c8eeb75f316802cacb5ac4a93b98a6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Equiv.lean"
      },
      "debug_info": {
        "goal": "\u22a2 (do\n      let _ \u2190 liftM (query 0 ())\n      (fun a => (0, \u2191a)) <$> liftM (query 1 ())) =\n    do\n    let y \u2190 liftM (query 1 ())\n    (fun a => (0, \u2191y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "8c8a5581bf05aeb32ed9ba5a218a353bf66c227f798c8a1b3623ec36f1066093"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9,
        "file": "ZKLib/OracleReduction/Equiv.lean"
      },
      "debug_info": {
        "goal": "case h.h.none\n\u22a2 (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a)))) none =\n    \u2211' (a : Fin 2), 2\u207b\u00b9 * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a_1 => (0, \u2191a)))) none",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "78f75ea3d39c3be2042b085fc844f1b6a36d2c4ebf99ab02b4cfe1605adbca08"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9,
        "file": "ZKLib/OracleReduction/Equiv.lean"
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : \u2115\n\u22a2 (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a => (0, \u2191y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "12f497ece82b32f449525098cdc8284634d1569710c9245856a5c37c2525bce7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Equiv.lean"
      },
      "debug_info": {
        "goal": "f : (i : \u2115) \u2192 unifSpec.domain i \u2192 Fin (i + 1)\n\u22a2 (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun x => (fun a => (0, \u2191a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun y => (fun a => (0, \u2191y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4842b06c6593be761ad667d22371efbd901fd4d498b5fa7066e427df3c091b77"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 299,
        "start_column": 2,
        "end_line": 299,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/ToOracle.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : R[X \u03c3]\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : R[X \u03c3]\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/ToOracle.lean#L299"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4f04b10b73766868566661fdeb0252d80c1db0047b39c74b01f459372dbe30a8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 338,
        "start_column": 2,
        "end_line": 338,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/ToOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : R[X]\n\u22a2 \u2203 x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          (statelessOracle spec [fun x => R[X]]\u2092 fun i q => oracle p q).impl) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/ToOracle.lean#L338"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "da4fbe98a9c83fdb938486658d54dadb2e687e170ff3510f61b7e8d00bdad135"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7,
        "file": "ZKLib/CommitmentScheme/Fold.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).1.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "588e0c45075889fdf51eda2b0e54ae4d5c82c058d80a331e2324f3552a2fa3dd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7,
        "file": "ZKLib/CommitmentScheme/Fold.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).2.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "82f96af48388437665a476367bf24dc967db14ff1708fa94a969aaf77a4734f6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16,
        "file": "ZKLib/CommitmentScheme/Fold.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pEven \u2208 R\u2983< n\u2984[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "b3f2a595f7672e8fa666c9ae06723fd628fe44683ad1ad988de4838b722ace4b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31,
        "file": "ZKLib/CommitmentScheme/Fold.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pOdd \u2208 R\u2983< n\u2984[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "abcc36cac72a0d013126eb11e42abac29e1553ef0842fe199da36d7b4243aa0b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11,
        "file": "ZKLib/CommitmentScheme/MerkleTree.lean"
      },
      "debug_info": {
        "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := generateProof \u03b1 i cache\n          verifyProof \u03b1 i leaves[i] (getRoot \u03b1 cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run \u2218 fun cache =>\n                verifyProof \u03b1 i (leaves.get i) (getRoot \u03b1 cache) (generateProof \u03b1 i cache))).mapM\n          fun {\u03b1_1} q =>\n          match \u03b1_1, q with\n          | .((spec \u03b1).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "aee9ff835614bf8abf948aee4b2140fda1db4dbe139cdfcb35736a1e16ff055f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 \u2016C\u2016\u2080' \u2260 \u22a4",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "a1728b0d61fd930ba7ce8c25a12e23c78e56197710f4570bc5e5af1281970ef7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : \u2016C\u2016\u2080' \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => \u0394\u2080(\u2191x.1, \u2191x.2)) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d}",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "956aa6ab1f206002ecd6b412ac1ac0028ebc0a7a28cbebc54b14ef5e195b8281"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : \u0394\u2080(u, v) \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 \u2016u\u2016\u2080 \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f6fd6527e34e48553a8f546f24f347ff9fb2cce5f3c1451eb77e1c2fce1c3e1b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : \u2016u\u2016\u2080 \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "3619ff734188a1dcffc313b765048ecb413653dd6d9726ae3364186f920a64b4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 67,
        "end_line": 269,
        "end_column": 72,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : Finite R\nC : Set (n \u2192 R)\n\u22a2 card \u2191C \u2264 card R ^ (card n - \u2016C\u2016\u2080 + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "fb6616774204db654c2dd25b1955832adc923d9abb4a68b38d47cfe5016ad640"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 275,
        "start_column": 65,
        "end_line": 275,
        "end_column": 70,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - \u2016C.carrier\u2016\u2080 + 1",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/CodingTheory/Basic.lean#L275"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7f048c220b7b0cef4149b20aab480bf452ff840b66f95bd59960fa1ae22271d2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19,
        "file": "ZKLib/Data/MlPoly/Equiv.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "396718cbcadd7eabc5bbd84678d1ba2fb715609a3e6f7582032a3b88a3f8642a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20,
        "file": "ZKLib/Data/MlPoly/Equiv.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "32105894d870ba533403d4ce0ff2fc18e1d19b3a581bcec869bda5857c5bbfd7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7,
        "file": "ZKLib/Data/MlPoly/Equiv.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "46d0db5e655367a1474829453e043b8ef43e022a9a79defcd2b16d205838d300"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7,
        "file": "ZKLib/Data/MlPoly/Equiv.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "daf7c545d9cfebcb844bb2d2dc299f1a52697eb8fc57758c3043aebe70b7b32e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "b5f920efbdf4770ad0517053d16f4a153938fcd598955aa581973d70ebd57cea"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 (cons a b).get \u2b1d\u1d65 (cons c d).get = a * c + b.get \u2b1d\u1d65 d.get",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "829b10519740fe44b57a4a35dbce753276f3bdefad35f9d5c051c2eafecebf67"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f9357ff3031d3c60e97cc3739373e3c961745132a82226bb61915a7ceb310ba7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "df29b143e5a7f10fbee1017f8b8617aedd10b81423f9fb5836c888ccbd94891b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4639d1cd194a0a80c2a04aa729307c0c7f6a83e3d7d70e7731fe6be81a697b80"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "8c9ed73bf52f4721c2adb0deafe6f4b8f1d10d6b43a2df726dc4f17f3fa2cfee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (n_1 : \u2115) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "33df7afab80ccb56868c08a40c49e72618d78874ef78550c4f296fa8f9fc711a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "82dc9953b87601cf62c938e7d32229e01f54f22d15756089e1f4695a5cd5ef82"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (b : MlPoly R n), 1 \u2022 b = b",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "6cf19280364cf21eb9ae2fe8b622c0af9b16f358bcbed9ebb9cd19dfb6b1ec8b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (x : MlPoly R n), 0 \u2022 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "08841a1ddbd15600b4c7f709b471815049958a4870b8c922fb5bfb3a9d003b2e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 374,
        "start_column": 43,
        "end_line": 374,
        "end_column": 48,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b1 : Fin n \u2192 Sort u\nl : List \u2115\nn' : \u2115\nl' : List \u2115\nmotive : Fin (n' :: l').sum \u2192 Sort u_1\ncases : (n : \u2115) \u2192 (h : n \u2208 n' :: l') \u2192 (i : Fin n) \u2192 motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : \u00ac\u2191i < n'\n\u22a2 \u2191i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L374"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T14:25:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "30762fbcc2315411bc9162129b52a5a4ed06b6304d8da8001636a8cae16064e1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 402,
        "start_column": 16,
        "end_line": 402,
        "end_column": 21,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "case ind\nn\u271d n : \u2115\nIH : \u2200 m < n, \u2200 {a : Fin m \u2192 \u2115}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n \u2192 \u2115\n\u22a2 (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L402"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "72dc1fa95ed95e97fcb995bc9136b54c822b9f20c953d5781ca89f40bb1ba532"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 497,
        "start_column": 32,
        "end_line": 497,
        "end_column": 37,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "\u22a2 True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "56a132db0b97dd3815bf22c111e5a9d1ac4fcbdaae98a225198afadfb5edb95f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 499,
        "start_column": 35,
        "end_line": 499,
        "end_column": 40,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "\u22a2 True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L499"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "97f7e51076126a7643b1db9a1c9f345f145a698cd341cc36edd766ae87aa4988"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 501,
        "start_column": 36,
        "end_line": 501,
        "end_column": 41,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "\u22a2 True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "4b6f1b3e33fde11d74f2d61f485b58351b496e2f688cb5b968a3344d01a5847e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 557,
        "start_column": 4,
        "end_line": 557,
        "end_column": 9,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L557"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "1c405951bad9823c467a940187562ecef8cd77f7d4461978f4366949ef63697d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 569,
        "start_column": 80,
        "end_line": 569,
        "end_column": 85,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 l.findSumIdx \u2191j < l.length",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Fin.lean#L569"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "b13a3e6b2ee9069820edcc903dad39083887dc538087d8bea550c4421f72ad0c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7,
        "file": "ZKLib/Data/Math/Operations.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n \u2294 l.length = n' \u2294 l'.length\n\u22a2 l ++ replicate (n - l.length + (m - n' \u2294 l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' \u2294 l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Operations.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "a1ff2e0cc92e2b29f204e48ddd7679c87d50b2a5258e4d03388e95a25c5af172"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10,
        "file": "ZKLib/Data/Math/Operations.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l\u2081.matchSize l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Operations.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f62e82e54dc16ca69946f0d6034766cf1c75ebaaa2d3d585b85eb460806eefdb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "ZKLib/Data/Math/Operations.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\na : Array \u03b1\nn : \u2115\nunit : \u03b1\ni : \u2115\nh\u271d : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n\u22a2 { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Operations.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "58045e68e312ce6f1d1d14900a74bf76d9c5ff0a65e1471eafb25cabb6a854e2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80,
        "file": "ZKLib/Data/Math/Operations.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/Math/Operations.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "e94a851dc4cd38d83db0dda34ce1696d19086139b7c5da976a76872b6514179f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7,
        "file": "ZKLib/Data/MvPolynomial/Sumcheck.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : R[X \u03c3]\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f7a70b6887d57b34997b76bda5c3bb57e6ff9de7573de3801f528b731cec74bf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7,
        "file": "ZKLib/Data/MvPolynomial/Sumcheck.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : R[X Fin n]\n\u22a2 ((sumExceptFirst' n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "9d5ff0206b5328ab2315f42e4f60402adf0773fb658f479d64e72fe7d0fb7783"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63,
        "file": "ZKLib/Data/MvPolynomial/Interpolation.lean"
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : R[X \u03c3]\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191(#({x \u2208 p.vars.pi S | (eval (extendDomain x)) p = 0})) / \u220f i \u2208 p.vars, \u2191(#(S i)) \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "ea439d43ebacf0398f68b12c4bed9752515f01b4584f503e8058f9db4384d0b7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81,
        "file": "ZKLib/Data/MvPolynomial/Interpolation.lean"
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : R[X \u03c3]\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < #(S i)\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f713392e6588b4cb8ad053be7d1c9dfeab77369de3f633464e2982480ee5268c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 16,
        "end_line": 95,
        "end_column": 21,
        "file": "ZKLib/Data/BinaryTowerField/Basic.lean"
      },
      "debug_info": {
        "goal": "case succ\nk : \u2115\na\u271d : k > 0 \u2192 AdjoinRoot (poly k) = Field k\nk_pos : k + 1 > 0\n\u22a2 AdjoinRoot (poly (k + 1)) = Field (k + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/BinaryTowerField/Basic.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-30T10:53:02+05:30",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "c5bbffff593d90cfdcfce4b17250243c40727503e5252df02bf288393b0e9cd5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 115,
        "start_column": 59,
        "end_line": 115,
        "end_column": 64,
        "file": "ZKLib/Data/BinaryTowerField/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u22a2 Irreducible (poly n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/BinaryTowerField/Basic.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2024-06-18T17:58:42-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "0a4bba0d58ecc200825bad1ce08a7bfc86890854ed5243f1cf4875d290275884"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 197,
        "start_column": 21,
        "end_line": 197,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic-old.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d : Semiring R\n\u22a2 Function.LeftInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic-old.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7957f8d41dbbf751d4da7cb1459834a0fa21148b0f18321b3c314a1224877401"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 198,
        "start_column": 22,
        "end_line": 198,
        "end_column": 27,
        "file": "ZKLib/Data/UniPoly/Basic-old.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d : Semiring R\n\u22a2 Function.RightInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic-old.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "d13db5742317df7c8b1c5e834890803f3a976abac32bd19680124e1c93e94b85"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 199,
        "start_column": 21,
        "end_line": 199,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic-old.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d : Semiring R\n\u22a2 \u2200 (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := \u22ef, right_inv := \u22ef }.toFun\n        (x * y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := \u22ef, right_inv := \u22ef }.toFun\n          x *\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := \u22ef, right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic-old.lean#L199"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "bf4f68018c5dde3a0d4e66e6f2fe247a1c76b1891cbf2fc3218a6bc92e0afeb8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 200,
        "start_column": 21,
        "end_line": 200,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic-old.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d : Semiring R\n\u22a2 \u2200 (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := \u22ef, right_inv := \u22ef }.toFun\n        (x + y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := \u22ef, right_inv := \u22ef }.toFun\n          x +\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := \u22ef, right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic-old.lean#L200"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7e556243a01c83772ea2af8a7e758caa0d413bc2b1fb2a9ef2a8f53c8fc71b4f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : UniPoly Q\ni : \u2115\nhi : i < Array.size (p.add_raw q)\n\u22a2 (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "06cf5b31c6793d2a2c36ea801a235bcb282ff43e974bae97b4e94042c50e84c8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n\u22a2 p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "2de25791984e6ffc390d8f252aedef026df64746dc8f48220735e18da7845a33"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : Ring R\ninst\u271d : BEq R\np : UniPoly R\n\u22a2 (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) \u2208 TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "eba78afa797e766704f57ff0db5ac4f1a7f72fc7764ac25f1c4de483fc5221c6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "57a44e6e03990af4cdad6c1ac74811aae3b567ded229d4b43cb91a66b243a8bc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "6892d9b6a4eb19922d472351a6a6c3facc5a25a525bf9d3fce7c357d0a28434e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "c0fd0cac045a68b6aa837cf848a968afc6baa16ec10a61142bd90217200c67bb"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 254,
        "start_column": 2,
        "end_line": 254,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "case h\nm n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\nT : pSpec\u2081.FullTranscript\nT' : pSpec\u2082.FullTranscript\ni : Fin m\n\u22a2 _root_.cast \u22ef (T i) = (\u22ef \u25b8 T) i",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L254"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T12:49:22-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "5d230483943f04980bd6656cc5c35a7e620f02b2ba1efbed71fde4a6bb2db3aa"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 556,
        "start_column": 55,
        "end_line": 556,
        "end_column": 60,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u22a2 (compose 0 (fun x => n) fun x => pSpec) = pSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L556"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T18:57:31+07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "aff7f956babe47f93326d5ff9ebd864e358041e9d5adbb1f99a09d6239981536"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 572,
        "start_column": 2,
        "end_line": 572,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "m : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\ni : Fin m\n\u22a2 compose (\u2191i + 1) (Fin.take (\u2191i + 2) \u22ef n) (Fin.take (\u2191i + 2) \u22ef pSpec) =\n    cast \u22ef (compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec) ++\u209a pSpec i.succ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "66dbed3933c0bedce9903536e7aa88269e2a6c11537f903e72701602782f79b1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 699,
        "start_column": 2,
        "end_line": 699,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIndex) \u2192 ToOracle (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIndex) \u2192 ToOracle (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIndex) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIndex) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (P\u2081.append P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    match __discr with\n      | (stmt\u2082, wit\u2082, transcript\u2081) => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        match __discr with\n          | (stmt\u2083, wit\u2083, transcript\u2082) => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L699"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "c0d6a73c744b50c7e7d4e51fc0a1c7e4a6a43c41476c12286f75f8b451bd203e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 725,
        "start_column": 89,
        "end_line": 725,
        "end_column": 94,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIndex) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIndex) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : \u211d\u22650\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (R\u2081.append R\u2082) (completenessError\u2081 + completenessError\u2082)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "83f7199f23fc3c32dca7f2f30b1a15a76a104eeeb01ede8e699fcd2200c8012c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 752,
        "start_column": 38,
        "end_line": 752,
        "end_column": 43,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nm : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d\u00b2 : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIndex) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 2) \u2192 Type\nrel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (\u2211 i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Sequential.lean#L752"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "448bc439a43e13ac40bc378c0ceddb4a4acd41e36522fb909b035e4f34d62991"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "14ad786f7fcad3f9af133626bf90077d630cb626d769318e0014032b2b952ff1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "499ac94efa0b7e1b1296899a004caffcb259f39165b9a48f4f4e0298145616a2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190 Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7e50a7342623d7de7d3e8a47e4ac53ad1aa144720ecb4a3d773f91811d9a65a1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : \u211d\u22650\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d : x\u271d \u2208 (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x\u271d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "15ec5a295ab296484c9eff2903c7b7625b55096cb179297cfa5fbec8a2f514bd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : \u211d\u22650\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n    \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "bf74392b5f624df2965ce7f083d69b040fe15b9f5d3ec7ab8dec8484acf8c0a8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : \u211d\u22650\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n        \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "a93108078d342d2a8832dcf5493a267b95b436dd399fb9a5e098dc75336248f2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : \u2124[X]\nt : \u2124\nf : \u2124[X]\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7fad2f3d519483d6ea8ef6584126487510c2b449634557f1e6632dc3b477d32e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 361,
        "start_column": 2,
        "end_line": 361,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Security/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : \u211d\u22650\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Security/Basic.lean#L361"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "6a43644c581530951fb80b56bca5eb409d6e2426ad6da8350cf7d7ecab4f5ebe"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80,
        "file": "ZKLib/OracleReduction/Security/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn StmtOut : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction langIn langOut verifier\nrbrSoundnessError : pSpec.ChallengeIndex \u2192 \u211d\u22650\n\u22a2 rbrSoundness langIn langOut verifier stateFunction rbrSoundnessError \u2192\n    soundness langIn langOut verifier (\u2211 i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Security/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "9cab4619f10a86d3721d23019cbbdf28eefa929b4258a2fd6ab1efcde7596ae6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 393,
        "start_column": 2,
        "end_line": 393,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Security/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError \u2192\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier stateFunction rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Security/Basic.lean#L393"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "2f1c6a00e7bfef9ac713d5b745d9c1f94caa60b8c2719a75915af1ad5e4a2b10"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 403,
        "start_column": 82,
        "end_line": 403,
        "end_column": 87,
        "file": "ZKLib/OracleReduction/Security/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError \u2192\n    knowledgeSoundness relIn relOut verifier (\u2211 i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/OracleReduction/Security/Basic.lean#L403"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "45f122d9685eb2ae1cec9bad5f9b8dfc9e3d9f9273360a35c22cf18f7f87b97b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 496,
        "start_column": 2,
        "end_line": 496,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5R\u2983\u2264 \u2191deg\u2984[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : \u2191(transcript 0) \u2208 R\u2983\u2264 \u2191deg\u2984[X]\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (ToOracle.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) \u2191(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L496"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "7c291f97b2fa6c71b676e18c92667ced0e575e167febb6ad63341fb7dad14518"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 514,
        "start_column": 57,
        "end_line": 514,
        "end_column": 62,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 (do\n      let x \u2190\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                \u27e80, \u22ef\u27e9\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn\u271d)).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)\n      let a \u2190 liftM (query (Sum.inr \u27e81, \u22ef\u27e9) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  \u27e81, \u22ef\u27e9 x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L514"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "f9acead5475620f79d7aaf4879f66ae322642065586262fd147a5f3ff1e397af"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 523,
        "start_column": 2,
        "end_line": 523,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) \u2208\n        (run ({ target := target, challenges := challenge }, oStmt) witIn\u271d\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support \u2192\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | \u27e8poly, property\u27e9 =>\n            \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x \u2218 Fin.cast \u22ef)) poly =\n              target) \u2227\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L523"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "2859b3b9bc45cdd972473a933816e8355d9b2ef6148f7139e0f8bca55c4e3611"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 572,
        "start_column": 4,
        "end_line": 572,
        "end_column": 9,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "R\u271d : Type\ninst\u271d\u2075 : CommSemiring R\u271d\nn\u271d deg\u271d m\u271d : \u2115\nD\u271d : Fin m\u271d \u21aa R\u271d\n\u03b9\u271d : Type\noSpec\u271d : OracleSpec \u03b9\u271d\ninst\u271d\u2074 : VCVCompatible R\u271d\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni\u271d : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  \u00acrelation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i),\n    (a, b) \u2208 (Verifier.run stmt tr (verifier R n deg D oSpec i)).support \u2192\n      \u2200 (x : Unit), \u00acrelation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "9d03a1b0fa87b2b7566a04d497db4accf89073858580e3485a996812078a80ed"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "fix-workflow",
        "commit": "42bece30bead14bf91db9546759ce1f6c2634736",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 647,
        "start_column": 42,
        "end_line": 647,
        "end_column": 47,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/42bece30bead14bf91db9546759ce1f6c2634736/ZKLib/ProofSystem/Sumcheck/Basic.lean#L647"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T04:53:58.790721+00:00"
      },
      "id": "26285d94215e1d88e506bb722bbb3aaa693a8ba4a5336ca747a9ec742f4e0e29"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 60,
        "start_column": 9,
        "end_line": 60,
        "end_column": 14,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 ToOracle (OStatement i)\nWitEquiv : Type\ninst\u271d : ToOracle WitEquiv\nequiv : Witness \u2243 WitEquiv\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 Unit),\n    (OStatement \u2295\u1d65 fun x => WitEquiv) i =\n      match (\u22ef.mpr sorry) i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec WitEquiv).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L60"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "5d3fb12cca86fafe84f05304159ebd200b1a57d3c48b22fa289303dddaeb8ee9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 78,
        "start_column": 2,
        "end_line": 78,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement Witness \u03b9\u209b\u1d62 : Type\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b2 : (i : \u03b9\u209b\u1d62) \u2192 ToOracle (OStatement i)\nWitEquiv : Type\ninst\u271d\u00b9 : ToOracle WitEquiv\nequiv : Witness \u2243 WitEquiv\nrelIn : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Witness \u2192 Prop\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness relIn (toRelOut Statement Witness OStatement WitEquiv equiv relIn)\n    (oracleReduction oSpec Statement Witness OStatement WitEquiv equiv)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L78"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "302e345791054383ae89bd5108f33b90f3ac683331585b5965214afe9de99474"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 138,
        "start_column": 9,
        "end_line": 138,
        "end_column": 14,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b9 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d : (i : \u03b9\u209b\u1d62) \u2192 ToOracle (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\n\u22a2 \u2200 (i : \u03b9\u209b\u1d62 \u2295 \u03b9\u209b\u1d62),\n    (OStatement \u2295\u1d65 OStatement) i =\n      match sorry i with\n      | Sum.inl j => OStatement j\n      | Sum.inr j => (pSpec OStatement).Message j",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "107e00cde2b59097bf5b6e8103382f1e22058d4bcc938858b955d09904dba06b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStatement \u03b9\u209b\u1d62 : Type\ninst\u271d\u00b2 : Unique \u03b9\u209b\u1d62\nOStatement : \u03b9\u209b\u1d62 \u2192 Type\ninst\u271d\u00b9 : (i : \u03b9\u209b\u1d62) \u2192 ToOracle (OStatement i)\nrel : Statement \u00d7 ((i : \u03b9\u209b\u1d62) \u2192 OStatement i) \u2192 Prop\nrelComp : Statement \u2192 OracleComp [OStatement]\u2092 Unit\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (fun x x_1 => rel x) (relOut OStatement)\n    (oracleReduction oSpec Statement OStatement relComp)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "e9a5df19722272415619254ade5268ccb3f7d88b10edc81b8b5c53162817d283"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 255,
        "start_column": 2,
        "end_line": 255,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Components.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nOStatement : Type\ninst\u271d\u00b2 : ToOracle OStatement\ninst\u271d\u00b9 : VCVCompatible (Query OStatement)\ninst\u271d : oSpec.FiniteRange\n\u22a2 OracleReduction.perfectCompleteness (relIn OStatement) (relOut OStatement) (oracleReduction oSpec OStatement)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Components.lean#L255"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7b19e2712671b63d1782e564c604b6cca09c454894de244e94e138e50bfa2349"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 185,
        "start_column": 2,
        "end_line": 185,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Execution.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let a \u2190 (simulateQ loggingOracle (Prover.runToRound (Fin.last n) stmt wit reduction.prover)).run\n      (fun a_1 => (reduction.prover.toProverOut.1 a.1.2, a_1.1, a.1.1)) <$>\n          (simulateQ loggingOracle (reduction.verifier.verify stmt a.1.1)).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190 Prover.run stmt wit reduction.prover\n    (fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$>\n        (reduction.verifier.verify stmt __discr.2.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Execution.lean#L185"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "98677f00ad5f7638d9dc25c16d21f6580375654febec44dce847c1d401a002b6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 278,
        "start_column": 2,
        "end_line": 278,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Execution.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\npSpec : ProtocolSpec 1\ninst\u271d : pSpec.ProverOnly\nstmt : StmtIn\nwit : WitIn\nreduction : Reduction pSpec oSpec StmtIn WitIn StmtOut WitOut\n\u22a2 (do\n      let __discr \u2190\n        (fun a =>\n              ((reduction.prover.toProverOut.1 a.2).1, (reduction.prover.toProverOut.1 a.2).2, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => a.1)) <$>\n            (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp\n              (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n      ((fun a => ((__discr.1, __discr.2.1), a, __discr.2.2)) <$> reduction.verifier.verify stmt __discr.2.2).liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let __discr \u2190\n      (reduction.prover.sendMessage \u27e80, \u22ef\u27e9 (reduction.prover.input stmt wit)).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)\n    ((fun a =>\n              (reduction.prover.toProverOut.1 __discr.2, a, fun i =>\n                match i with\n                | \u27e80, isLt\u27e9 => __discr.1)) <$>\n            reduction.verifier.verify stmt fun i =>\n              match i with\n              | \u27e80, isLt\u27e9 => __discr.1).liftComp\n        (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Execution.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "b8d6835d1aa945b4bd086c1a0e1ecea7dae75a7eed3e59a758892fe78ec65af4"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 2,
        "end_line": 66,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Equiv.lean"
      },
      "debug_info": {
        "goal": "\u22a2 (do\n      let _ \u2190 liftM (query 0 ())\n      (fun a => (0, \u2191a)) <$> liftM (query 1 ())) =\n    do\n    let y \u2190 liftM (query 1 ())\n    (fun a => (0, \u2191y)) <$> liftM (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Equiv.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "935d1c05ea74eacdc7d9c756431f2f5d43c502d1d43e360b411bc6fa98cada20"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 80,
        "start_column": 4,
        "end_line": 80,
        "end_column": 9,
        "file": "ZKLib/OracleReduction/Equiv.lean"
      },
      "debug_info": {
        "goal": "case h.h.none\n\u22a2 (evalDist (OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a)))) none =\n    \u2211' (a : Fin 2), 2\u207b\u00b9 * (evalDist (OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a_1 => (0, \u2191a)))) none",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Equiv.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-16T18:04:04-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "53962b6cb0ef97a03b94d27342641ea15d561645015e577f54d811a7124ebdec"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 85,
        "start_column": 4,
        "end_line": 85,
        "end_column": 9,
        "file": "ZKLib/OracleReduction/Equiv.lean"
      },
      "debug_info": {
        "goal": "case h.h.some.mk\nx y : \u2115\n\u22a2 (Option.elimM ((PMF.uniformOfFintype (Fin 1)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun x => OptionT.bind (liftM (query 1 ())) (OptionT.pure \u2218 fun a => (0, \u2191a))))\n      (some (x, y)) =\n    (Option.elimM ((PMF.uniformOfFintype (Fin 2)).bind fun a => PMF.pure (some a)) (PMF.pure none)\n        (OptionT.run \u2218 evalDist \u2218 fun y => OptionT.bind (liftM (query 0 ())) (OptionT.pure \u2218 fun a => (0, \u2191y))))\n      (some (x, y))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Equiv.lean#L85"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "21ba941e377ae8143564f8de7db64392d62136f0ac71f688e9e3292a3a4c3eba"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Equiv.lean"
      },
      "debug_info": {
        "goal": "f : (i : \u2115) \u2192 unifSpec.domain i \u2192 Fin (i + 1)\n\u22a2 (some (f 0 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun x => (fun a => (0, \u2191a)) <$> lift (query 1 ())) =\n    some (f 1 ()) >>=\n      simulateQ\n          {\n            impl := fun {\u03b1} x =>\n              match \u03b1, x with\n              | .(unifSpec.range i), query i t => some (f i t) } \u2218\n        fun y => (fun a => (0, \u2191y)) <$> lift (query 0 ())",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Equiv.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "9effab30b90f800af5a09504ea4ff33d971d509600e24824d7cbc26224bcf5f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 299,
        "start_column": 2,
        "end_line": 299,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/ToOracle.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u2075 : CommRing R\nd : \u2115\ninst\u271d\u2074 : Fintype R\ninst\u271d\u00b3 : DecidableEq R\ninst\u271d\u00b2 : IsDomain R\n\u03c3 : Type\ninst\u271d\u00b9 : Fintype \u03c3\ninst\u271d : DecidableEq \u03c3\na : R[X \u03c3]\nha : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s a = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nb : R[X \u03c3]\nhb : \u2200 (s : \u03c3 \u2192\u2080 \u2115), \u00acMvPolynomial.coeff s b = 0 \u2192 \u2200 (i : \u03c3), s i \u2264 d\nhNe : \u00aca = b\n\u22a2 {q | (MvPolynomial.eval q) a = (MvPolynomial.eval q) b}.card \u2264 Fintype.card \u03c3 * d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/ToOracle.lean#L299"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "8e7f51041b4cab45892fb64755253a705812677f00d2df82c35d78bc6be9f6d0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 338,
        "start_column": 2,
        "end_line": 338,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/ToOracle.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\nspec : OracleSpec \u03b9\nR : Type\ninst\u271d : CommSemiring R\nm : \u2115\nD : Fin m \u21aa R\np : R[X]\n\u22a2 \u2203 x,\n    ((OptionT.run (mapM (fun i => liftM (query (Sum.inr ()) (D i))) (List.finRange m))).mapM fun {\u03b1} =>\n          (statelessOracle spec [fun x => R[X]]\u2092 fun i q => oracle p q).impl) =\n        pure x \u2227\n      x.getM = pure (List.map (fun i => eval (D i) p) (List.finRange m))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/ToOracle.lean#L338"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "e5f74fee5e95c32a6edc52361fdf0b0179a6e42aca2d4f9b270b21481ba5661f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7,
        "file": "ZKLib/CommitmentScheme/Fold.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).1.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/Fold.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "a703e53c750447a212007aa5ab5f9cbe5a66efe0df331878ac2b6840ab23642e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 104,
        "start_column": 2,
        "end_line": 104,
        "end_column": 7,
        "file": "ZKLib/CommitmentScheme/Fold.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\np : R[X]\n\u22a2 (splitEvenOdd p).2.natDegree \u2264 p.natDegree / 2",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/Fold.lean#L104"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "cf2652389ef0e9f05cad145134403186910641811462f1929ad8a55a51105165"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 116,
        "start_column": 11,
        "end_line": 116,
        "end_column": 16,
        "file": "ZKLib/CommitmentScheme/Fold.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pEven \u2208 R\u2983< n\u2984[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "87979fca5d96b3d4ba3fbeb4d8e8487cea2dec983cf76e715102b684b64c0601"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 116,
        "start_column": 26,
        "end_line": 116,
        "end_column": 31,
        "file": "ZKLib/CommitmentScheme/Fold.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommRing R\ninst\u271d : Sampleable R\nn deg : \u2115\n\u03b6 : R\u02e3\nhPrim : IsPrimitiveRoot \u03b6 (2 ^ n)\np : \u21a5R\u2983< 2 * n\u2984[X]\npEven pOdd : R[X]\n\u22a2 pOdd \u2208 R\u2983< n\u2984[X]",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/Fold.lean#L116"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-26T16:07:07-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7b4d1486f17aa778015fb6c48dc6481f6a346c9956e79aae1bd22fab87bb7988"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 219,
        "start_column": 6,
        "end_line": 219,
        "end_column": 11,
        "file": "ZKLib/CommitmentScheme/MerkleTree.lean"
      },
      "debug_info": {
        "goal": "case succ\n\u03b1 : Type\ninst\u271d\u00b2 : DecidableEq \u03b1\ninst\u271d\u00b9 : Inhabited \u03b1\ninst\u271d : Fintype \u03b1\nhash : \u03b1 \u00d7 \u03b1 \u2192 \u03b1\nn : \u2115\nih :\n  \u2200 (leaves : List.Vector \u03b1 (2 ^ n)) (i : Fin (2 ^ n)),\n    (simulateQ (implement_with_function \u03b1 hash)\n        (do\n          let cache \u2190 buildMerkleTree \u03b1 n leaves\n          let proof : List.Vector \u03b1 n := generateProof \u03b1 i cache\n          verifyProof \u03b1 i leaves[i] (getRoot \u03b1 cache) proof\n          pure PUnit.unit)\n        ()).neverFails\nleaves : List.Vector \u03b1 (2 ^ (n + 1))\ni : Fin (2 ^ (n + 1))\n\u22a2 ((((Option.elimM (OptionT.run (buildMerkleTree \u03b1 (n + 1) leaves)) (FreeMonad.pure none)\n              (OptionT.run \u2218 fun cache =>\n                verifyProof \u03b1 i (leaves.get i) (getRoot \u03b1 cache) (generateProof \u03b1 i cache))).mapM\n          fun {\u03b1_1} q =>\n          match \u03b1_1, q with\n          | .((spec \u03b1).range i), query i (left, right) => pure (hash (left, right))) >>=\n        fun __do_lift => __do_lift.getM)\n      ()).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/CommitmentScheme/MerkleTree.lean#L219"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-04-16T13:24:09-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c346cfbcd68a8c54fd449a38c578af4d8cfc9260165ad89174c251d19ee23da5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 186,
        "start_column": 33,
        "end_line": 186,
        "end_column": 38,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\n\u22a2 \u2016C\u2016\u2080' \u2260 \u22a4",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L186"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "56937a902854dc2d02d821da5c3bc1456e71f6a25ad514d21660def776e011cf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 187,
        "start_column": 4,
        "end_line": 187,
        "end_column": 9,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "case neg\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\nC : Set (n \u2192 R)\ninst\u271d : Fintype \u2191C\nh : \u00acSubsingleton \u2191C\nthis : \u2016C\u2016\u2080' \u2260 \u22a4\n\u22a2 ENat.toNat (Finset.image (fun x => \u0394\u2080(\u2191x.1, \u2191x.2)) {p | \u00acp.1 = p.2}).min =\n    sInf {d | \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d}",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "0801320237c929f8193ee6a4f49ce10e60cf0b8c35703faee0d04603dd77fb1b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 231,
        "start_column": 4,
        "end_line": 231,
        "end_column": 9,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2081.intro.intro.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nv : n \u2192 R\nhv : v \u2208 C\nhuv : \u00acu = v\nhDist : \u0394\u2080(u, v) \u2264 d\n\u22a2 \u2203 u \u2208 C, \u00acu = 0 \u2227 \u2016u\u2016\u2080 \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L231"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "fb2a19cecd25c8e250de638fd46fb255f5184aa0e604fafaaf00949a8129ffbf"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 234,
        "start_column": 4,
        "end_line": 234,
        "end_column": 9,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "case e_a.h.h\u2082.intro.intro.intro\nn : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : CommSemiring R\nC : Submodule R (n \u2192 R)\nd : \u2115\nu : n \u2192 R\nhu : u \u2208 C\nhNorm : \u00acu = 0\nhDist : \u2016u\u2016\u2080 \u2264 d\n\u22a2 \u2203 u \u2208 C, \u2203 v \u2208 C, \u00acu = v \u2227 \u0394\u2080(u, v) \u2264 d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "4d434198a358939429692e0845997d1923f226b1f7a7fdf23792d21b41882c7f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 269,
        "start_column": 67,
        "end_line": 269,
        "end_column": 72,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b2 : Fintype n\nR : Type u_2\ninst\u271d\u00b9 : DecidableEq R\ninst\u271d : Finite R\nC : Set (n \u2192 R)\n\u22a2 card \u2191C \u2264 card R ^ (card n - \u2016C\u2016\u2080 + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L269"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "9cf56f4a61c205dd3e11d11bb859c6d72c51da757bdb0c7112e9eb534d6b7862"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 275,
        "start_column": 65,
        "end_line": 275,
        "end_column": 70,
        "file": "ZKLib/Data/CodingTheory/Basic.lean"
      },
      "debug_info": {
        "goal": "n : Type u_1\ninst\u271d\u00b3 : Fintype n\nR : Type u_2\ninst\u271d\u00b2 : DecidableEq R\ninst\u271d\u00b9 : Finite R\ninst\u271d : DivisionRing R\nC : Submodule R (n \u2192 R)\n\u22a2 Module.finrank R \u21a5C \u2264 card n - \u2016C.carrier\u2016\u2080 + 1",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/CodingTheory/Basic.lean#L275"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-26T22:44:38-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "1e3764a232da52aa94c53642ed3080d652cd301fcd85ed839370aa040787a0f7"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 34,
        "start_column": 14,
        "end_line": 34,
        "end_column": 19,
        "file": "ZKLib/Data/MlPoly/Equiv.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.LeftInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Equiv.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "eb5a09117a3fd64b8d3228a9091d925a7613e9d25d5b1ed641ba047e2e00cbd8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 35,
        "start_column": 15,
        "end_line": 35,
        "end_column": 20,
        "file": "ZKLib/Data/MlPoly/Equiv.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\n\u22a2 Function.RightInverse ofSpec toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Equiv.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "4ef9527b4ad5fbb7bb9e1a1bd4f0990b438425d5cf1dff55d33daaa1e0c4c88f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 43,
        "start_column": 2,
        "end_line": 43,
        "end_column": 7,
        "file": "ZKLib/Data/MlPoly/Equiv.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\np q : MlPoly R n\n\u22a2 (p + q).toSpec = p.toSpec + q.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Equiv.lean#L43"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "d1cc4f31772d838ac04ad0f3b48b9fb4d77f3d99feab4fc6aef27f8374dd991d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 47,
        "start_column": 2,
        "end_line": 47,
        "end_column": 7,
        "file": "ZKLib/Data/MlPoly/Equiv.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : CommSemiring R\nn : \u2115\nS : Type u_2\ninst\u271d : CommSemiring S\nf : R \u2192+* S\np : MlPoly R n\nx : Vector S n\n\u22a2 p.eval\u2082 f x = MvPolynomial.eval\u2082 f x.get \u2191p.toSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Equiv.lean#L47"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "0dd882e9ff7025e6a1ff5982a50e8d9c1d924e5dbc23ab8f117dda22f0656f6e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 77,
        "start_column": 2,
        "end_line": 77,
        "end_column": 7,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 List.foldl (fun x1 x2 => x1 + x2) (a * c) (List.zipWith (fun x1 x2 => x1 * x2) b.toList d.toList) =\n    a * c + Array.foldl (fun x1 x2 => x1 + x2) 0 (Array.zipWith (fun x1 x2 => x1 * x2) b.toArray d.toArray) 0 n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "fd9d92014cb9f49d94e99cc039357603464cc0e2fe080041ae5de3efa5b8157e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 81,
        "start_column": 2,
        "end_line": 81,
        "end_column": 7,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : AddCommMonoid R\nn : \u2115\na : R\nb : Vector R n\nc : R\nd : Vector R n\n\u22a2 (cons a b).get \u2b1d\u1d65 (cons c d).get = a * c + b.get \u2b1d\u1d65 d.get",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L81"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-14T11:09:39-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "91f716023e783accde97061e40fa7f5a2dcba84ed98edb1f352c782a94f1c4e9"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 138,
        "start_column": 20,
        "end_line": 138,
        "end_column": 25,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b c : MlPoly R n), a + b + c = a + (b + c)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L138"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7928aab0b6ab5122f147a21b192756c6ad41733a01b91c73f58fcdcffdc336b8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 141,
        "start_column": 19,
        "end_line": 141,
        "end_column": 24,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), 0 + a = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L141"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "9a2bbd6f60548bc6f483c0a98c8a9da678e910a03e617a47d3d6d8c329faa743"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 142,
        "start_column": 19,
        "end_line": 142,
        "end_column": 24,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a : MlPoly R n), a + 0 = a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L142"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "ce7858bdebe8638ebd1d3361df680069007e3d99bdaf3d6f1ac19f94e719126a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 144,
        "start_column": 21,
        "end_line": 144,
        "end_column": 26,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (x : MlPoly R n), nsmul 0 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L144"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "89a3d0b951ffab7f6d623df935213cde196aa83f89d0022e23d5e577639b353e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 145,
        "start_column": 21,
        "end_line": 145,
        "end_column": 26,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (n_1 : \u2115) (x : MlPoly R n), nsmul (n_1 + 1) x = nsmul n_1 x + x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L145"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "762a316b640b98860a9762ba5005855e7b685013d3617f8a5672f95657aa6b4f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 139,
        "start_column": 19,
        "end_line": 139,
        "end_column": 24,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : AddCommMonoid R\n\u22a2 \u2200 (a b : MlPoly R n), a + b = b + a",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L139"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c1f74a9a34d6e0a27a5227261c7a9a3dbc84d45b5903b5028a1703a57cd9be94"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 151,
        "start_column": 17,
        "end_line": 151,
        "end_column": 22,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (b : MlPoly R n), 1 \u2022 b = b",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "3442b282729fa73be1400a61696d655987731f53723c17478023e8735eeeec2b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 156,
        "start_column": 18,
        "end_line": 156,
        "end_column": 23,
        "file": "ZKLib/Data/MlPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\nn : \u2115\ninst\u271d : Semiring R\n\u22a2 \u2200 (x : MlPoly R n), 0 \u2022 x = 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MlPoly/Basic.lean#L156"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-28T11:45:54-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "2e33607cac6e5d1d5503d059975e3628dae28b492d67667f17e4688657759e83"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 374,
        "start_column": 43,
        "end_line": 374,
        "end_column": 48,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b1 : Fin n \u2192 Sort u\nl : List \u2115\nn' : \u2115\nl' : List \u2115\nmotive : Fin (n' :: l').sum \u2192 Sort u_1\ncases : (n : \u2115) \u2192 (h : n \u2208 n' :: l') \u2192 (i : Fin n) \u2192 motive (castSum (n' :: l') h i)\ni : Fin (n' + l'.sum)\nhi : \u00ac\u2191i < n'\n\u22a2 \u2191i - n' < l'.sum",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L374"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T14:25:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "4949ae30e59038f40c0c05bb9b8197890b046b5706aef06f09936745b77b4566"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 402,
        "start_column": 16,
        "end_line": 402,
        "end_column": 21,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "case ind\nn\u271d n : \u2115\nIH : \u2200 m < n, \u2200 {a : Fin m \u2192 \u2115}, (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges\na : Fin n \u2192 \u2115\n\u22a2 (List.ofFn fun i => List.ofFn (ranges a i)) = (List.ofFn a).ranges",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L402"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "bf7a75da7e33d2e887d4cbd90ac2d66b5c1f7e86dee4e62cb714632c43b16868"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 497,
        "start_column": 32,
        "end_line": 497,
        "end_column": 37,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "\u22a2 True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L497"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c2a8e53074037ef139cefe4b5981fa2eda8ab6a42980438bc5945e3aa6460b09"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 499,
        "start_column": 35,
        "end_line": 499,
        "end_column": 40,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "\u22a2 True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L499"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "a63b28cd7160ac80d2b44cd45b19e4515b09b6cd90797f39ac4f79ab22b40115"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 501,
        "start_column": 36,
        "end_line": 501,
        "end_column": 41,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "\u22a2 True",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L501"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-11T17:39:02-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "dcb63f28c3aae96b5071cf51ffa647cd2345db6eba8764fa2f7a7685408ac456"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 557,
        "start_column": 4,
        "end_line": 557,
        "end_column": 9,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "l : List \u2115\nj a : \u2115\nl' : List \u2115\nh : j < a + l'.sum\n\u22a2 \u2203 n, (a :: l').findSum j = some n",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L557"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "44ee9b2d5888fcbf16eefac50d2c6442c820b505ffcfd079178c5cc74a2596e8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 569,
        "start_column": 80,
        "end_line": 569,
        "end_column": 85,
        "file": "ZKLib/Data/Math/Fin.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : AddMonoid \u03b1\ninst\u271d\u00b9 : Preorder \u03b1\ninst\u271d : DecidableRel fun x1 x2 => x1 < x2\nl : List \u2115\nj : Fin l.sum\n\u22a2 l.findSumIdx \u2191j < l.length",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Fin.lean#L569"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-03-14T00:01:07-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "6198a86319b28f64c3f9f5ebd71723a3db10cd262207ad9fd38c6619c748a8be"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7,
        "file": "ZKLib/Data/Math/Operations.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nunit : \u03b1\nl l' : List \u03b1\nm n n' : \u2115\nh : n \u2264 m\nh' : n' \u2264 m\nhEq : rightpad n unit l = rightpad n' unit l'\nhLen : n \u2294 l.length = n' \u2294 l'.length\n\u22a2 l ++ replicate (n - l.length + (m - n' \u2294 l'.length)) unit =\n    l' ++ replicate (n' - l'.length + (m - n' \u2294 l'.length)) unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Operations.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-13T15:41:38-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "599b812c8519bcc001e1cd19b0a49117fb9518ef797f5550a7016fd4b6bc11ee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 209,
        "start_column": 5,
        "end_line": 209,
        "end_column": 10,
        "file": "ZKLib/Data/Math/Operations.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nl\u2081 l\u2082 : List \u03b1\nunit : \u03b1\n\u22a2 (fun x =>\n        match x with\n        | (x, y) => x = y)\n      (l\u2081.matchSize l\u2082 unit) \u2194\n    \u2200 (i : \u2115), l\u2081.getD i unit = l\u2082.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Operations.lean#L209"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "3e4085a39f77edf149c49559416fca6ef0f62b27a15596131c760115083507d2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 257,
        "start_column": 2,
        "end_line": 257,
        "end_column": 7,
        "file": "ZKLib/Data/Math/Operations.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\na : Array \u03b1\nn : \u2115\nunit : \u03b1\ni : \u2115\nh\u271d : i < (rightpad n unit a).size\nh : i < { toList := List.rightpad n unit a.toList }.size\n\u22a2 { toList := List.rightpad n unit a.toList }[i] = a.getD i unit",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Operations.lean#L257"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "163a57167a1fa39f731b9d886fc7445d93e0c3303fd57e693eb08c49a27820d6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 391,
        "start_column": 75,
        "end_line": 391,
        "end_column": 80,
        "file": "ZKLib/Data/Math/Operations.lean"
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\np : \u03b1 \u2192 Bool\nas : Array \u03b1\nh : (popWhile p as).size > 0\n\u22a2 \u00acp ((popWhile p as).getLast h) = true",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/Math/Operations.lean#L391"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-14T17:35:17-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "d05ac1f0216837ec7ced1464ff02364ba10966ab9d6e56c4e6cbbd61bf63f317"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 75,
        "start_column": 2,
        "end_line": 75,
        "end_column": 7,
        "file": "ZKLib/Data/MvPolynomial/Sumcheck.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\n\u03c3 : Type u_3\n\u03c3\u2081 : Type u_4\n\u03c3\u2082 : Type u_5\nx : \u03c3\u2081 \u2192 R\nf : \u03c3 \u2192 \u03c3\u2081 \u2295 \u03c3\u2082\np : R[X \u03c3]\nb : \u03c3\u2081 \u2192\u2080 \u2115\nh : \u00accoeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p)) = 0\n\u22a2 (coeff b ((sumToIter R \u03c3\u2081 \u03c3\u2082) ((rename f) p))).degrees \u2264 Multiset.filterMap Sum.getRight? (Multiset.map f p.degrees)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MvPolynomial/Sumcheck.lean#L75"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-16T12:52:41-06:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "64c9da6739bc9d81df8d8dfdd2347fe2d24cbc51189b6e9799bf2f71e111d560"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 112,
        "start_column": 2,
        "end_line": 112,
        "end_column": 7,
        "file": "ZKLib/Data/MvPolynomial/Sumcheck.lean"
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d : CommSemiring R\nn : \u2115\nh : n > 0\nD : Fin (n - 1) \u2192 Finset R\np : R[X Fin n]\n\u22a2 ((sumExceptFirst' n h D) p).degree \u2264 \u2191(degreeOf \u27e80, h\u27e9 p)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MvPolynomial/Sumcheck.lean#L112"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-13T15:50:48-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "8335a811616ac7d3d07568f9512c089725873b13a7caa4de29001b821048e5bc"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 69,
        "start_column": 58,
        "end_line": 69,
        "end_column": 63,
        "file": "ZKLib/Data/MvPolynomial/Interpolation.lean"
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u2074 : DecidableEq \u03c3\ninst\u271d\u00b3 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : IsDomain R\ninst\u271d : DecidableEq R\np : R[X \u03c3]\nhp : p \u2260 0\nS : \u03c3 \u2192 Finset R\n\u22a2 \u2191(#({x \u2208 p.vars.pi S | (eval (extendDomain x)) p = 0})) / \u220f i \u2208 p.vars, \u2191(#(S i)) \u2264\n    \u2211 i \u2208 p.vars, \u2191(degreeOf i p) / \u2191(#(S i))",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MvPolynomial/Interpolation.lean#L69"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "56589b8dc89a6db311718dba5e6f5473d335d98d25365147bce5971b56a3bab6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 171,
        "start_column": 76,
        "end_line": 171,
        "end_column": 81,
        "file": "ZKLib/Data/MvPolynomial/Interpolation.lean"
      },
      "debug_info": {
        "goal": "\u03c3 : Type u_1\ninst\u271d\u00b3 : DecidableEq \u03c3\ninst\u271d\u00b2 : Fintype \u03c3\nR : Type u_2\ninst\u271d\u00b9 : CommRing R\ninst\u271d : IsDomain R\np q : R[X \u03c3]\nS : \u03c3 \u2192 Finset R\nhDegree : \u2200 (i : \u03c3), degreeOf i p < #(S i)\nhEval : \u2200 x \u2208 piFinset fun i => S i, (eval x) p = (eval x) q\n\u22a2 p = q",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/MvPolynomial/Interpolation.lean#L171"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-10-30T15:40:43-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c3233be394500d2e64138d2cb71acfa12de8c3479e313e0a9f4f05747b9c4708"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 95,
        "start_column": 16,
        "end_line": 95,
        "end_column": 21,
        "file": "ZKLib/Data/BinaryTowerField/Basic.lean"
      },
      "debug_info": {
        "goal": "case succ\nk : \u2115\na\u271d : k > 0 \u2192 AdjoinRoot (poly k) = Field k\nk_pos : k + 1 > 0\n\u22a2 AdjoinRoot (poly (k + 1)) = Field (k + 1)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/BinaryTowerField/Basic.lean#L95"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-30T10:53:02+05:30",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "bead3c4311c808cc607bb4bdfa28b0ce9be2e79b3e3f802ada56444430de7097"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 115,
        "start_column": 59,
        "end_line": 115,
        "end_column": 64,
        "file": "ZKLib/Data/BinaryTowerField/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u22a2 Irreducible (poly n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/BinaryTowerField/Basic.lean#L115"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2024-06-18T17:58:42-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "8acc721784ed7d8c44c98cf56b43303286d6cd7625de85146c4132a0411cead6"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 197,
        "start_column": 21,
        "end_line": 197,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic-old.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d : Semiring R\n\u22a2 Function.LeftInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic-old.lean#L197"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "0074cf312960c0a425a4862af07a3ca3c73c6a27b50de9f8ccdc41493d9e4183"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 198,
        "start_column": 22,
        "end_line": 198,
        "end_column": 27,
        "file": "ZKLib/Data/UniPoly/Basic-old.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d : Semiring R\n\u22a2 Function.RightInverse TropicallyBoundPolynomial.toPolynomial' Polynomial'.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic-old.lean#L198"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "1a067838c7ce25171a96df556c21efdec6852fc3e1cb27ab162e8a5774d8de43"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 199,
        "start_column": 21,
        "end_line": 199,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic-old.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d : Semiring R\n\u22a2 \u2200 (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := \u22ef, right_inv := \u22ef }.toFun\n        (x * y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := \u22ef, right_inv := \u22ef }.toFun\n          x *\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := \u22ef, right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic-old.lean#L199"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "e78db15faca6367a65061c619725eb5e7283be8b71758cb2880df9011bcab68c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 200,
        "start_column": 21,
        "end_line": 200,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic-old.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d : Semiring R\n\u22a2 \u2200 (x y : Polynomial' R),\n    { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n            left_inv := \u22ef, right_inv := \u22ef }.toFun\n        (x + y) =\n      { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := \u22ef, right_inv := \u22ef }.toFun\n          x +\n        { toFun := Polynomial'.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toPolynomial',\n              left_inv := \u22ef, right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic-old.lean#L200"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-09-07T14:00:27-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "ebee468117542527d30822eaadc8c3dc8939cc35bb862c66fde128d83580cd95"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 571,
        "start_column": 2,
        "end_line": 571,
        "end_column": 7,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q : UniPoly Q\ni : \u2115\nhi : i < Array.size (p.add_raw q)\n\u22a2 (p ++ mkArray (Array.size q - Array.size p) 0)[i] + (q ++ mkArray (Array.size p - Array.size q) 0)[i] =\n    p[i]?.getD 0 + q[i]?.getD 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L571"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7cdf46777192e68e5b9e6d9f3219b7e10f7085e57d8f6eb09fdfdf86f793740b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 899,
        "start_column": 4,
        "end_line": 899,
        "end_column": 9,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "Q : Type u_2\ninst\u271d : Ring Q\np q r : UniPoly Q\nhpq : p ++ mkArray (Array.size q - Array.size p) 0 = q ++ mkArray (Array.size p - Array.size q) 0\nhqr : q ++ mkArray (Array.size r - Array.size q) 0 = r ++ mkArray (Array.size q - Array.size r) 0\n\u22a2 p ++ mkArray (Array.size r - Array.size p) 0 = r ++ mkArray (Array.size p - Array.size r) 0",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L899"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "bfaff599d4b35668aa7350224d66500a2309f45b557cca5617d425564dc86f48"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 975,
        "start_column": 6,
        "end_line": 975,
        "end_column": 11,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : Ring R\ninst\u271d : BEq R\np : UniPoly R\n\u22a2 (p.toPoly, Tropical.trop (OrderDual.toDual p.degreeBound)) \u2208 TropicallyBoundPoly R",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L975"
      },
      "metadata": {
        "blame_email_hash": "ab200eba5736",
        "blame_date": "2025-03-12T19:59:09-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "a5a00e44344d804dd53e58cd381637cbda36c858c5450576b4e0bd481208d858"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 1005,
        "start_column": 22,
        "end_line": 1005,
        "end_column": 27,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 Function.RightInverse TropicallyBoundPolynomial.toUniPoly UniPoly.toTropicallyBoundPolynomial",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L1005"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "99e112725fe6638078603a4b6aa7c36933c08d9cfab2fe149bc5f442360eaf3d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 1006,
        "start_column": 21,
        "end_line": 1006,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x * y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x *\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L1006"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "91633df4d322a25a6b65b522dd137c1e621b01cb3250b87b2fc0d80a9536a9d5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 1007,
        "start_column": 21,
        "end_line": 1007,
        "end_column": 26,
        "file": "ZKLib/Data/UniPoly/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : BEq R\ninst\u271d : Ring R\n\u22a2 \u2200 (x y : UniPoly R),\n    { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n            right_inv := \u22ef }.toFun\n        (x + y) =\n      { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          x +\n        { toFun := UniPoly.toTropicallyBoundPolynomial, invFun := TropicallyBoundPolynomial.toUniPoly, left_inv := \u22ef,\n              right_inv := \u22ef }.toFun\n          y",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/Data/UniPoly/Basic.lean#L1007"
      },
      "metadata": {
        "blame_email_hash": "94b4cc0e139f",
        "blame_date": "2024-05-31T16:31:08-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7459b3d43c397b6da387cb38a04b9f566aba13065d8e3cfefce9f5cf53d3e8a2"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 254,
        "start_column": 2,
        "end_line": 254,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "case h\nm n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\nT : pSpec\u2081.FullTranscript\nT' : pSpec\u2082.FullTranscript\ni : Fin m\n\u22a2 _root_.cast \u22ef (T i) = (\u22ef \u25b8 T) i",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L254"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-07T12:49:22-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "e07eb43f03b20fbee7e87ff259a0cd0416aa0e8a27fb8eb314bcf9bf95bb8a9b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 556,
        "start_column": 55,
        "end_line": 556,
        "end_column": 60,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u22a2 (compose 0 (fun x => n) fun x => pSpec) = pSpec",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L556"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T18:57:31+07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "daf806eae1da1fd808559458ec14bd85c66930faecadfc917bb485f4547da119"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 572,
        "start_column": 2,
        "end_line": 572,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "m : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\ni : Fin m\n\u22a2 compose (\u2191i + 1) (Fin.take (\u2191i + 2) \u22ef n) (Fin.take (\u2191i + 2) \u22ef pSpec) =\n    cast \u22ef (compose (\u2191i) (Fin.take (\u2191i + 1) \u22ef n) (Fin.take (\u2191i + 1) \u22ef pSpec) ++\u209a pSpec i.succ)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "5f40a87bb6b26e732effa52fb8d52a4c2bd3f92e6f542adfeceddaff9ef67715"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 699,
        "start_column": 2,
        "end_line": 699,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "m n : \u2115\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nO\u2098\u2081 : (i : pSpec\u2081.MessageIndex) \u2192 ToOracle (pSpec\u2081.Message i)\nO\u2098\u2082 : (i : pSpec\u2082.MessageIndex) \u2192 ToOracle (pSpec\u2082.Message i)\ninst\u271d\u00b2 : (i : pSpec\u2081.ChallengeIndex) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b9 : (i : pSpec\u2082.ChallengeIndex) \u2192 Sampleable (pSpec\u2082.Challenge i)\ninst\u271d : oSpec.DecidableEq\nP\u2081 : Prover pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nP\u2082 : Prover pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\nstmt : Stmt\u2081\nwit : Wit\u2081\n\u22a2 run stmt wit (P\u2081.append P\u2082) = do\n    let __discr \u2190 liftM (run stmt wit P\u2081)\n    match __discr with\n      | (stmt\u2082, wit\u2082, transcript\u2081) => do\n        let __discr \u2190 liftM (run stmt\u2082 wit\u2082 P\u2082)\n        match __discr with\n          | (stmt\u2083, wit\u2083, transcript\u2082) => pure (stmt\u2083, wit\u2083, transcript\u2081 ++\u209c transcript\u2082)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L699"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-28T16:03:02+07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "350ae262f2a4131d5c90ff8d7dc05bb7990ad35c3c1dff25f878171732d94788"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 725,
        "start_column": 89,
        "end_line": 725,
        "end_column": 94,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "m n : \u2115\n\u03b9 : Type\ninst\u271d\u2074 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\npSpec\u2081 : ProtocolSpec m\npSpec\u2082 : ProtocolSpec n\ninst\u271d\u00b3 : (i : pSpec\u2081.ChallengeIndex) \u2192 Sampleable (pSpec\u2081.Challenge i)\ninst\u271d\u00b2 : (i : pSpec\u2082.ChallengeIndex) \u2192 Sampleable (pSpec\u2082.Challenge i)\nStmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083 : Type\nrel\u2081 : Stmt\u2081 \u2192 Wit\u2081 \u2192 Prop\nrel\u2082 : Stmt\u2082 \u2192 Wit\u2082 \u2192 Prop\nrel\u2083 : Stmt\u2083 \u2192 Wit\u2083 \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR\u2081 : Reduction pSpec\u2081 oSpec Stmt\u2081 Wit\u2081 Stmt\u2082 Wit\u2082\nR\u2082 : Reduction pSpec\u2082 oSpec Stmt\u2082 Wit\u2082 Stmt\u2083 Wit\u2083\ncompletenessError\u2081 completenessError\u2082 : \u211d\u22650\nh\u2081 : completeness rel\u2081 rel\u2082 R\u2081 completenessError\u2081\nh\u2082 : completeness rel\u2082 rel\u2083 R\u2082 completenessError\u2082\n\u22a2 completeness rel\u2081 rel\u2083 (R\u2081.append R\u2082) (completenessError\u2081 + completenessError\u2082)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L725"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-01T17:09:18-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c36fa54cd25700718daf5ac8de2d75ba764240da87d46c8a7b608f61bc56da54"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 752,
        "start_column": 38,
        "end_line": 752,
        "end_column": 43,
        "file": "ZKLib/OracleReduction/Composition/Sequential.lean"
      },
      "debug_info": {
        "goal": "\u03b9 : Type\ninst\u271d\u00b3 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nm : \u2115\nn : Fin (m + 1) \u2192 \u2115\npSpec : (i : Fin (m + 1)) \u2192 ProtocolSpec (n i)\ninst\u271d\u00b2 : (i : Fin (m + 1)) \u2192 (j : (pSpec i).ChallengeIndex) \u2192 Sampleable ((pSpec i).Challenge j)\nStmt Wit : Fin (m + 2) \u2192 Type\nrel : (i : Fin (m + 2)) \u2192 Stmt i \u2192 Wit i \u2192 Prop\ninst\u271d\u00b9 : oSpec.DecidableEq\ninst\u271d : oSpec.FiniteRange\nR : (i : Fin (m + 1)) \u2192 Reduction (pSpec i) oSpec (Stmt i.castSucc) (Wit i.castSucc) (Stmt i.succ) (Wit i.succ)\ncompletenessError : Fin (m + 1) \u2192 \u211d\u22650\nh : \u2200 (i : Fin (m + 1)), completeness (rel i.castSucc) (rel i.succ) (R i) (completenessError i)\n\u22a2 completeness (rel 0) (rel (Fin.last (m + 1))) (compose m n pSpec Stmt Wit R) (\u2211 i, completenessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Sequential.lean#L752"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-12-06T19:22:58-03:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "3b2ca99ce7bb935eb1dce6cf62a24dd8838f688ff88e073d0e6b7af947126b69"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 151,
        "start_column": 2,
        "end_line": 151,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nP : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (fun a =>\n        (data.fStmtOut (a.2.2.1, (P.toProverOut.1 a.2.1).1), data.fWitOut (a.2.2.2, (P.toProverOut.1 a.2.1).2),\n          a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn), stmtIn, witIn))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2.1 a, __discr.2.2)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2, __discr.2.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2.1).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n) =\n    (fun a => (data.fStmtOut (stmtIn, (P.toProverOut.1 a.2).1), data.fWitOut (witIn, (P.toProverOut.1 a.2).2), a.1)) <$>\n      Fin.induction (pure (default, P.input (data.fStmtIn stmtIn) (data.fWitIn witIn)))\n        (fun j ih => do\n          let __discr \u2190 ih\n          match hDir : (pSpec j).1 with\n            | Direction.V_to_P =>\n              (fun a => (Transcript.snoc a __discr.1, P.receiveChallenge \u27e8j, hDir\u27e9 __discr.2 a)) <$>\n                liftM (query (Sum.inr \u27e8j, hDir\u27e9) ())\n            | Direction.P_to_V =>\n              (fun a => (Transcript.snoc a.1 __discr.1, a.2)) <$>\n                (P.sendMessage \u27e8j, hDir\u27e9 __discr.2).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092))\n        (Fin.last n)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L151"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "2874ccbcfdd6755081b92391ff739cdcf0d9152ad0ed4e1ebfc4472a723170ca"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 164,
        "start_column": 2,
        "end_line": 164,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n      (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), a_1, a.2.2)) <$>\n          (Verifier.run stmtIn a.2.2\n                {\n                  verify := fun stmtIn transcript =>\n                    (fun a => data.fStmtOut (stmtIn, a)) <$>\n                      R.verifier.verify (data.fStmtIn stmtIn) transcript }).liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.run (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 => ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1), a.2.2)) <$>\n        (Verifier.run (data.fStmtIn stmtIn) a.2.2 R.verifier).liftComp (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L164"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "6e2bb4f3999a00f10182b4e11bc7de04b518b3615a01f31fcaf9468c35cf71f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 177,
        "start_column": 2,
        "end_line": 177,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\ndata : TransportData StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut'\nstmtIn : StmtIn\nwitIn : WitIn\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\n\u22a2 (do\n      let __discr \u2190 Prover.runWithLog stmtIn witIn (Prover.transport data R.prover)\n      (fun a => ((__discr.1, __discr.2.1), a.1, __discr.2.2.1, __discr.2.2.2, a.2)) <$>\n          (simulateQ loggingOracle\n                  (Verifier.run stmtIn __discr.2.2.1\n                    {\n                      verify := fun stmtIn transcript =>\n                        (fun a => data.fStmtOut (stmtIn, a)) <$>\n                          R.verifier.verify (data.fStmtIn stmtIn) transcript })).run.liftComp\n            (oSpec ++\u2092 [pSpec.Challenge]\u2092)) =\n    do\n    let a \u2190 Prover.runWithLog (data.fStmtIn stmtIn) (data.fWitIn witIn) R.prover\n    (fun a_1 =>\n          ((data.fStmtOut (stmtIn, a.1), data.fWitOut (witIn, a.2.1)), data.fStmtOut (stmtIn, a_1.1), a.2.2.1, a.2.2.2,\n            a_1.2)) <$>\n        (simulateQ loggingOracle (Verifier.run (data.fStmtIn stmtIn) a.2.2.1 R.verifier)).run.liftComp\n          (oSpec ++\u2092 [pSpec.Challenge]\u2092)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L177"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "f8a0a8b2dd7a1c86691d9b6977d4fceb64786529440db08ebdac52704a1d1c4b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 201,
        "start_column": 2,
        "end_line": 201,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\ncompletenessError : \u211d\u22650\ndata : TransportDataComplete StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nR : Reduction pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'\nh :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn'),\n    relIn' stmtIn witIn \u2192\n      [fun x =>\n          match x with\n          | ((prvStmtOut, witOut), stmtOut, snd) => relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run stmtIn witIn R] \u2265\n        1 - \u2191completenessError\nstmtIn : StmtIn\nwitIn : WitIn\nhRelIn : relIn stmtIn witIn\nhR :\n  [fun x =>\n      match x with\n      | ((prvStmtOut, witOut), stmtOut, snd) =>\n        relOut' stmtOut witOut \u2227 prvStmtOut = stmtOut|run (data.fStmtIn stmtIn) (data.fWitIn witIn) R] \u2265\n    1 - \u2191completenessError\nx\u271d : (StmtOut' \u00d7 WitOut') \u00d7 StmtOut' \u00d7 pSpec.FullTranscript\na\u271d : x\u271d \u2208 (run (data.fStmtIn stmtIn) (data.fWitIn witIn) R).support\nhRelOut' : relOut' x\u271d.2.1 x\u271d.1.2 \u2227 x\u271d.1.1 = x\u271d.2.1\n\u22a2 ((fun x => relOut x.2.1 x.1.2 \u2227 x.1.1 = x.2.1) \u2218 fun a =>\n      ((data.fStmtOut (stmtIn, a.1.1), data.fWitOut (witIn, a.1.2)), data.fStmtOut (stmtIn, a.2.1), a.2.2))\n    x\u271d",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L201"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-04-22T09:32:10-04:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "02bc36169c0b69aa48f7a8edb63d3423dc3d28570c432c00af1edc49730f84a5"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 215,
        "start_column": 2,
        "end_line": 215,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn StmtOut StmtIn' StmtOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nlangIn' : Set StmtIn'\nlangOut' : Set StmtOut'\nsoundnessError : \u211d\u22650\ndata : TransportDataSound StmtIn StmtOut StmtIn' StmtOut' langIn langOut langIn' langOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nh :\n  \u2200 (WitIn WitOut : Type) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn' WitIn StmtOut' WitOut),\n    \u2200 stmtIn \u2209 langIn',\n      [fun x =>\n          match x with\n          | (fst, stmtOut, snd) => stmtOut \u2209 langOut'|run stmtIn witIn { prover := prover, verifier := V }] \u2264\n        \u2191soundnessError\nstmtIn hStmtIn : Type\nWitIn : stmtIn\nWitOut : Prover pSpec oSpec StmtIn stmtIn StmtOut hStmtIn\nwitIn : StmtIn\nprover : witIn \u2209 langIn\n\u22a2 [fun x =>\n      match x with\n      | (fst, stmtOut, snd) =>\n        stmtOut \u2209\n          langOut|run witIn WitIn { prover := WitOut, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n    \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L215"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "cf970cae25f82786a5b2ecc3f5df674cb9a9e36f7d0ac5950f3923c8f2061c89"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 229,
        "start_column": 2,
        "end_line": 234,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "case intro\nn : \u2115\npSpec : ProtocolSpec n\n\u03b9 : Type\ninst\u271d\u00b2 : DecidableEq \u03b9\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nrelIn' : StmtIn' \u2192 WitIn' \u2192 Prop\nrelOut' : StmtOut' \u2192 WitOut' \u2192 Prop\nsoundnessError : \u211d\u22650\ndata :\n  TransportDataKnowledgeSound StmtIn WitIn StmtOut WitOut StmtIn' WitIn' StmtOut' WitOut' relIn relIn' relOut relOut'\nV : Verifier pSpec oSpec StmtIn' StmtOut'\nE : StraightlineExtractor\nh' :\n  \u2200 (stmtIn : StmtIn') (witIn : WitIn') (prover : Prover pSpec oSpec StmtIn' WitIn' StmtOut' WitOut'),\n    [fun x =>\n        match x with\n        | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n          \u00acrelIn' stmtIn (E stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n            relOut' stmtOut witOut|runWithLog stmtIn witIn { prover := prover, verifier := V }] \u2264\n      \u2191soundnessError\n\u22a2 \u2203 extractor,\n    \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n      [fun x =>\n          match x with\n          | ((fst, witOut), stmtOut, transcript, proveQueryLog, snd) =>\n            \u00acrelIn stmtIn (extractor stmtIn stmtOut witOut transcript proveQueryLog) \u2227\n              relOut stmtOut\n                witOut|runWithLog stmtIn witIn\n            { prover := prover, verifier := Verifier.transport data.toTransportStatement V }] \u2264\n        \u2191soundnessError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L229"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "b53dee42c163fd6290783ad8114c6408e1aab873f72925401e600f603811f2e8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 278,
        "start_column": 4,
        "end_line": 278,
        "end_column": 9,
        "file": "ZKLib/OracleReduction/Composition/Virtual.lean"
      },
      "debug_info": {
        "goal": "x\u271d\u00b3 : StmtIn\nx\u271d\u00b2 : Unit\nx\u271d\u00b9 : StmtOut'\nx\u271d : Unit\np q : \u2124[X]\nt : \u2124\nf : \u2124[X]\nt' r : \u2124\nhRelOut' : eval r f = t'\nhRelIn : eval 0 p * eval 0 q + eval 1 p * eval 1 q = t\n\u22a2 eval r p * eval r q = t'",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Composition/Virtual.lean#L278"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:31:31-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "4f806b7f63505f4344c750c7ea92bb2341fce020992e13e9bbe1def52ff4feee"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 361,
        "start_column": 2,
        "end_line": 361,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Security/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nknowledgeError : \u211d\u22650\nhLt : knowledgeError < 1\nextractor : StraightlineExtractor\nhKS :\n  \u2200 (stmtIn : StmtIn) (witIn : WitIn) (prover : Prover pSpec oSpec StmtIn WitIn StmtOut WitOut),\n    [fun x =>\n        \u00acrelIn stmtIn (extractor stmtIn x.2.1 x.1.2 x.2.2.1 x.2.2.2.1) \u2227\n          relOut x.2.1 x.1.2|runWithLog stmtIn witIn { prover := prover, verifier := verifier }] \u2264\n      \u2191knowledgeError\nWitIn' WitOut' : Type\nwitIn' : WitIn'\nprover : Prover pSpec oSpec StmtIn WitIn' StmtOut WitOut'\nstmtIn : StmtIn\nhStmtIn : \u2200 (x : WitIn), \u00acrelIn stmtIn x\n\u22a2 [fun x => \u2200 (x_1 : WitOut), \u00acrelOut x.2.1 x_1|run stmtIn witIn' { prover := prover, verifier := verifier }] \u2264\n    \u2191knowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Security/Basic.lean#L361"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c7f2f9d10297e4f686fe84aa948523dbd36538d68a840d300f6215da662c86b0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 382,
        "start_column": 75,
        "end_line": 382,
        "end_column": 80,
        "file": "ZKLib/OracleReduction/Security/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn StmtOut : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nlangIn : Set StmtIn\nlangOut : Set StmtOut\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction langIn langOut verifier\nrbrSoundnessError : pSpec.ChallengeIndex \u2192 \u211d\u22650\n\u22a2 rbrSoundness langIn langOut verifier stateFunction rbrSoundnessError \u2192\n    soundness langIn langOut verifier (\u2211 i, rbrSoundnessError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Security/Basic.lean#L382"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "7e53bb3ca520f385875bcebabbd2dae59a23aed3af3cf938567f0b8bb52e31f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 393,
        "start_column": 2,
        "end_line": 393,
        "end_column": 7,
        "file": "ZKLib/OracleReduction/Security/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError \u2192\n    rbrSoundness (Function.language relIn) (Function.language relOut) verifier stateFunction rbrKnowledgeError",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Security/Basic.lean#L393"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "179e44fb7cdd7c73b80c74070e8f66221f9d6d50066dd5a3d214ece27dadc74a"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 403,
        "start_column": 82,
        "end_line": 403,
        "end_column": 87,
        "file": "ZKLib/OracleReduction/Security/Basic.lean"
      },
      "debug_info": {
        "goal": "n : \u2115\n\u03b9 : Type\npSpec : ProtocolSpec n\noSpec : OracleSpec \u03b9\nStmtIn WitIn StmtOut WitOut : Type\ninst\u271d\u00b9 : (i : pSpec.ChallengeIndex) \u2192 VCVCompatible (pSpec.Challenge i)\ninst\u271d : oSpec.FiniteRange\nrelIn : StmtIn \u2192 WitIn \u2192 Prop\nrelOut : StmtOut \u2192 WitOut \u2192 Prop\nverifier : Verifier pSpec oSpec StmtIn StmtOut\nstateFunction : StateFunction (Function.language relIn) (Function.language relOut) verifier\nrbrKnowledgeError : pSpec.ChallengeIndex \u2192 \u211d\u22650\n\u22a2 rbrKnowledgeSoundness relIn relOut verifier stateFunction rbrKnowledgeError \u2192\n    knowledgeSoundness relIn relOut verifier (\u2211 i, rbrKnowledgeError i)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/OracleReduction/Security/Basic.lean#L403"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2024-11-28T13:43:25-07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "5ecf274c7b94d8cceb371732ac887e58f963eac7db45f532cef5512f0eb9a01c"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 496,
        "start_column": 2,
        "end_line": 496,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\ninst\u271d : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntranscript : FullTranscript ![(Direction.P_to_V, \u21a5R\u2983\u2264 \u2191deg\u2984[X]), (Direction.V_to_P, R)]\nx : (pSpec R deg).getType 0\nhp_i : \u2191(transcript 0) \u2208 R\u2983\u2264 \u2191deg\u2984[X]\nhEq : transcript 0 = \u27e8\u2191(transcript 0), hp_i\u27e9\n\u22a2 (do\n      let a \u2190\n        ((OptionT.run (mapM (fun i => liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (D i))) (List.finRange m))).bind\n                fun __do_lift =>\n                __do_lift.elim (FreeMonad.pure none)\n                  (OptionT.run \u2218 fun evals => do\n                    if evals.sum = stmt.1.target then pure () else failure\n                    (fun a => { target := a, challenges := Fin.snoc stmt.1.challenges (transcript 1) }) <$>\n                        liftM (query (Sum.inr (Sum.inr \u27e80, \u22ef\u27e9)) (transcript 1)))).mapM\n            fun {\u03b1} => (ToOracle.simOracle2 oSpec stmt.2 transcript.messages).impl\n      (fun a => (a, fun i_1 => stmt.2 i_1)) <$> a.getM) =\n    (fun a =>\n        ({ target := Polynomial.eval (transcript 1) \u2191(transcript 0),\n            challenges := Fin.snoc stmt.1.challenges (transcript 1) },\n          stmt.2)) <$>\n      if \u2211 x, Polynomial.eval (D x) \u2191(transcript 0) = stmt.1.target then pure () else failure",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L496"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "5a758683c6ddeb333d6ba73228d2493e7b71475c2c7f54a674f82bcd8b3acd1b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 514,
        "start_column": 57,
        "end_line": 514,
        "end_column": 62,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "case left\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 (do\n      let x \u2190\n        ({ prover := prover R n deg D oSpec i,\n                        verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.sendMessage\n                \u27e80, \u22ef\u27e9\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.input\n                  ({ target := target, challenges := challenge }, oStmt) witIn\u271d)).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)\n      let a \u2190 liftM (query (Sum.inr \u27e81, \u22ef\u27e9) ())\n      (fun a_1 =>\n            ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.toProverOut.1\n                ({ prover := prover R n deg D oSpec i,\n                          verifier := oracleVerifier R n deg D oSpec i }.toReduction.prover.receiveChallenge\n                  \u27e81, \u22ef\u27e9 x.2 a),\n              a_1, Transcript.snoc a (Transcript.snoc x.1 default))) <$>\n          (Verifier.run ({ target := target, challenges := challenge }, oStmt)\n                (Transcript.snoc a (Transcript.snoc x.1 default))\n                { prover := prover R n deg D oSpec i,\n                      verifier := oracleVerifier R n deg D oSpec i }.toReduction.verifier).liftComp\n            (oSpec ++\u2092 [(pSpec R deg).Challenge]\u2092)).neverFails",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L514"
      },
      "metadata": {
        "blame_email_hash": "0c5d39c5ece3",
        "blame_date": "2025-03-09T23:22:53-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "c2963acfdbed9f50ca622b582bf1710d203975609cbd3edaa8ee8d01f865dc57"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 523,
        "start_column": 2,
        "end_line": 523,
        "end_column": 7,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "case right\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ntarget : R\nchallenge : Fin \u2191i.castSucc \u2192 R\noStmt : (i : Fin 1) \u2192 OracleStatement R n deg i\nwitIn\u271d : Unit\nhValid :\n  \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n      (MvPolynomial.eval (Fin.append challenge x \u2218 Fin.cast \u22ef)) \u2191(oStmt 0) =\n    target\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_1 : Unit) (a_1 : Statement R n i.succ)\n    (b_2 : (i : Fin 1) \u2192 OracleStatement R n deg i) (b_3 : (pSpec R deg).FullTranscript),\n    (((a, b), b_1), (a_1, b_2), b_3) \u2208\n        (run ({ target := target, challenges := challenge }, oStmt) witIn\u271d\n            { prover := prover R n deg D oSpec i, verifier := oracleVerifier R n deg D oSpec i }.toReduction).support \u2192\n      (match (a_1, b_2) with\n        | ({ target := target, challenges := challenges }, oStmt) =>\n          match oStmt 0 with\n          | \u27e8poly, property\u27e9 =>\n            \u2211 x \u2208 Fintype.piFinset fun i => Finset.map D univ,\n                (MvPolynomial.eval (Fin.append challenges x \u2218 Fin.cast \u22ef)) poly =\n              target) \u2227\n        (a, b) = (a_1, b_2)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L523"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-01-18T19:07:20+07:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "0feba0658b6a43a5417758a47c0d8837e87e0c86a06dd94a290841c777680efd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 572,
        "start_column": 4,
        "end_line": 572,
        "end_column": 9,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "R\u271d : Type\ninst\u271d\u2075 : CommSemiring R\u271d\nn\u271d deg\u271d m\u271d : \u2115\nD\u271d : Fin m\u271d \u21aa R\u271d\n\u03b9\u271d : Type\noSpec\u271d : OracleSpec \u03b9\u271d\ninst\u271d\u2074 : VCVCompatible R\u271d\nR : Type\ninst\u271d\u00b3 : CommSemiring R\ninst\u271d\u00b2 : VCVCompatible R\nn deg m : \u2115\nD : Fin m \u21aa R\n\u03b9 : Type\noSpec : OracleSpec \u03b9\ni\u271d : Fin (n + 1)\ninst\u271d\u00b9 : DecidableEq \u03b9\ninst\u271d : oSpec.FiniteRange\ni : Fin (n + 1)\nstmt : Statement R n i.castSucc \u00d7 ((i : Fin 1) \u2192 OracleStatement R n deg i)\ntr : Transcript (Fin.last 2) (pSpec R deg)\nhFalse :\n  \u00acrelation R n deg D i.succ ({ target := stmt.1.target, challenges := Fin.snoc stmt.1.challenges (tr 1) }, stmt.2) ()\n\u22a2 \u2200 (a : Statement R n i.succ) (b : (i : Fin 1) \u2192 OracleStatement R n deg i),\n    (a, b) \u2208 (Verifier.run stmt tr (verifier R n deg D oSpec i)).support \u2192\n      \u2200 (x : Unit), \u00acrelation R n deg D i.succ (a, b) x",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L572"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-06T20:02:30-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "8f560d5c9559d35fe91627efab22fc4dae1498889b75687000254b1953b2917f"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "f914f40ab12d4972260451fe86d8ccc8c75cc527",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 647,
        "start_column": 42,
        "end_line": 647,
        "end_column": 47,
        "file": "ZKLib/ProofSystem/Sumcheck/Basic.lean"
      },
      "debug_info": {
        "goal": "R : Type\ninst\u271d\u00b9 : CommSemiring R\nn deg m : \u2115\nD : Fin m \u21aa R\ninst\u271d : VCVCompatible R\n\u22a2 OracleReduction.perfectCompleteness (relIn R n deg D) (relOut R n deg) (reduction R n deg)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/f914f40ab12d4972260451fe86d8ccc8c75cc527/ZKLib/ProofSystem/Sumcheck/Basic.lean#L647"
      },
      "metadata": {
        "blame_email_hash": "f335a4ba1b88",
        "blame_date": "2025-02-24T11:52:07-05:00",
        "inclusion_date": "2025-04-23T05:04:52.061044+00:00"
      },
      "id": "86ebbb9272de41a6f56a734158e5dbb9bff7ff225181c29fd94e934042ffb6f8"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 48,
        "start_column": 2,
        "end_line": 48,
        "end_column": 7,
        "file": "Clean/Examples/Add32LawfulCircuit.lean"
      },
      "debug_info": {
        "goal": "input : Var Inputs (F p)\nenv : Environment (F p)\ni0 : \u2115\nx y : U32 (Expression (F p))\ncarry_in x0 x1 x2 x3 y0 y1 y2 y3 : Expression (F p)\n\u22a2 (Gadgets.ByteLookup (var { index := i0 })).table.contains\n      (Vector.map (fun x => Expression.eval env x) (Gadgets.ByteLookup (var { index := i0 })).entry) \u2227\n    (True \u2192 env.get (i0 + 1) = 0 \u2228 env.get (i0 + 1) = 1) \u2227\n      Expression.eval env x0 + Expression.eval env y0 + Expression.eval env carry_in + -env.get i0 +\n            -(env.get (i0 + 1) * 256) =\n          0 \u2227\n        (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n            (Vector.map (fun x => Expression.eval env x)\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n          (True \u2192 env.get (i0 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1) = 1) \u2227\n            Expression.eval env x1 + Expression.eval env y1 + env.get (i0 + 1) + -env.get (i0 + 1 + 1) +\n                  -(env.get (i0 + 1 + 1 + 1) * 256) =\n                0 \u2227\n              (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                  (Vector.map (fun x => Expression.eval env x)\n                    (Gadgets.ByteLookup (var { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                (True \u2192 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                  Expression.eval env x2 + Expression.eval env y2 + env.get (i0 + 1 + 1 + 1) +\n                          -env.get (i0 + 1 + 1 + 1 + 1) +\n                        -(env.get (i0 + 1 + 1 + 1 + 1 + 1) * 256) =\n                      0 \u2227\n                    (Gadgets.ByteLookup\n                              (var\n                                {\n                                  index :=\n                                    i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).table.contains\n                        (Vector.map (fun x => Expression.eval env x)\n                          (Gadgets.ByteLookup\n                              (var\n                                { index := i0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 + 1 + 0 + 1 + 0 + 0 })).entry) \u2227\n                      (True \u2192\n                          env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 0 \u2228 env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) = 1) \u2227\n                        Expression.eval env x3 + Expression.eval env y3 + env.get (i0 + 1 + 1 + 1 + 1 + 1) +\n                              -env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1) +\n                            -(env.get (i0 + 1 + 1 + 1 + 1 + 1 + 1 + 1) * 256) =\n                          0",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Examples/Add32LawfulCircuit.lean#L48"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-09T16:01:46+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "e7058cd034863388e0936f9d8fb1e3bc312903bf2eaf0c3e921c60ac2314a8b3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 92,
        "start_column": 4,
        "end_line": 92,
        "end_column": 9,
        "file": "Clean/Circuit/Loops.lean"
      },
      "debug_info": {
        "goal": "n m : \u2115\nF : Type\ninst\u271d\u00b9 : Field F\n\u03b1 \u03b2 : Type\ncircuit : \u03b1 \u2192 Circuit F \u03b2\ninst\u271d : Nonempty \u03b2\nxs : Vector \u03b1 m\nlawful : ConstantLawfulCircuits circuit\nops : OperationsList F\n\u22a2 (Vector.mapM circuit xs ops).1 =\n    (fun n =>\n        Vector.mapIdx\n          (fun i x => ConstantLawfulCircuits.output circuit x (n + ConstantLawfulCircuits.local_length circuit * i)) xs)\n      ops.offset",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Circuit/Loops.lean#L92"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T13:03:36+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "196beb1e650dd2db705afeab682dfcab7103c77a9e4c02a2084d0fde265069f1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 94,
        "start_column": 4,
        "end_line": 94,
        "end_column": 9,
        "file": "Clean/Circuit/Loops.lean"
      },
      "debug_info": {
        "goal": "n m : \u2115\nF : Type\ninst\u271d\u00b9 : Field F\n\u03b1 \u03b2 : Type\ncircuit : \u03b1 \u2192 Circuit F \u03b2\ninst\u271d : Nonempty \u03b2\nxs : Vector \u03b1 m\nlawful : ConstantLawfulCircuits circuit\nops : OperationsList F\n\u22a2 (Vector.mapM circuit xs ops).2.offset = (fun n => n + ConstantLawfulCircuits.local_length circuit * m) ops.offset",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Circuit/Loops.lean#L94"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T13:03:36+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "278cb9fb6890b3dfb415bd9af36b9743a125909755ed881afece4884f0c59536"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 96,
        "start_column": 4,
        "end_line": 96,
        "end_column": 9,
        "file": "Clean/Circuit/Loops.lean"
      },
      "debug_info": {
        "goal": "n m : \u2115\nF : Type\ninst\u271d\u00b9 : Field F\n\u03b1 \u03b2 : Type\ncircuit : \u03b1 \u2192 Circuit F \u03b2\ninst\u271d : Nonempty \u03b2\nxs : Vector \u03b1 m\nlawful : ConstantLawfulCircuits circuit\nops : OperationsList F\n\u22a2 (Vector.mapM circuit xs ops).2 =\n    { offset := (fun n => n + ConstantLawfulCircuits.local_length circuit * m) ops.offset,\n      withLength :=\n        ops.withLength ++\n          (fun n =>\n              let k := ConstantLawfulCircuits.local_length circuit;\n              \u22ef.mpr\n                (Vector.induct (OperationsFrom.empty n)\n                  (fun {n_1} a as a_1 =>\n                    id (\u22ef.mpr (\u22ef.mpr (\u22ef.mpr (a_1 ++ ConstantLawfulCircuits.operations a (n + k * n_1))))))\n                  xs))\n            ops.offset }",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Circuit/Loops.lean#L96"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T13:03:36+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "ced25223878686f6fb1df836c8633b6ab53497e19b4165da73dcb47ed021bc40"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 65,
        "start_column": 18,
        "end_line": 65,
        "end_column": 23,
        "file": "Clean/Gadgets/Rotation64/Rotation64.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n\u22a2 Soundness (F p) assumptions (spec off)",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Rotation64/Rotation64.lean#L65"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-01T17:43:17+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "ff64695be4a522675b3a55296703581c0542b1e0654821c7ddbb2dde6e855dad"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 66,
        "start_column": 21,
        "end_line": 66,
        "end_column": 26,
        "file": "Clean/Gadgets/Rotation64/Rotation64.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\noff : Fin 64\n\u22a2 Completeness (F p) U64 assumptions",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Rotation64/Rotation64.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-02-27T17:02:29+01:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "808d6952a88f2964d144135dfc392e8e01995c81b279b55892c14acf7031ea05"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 99,
        "start_column": 2,
        "end_line": 99,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaD.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d : Fact (Nat.Prime p)\np_large_enough : Fact (p > 2 ^ 16 + 2 ^ 8)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakRow (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : KeccakRow (F p)\nh_assumptions : assumptions state\nh_input : Vector.map (eval env) state_var = state\n\u22a2 ((((((((Rotation64.assumptions (eval env state_var[1]) \u2227\n                    (eval env state_var[\u21914]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 16))).is_normalized) \u2227\n                  Rotation64.assumptions (eval env state_var[2])) \u2227\n                (eval env state_var[0]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 48))).is_normalized) \u2227\n              Rotation64.assumptions (eval env state_var[\u21913])) \u2227\n            (eval env state_var[1]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 80))).is_normalized) \u2227\n          Rotation64.assumptions (eval env state_var[\u21914])) \u2227\n        (eval env state_var[2]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 112))).is_normalized) \u2227\n      Rotation64.assumptions (eval env state_var[0])) \u2227\n    (eval env state_var[\u21913]).is_normalized \u2227 (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Keccak/ThetaD.lean#L99"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T00:48:02+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "3bb56c268600170b762174f7ab3b313c598180a8dbc53bd4fd3c5d66f6cd99bd"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 103,
        "start_column": 2,
        "end_line": 103,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/Chi.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b9 : Fact (Nat.Prime p)\ninst\u271d : Fact (p > 512)\ni\u271d : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env :\n  env.uses_local_witnesses_completeness\n    (Vector.mapM\n          (fun i =>\n            (StateT.modifyGet fun ops =>\n                  (not64_bytewise state_var.toArray[\u2191(i + 5)],\n                    { offset := ops.offset + 0,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ main := fun x => StateT.pure (not64_bytewise x), local_length := fun x => 0,\n                                local_length_eq := \u22ef, output := fun x x_1 => not64_bytewise x, output_eq := \u22ef,\n                                initial_offset_eq := \u22ef, assumptions := fun x => x.is_normalized,\n                                spec := fun x z => z.value = not64 x.value \u2227 z.is_normalized, soundness := \u22ef,\n                                completeness := \u22ef }.to_subcircuit\n                            ops.offset state_var.toArray[\u2191(i + 5)]) })).bind\n              fun state_not =>\n              (StateT.modifyGet fun ops =>\n                    (var_from_offset U64 ops.offset,\n                      { offset := ops.offset + 8,\n                        withLength :=\n                          ops.withLength.subcircuit\n                            ({ toElaboratedCircuit := And.And64.elaborated, assumptions := And.And64.assumptions,\n                                  spec := And.And64.spec, soundness := \u22ef, completeness := \u22ef }.to_subcircuit\n                              ops.offset { x := state_not, y := state_var.toArray[\u2191(i + 10)] }) })).bind\n                fun state_and =>\n                StateT.modifyGet fun ops =>\n                  (var_from_offset U64 ops.offset,\n                    { offset := ops.offset + 8,\n                      withLength :=\n                        ops.withLength.subcircuit\n                          ({ toElaboratedCircuit := Xor.elaborated, assumptions := Xor.assumptions, spec := Xor.spec,\n                                soundness := \u22ef, completeness := \u22ef }.to_subcircuit\n                            ops.offset { x := state_var.toArray[\u2191i], y := state_and }) }))\n          (Vector.finRange 25) { offset := i\u271d, withLength := Operations.empty i\u271d }).2.withLength\nstate : KeccakState (F p)\nh_input : eval env state_var = state\nstate_norm : \u2200 (i : Fin 25), state[\u2191i].is_normalized\ni : Fin 25\n\u22a2 ((eval env state_var[\u2191(i + 5)]).is_normalized \u2227\n      (eval env (not64_bytewise state_var[\u2191(i + 5)])).is_normalized \u2227 (eval env state_var[\u2191(i + 10)]).is_normalized) \u2227\n    (eval env state_var[\u2191i]).is_normalized \u2227 (eval env (var_from_offset U64 (i\u271d + \u2191i * 16))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Keccak/Chi.lean#L103"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-22T15:53:10+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "598e0ec9fb85d12a34ac3a869e4acedd3aa10369b43f43ce89e532830751e1c0"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 109,
        "start_column": 2,
        "end_line": 109,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaXor.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b9 : Fact (Nat.Prime p)\ninst\u271d : Fact (p > 512)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var Inputs (F p)\nh_env : env.uses_local_witnesses_completeness ((ElaboratedCircuit.main state_var).operations i0)\nstate : Inputs (F p)\nh_assumptions : assumptions state\nh_input : { state := eval env state_var.state, d := eval env state_var.d } = state\n\u22a2 (((((((((((((((((((((((((eval env state_var.state[0]).is_normalized \u2227 (eval env state_var.d[0]).is_normalized) \u2227\n                                                  (eval env state_var.state[1]).is_normalized \u2227\n                                                    (eval env state_var.d[0]).is_normalized) \u2227\n                                                (eval env state_var.state[2]).is_normalized \u2227\n                                                  (eval env state_var.d[0]).is_normalized) \u2227\n                                              (eval env state_var.state[\u21913]).is_normalized \u2227\n                                                (eval env state_var.d[0]).is_normalized) \u2227\n                                            (eval env state_var.state[\u21914]).is_normalized \u2227\n                                              (eval env state_var.d[0]).is_normalized) \u2227\n                                          (eval env state_var.state[\u21915]).is_normalized \u2227\n                                            (eval env state_var.d[1]).is_normalized) \u2227\n                                        (eval env state_var.state[\u21916]).is_normalized \u2227\n                                          (eval env state_var.d[1]).is_normalized) \u2227\n                                      (eval env state_var.state[\u21917]).is_normalized \u2227\n                                        (eval env state_var.d[1]).is_normalized) \u2227\n                                    (eval env state_var.state[\u21918]).is_normalized \u2227\n                                      (eval env state_var.d[1]).is_normalized) \u2227\n                                  (eval env state_var.state[\u21919]).is_normalized \u2227\n                                    (eval env state_var.d[1]).is_normalized) \u2227\n                                (eval env state_var.state[\u219110]).is_normalized \u2227\n                                  (eval env state_var.d[2]).is_normalized) \u2227\n                              (eval env state_var.state[\u219111]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                            (eval env state_var.state[\u219112]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                          (eval env state_var.state[\u219113]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                        (eval env state_var.state[\u219114]).is_normalized \u2227 (eval env state_var.d[2]).is_normalized) \u2227\n                      (eval env state_var.state[\u219115]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                    (eval env state_var.state[\u219116]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                  (eval env state_var.state[\u219117]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n                (eval env state_var.state[\u219118]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n              (eval env state_var.state[\u219119]).is_normalized \u2227 (eval env state_var.d[\u21913]).is_normalized) \u2227\n            (eval env state_var.state[\u219120]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n          (eval env state_var.state[\u219121]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n        (eval env state_var.state[\u219122]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n      (eval env state_var.state[\u219123]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized) \u2227\n    (eval env state_var.state[\u219124]).is_normalized \u2227 (eval env state_var.d[\u21914]).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Keccak/ThetaXor.lean#L109"
      },
      "metadata": {
        "blame_email_hash": "14eb31066b7e",
        "blame_date": "2025-04-15T16:27:02+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "60bf78cd2f446bcc6e4e88a27bf71b7a193099812914aec2ea35513ebd6a358e"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/clean",
        "branch": "chi",
        "commit": "33e573b1e7b6270f671ec0f91a0b24a32b8de828",
        "lean_version": "v4.17.0"
      },
      "location": {
        "start_line": 100,
        "start_column": 2,
        "end_line": 100,
        "end_column": 7,
        "file": "Clean/Gadgets/Keccak/ThetaC.lean"
      },
      "debug_info": {
        "goal": "p : \u2115\ninst\u271d\u00b9 : Fact (Nat.Prime p)\ninst\u271d : Fact (p > 512)\ni0 : \u2115\nenv : Environment (F p)\nstate_var : Var KeccakState (F p)\nh_env : env.uses_local_witnesses_completeness ((theta_c state_var).operations i0)\nstate : KeccakState (F p)\nh_assumptions : \u2200 (i : Fin 25), state[i].is_normalized\nh_input : Vector.map (eval env) state_var = state\ns : \u2200 (i : Fin 25), (eval env state_var[\u2191i]).is_normalized = True\n\u22a2 ((((((((((((((eval env (var_from_offset U64 i0)).is_normalized \u2227\n                              (eval env (var_from_offset U64 (i0 + 8))).is_normalized) \u2227\n                            (eval env (var_from_offset U64 (i0 + 16))).is_normalized) \u2227\n                          (eval env (var_from_offset U64 (i0 + 32))).is_normalized) \u2227\n                        (eval env (var_from_offset U64 (i0 + 40))).is_normalized) \u2227\n                      (eval env (var_from_offset U64 (i0 + 48))).is_normalized) \u2227\n                    (eval env (var_from_offset U64 (i0 + 64))).is_normalized) \u2227\n                  (eval env (var_from_offset U64 (i0 + 72))).is_normalized) \u2227\n                (eval env (var_from_offset U64 (i0 + 80))).is_normalized) \u2227\n              (eval env (var_from_offset U64 (i0 + 96))).is_normalized) \u2227\n            (eval env (var_from_offset U64 (i0 + 104))).is_normalized) \u2227\n          (eval env (var_from_offset U64 (i0 + 112))).is_normalized) \u2227\n        (eval env (var_from_offset U64 (i0 + 128))).is_normalized) \u2227\n      (eval env (var_from_offset U64 (i0 + 136))).is_normalized) \u2227\n    (eval env (var_from_offset U64 (i0 + 144))).is_normalized",
        "url": "https://github.com/Verified-zkEVM/clean/blob/33e573b1e7b6270f671ec0f91a0b24a32b8de828/Clean/Gadgets/Keccak/ThetaC.lean#L100"
      },
      "metadata": {
        "blame_email_hash": "0130f16e5d6d",
        "blame_date": "2025-04-03T17:31:42+02:00",
        "inclusion_date": "2025-04-23T05:11:43.647117+00:00"
      },
      "id": "2d1e2b75dc2de7c2ff67d30f62fca91099f8f91854623210aa0242f590f35908"
    }
  ]
}